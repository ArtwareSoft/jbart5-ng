{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"to",
				"toarray"
			],
			[
				"In",
				"Injector"
			],
			[
				"MD",
				"MD_RIPPLE_DIRECTIVES"
			],
			[
				"MDI",
				"MdIconRegistry"
			],
			[
				"con",
				"context"
			],
			[
				"data",
				"data_ref"
			],
			[
				"ev",
				"event"
			],
			[
				"set",
				"setAttribute"
			],
			[
				"load",
				"load-jbart"
			],
			[
				"cop",
				"copy_files"
			],
			[
				"run",
				"runItself"
			],
			[
				"jb",
				"jbEmitter"
			],
			[
				"fi",
				"fixer"
			],
			[
				"compo",
				"composite"
			],
			[
				"sug",
				"suggestionCtx"
			],
			[
				"close",
				"closeFloating"
			],
			[
				"ke",
				"keyEm"
			],
			[
				"sugg",
				"suggestionsContext"
			],
			[
				"on",
				"onChange"
			],
			[
				"new",
				"new_markdown"
			],
			[
				"el",
				"elems"
			],
			[
				"pa",
				"paramDef"
			],
			[
				"co",
				"context"
			],
			[
				"path",
				"pathToTrace"
			],
			[
				"src",
				"srcFile"
			],
			[
				"de",
				"debugger"
			],
			[
				"is",
				"isArray"
			],
			[
				"pr",
				"profile"
			],
			[
				"end",
				"endIndex"
			],
			[
				"pro",
				"project"
			],
			[
				"re",
				"resolve"
			],
			[
				"Pro",
				"Promise"
			],
			[
				"fla",
				"flatMap"
			],
			[
				"Ob",
				"Observable"
			],
			[
				"defa",
				"defaultValue"
			],
			[
				"Ov",
				"OverlayDemo"
			],
			[
				"exp",
				"expectedResult"
			],
			[
				"par",
				"parentPath"
			],
			[
				"inde",
				"indexOf"
			],
			[
				"clos",
				"closets"
			],
			[
				"jbart",
				"jbart_base"
			],
			[
				"min",
				"minMax"
			],
			[
				"in",
				"input"
			],
			[
				"firs",
				"firstProp"
			],
			[
				"su",
				"success"
			],
			[
				"fa",
				"failure"
			],
			[
				"res",
				"resolve"
			],
			[
				"g",
				"globals"
			],
			[
				"call",
				"callerPath"
			],
			[
				"func",
				"function"
			],
			[
				"fu",
				"fullPath"
			],
			[
				"pre",
				"prevIndex"
			],
			[
				"ite",
				"itemToID"
			],
			[
				"gro",
				"groups"
			],
			[
				"ctrl",
				"ctrls"
			],
			[
				"auto",
				"autoSelectFirst"
			],
			[
				"item",
				"itemVariable"
			],
			[
				"com",
				"compName"
			],
			[
				"not",
				"notEquals"
			],
			[
				"t",
				"template"
			],
			[
				"flex",
				"flex-wrap"
			],
			[
				"get",
				"getOwnPropertyNames"
			],
			[
				"comp",
				"components"
			],
			[
				"compon",
				"components"
			],
			[
				"fle",
				"flex-direction"
			],
			[
				"strin",
				"stringOnly"
			],
			[
				"write",
				"writeValue"
			],
			[
				"fix",
				"fixDialogOverflow"
			],
			[
				"prov",
				"providesfuncs"
			],
			[
				"dire",
				"directives"
			],
			[
				"ngOn",
				"ngOnInit"
			],
			[
				"jb_",
				"jb_dialogs"
			],
			[
				"probe",
				"probeUtils"
			],
			[
				"parent",
				"parentParam"
			],
			[
				"def",
				"defaultValue"
			],
			[
				"jb-edi",
				"jb-editor-menu"
			],
			[
				"jbE",
				"jbEditorSubNodes"
			],
			[
				"stu",
				"studioGlobals"
			],
			[
				"c",
				"clipboard"
			],
			[
				"grou",
				"groupClosed"
			],
			[
				"se",
				"selected"
			],
			[
				"ar",
				"arrPath"
			],
			[
				"input",
				"inputClosed"
			],
			[
				"sp",
				"split"
			],
			[
				"key",
				"keyCode"
			],
			[
				"pick",
				"pickPath"
			],
			[
				"hight",
				"height"
			],
			[
				"take",
				"takeUntil"
			],
			[
				"md",
				"mdInput"
			],
			[
				"map",
				"mapFunc"
			],
			[
				"popup",
				"popupIndex"
			],
			[
				"sub",
				"subscribe"
			],
			[
				"read",
				"ready"
			],
			[
				"dialog",
				"dialogData"
			],
			[
				"click",
				"clickoutEm"
			],
			[
				"no",
				"noprobe"
			],
			[
				"para",
				"parentParam"
			],
			[
				"native",
				"nativeElement"
			],
			[
				"dy",
				"dynamicItems"
			],
			[
				"probeR",
				"probeResult"
			],
			[
				"tem",
				"template"
			],
			[
				"ref",
				"refreshPreview"
			],
			[
				"jbC",
				"jbCtrl"
			],
			[
				"me",
				"methodHandler"
			],
			[
				"s",
				"styles"
			],
			[
				"ma",
				"match"
			],
			[
				"index",
				"indexOf"
			],
			[
				"va",
				"validation"
			],
			[
				"m",
				"message"
			],
			[
				"fun",
				"function"
			],
			[
				"param",
				"paramDef"
			],
			[
				"textF",
				"textForTrue"
			],
			[
				"opt",
				"options"
			],
			[
				"gr",
				"groupOfOpt"
			],
			[
				"react",
				"reactElem"
			],
			[
				"fo",
				"forEach"
			],
			[
				"foc",
				"focused"
			],
			[
				"for",
				"forEach"
			],
			[
				"cmp",
				"cmp_prof"
			],
			[
				"fou",
				"focused"
			],
			[
				"ng",
				"ngClass"
			],
			[
				"ti",
				"title"
			],
			[
				"logE",
				"logError"
			],
			[
				"cl",
				"className"
			],
			[
				"ngO",
				"ngDoCheck"
			],
			[
				"bor",
				"border-bottom"
			],
			[
				"arr",
				"array"
			],
			[
				"log",
				"logError"
			]
		]
	},
	"buffers":
	[
		{
			"file": "/C/jbart5-ng/src/ui/md-styles/card-md.ts",
			"settings":
			{
				"buffer_size": 2096,
				"line_ending": "Windows"
			}
		},
		{
			"file": "/C/jbart5-ng/src/ui/md-styles/dialog-md.ts",
			"settings":
			{
				"buffer_size": 1151,
				"line_ending": "Windows"
			}
		},
		{
			"file": "/C/jbart5-ng/src/ui/md-styles/editable-boolean-md.ts",
			"settings":
			{
				"buffer_size": 1724,
				"line_ending": "Windows"
			}
		},
		{
			"contents": "\n\njb.component('label.md-card-title', {\n    type: 'label.style',\n    impl :{$: 'customStyle', \n        template: '<md-card-title>{{title}}</md-card-title>',\n        features :{$: 'label.bind-title' },\n        directives: 'MD_CARD_DIRECTIVES'\n    }\n})\n\n{$: 'label', \n  title: 'hello test', \n  style :{$: 'label.md-card-title' }, \n  features :{$: 'css.width', width: '200', overflow: 'scroll' }\n}\n\ngenerated code - compiling the styles:\n\n@Component({\n    selector: 'div',\n    template: '<md-card-title>{{title}}</md-card-title>',\n    directives: [...]\n})\nclass label_md_card_title {\n	constrcutor(private elementRef: ElementRef, private renderer: Renderer) {\n\n	}\n	ngOnInit() {\n		this.jbOnInit();\n	}\n}\n\nfactory_hash['<md-card-title>{{title}}</md-card-title>'] = label_md_card_title_factory;",
			"settings":
			{
				"buffer_size": 786,
				"line_ending": "Windows"
			}
		},
		{
			"contents": "# jBart Implementation With Angular2 #\n### With discussion about server side compilation ###\n\n## jBart Abstractions ##\njBart suggests abstractions on top of angular components. \n\njBart abstractions separates the essence of the UI component from its HTML implementation. E.g.\n- button (button, md-button, a href, icon, ..)\n- group (section, div, flex-layout, property-sheet, card, md-card, ..)\n- editableText (input, textarea, md-input, codemirror, ...)\n- editableNumber (input, slider, md-slider, ...)\n- itemlist\n- tabControl\n\nand more..\n\nWe call the abstraction 'control', and the html implemtation is called 'style'.\n\nLet's have a look at two examples:\n\n\"Hello World\" with jBart:\n\n    {$: 'label', title: 'hello world' }\n\nWhich actually means:\n\n    {$: 'label', \n		title: 'hello world', \n		style :{$: 'label.span' } \n    }\n\n\n\"Simple Form\" with jBart:\n\n    {$: 'group',\n          controls: [\n            { $: 'editable-text', \n                title: 'name', \n                databind: '%$person/name%', \n                style :{$: 'editable-text.md-input'} \n            },\n            { $: 'editable-text', \n            	title: 'address', \n                databind: '%$person/address%', \n              	style :{$: 'editable-text.md-input'} \n            },\n          ]\n    }\n\n\njBart engine convert these javascript objects to angular2 components, compile, and instantiate them.\n    \n## Implementation ##\n\n### Primitive Elements ###\n\nLet's explore the implementation of 'label' with some relevant components:\n\n\n		// specfic label declaration\n	    {$: 'label', \n	      title: 'hello world', \n	      style :{$: 'label.md-card-title' }, \n	      features :{$: 'css.width', width: '200', overflow: 'scroll' }\n	    }\n\n		// source of label component\n	    jb.component('label', {\n	        type: 'control',\n	        params: [\n	            { id: 'title', essential: true, defaultValue: 'hello', dynamic: true },\n	            { id: 'style', type: 'label.style', defaultValue :{$: 'label.span' } },\n	        ],\n	        impl: ctx => jb_ui.ctrl(ctx)\n	    })\n\n		// source of specific label style\n		jb.component('label.md-card-title', {\n		    type: 'label.style',\n		    impl :{$: 'customStyle', \n		        template: '<md-card-title>{{title}}</md-card-title>',\n		        features :{$: 'label.bind-title' },\n		        directives: 'MD_CARD_DIRECTIVES'\n		    }\n		})\n\n		// source of bind-title feature - there are other ways to bind label titles with different dynamic level\n	    jb.component('label.bind-title', {\n	      type: 'feature',\n	      impl: ctx => ({\n	        doCheck: cmp =>\n	          cmp.title = ctx.vars.$model.title(cmp.ctx)\n	      })\n	    })\n\n\nIn jbart5 components of type \"control\" create angular2 component (a javascript class with decorations).\n\njb_ui.ctrl is an important core utility in jBart. The 'label' component and many others control components use it to generate the ng2 class component. \n>impl: ctx => **jb_ui.ctrl**(ctx)\n\njb_ui.ctrl activates a dynamic pipeline to generate the ng component in the following manner: \n- store the control properties in a context object. In the label case, it is just the 'title'.\n- call the bounded jbart 'style' component that generates the initial angular component (a javascript class with decorators). In the example, the style component is 'label.md-card-title'\n- activates the features one by one on the component. Features can extends or mutate the angular class before compilation. In the example we extend the ngDoCheck method with title binding and extend the styles property with 'width: 200px ; overflow-x:scroll;' .\n- compile the angular class using angular dynamic compiler (and use smart cache to avoid the compilation of 'same code' components). \n\nStatic compilation will be discussed later.\n\n### Composition with groups ###\n\nComponents are structured using the 'group' component.\n\n    {$: 'group',\n          controls: [\n            { $: 'label', title: 'hello' }, \n            { $: 'label', title: 'world' } \n          ]\n    }\n\nNote that default are used for styles. In this case, the default style of group is 'group.section' and for label is 'label.span'. (default styles are also controlled by themes)\n\nThe inner components are dynamically inserted into the group view by using ViewContainerRef::createComponent.\n\nLet's have a look at the implementation of group.section & friends:\n\n		jb.component('group.section', {\n		  type: 'group.style',\n		  impl :{$: 'customStyle',\n		    template: '<section><jb_comp *ngFor=\"let ctrl of ctrls\" [comp]=\"ctrl.comp\"></jb_comp></section>',\n		    features :{$: 'group.initGroup'}\n		  }\n		})\n\n		// simpified initGroup\n		jb.component('group.initGroup', {\n		  type: 'feature',\n		  impl: ctx => ({\n		    init: cmp => {\n	          cmp.title = ctx.params.title();\n	          cmp.ctrls = ctx.params.controls().map( comp =>\n	                    ({ title: comp.jb_title() , comp: comp } ))\n\n		    }\n		  })\n		})\n\nThe group component instance (we call instances 'cmp' and the classes 'comp') has a data member called 'ctrls' that consists of child angular components (comps) that need to be instantiated.\nThe children instantiation is done with a generic angular component called 'jb_comp'. jb_comp has a 'comp' property which is the angular component class.\n\n		// simplified jb_comp\n		@Component({\n		    selector: 'jb_comp',\n		    template: '<div #jb_comp></div>',\n		})\n		export class jbComp {\n			  @Input() comp;\n			  @ViewChild('child', {read: ViewContainerRef}) childView;\n			  constructor(private compiler :Compiler) {}\n			  ngOnInit() {\n			  	if (comp && comp.compile)\n			  		var componentFactory = comp.compile(this.compiler) // uses the factory cache\n			  	else\n			  		var componentFactory = this.compiler.compileComponentSync(comp);\n\n			   	var cmp_ref = this.childView.createComponent(componentFactory);\n			   	comp.registerMethods(cmp_ref,this);\n			  }\n		}\n\nThe jb_comp component allows easy definitions of styles for group. For example, md_card and layouts:\n\n		jb.component('group.md-card', {\n		  type: 'group.style',\n		  impl :{$: 'customStyle',\n		    template: `<md-card>\n		        <jb_comp *ngFor=\"let ctrl of ctrls\" [comp]=\"ctrl.comp\"></jb_comp>\n		      </md-card>`,\n		    features :{$: 'group.initGroup'},\n		    directives: 'MD_CARD_DIRECTIVES'\n		  }\n		})\n\n		jb.component('layout.horizontal', {\n		  type: 'group.style',\n		  params: [\n		    { id: 'spacing', as: 'number', defaultValue: 3 }\n		  ],\n		  impl :{$: 'customStyle',\n		    template: `<div class=\"jb-group\">\n		        <jb_comp *ngFor=\"let ctrl of ctrls\" [comp]=\"ctrl.comp\" class=\"group-item\"></jb_comp>\n		      </div>`,\n		    css: `{display: flex}\n		        .group-item { margin-right: %$spacing%px }\n		        .group-item:last-child { margin-right:0 }`,\n		    features :{$: 'group.initGroup'}\n		  }\n		})\n\n		jb.component('layout.flex', {\n		  type: 'group.style',\n		  params: [\n		      { id: 'align', as: 'string', options: ',flex-start,flex-end,center,space-between,space-around' },\n		      { id: 'direction', as: 'string', options: ',row,row-reverse,column,column-reverse' },\n		      { id: 'wrap', as: 'string', options:',wrap' },\n		  ],\n		  impl :{$: 'customStyle',\n		    template: `<jb_comp *ngFor=\"let ctrl of ctrls\" [comp]=\"ctrl.comp\"></jb_comp>`,\n		    css: '{ display: flex; {?justify-content:%$align%;?} {?flex-direction:%$direction%;?} {?flex-wrap:%$wrap%;?} }',\n		    features :{$: 'group.initGroup'}\n		  }\n		})\n\n\n\n## Static Compilation ##\nAngular2 can produce smaller and faster applications by compiling the templates at the server side. \n\nCan we use server side compilation with the dynamic nature of jBart5?\n\nFirst lets explore a little more the jBart class instantiation mechanism.\n\njBart does not add the specific css styles and lifecycle behavior into the compiled angular class. Instead, it uses a generic lifecycle listener and inject the specific style & behavior to the component instance (componentRef). It means the compilation issue is limited to the template and host properties.\n\njBart uses a factory cache. The cache key is serialization of the annotations template & host properties and the value is angular compilation result called factory.\n\nTo allow server side compilation, jBart can generate typescript files for pre-compilation that contain:\n- all ng components in the factory cache, serialized as typescript classes with annotations.\n- angular module with bootstrap method that fills jBart factory cache with all compiled components\n\nUsing the factory cache, jBart RT will be able to seamlessly use the pre-compiled components and even mix pre-compiled components with dynamically compiled components if the compiler is available at RT.\n\nIf we want to completely avoid run-time compilation (e.g, for security reasons) we can also achieve that by providing jb_comp component with no dynamic compiler.",
			"file": "/C/jbart5-ng/docs/jbart-anatomy.md",
			"file_size": 9025,
			"file_write_time": 131226496766819474,
			"settings":
			{
				"buffer_size": 8793,
				"line_ending": "Windows"
			}
		},
		{
			"file": "/C/jbart5-ng/src/ui/label.js",
			"settings":
			{
				"buffer_size": 1575,
				"line_ending": "Windows"
			}
		},
		{
			"file": "/C/jbart5-ng/projects/ui-tests/md-tests.ts",
			"settings":
			{
				"buffer_size": 3435,
				"line_ending": "Windows"
			}
		},
		{
			"contents": "Searching 128 files for \"@compon\" (regex)\n\nC:\\jbart5-ng\\src\\ui\\jb-ui.ts:\n  363  }\n  364  \n  365: @Component({\n  366      selector: 'jb_comp',\n  367      template: '<div #jb_comp></div>',\n  ...\n  516  }\n  517  \n  518: @Component({\n  519      selector: 'jbart',\n  520  	template:  `<div *ngFor=\"let comp of comps\"><jb_comp [comp]=\"comp\"></jb_comp></div>\n\nC:\\jbart5-ng\\src\\ui\\tree\\tree.ts:\n   57  \n   58  // part of ul-li\n   59: @Component({\n   60  	selector: 'node_line',\n   61  	template: `<div class=\"treenode-line\" [ngClass]=\"{collapsed: !tree.expanded[path]}\">\n   ..\n   88  }\n   89  \n   90: @Component({\n   91      selector: 'jb_node',\n   92  	template: `<node_line [tree]=\"tree\" [path]=\"path\"></node_line>\n\nC:\\jbart5-ng\\projects\\material-demo\\all-readmes.js:\n    1: jb_resource('material-demo','readmes',[{\"id\":\"button\",\"content\":\"# md-button\\r\\n\\r\\n`md-button` is an HTML `<button>` or `<a>` tag enhanced with styling and animation to match the\\r\\n[Material Design button spec](https://www.google.com/design/spec/components/buttons.html).\\r\\n\\r\\nUsers should employ a button element (`<button>`) when clicking triggers some action in the current\\r\\nview *without navigating*. An anchor element (`<a>`) should be used when clicking *navigates*\\r\\nthe user to another URL. Depending on which element is used, the component will either be an\\r\\ninstance of `MdButton` or `MdAnchor`. Visually, the two are identical.\\r\\n\\r\\n\\r\\n### Button types\\r\\n\\r\\nThere are five types of buttons:\\r\\n 1. Flat buttons - `md-button`\\r\\n    * Rectangular button\\r\\n    * Defaults to white background\\r\\n    * No box shadow\\r\\n 2. Raised buttons - `md-raised-button`\\r\\n    * Rectangular button\\r\\n    * Defaults to white background\\r\\n    * Box shadow applied\\r\\n 3. Icon buttons - `md-icon-button`\\r\\n    * Circular button\\r\\n    * Transparent background\\r\\n    * 40 by 40 px\\r\\n 4. Floating Action Buttons (FABs) - `md-fab`\\r\\n    * Circular button\\r\\n    * Defaults background to \\\"accent\\\" palette defined in theme\\r\\n    * Box shadow applied\\r\\n    * 56 by 56 px\\r\\n 5. Mini Floating Action Buttons (Mini FABs) - `md-mini-fab`\\r\\n    * Circular button\\r\\n    * Defaults background to \\\"accent\\\" palette defined in theme\\r\\n    * Box shadow applied\\r\\n    * 40 by 40 px\\r\\n\\r\\nEach is an attribute directive that you can add to a `button` or `a` tag.  You can provide custom content to the button by inserting it\\r\\nbetween the tags, as you would with a normal button.\\r\\n\\r\\nExample:\\r\\n\\r\\n ```html\\r\\n<button md-button>FLAT</button>\\r\\n<button md-raised-button>RAISED</button>\\r\\n<button md-icon-button>\\r\\n    <md-icon class=\\\"md-24\\\">favorite</md-icon>\\r\\n</button>\\r\\n<button md-fab>\\r\\n    <md-icon class=\\\"md-24\\\">add</md-icon>\\r\\n</button>\\r\\n<button md-mini-fab>\\r\\n    <md-icon class=\\\"md-24\\\">add</md-icon>\\r\\n</button>\\r\\n ```\\r\\n\\r\\nOutput:\\r\\n\\r\\n<img src=\\\"https://material.angularjs.org/material2_assets/buttons/basic-buttons.png\\\">\\r\\n\\r\\n### Theming\\r\\n\\r\\nAll button types can be themed to match your \\\"primary\\\" palette, your \\\"accent\\\" palette, or your \\\"warn\\\" palette using the `color` attribute.\\r\\nSimply pass in the palette name.\\r\\n\\r\\nIn flat buttons, the palette chosen will affect the text color, while in other buttons, it affects the background.\\r\\n\\r\\nExample:\\r\\n\\r\\n ```html\\r\\n<button md-raised-button color=\\\"primary\\\">PRIMARY</button>\\r\\n<button md-raised-button color=\\\"accent\\\">ACCENT</button>\\r\\n<button md-raised-button color=\\\"warn\\\">WARN</button>\\r\\n ```\\r\\n\\r\\nOutput:\\r\\n\\r\\n<img src=\\\"https://material.angularjs.org/material2_assets/buttons/colored-buttons.png\\\">\\r\\n\\r\\n### Disabling\\r\\n\\r\\nYou can disable any button type through the native `disabled` property.  You can add it directly, or bind it to a property on your\\r\\ncomponent class by adding `[disabled]=\\\"isDisabled\\\"` given that the `isDisabled`\\r\\nproperty exists.\\r\\n\\r\\n```html\\r\\n<button md-button disabled>OFF</button>\\r\\n<button md-raised-button [disabled]=\\\"isDisabled\\\">OFF</button>\\r\\n<button md-mini-fab [disabled]=\\\"isDisabled\\\"><md-icon>check</md-icon></button>\\r\\n```\\r\\n\\r\\nOutput:\\r\\n\\r\\n<img src=\\\"https://material.angularjs.org/material2_assets/buttons/disabled-buttons.png\\\">\\r\\n\\r\\n### Accessibility\\r\\n\\r\\n * In high contrast mode, a strong border is added to the button to make it easier to see.\\r\\n * Button focus events originating from the keyboard will retain focus styles, while button focus events from the mouse will not.\\r\\n * As `md-button` is added to an existing `button` or `a` tag, it enjoys all the accessibility natively built into these elements.\\r\\n\\r\\n\\r\\n### Upcoming work\\r\\n\\r\\nWe will also be adding ink ripples to buttons in an upcoming milestone.\\r\\n\\r\\n### API Summary\\r\\n\\r\\nProperties:\\r\\n\\r\\n| Name | Type | Description |\\r\\n| --- | --- | --- |\\r\\n| `color` | `\\\"primary\\\"|\\\"accent\\\"|\\\"warn\\\"` | The color palette of the button\\r\\n| `disabled` | boolean | Whether or not the button is disabled\\r\\n| `disableRipple` | boolean | Whether the ripple effect when the button is clicked should be disabled\\r\\n\"},{\"id\":\"button-toggle\",\"content\":\"# md-button-toggle\\r\\n\\r\\n`MdButtonToggle` is a group of buttons that can be toggled.\\r\\nThere are two modes, `multiple` and `exclusive`.\\r\\nWhen in 'exclusive' mode, only one button can be selected at a time (like radio buttons).\\r\\nWhen in 'multiple' mode, multiple buttons can be selected at once (like checkboxes).\\r\\nYou can read more about button toggles in the\\r\\n[Material Design spec](https://material.google.com/components/buttons.html#buttons-toggle-buttons).\\r\\n\\r\\n## Usage\\r\\n\\r\\n### Setup\\r\\n\\r\\nImporting the module:\\r\\n```ts\\r\\n @NgModule({\\r\\n    imports: [MdButtonToggleModule.forRoot()],\\r\\n    ...\\r\\n })\\r\\n export class MyAppModule { }\\r\\n```\\r\\n\\r\\n### Basic Usage\\r\\n\\r\\n`md-button-toggle` can be used on its own and acts as a checkbox.\\r\\n\\r\\n```html\\r\\n<md-button-toggle>Bold</md-button-toggle>\\r\\n```\\r\\n\\r\\nOutput:\\r\\n\\r\\n![Basic Toggle Button Example](https://material.angularjs.org/material2_assets/button-toggle/basic-toggle.png)\\r\\n\\r\\n### Exclusive Selection\\r\\n\\r\\n`md-button-toggle` can be used in an exclusive selection group when surrounded by\\r\\n`md-button-toggle-group`. This styles all buttons within the group to appear as a single\\r\\ngroup of button toggles and allows only one button toggle to be selected at a time.\\r\\n\\r\\n```html\\r\\n<md-button-toggle-group name=\\\"alignment\\\">\\r\\n    <md-button-toggle value=\\\"left\\\"><md-icon>format_align_left</md-icon></md-button-toggle>\\r\\n    <md-button-toggle value=\\\"center\\\"><md-icon>format_align_center</md-icon></md-button-toggle>\\r\\n    <md-button-toggle value=\\\"right\\\"><md-icon>format_align_right</md-icon></md-button-toggle>\\r\\n    <md-button-toggle value=\\\"justify\\\"><md-icon>format_align_justify</md-icon></md-button-toggle>\\r\\n</md-button-toggle-group>\\r\\n```\\r\\n\\r\\nOutput:\\r\\n\\r\\n![Exclusive Toggle Button Example](https://material.angularjs.org/material2_assets/button-toggle/exclusive-toggle.png)\\r\\n\\r\\n### Multiple Selection\\r\\n\\r\\n`md-button-toggle` can be used in a multiple selection group when surrounded by\\r\\n`md-button-toggle-group multiple`. This styles all buttons within the group to appear as a single\\r\\ngroup of button toggles.\\r\\n\\r\\n```html\\r\\n<md-button-toggle-group multiple>\\r\\n    <md-button-toggle>Flour</md-button-toggle>\\r\\n    <md-button-toggle>Eggs</md-button-toggle>\\r\\n    <md-button-toggle>Sugar</md-button-toggle>\\r\\n    <md-button-toggle>Milk</md-button-toggle>\\r\\n</md-button-toggle-group>\\r\\n```\\r\\n\\r\\nOutput:\\r\\n\\r\\n![Multiple Toggle Button Example](https://material.angularjs.org/material2_assets/button-toggle/multi-toggle.png)\\r\\n\\r\\n## Dynamic Exclusive Selection\\r\\n\\r\\n`md-button-toggle`s can be used with `ngModel` to dynamically create groups and update the value for\\r\\na group.\\r\\n\\r\\n```html\\r\\n<md-button-toggle-group name=\\\"pies\\\" [(ngModel)]=\\\"favoritePie\\\">\\r\\n    <md-button-toggle *ngFor=\\\"let pie of pieOptions\\\" [value]=\\\"pie\\\">\\r\\n        {{pie}}\\r\\n    </md-button-toggle>\\r\\n</md-button-toggle-group>\\r\\n<p>Your favorite type of pie is: {{favoritePie}}</p>\\r\\n```\\r\\n\\r\\n### Disabled Button Toggle\\r\\n\\r\\n`md-button-toggle-group` and `md-button-toggle` can both be disabled by adding a `disabled`\\r\\nattribute to either one. Adding `disabled` to an exclusive group or a multiple group will disable\\r\\nthe entire group. Adding `disabled` to a single toggle will disable that toggle.\\r\\n\\r\\n```html\\r\\n<md-button-toggle-group disabled>\\r\\n    <md-button-toggle value=\\\"one\\\">One</md-button-toggle>\\r\\n    <md-button-toggle value=\\\"two\\\">Two</md-button-toggle>\\r\\n    <md-button-toggle value=\\\"three\\\">Three</md-button-toggle>\\r\\n</md-button-toggle-group>\\r\\n\\r\\n<md-button-toggle-group>\\r\\n    <md-button-toggle value=\\\"red\\\" disabled>Red</md-button-toggle>\\r\\n    <md-button-toggle value=\\\"blue\\\">Blue</md-button-toggle>\\r\\n</md-button-toggle-group>\\r\\n```\\r\\n\\r\\nOutput:\\r\\n\\r\\n![Disabled Toggle Buttons Example](https://material.angularjs.org/material2_assets/button-toggle/disabled-toggles.png)\\r\\n\\r\\n## `<md-button-toggle>`\\r\\n\\r\\n### Bound Properties\\r\\n\\r\\n| Name | Type | Description |\\r\\n| --- | --- | --- |\\r\\n| `id` | string | The unique ID of the toggle. IDs are generated by default when not specified. |\\r\\n| `name` | string | Optional, defaults to parent group name if one exists for exclusive selection toggles, otherwise null. This is used to differentiate between different groups. |\\r\\n| `value` | any | Value of the toggle. Only used when in a group to determine which are selected. |\\r\\n| `checked` | boolean | Optional, default = `false`. Whether or not the toggle is checked. |\\r\\n| `disabled` | boolean | Optional, default = `false`. Whether or not the toggle is disabled |\\r\\n\\r\\n### Events\\r\\n\\r\\n| Name | Description |\\r\\n| --- | --- |\\r\\n| `change` | Emitted when the `checked` value is changed. |\\r\\n\\r\\n## `<md-button-toggle-group>`\\r\\n\\r\\n### Bound Properties\\r\\n\\r\\n| Name | Type | Description |\\r\\n| --- | --- | --- |\\r\\n| `name` | string | Optional, the name of the group. |\\r\\n| `disabled` | boolean | Optional, default = `false`. |\\r\\n| `value` | any | The current value for the group. Will be set to the value of the selected toggle or a list of values from the selected toggles. |\\r\\n| `selected` | `mdButtonToggle` | The current selected toggle or a list of the selected toggles. |\\r\\n\\r\\n### Attributes\\r\\n\\r\\n| Name | Type | Description |\\r\\n| --- | --- | --- |\\r\\n| `multiple` | boolean | Optional, default = `false`. Whether or not the group allows multiple selection. |\\r\\n\\r\\n### Events\\r\\n\\r\\n| Name | Description |\\r\\n| --- | --- |\\r\\n| `change` | Emitted when the `value` of the group changes. |\\r\\n\"},{\"id\":\"card\",\"content\":\"# md-card\\r\\n\\r\\n`md-card` is a content container component that conforms to the spec of a Material Design card.\\r\\n\\r\\nSee plunker example [here](http://plnkr.co/edit/pkUNGMXPcf8RXKapXNXQ?p=preview).\\r\\n\\r\\n## Usage\\r\\n\\r\\nSimply add your content between `md-card` tags to consume basic card styles like box-shadow and default padding.\\r\\n\\r\\n```html\\r\\n<md-card>\\r\\n   Basic card.\\r\\n</md-card>\\r\\n```\\r\\n\\r\\nOutput:\\r\\n\\r\\n<img src=\\\"https://material.angularjs.org/material2_assets/cards/basic-card-min.png\\\">\\r\\n\\r\\n### Preset sections \\r\\n\\r\\nWe also provide a number of preset sections that you can mix and match within the `md-card` tags. \\r\\n\\r\\n  * `<md-card-title>`: adds styles for a title\\r\\n  * `<md-card-subtitle>`: adds styles for a subtitle\\r\\n  * `<md-card-content>`: main content section, intended for blocks of text\\r\\n  * `<img md-card-image>`: stretches image to container width\\r\\n  * `<md-card-actions>`: wraps and styles buttons\\r\\n  * `<md-card-footer>`: anchors section to bottom of card (e.g progress bar)\\r\\n\\r\\nExample markup for a card with section presets:\\r\\n\\r\\n```html\\r\\n<md-card>\\r\\n   <md-card-subtitle>Subtitle first</md-card-subtitle>\\r\\n   <md-card-title>Card with title</md-card-title>   \\r\\n   <md-card-content>\\r\\n        <p>This is supporting text.</p>\\r\\n        <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do \\r\\n        tempor incididunt ut labore et dolore magna aliqua. Ut enim ad</p>\\r\\n   </md-card-content>\\r\\n   <md-card-actions>\\r\\n        <button md-button>LIKE</button>\\r\\n        <button md-button>SHARE</button>\\r\\n   </md-card-actions>\\r\\n</md-card>\\r\\n```\\r\\n\\r\\nOutput:\\r\\n\\r\\n<img src=\\\"https://material.angularjs.org/material2_assets/cards/sections-card-min.png\\\">\\r\\n\\r\\n#### Preset shortcuts\\r\\n\\r\\n`md-card-actions` has a few layout shortcuts. You can add `align=\\\"end\\\"` to align the buttons at the end of\\r\\nthe main axis (flex-end). The default is `align=\\\"start\\\"` (flex-start).\\r\\n\\r\\n### Preset layouts\\r\\n\\r\\nYou can also leverage preset layouts that format some of the sections together.\\r\\n\\r\\n#### `<md-card-header>`\\r\\n\\r\\nFormats the following sections into a header:\\r\\n\\r\\n  * `<md-card-title>`: title to format within header\\r\\n  * `<md-card-subtitle>`: subtitle to format within header\\r\\n  * `<img md-card-avatar>`: image to use for avatar\\r\\n    \\r\\nExample markup for a card with a header:\\r\\n\\r\\n```html\\r\\n<md-card>\\r\\n   <md-card-header>\\r\\n      <img md-card-avatar src=\\\"path/to/img.png\\\">\\r\\n      <md-card-title>Header title</md-card-title>\\r\\n      <md-card-subtitle>Header subtitle</md-card-subtitle>\\r\\n   </md-card-header>\\r\\n   <img md-card-image src=\\\"path/to/img.png\\\">\\r\\n   <md-card-content>\\r\\n      <p>Here is some more content</p>\\r\\n   </md-card-content>\\r\\n</md-card>\\r\\n```\\r\\n\\r\\nOutput:\\r\\n\\r\\n<img src=\\\"https://material.angularjs.org/material2_assets/cards/header-card-min.png\\\">    \\r\\n    \\r\\n#### `<md-card-title-group>`\\r\\n\\r\\nGroups the following sections together:\\r\\n\\r\\n  * `<md-card-title>`: title to format within group\\r\\n  * `<md-card-subtitle>`: subtitle to format within group\\r\\n  * One of the following image sizes:\\r\\n    * `<img md-card-sm-image>`\\r\\n    * `<img md-card-md-image>`\\r\\n    * `<img md-card-lg-image>`\\r\\n\\r\\nExample markup for a card with title-group layout:\\r\\n\\r\\n```html\\r\\n<md-card>\\r\\n   <md-card-title-group>\\r\\n      <img md-card-sm-image src=\\\"path/to/img.png\\\">\\r\\n      <md-card-title>Card with title</md-card-title>\\r\\n      <md-card-subtitle>Subtitle</md-card-subtitle>\\r\\n   </md-card-title-group>\\r\\n</md-card>\\r\\n```\\r\\n\\r\\nOutput:\\r\\n\\r\\n<img src=\\\"https://material.angularjs.org/material2_assets/cards/title-group-card-min.png\\\">\"},{\"id\":\"checkbox\",\"content\":\"# md-checkbox\\r\\n\\r\\n`md-checkbox` is a Material Design selection control that allows users to make a binary choice for\\r\\na predetermined conditioned. It is modeled after the browser's native checkbox element, and behaves\\r\\nin the same way. Similar to the native checkbox element, it supports an indeterminate state for\\r\\n\\\"mixed\\\" checkboxes.\\r\\n\\r\\nA demo of the checkbox can be found at https://plnkr.co/edit/P7qce8lN9n2flS6kBhDy?p=preview.\\r\\n\\r\\n## Usage\\r\\n\\r\\n### Basic Usage\\r\\n\\r\\n`md-checkbox` can be used anywhere a normal checkbox would be used, and in the same way.\\r\\n\\r\\n```html\\r\\n<ul>\\r\\n  <li *ngFor=\\\"let todo of todos\\\">\\r\\n    <md-checkbox [checked]=\\\"todo.completed\\\"\\r\\n                 (change)=\\\"todo.completed = $event\\\">\\r\\n      {{todo.name}}\\r\\n    </md-checkbox>\\r\\n  </li>\\r\\n</ul>\\r\\n```\\r\\n\\r\\n### Usage within Forms\\r\\n\\r\\nIn addition to supporting native checkbox functionality, `md-checkbox` also supports `[(ngModel)]`\\r\\nfor use within forms.\\r\\n\\r\\n```html\\r\\n<form (submit)=\\\"saveUser()\\\">\\r\\n  <!-- Form fields... -->\\r\\n  <div>\\r\\n    <md-checkbox [(ngModel)]=\\\"user.agreesToTOS\\\">\\r\\n      I have read and agree to the terms of service.\\r\\n    </md-checkbox>\\r\\n  </div>\\r\\n  <button type=\\\"submit\\\" [disabled]=\\\"!user.agreesToTOS\\\">Sign Up</button>\\r\\n</form>\\r\\n```\\r\\n\\r\\n### Indeterminate Checkboxes\\r\\n\\r\\nIndeterminate checkboxes are useful when a checkbox needs to be in a \\\"mixed\\\" state\\r\\n\\r\\n```html\\r\\n<md-checkbox [checked]=\\\"false\\\"\\r\\n             [indeterminate]=\\\"isIndeterminate\\\"\\r\\n             (change)=\\\"isIndeterminate = false\\\">\\r\\n  Click the Button Below to Make Me Indeterminate.\\r\\n</md-checkbox>\\r\\n<button type=\\\"button\\\" (click)=\\\"isIndeterminate = true\\\">\\r\\n  Make Indeterminate\\r\\n</button>\\r\\n```\\r\\n\\r\\n### Alignment\\r\\n\\r\\nNote that checkboxes can be aligned to come at the \\\"start\\\" or the \\\"end\\\" of its corresponding label.\\r\\n\\r\\n```html\\r\\n<md-checkbox [checked]=\\\"true\\\" align=\\\"end\\\">\\r\\n  I come after my label.\\r\\n</md-checkbox>\\r\\n```\\r\\n\\r\\nNote that this alignment is preserved within RTL layouts.\\r\\n\\r\\n### Accessibility\\r\\n\\r\\nBy default, `md-checkbox` provides all the accessibility attributes needed. It also supports\\r\\nkeyboard navigation and toggling via the spacebar. However, you can provide an `aria-label` to the\\r\\ncheckbox if you do not wish to have any label text.\\r\\n\\r\\n```html\\r\\n<md-checkbox [checked]=\\\"false\\\" aria-label=\\\"My standalone checkbox\\\"></md-checkbox>\\r\\n```\\r\\n\"},{\"id\":\"core\",\"content\":\"Core library code for other `@angular2-material` components.\\r\\nThis should be added as a dependency for any project using the components.\\r\\n\"},{\"id\":\"dialog\",\"content\":\"\"},{\"id\":\"grid-list\",\"content\":\"# md-grid-list\\r\\n\\r\\n`md-grid-list` is an alternative list view that arranges cells into grid-based layout. \\r\\nSee Material Design spec [here](https://www.google.com/design/spec/components/grid-lists.html).\\r\\n\\r\\n## Usage\\r\\n\\r\\n### Simple grid list\\r\\n\\r\\nTo use `md-grid-list`, import the MdGridList module into your application's NgModule:\\r\\n\\r\\n*my-app-module.ts*\\r\\n```ts\\r\\nimport {MdGridListModule} from '@angular2-material/grid-list';\\r\\n\\r\\n@NgModule({\\r\\n  imports: [MdGridListModule.forRoot()],\\r\\n  ...\\r\\n})\\r\\nexport class MyAppModule {}\\r\\n```\\r\\n\\r\\nIn your template, create an `md-grid-list` element and specify the number of columns you want for\\r\\nyour grid using the `cols` property (this is the only mandatory attribute). \\r\\n\\r\\nYou can define each tile using an `md-grid-tile` element, passing any tile content between its tags.\\r\\n\\r\\nTiles are greedily placed in the first position of the grid that fits them, so row count depends on \\r\\nhow many tiles can fit in each row, given the col count and the colspan/rowspan of each tile.\\r\\n\\r\\n```html\\r\\n<md-grid-list cols=\\\"4\\\" [style.background]=\\\"'lightblue'\\\">\\r\\n   <md-grid-tile>One</md-grid-tile>\\r\\n   <md-grid-tile>Two</md-grid-tile>\\r\\n   <md-grid-tile>Three</md-grid-tile>\\r\\n   <md-grid-tile>Four</md-grid-tile>\\r\\n</md-grid-list>\\r\\n```\\r\\n\\r\\nOutput:\\r\\n\\r\\n<img src=\\\"https://material.angularjs.org/material2_assets/grid-list/basic-grid-list.png\\\">\\r\\n\\r\\n## Grid list config\\r\\n\\r\\n####`cols`\\r\\n\\r\\nThe `cols` property controls the number of columns displayed in your grid. It must be set or the \\r\\ngrid list will not be able to generate your layout.\\r\\n\\r\\nEx: `<md-grid-list cols=\\\"3\\\">...`\\r\\n\\r\\nDefault: There is no reasonable default value for this, so if it is unspecified, the grid list will \\r\\nthrow an error.\\r\\n\\r\\n####`rowHeight`\\r\\n\\r\\nRow height for the list can be calculated in three ways:\\r\\n\\r\\n1. **Fixed height**: The height can be in `px`, `em`, or `rem`.  If no units are specified, `px` \\r\\nunits are assumed. \\r\\n   \\r\\n   Ex: `<md-grid-list cols=\\\"3\\\" rowHeight=\\\"100px\\\">...`\\r\\n        \\r\\n2. **Ratio**: This ratio is width:height, and must be passed in with a colon, not a decimal.\\r\\n\\r\\n   Ex: `<md-grid-list cols=\\\"3\\\" rowHeight=\\\"4:3\\\">...`.\\r\\n        \\r\\n3. **Fit**:  This mode automatically divides the available height by the number of rows.  Please note\\r\\nthe height of the grid-list or its container must be set.  \\r\\n\\r\\n   Ex: `<md-grid-list cols=\\\"3\\\" rowHeight=\\\"fit\\\">...`\\r\\n\\r\\nDefaults to a 1:1 ratio of width:height. \\r\\n        \\r\\n####`gutterSize`\\r\\n\\r\\nGutter size can be set to any `px`, `em`, or `rem` value with the `gutterSize` property.  If no \\r\\nunits are specified, `px` units are assumed.\\r\\n\\r\\nEx: `<md-grid-list cols=\\\"3\\\" gutterSize=\\\"4px\\\">...`\\r\\n\\r\\nDefaults to `1px`.\\r\\n        \\r\\n## Grid tile config\\r\\n\\r\\nYou can set the rowspan and colspan of each tile individually, using the `rowspan` and `colspan` \\r\\nproperties.  If not set, they both default to `1`.\\r\\n\\r\\n```html\\r\\n<md-grid-list cols=\\\"4\\\" rowHeight=\\\"100px\\\">\\r\\n  <md-grid-tile *ngFor=\\\"let tile of tiles\\\" [colspan]=\\\"tile.cols\\\" [rowspan]=\\\"tile.rows\\\"\\r\\n  [style.background]=\\\"tile.color\\\">\\r\\n    {{tile.text}}\\r\\n  </md-grid-tile>\\r\\n</md-grid-list>\\r\\n```\\r\\n\\r\\n```javascript\\r\\n...\\r\\nexport class MyComp {\\r\\n  tiles: any[] = [\\r\\n    {text: 'One', cols: 3, rows: 1, color: 'lightblue'},\\r\\n    {text: 'Two', cols: 1, rows: 2, color: 'lightgreen'},\\r\\n    {text: 'Three', cols: 1, rows: 1, color: 'lightpink'},\\r\\n    {text: 'Four', cols: 2, rows: 1, color: '#DDBDF1'},\\r\\n  ];\\r\\n}\\r\\n```\\r\\n\\r\\nOutput:\\r\\n\\r\\n<img src=\\\"https://material.angularjs.org/material2_assets/grid-list/fancy-grid-list.png\\\">\\r\\n\\r\\n## TODO\\r\\n\\r\\n- Grid tile headers and footers\\r\\n- Responsive sizing support\\r\\n\"},{\"id\":\"icon\",\"content\":\"# md-icon\\r\\n\\r\\n`md-icon` is a component that displays an icon, which can be a font glyph or an SVG image.\\r\\n\\r\\n## MdIconRegistry\\r\\n\\r\\n`MdIconRegistry` is an injectable service that allows you to associate icon names with SVG URLs and define aliases for CSS font classes. Its methods are discussed below and listed in the API summary.\\r\\n\\r\\n## Font icons\\r\\n\\r\\n### Ligatures\\r\\n\\r\\nSome fonts are designed to show icons by using [ligatures](https://en.wikipedia.org/wiki/Typographic_ligature), for example by rendering the text \\\"home\\\" as a home image. To use a ligature icon, put its text in the content of the `md-icon` component, for example:\\r\\n```html\\r\\n<md-icon>home</md-icon>\\r\\n```\\r\\n\\r\\nBy default the [Material icons font](http://google.github.io/material-design-icons/#icon-font-for-the-web) is used. (You will still need to include the HTML to load the font and its CSS, as described in the link). You can specify a different font by setting the `fontSet` input to either the CSS class to apply to use the desired font, or to an alias previously registered with `MdIconRegistry.registerFontClassAlias`, for example:\\r\\n```javascript\\r\\nmdIconRegistry.registerFontClassAlias('myfont', 'my-icon-font-class');\\r\\n```\\r\\n\\r\\n```html\\r\\n<md-icon fontSet=\\\"myfont\\\">help</md-icon>\\r\\n```\\r\\n\\r\\n### Font icons via CSS\\r\\n\\r\\nFonts can also display icons by defining a CSS class for each icon glyph, which typically uses a :before selector to cause the icon to appear. [FontAwesome](https://fortawesome.github.io/Font-Awesome/examples/) uses this approach to display its icons. To use such a font, set the `fontSet` input to the font's CSS class (either the class itself or an alias registered with `MdIconRegistry.registerFontClassAlias`), and set the `fontIcon` input to the class for the specific icon to show. Example:\\r\\n\\r\\n```html\\r\\n<md-icon fontSet=\\\"fa\\\" fontIcon=\\\"fa-square\\\"></md-icon>\\r\\n```\\r\\n\\r\\nFor both types of font icons, you can specify the default font class to use when `fontSet` is not explicitly set by calling `MdIconRegistry.setDefaultFontSetClass`.\\r\\n\\r\\n## SVG icons\\r\\n\\r\\nWhen an `md-icon` component displays an SVG icon, it does so by directly inlining the SVG content into the page as a child of the component. (Rather than using an <img> tag or a div background image). This makes it easier to apply CSS styles to SVG icons. For example, the default color of the SVG content is the CSS [currentColor](http://www.quirksmode.org/css/color/currentcolor.html) value. This makes SVG icons by default have the same color as surrounding text, and allows you to change the color by setting the \\\"color\\\" style on the `md-icon` element.\\r\\n\\r\\n### Icons from URLs\\r\\n\\r\\nSVG icons can be used either by directly specifying the icon's URL, or by associating an icon name with a URL and then referring to the name. To use a URL directly, set the `svgSrc` input:\\r\\n```html\\r\\n<md-icon svgSrc=\\\"/assets/sun.svg\\\"></md-icon>\\r\\n```\\r\\n\\r\\n### Named icons\\r\\n\\r\\nTo associate a name with an icon URL, use the `addSvgIcon` or `addSvgIconInNamespace` methods of `MdIconRegistry`. After registering an icon, it can be displayed by setting the `svgIcon` input. For an icon in the default namespace, use the name directly. For a non-default namespace, use the format `[namespace]:[name]`. Examples:\\r\\n```javascript\\r\\nmdIconRegistry.addSvgIcon('moon', '/assets/moon.svg');\\r\\nmdIconRegistry.addSvgIconInNamespace('animals', 'cat', '/assets/cat.svg');\\r\\n```\\r\\n\\r\\n```html\\r\\n<md-icon svgIcon=\\\"moon\\\"></md-icon>\\r\\n<md-icon svgIcon=\\\"animals:cat\\\"></md-icon>\\r\\n```\\r\\n\\r\\n### Icon sets\\r\\n\\r\\nIcon sets allow grouping multiple icons into a single SVG file. The content of an icon set file looks like this, where each nested `<svg>` tag defines an individual icon, and is identified with a unique \\\"id\\\" attribute.\\r\\n```\\r\\n<svg>\\r\\n  <defs>\\r\\n    <svg id=\\\"mercury\\\">...</svg>\\r\\n    <svg id=\\\"venus\\\">...</svg>\\r\\n    <svg id=\\\"earth\\\">...</svg>\\r\\n    <svg id=\\\"mars\\\">...</svg>\\r\\n  </defs>\\r\\n</svg>\\r\\n```\\r\\n\\r\\nIcon sets are registered using the `addSvgIconSet` or `addSvgIconSetInNamespace` methods of `MdIconRegistry`. After an icon set is registered, each of its embedded icons can be accessed by their \\\"id\\\" attributes. To display an icon from an icon set, use the `svgIcon` input in the same way as for individually registered icons. Example:\\r\\n```javascript\\r\\nmdIconRegistry.addSvgIconSetInNamespace('planets', '/assets/planets.svg');\\r\\n```\\r\\n\\r\\n```html\\r\\n<md-icon svgIcon=\\\"planets:venus\\\"></md-icon>\\r\\n```\\r\\n\\r\\nMultiple icon sets can be registered in the same namespace. If you request an icon whose id appears in more than one icon set, the icon from the most recently registered set will be used.\\r\\n\\r\\nNote that all SVG icons are fetched via XmlHttpRequest, and due to the same-origin policy their URLs must be on the same domain as the containing page, or their servers must be configured to allow cross-domain access.\\r\\n\\r\\n### Accessibility\\r\\n\\r\\nIf you set an \\\"aria-label\\\" attribute on the md-icon element, its value will be used as-is. If you do not, the md-icon component will attempt to set the aria-label value from one of these sources:\\r\\n* The `alt` attribute\\r\\n* The `fontIcon` input\\r\\n* The name of the icon from the `svgIcon` input (not including any namespace)\\r\\n* The text content of the component (for ligature icons)\\r\\n\\r\\n### API Summary\\r\\n\\r\\nmd-icon Properties:\\r\\n\\r\\n| Name         | Type     | Description |\\r\\n| ---          | ---      | --- |\\r\\n| `svgSrc`     | string   | The URL of the SVG icon to display |\\r\\n| `svgIcon`    | string   | The name (and possibly namespace) of an icon previously registered with `MdIconRegistry.addSvgIcon` or `MdIconRegistry.addSvgIconInNamespace` |\\r\\n| `fontSet`    | string   | The font to use to display an icon glyph. The value can be either a CSS class name, or an alias previously defined with `MdIconRegistry.registerFontClassAlias` |\\r\\n| `fontIcon`   | string   | The CSS class that identifies the specific icon to use from an icon font |\\r\\n\\r\\nMdIconRegistry methods (all methods return `this` for chaining):\\r\\n\\r\\n| Signature   | Description |\\r\\n| ---         | --- |\\r\\n| addSvgIcon(name: string, url: string): MdIconProvider | Associates an icon name with a URL in the default namespace. When an `md-icon` component has its `svgIcon` input set to this name, the icon will be loaded from this URL. |\\r\\n| addSvgIconInNamespace(namespace: string, iconName: string, url: string): MdIconProvider | Associates an icon name with a URL in the specified namespace. |\\r\\n| addSvgIconSet(url: string): MdIconProvider | Makes the icons contained in the icon set from a URL available in the default namespace. |\\r\\n| addSvgIconSetInNamespace(namespace: string, url: string): MdIconProvider | Makes the icons contained in the icon set from a URL available in the specified namespace. |\\r\\n| registerFontClassAlias(alias: string, className: string): MdIconProvider | Associates a font alias with a CSS class. When an `md-icon` component has its `fontSet` input set to the alias, the CSS class will be added to the component's element. It is assumed that the user has defined a corresponding CSS rule to set the desired font. |\\r\\n| setDefaultFontSetClass(className: string): MdIconProvider | Sets the default CSS class to apply to font icons when mdFontSet is not set. |\\r\\n\"},{\"id\":\"input\",\"content\":\"# mdInput\\r\\n\\r\\nInputs are the basic input component of Material 2. The spec can be found [here](https://www.google.com/design/spec/components/text-fields.html).\\r\\n\\r\\n\\r\\n\\r\\n## Notes\\r\\n* The `<md-input>` component fully support two-way binding of `ngModel`, as if it was a normal `<input>`.\\r\\n\\r\\n\\r\\n\\r\\n## Type\\r\\n\\r\\nAt the time of writing this README, the `[type]` attribute is copied to the actual `<input>` element in the `<md-input>`.\\r\\n\\r\\nThe valid `type` attribute values are any supported by your browser, with the exception of `file`, `checkbox` and `radio`. File inputs aren't supported for now, while check boxes and radio buttons have their own components.\\r\\n\\r\\n\\r\\n\\r\\n## Prefix and Suffix\\r\\n\\r\\nYou can include HTML before, and after the input tag, as prefix or suffix. It will be underlined as per the Material specification, and clicking it will focus the input.\\r\\n\\r\\nTo add a prefix, use the `md-prefix` attribute on the element. Similarly, to add a suffix, use the `md-suffix` attribute. For example, in a template:\\r\\n\\r\\n#### Example\\r\\n\\r\\n```html\\r\\n<md-input placeholder=\\\"amount\\\" align=\\\"end\\\">\\r\\n  <span md-prefix>$&nbsp;</span>\\r\\n  <span md-suffix>.00</span>\\r\\n</md-input>\\r\\n```\\r\\n\\r\\nWill result in this:\\r\\n\\r\\n<img src=\\\"https://material.angularjs.org/material2_assets/input/prefix-suffix.png\\\">\\r\\n\\r\\n\\r\\n\\r\\n## Hint Labels\\r\\n\\r\\nHint labels are the labels that shows the underline. You can have up to two hint labels; one on the `start` of the line (left in an LTR language, right in RTL), or one on the `end`.\\r\\n\\r\\nYou specify a hint-label in one of two ways; either using the `hintLabel` attribute, or using an `<md-hint>` directive in the `<md-input>`, which takes an `align` attribute containing the side. The attribute version is assumed to be at the `start`.\\r\\n\\r\\nSpecifying a side twice will result in an exception during initialization.\\r\\n\\r\\n#### Example\\r\\n\\r\\nA simple character counter can be made like the following:\\r\\n\\r\\n```html\\r\\n<md-input placeholder=\\\"Character count (100 max)\\\" maxlength=\\\"100\\\" class=\\\"demo-full-width\\\"\\r\\n          value=\\\"Hello world. How are you?\\\"\\r\\n          #characterCountHintExample>\\r\\n  <md-hint align=\\\"end\\\">{{characterCountHintExample.characterCount}} / 100</md-hint>\\r\\n</md-input>\\r\\n```\\r\\n\\r\\n<img src=\\\"https://material.angularjs.org/material2_assets/input/character-count.png\\\">\\r\\n\\r\\n\\r\\n\\r\\n## Divider Color\\r\\n\\r\\nThe divider (line under the `<md-input>` content) color can be changed by using the `dividerColor` attribute. A value of `primary` is the default and will correspond to your theme primary color. Alternatively, you can specify `accent` or `warn`.\\r\\n\\r\\n#### Example\\r\\n\\r\\n^((please note that this example has been doctored to show the colors; they would normally show only on focus)^)\\r\\n\\r\\n<img src=\\\"https://material.angularjs.org/material2_assets/input/divider-colors.png\\\">\\r\\n\\r\\n\\r\\n\\r\\n## Labelling\\r\\n\\r\\nYou can label the `<md-input>` as you would a regular `<input>`.\\r\\n\\r\\n\\r\\n\\r\\n## Full Forms\\r\\n\\r\\nYou can make a full form using inputs, and it will support autofill natively.\\r\\n\\r\\n#### Example\\r\\n\\r\\n```html\\r\\n<md-card class=\\\"demo-card demo-basic\\\">\\r\\n  <md-toolbar color=\\\"primary\\\">Basic</md-toolbar>\\r\\n  <md-card-content>\\r\\n    <form>\\r\\n      <md-input class=\\\"demo-full-width\\\" placeholder=\\\"Company (disabled)\\\" disabled value=\\\"Google\\\">\\r\\n      </md-input>\\r\\n\\r\\n      <table style=\\\"width: 100%\\\" cellspacing=\\\"0\\\"><tr>\\r\\n        <td><md-input placeholder=\\\"First name\\\" style=\\\"width: 100%\\\"></md-input></td>\\r\\n        <td><md-input placeholder=\\\"Long Last Name That Will Be Truncated\\\" style=\\\"width: 100%\\\"></md-input></td>\\r\\n      </tr></table>\\r\\n      <p>\\r\\n        <md-input class=\\\"demo-full-width\\\" placeholder=\\\"Address\\\" value=\\\"1600 Amphitheatre Pkway\\\"></md-input>\\r\\n        <md-input class=\\\"demo-full-width\\\" placeholder=\\\"Address 2\\\"></md-input>\\r\\n      </p>\\r\\n      <table style=\\\"width: 100%\\\" cellspacing=\\\"0\\\"><tr>\\r\\n        <td><md-input class=\\\"demo-full-width\\\" placeholder=\\\"City\\\"></md-input></td>\\r\\n        <td><md-input class=\\\"demo-full-width\\\" placeholder=\\\"State\\\"></md-input></td>\\r\\n        <td><md-input #postalCode class=\\\"demo-full-width\\\" maxlength=\\\"5\\\"\\r\\n                      placeholder=\\\"Postal Code\\\"\\r\\n                      value=\\\"94043\\\">\\r\\n          <md-hint align=\\\"end\\\">{{postalCode.characterCount}} / 5</md-hint>\\r\\n        </md-input></td>\\r\\n      </tr></table>\\r\\n    </form>\\r\\n  </md-card-content>\\r\\n</md-card>\\r\\n```\\r\\n\\r\\nWill result in this:\\r\\n\\r\\n<img src=\\\"https://material.angularjs.org/material2_assets/input/full-form.png\\\">\\r\\n\"},{\"id\":\"list\",\"content\":\"# md-list\\r\\n\\r\\n`md-list` is a container component that wraps and formats a series of line items. As the base list component,\\r\\n it provides Material Design styling, but no behavior of its own.\\r\\n\\r\\n## Usage\\r\\n\\r\\n### Simple list\\r\\n\\r\\nTo use `md-list`, import the MdList module into your application's NgModule:\\r\\n\\r\\n*my-app-module.ts*\\r\\n```ts\\r\\nimport {MdListModule} from '@angular2-material/list';\\r\\n\\r\\n@NgModule({\\r\\n  imports: [MdListModule.forRoot()],\\r\\n  ...\\r\\n})\\r\\nexport class MyAppModule {}\\r\\n```\\r\\n\\r\\nIn your template, create an `md-list` element and wrap each of your items in an `md-list-item` tag.\\r\\n\\r\\n```html\\r\\n<md-list>\\r\\n   <md-list-item> Pepper </md-list-item>\\r\\n   <md-list-item> Salt </md-list-item>\\r\\n   <md-list-item> Paprika </md-list-item>\\r\\n</md-list>\\r\\n```\\r\\n\\r\\nOutput:\\r\\n\\r\\n<img src=\\\"https://material.angularjs.org/material2_assets/list/basic-list.png\\\">\\r\\n\\r\\n### Multi-line lists\\r\\n\\r\\nIf your list requires multiple lines per list item, annotate each line with an `md-line` attribute.\\r\\nYou can use whichever heading tag is appropriate for your DOM hierarchy (doesn't have to be `h3`),\\r\\nas long as the `md-line` attribute is included.\\r\\n\\r\\n```html\\r\\n<!-- two line list -->\\r\\n<md-list>\\r\\n  <md-list-item *ngFor=\\\"let message of messages\\\">\\r\\n    <h3 md-line> {{message.from}} </h3>\\r\\n    <p md-line>\\r\\n      <span> {{message.subject}} </span>\\r\\n      <span class=\\\"demo-2\\\"> -- {{message.message}} </span>\\r\\n    </p>\\r\\n  </md-list-item>\\r\\n</md-list>\\r\\n\\r\\n<!-- three line list -->\\r\\n<md-list>\\r\\n  <md-list-item *ngFor=\\\"let message of messages\\\">\\r\\n    <h3 md-line> {{message.from}} </h3>\\r\\n    <p md-line> {{message.subject}} </p>\\r\\n    <p md-line class=\\\"demo-2\\\"> {{message.message}} </p>\\r\\n  </md-list-item>\\r\\n</md-list>\\r\\n```\\r\\n\\r\\nTwo line list output:\\r\\n\\r\\n<img src=\\\"https://material.angularjs.org/material2_assets/list/two-line-list.png\\\">\\r\\n\\r\\nThree line list output:\\r\\n\\r\\n<img src=\\\"https://material.angularjs.org/material2_assets/list/three-line-list.png\\\">\\r\\n\\r\\n### Lists with avatars\\r\\n\\r\\nTo include an avatar, add an image tag with an `md-list-avatar` attribute.\\r\\n\\r\\n```html\\r\\n<md-list>\\r\\n  <md-list-item *ngFor=\\\"let message of messages\\\">\\r\\n    <img md-list-avatar src=\\\"...\\\" alt=\\\"...\\\">\\r\\n    <h3 md-line> {{message.from}} </h3>\\r\\n    <p md-line>\\r\\n      <span> {{message.subject}} </span>\\r\\n      <span class=\\\"demo-2\\\"> -- {{message.message}} </span>\\r\\n    </p>\\r\\n  </md-list-item>\\r\\n</md-list>\\r\\n```\\r\\n\\r\\nOutput:\\r\\n\\r\\n<img src=\\\"https://material.angularjs.org/material2_assets/list/list-with-avatar-2.png\\\">\\r\\n\\r\\n### Dense lists\\r\\nLists are also available in \\\"dense layout\\\" mode, which shrinks the font size and height of the list\\r\\nto suit UIs that may need to display more information.  To enable this mode, add a `dense` attribute\\r\\nto the main `md-list` tag.\\r\\n\\r\\n\\r\\n```html\\r\\n<md-list dense>\\r\\n   <md-list-item> Pepper </md-list-item>\\r\\n   <md-list-item> Salt </md-list-item>\\r\\n   <md-list-item> Paprika </md-list-item>\\r\\n</md-list>\\r\\n```\\r\\n\\r\\nOutput:\\r\\n\\r\\n<img src=\\\"https://material.angularjs.org/material2_assets/list/dense-list.png\\\">\\r\\n\\r\\n### Lists with multiple sections\\r\\n\\r\\nYou can add a subheader to a list by annotating a heading tag with an `md-subheader` attribute. To add a divider,\\r\\nuse `<md-divider>` tags.\\r\\n\\r\\n```html\\r\\n<md-list>\\r\\n   <h3 md-subheader>Folders</h3>\\r\\n   <md-list-item *ngFor=\\\"let folder of folders\\\">\\r\\n      <md-icon md-list-avatar>folder</md-icon>\\r\\n      <h4 md-line>{{folder.name}}</h4>\\r\\n      <p md-line class=\\\"demo-2\\\"> {{folder.updated}} </p>\\r\\n   </md-list-item>\\r\\n   <md-divider></md-divider>\\r\\n   <h3 md-subheader>Notes</h3>\\r\\n   <md-list-item *ngFor=\\\"let note of notes\\\">\\r\\n      <md-icon md-list-avatar>note</md-icon>\\r\\n      <h4 md-line>{{note.name}}</h4>\\r\\n      <p md-line class=\\\"demo-2\\\"> {{note.updated}} </p>\\r\\n   </md-list-item>\\r\\n</md-list>\\r\\n```\\r\\n\\r\\nOutput:\\r\\n\\r\\n<img src=\\\"https://material.angularjs.org/material2_assets/list/subheader-list.png\\\">\\r\\n\\r\\n### Navigation lists\\r\\n\\r\\nUse `md-nav-list` tags for navigation lists (i.e. lists that have anchor tags).\\r\\n\\r\\nSimple nav lists can tack an `md-list-item` attribute onto the anchor tag itself:\\r\\n\\r\\n```html\\r\\n<md-nav-list>\\r\\n   <a md-list-item href=\\\"...\\\" *ngFor=\\\"let link of links\\\"> {{ link }} </a>\\r\\n</md-nav-list>\\r\\n```\\r\\n\\r\\nIf you require a more complex nav list (e.g. with more than one target per item), wrap your anchor tag in an `md-list-item` element.\\r\\n\\r\\n```html\\r\\n<md-nav-list>\\r\\n  <md-list-item *ngFor=\\\"let link of links\\\">\\r\\n     <a md-line href=\\\"...\\\">{{ link }}</a>\\r\\n     <button md-icon-button (click)=\\\"showInfo(link)\\\">\\r\\n        <md-icon>info</md-icon>\\r\\n     </button>\\r\\n  </md-list-item>\\r\\n</md-nav-list>\\r\\n```\\r\\n\\r\\n### Lists with secondary text\\r\\nSecondary text styling will be part of a broader typography module to\\r\\n[come later](https://github.com/angular/material2/issues/205), and won’t be implemented as part of this component\\r\\nspecifically. Gray text in the examples above comes from a \\\"demo-2\\\" class added manually by the demo.\\r\\n\"},{\"id\":\"menu\",\"content\":\"# md-menu\\r\\n\\r\\n`md-menu` is a list of options that displays when triggered.  You can read more about menus in the \\r\\n[Material Design spec](https://material.google.com/components/menus.html).\\r\\n\\r\\n### Not yet implemented\\r\\n\\r\\n- `prevent-close` option, to turn off automatic menu close when clicking outside the menu\\r\\n- Custom offset support\\r\\n- Menu groupings (which menus are allowed to open together)\\r\\n\\r\\n## Usage\\r\\n\\r\\n### Setup\\r\\n\\r\\nImport the MdMenu module.\\r\\n\\r\\n*my-app-module.ts*\\r\\n```ts\\r\\nimport {MdMenuModule} from '@angular2-material/menu';\\r\\n\\r\\n@NgModule({\\r\\n  imports: [MdMenuModule.forRoot()],\\r\\n  ...\\r\\n})\\r\\nexport class MyAppModule {}\\r\\n```\\r\\n\\r\\nFor alpha.7, you need to include the overlay styles in your app via a `link` element. This will\\r\\nlook something like\\r\\n```html\\r\\n<link href=\\\"vendor/@angular2-material/core/overlay/overlay.css\\\" rel=\\\"stylesheet\\\">\\r\\n```\\r\\n\\r\\n### Simple menu\\r\\n\\r\\nIn your template, create an `md-menu` element. You can use either `<button>` or `<anchor>` tags for \\r\\nyour menu items, as long as each is tagged with an `md-menu-item` attribute. Note that you can \\r\\ndisable items by adding the `disabled` boolean attribute or binding to it.\\r\\n\\r\\n*my-comp.html*\\r\\n```html\\r\\n<!-- this menu starts as hidden by default -->\\r\\n<md-menu>\\r\\n    <button md-menu-item> Refresh </button>\\r\\n    <button md-menu-item> Settings </button>\\r\\n    <button md-menu-item> Help </button>\\r\\n    <button md-menu-item disabled> Sign Out </button>\\r\\n</md-menu>\\r\\n```\\r\\n\\r\\nMenus are hidden by default, so you'll want to connect up a menu trigger that can open your menu.  \\r\\nYou can do so by adding a button tag with an `md-menu-trigger-for` attribute and passing in the menu \\r\\ninstance.  You can create a local reference to your menu instance by adding `#menu=\\\"mdMenu\\\"` to  \\r\\nyour menu element.\\r\\n\\r\\n*my-comp.html*\\r\\n```html\\r\\n<!-- menu opens when trigger button is clicked -->\\r\\n<button md-icon-button [md-menu-trigger-for]=\\\"menu\\\">\\r\\n   <md-icon>more_vert</md-icon>\\r\\n</button>\\r\\n\\r\\n<md-menu #menu=\\\"mdMenu\\\">\\r\\n    <button md-menu-item> Refresh </button>\\r\\n    <button md-menu-item> Settings </button>\\r\\n    <button md-menu-item> Help </button>\\r\\n    <button md-menu-item disabled> Sign Out </button>\\r\\n</md-menu>\\r\\n```\\r\\n\\r\\nOutput:\\r\\n\\r\\n<img src=\\\"https://material.angularjs.org/material2_assets/menu/default_closed.png\\\">\\r\\n<img src=\\\"https://material.angularjs.org/material2_assets/menu/default_open.png\\\">\\r\\n\\r\\n### Toggling the menu programmatically\\r\\n\\r\\nYou can also use the menu's API to open or close the menu programmatically from your class. Please \\r\\nnote that in this case, an `md-menu-trigger-for` attribute is still necessary to connect \\r\\nthe menu to its trigger element in the DOM.\\r\\n  \\r\\n*my-comp.component.ts*\\r\\n```ts\\r\\nclass MyComp {\\r\\n  @ViewChild(MdMenuTrigger) trigger: MdMenuTrigger;\\r\\n\\r\\n  someMethod() {\\r\\n    this.trigger.openMenu();\\r\\n  }\\r\\n}\\r\\n```\\r\\n\\r\\n*my-comp.html*\\r\\n```html\\r\\n<button md-icon-button [md-menu-trigger-for]=\\\"menu\\\">\\r\\n   <md-icon>more_vert</md-icon>\\r\\n</button>\\r\\n\\r\\n<md-menu #menu=\\\"mdMenu\\\">\\r\\n    <button md-menu-item> Refresh </button>\\r\\n    <button md-menu-item> Settings </button>\\r\\n    <button md-menu-item> Help </button>\\r\\n    <button md-menu-item disabled> Sign Out </button>\\r\\n</md-menu>\\r\\n```\\r\\n\\r\\n### Customizing menu position\\r\\n\\r\\nBy default, the menu will display after and below its trigger.  You can change this display position \\r\\nusing the `x-position` (`before | after`) and `y-position` (`above | below`) attributes.  \\r\\n\\r\\n*my-comp.html*\\r\\n```html\\r\\n<md-menu x-position=\\\"before\\\" #menu=\\\"mdMenu\\\">\\r\\n    <button md-menu-item> Refresh </button>\\r\\n    <button md-menu-item> Settings </button>\\r\\n    <button md-menu-item> Help </button>\\r\\n    <button md-menu-item disabled> Sign Out </button>\\r\\n</md-menu>\\r\\n```\\r\\n\\r\\nOutput:\\r\\n\\r\\n<img src=\\\"https://material.angularjs.org/material2_assets/menu/before_closed.png\\\">\\r\\n<img src=\\\"https://material.angularjs.org/material2_assets/menu/before_open.png\\\">\\r\\n\\r\\n### Accessibility\\r\\n\\r\\nThe menu adds `role=\\\"menu\\\"` to the main menu element and `role=\\\"menuitem\\\"` to each menu item. It \\r\\nalso adds `aria-hasPopup=\\\"true\\\"` to the trigger element.\\r\\n\\r\\n#### Keyboard events:\\r\\n- <kbd>DOWN_ARROW</kbd>: Focus next menu item\\r\\n- <kbd>UP_ARROW</kbd>: Focus previous menu item\\r\\n- <kbd>ENTER</kbd>: Select focused item\\r\\n\\r\\n### Menu attributes\\r\\n\\r\\n| Signature | Values | Description |\\r\\n| --- | --- | --- |\\r\\n| `x-position` | `before | after` | The horizontal position of the menu in relation to the trigger. Defaults to `after`. | \\r\\n| `y-position` | `above | below` | The vertical position of the menu in relation to the trigger. Defaults to `below`. |\\r\\n \\r\\n### Trigger Programmatic API\\r\\n\\r\\n**Properties**\\r\\n\\r\\n| Name | Type | Description |\\r\\n| --- | --- | --- |\\r\\n| `menuOpen` | `Boolean` | Property that is true when the menu is open. It is not settable (use methods below). | \\r\\n| `onMenuOpen` | `Observable<void>` | Observable that emits when the menu opens. | \\r\\n| `onMenuClose` | `Observable<void>` | Observable that emits when the menu closes. | \\r\\n\\r\\n**Methods**\\r\\n\\r\\n| Method | Returns | Description |\\r\\n| --- | --- | --- |\\r\\n| `openMenu()` | `Promise<void>` | Opens the menu. Returns a promise that will resolve when the menu has opened. |\\r\\n| `closeMenu()` | `Promise<void>` | Closes the menu. Returns a promise that will resolve when the menu has closed. |\\r\\n| `toggleMenu()` | `Promise<void>` | Toggles the menu. Returns a promise that will resolve when the menu has completed opening or closing. |  \\r\\n| `destroyMenu()` | `Promise<void>` | Destroys the menu overlay completely. \\r\\n  \\r\\n\\r\\n\"},{\"id\":\"progress-bar\",\"content\":\"# md-progress-bar\\r\\n\\r\\n`md-progress-bar` is a component for indicating progress and activity, matching the spec of \\r\\n[Material Design Progress & Activity](https://www.google.com/design/spec/components/progress-activity.html).\\r\\n\\r\\n### Progress Modes\\r\\n\\r\\nThere are four modes:\\r\\n 1. Determinate - `<md-progress-bar mode=\\\"determinate\\\">`\\r\\n    * Indicates how long an operation will take when the percentage complete is detectable. \\r\\n 2. Indeterminate - `<md-progress-bar mode=\\\"indeterminate\\\">`\\r\\n    * Indicates the user must wait while something finishes when it’s not necessary or possible to indicate how long it will take.\\r\\n 3. Buffer - `<md-progress-bar mode=\\\"buffer\\\">`\\r\\n    * Indicates how long an operation will take when the percentage complete is detectable, also provides a value of the preloading for the operation.\\r\\n 4. Query - `<md-progress-bar mode=\\\"query\\\">`\\r\\n    * Indicates the user must wait while something finishes when it is not yet possible to indicate how long it will take, but will be possible.  Once possible, the progress mode should be moved to buffer or determinate.\\r\\n      \\r\\n\\r\\nExample:\\r\\n\\r\\n ```html\\r\\n<md-progress-bar mode=\\\"determinate\\\" value=\\\"myValue\\\"></md-progress-bar>\\r\\n<md-progress-bar mode=\\\"indeterminate\\\"></md-progress-bar>\\r\\n<md-progress-bar mode=\\\"buffer\\\" value=\\\"myValue\\\" bufferValue=\\\"myBufferValue\\\"></md-progress-bar>\\r\\n<md-progress-bar mode=\\\"query\\\"></md-progress-bar>\\r\\n ```\\r\\n\\r\\n### Theming\\r\\n\\r\\nAll progress indicators can be themed to match your \\\"primary\\\" palette, your \\\"accent\\\" palette, or your \\\"warn\\\" palette using the appropriate class.\\r\\n\\r\\nExample:\\r\\n\\r\\n ```html\\r\\n<md-progress-bar mode=\\\"indeterminate\\\" color=\\\"primary\\\"></md-progress-bar>\\r\\n<md-progress-bar mode=\\\"indeterminate\\\" color=\\\"accent\\\"></md-progress-bar>\\r\\n<md-progress-bar mode=\\\"indeterminate\\\" color=\\\"warn\\\"></md-progress-bar>\\r\\n ```\\r\\n\\r\\n### Accessibility\\r\\n\\r\\n * ARIA attributes are applied to the indicator defining the valuemin, valuemax and valuenow attributes.\\r\\n\\r\\n\\r\\n### API Summary\\r\\n\\r\\nProperties:\\r\\n\\r\\n| Name            | Type                                                     | Description |\\r\\n| ---             | ---                                                      | --- |\\r\\n| `color`         | `\\\"primary\\\" | \\\"accent\\\" | \\\"warn\\\"`                          | The color palette of the progress indicator |\\r\\n| `mode`          | `\\\"determinate\\\" | \\\"indeterminate\\\" | \\\"buffer\\\" | \\\"query\\\"`   | The mode of the progress indicator |\\r\\n| `value`         | number                                                   | The current progress percentage for determinate indicators |\\r\\n| `bufferValue`   | number                                                   | The current progress percentage for buffer secondary indicators |\\r\\n\"},{\"id\":\"progress-circle\",\"content\":\"# md-progress-circle\\r\\n\\r\\n`md-progress-circle` is a component for indicating progress and activity, matching the spec of \\r\\n[Material Design Progress & Activity](https://www.google.com/design/spec/components/progress-activity.html).\\r\\n\\r\\n### Progress Modes\\r\\n\\r\\nThere are two modes:\\r\\n 1. Determinate - `<md-progress-circle mode=\\\"determinate\\\">`\\r\\n    * Indicates how long an operation will take when the percentage complete is detectable. \\r\\n 2. Indeterminate - `<md-progress-circle mode=\\\"indeterminate\\\">` or `<md-spinner>`\\r\\n    * Indicates the user must wait while something finishes when it’s not necessary or possible to indicate how long it\\r\\n      will take.\\r\\n\\r\\nExample:\\r\\n\\r\\n ```html\\r\\n<md-progress-circle mode=\\\"determinate\\\" [value]=\\\"myValue\\\"></md-progress-circle>\\r\\n<md-progress-circle mode=\\\"indeterminate\\\"></md-progress-circle>\\r\\n<md-spinner></md-spinner>\\r\\n ```\\r\\n\\r\\n### Theming\\r\\n\\r\\nAll progress indicators can be themed to match your \\\"primary\\\" palette, your \\\"accent\\\" palette, or your \\\"warn\\\" palette using the appropriate class.\\r\\n\\r\\nExample:\\r\\n\\r\\n ```html\\r\\n<md-progress-circle mode=\\\"indeterminate\\\" color=\\\"primary\\\"></md-progress-circle>\\r\\n<md-progress-circle mode=\\\"indeterminate\\\" color=\\\"accent\\\"></md-progress-circle>\\r\\n<md-progress-circle mode=\\\"indeterminate\\\" color=\\\"warn\\\"></md-progress-circle>\\r\\n ```\\r\\n\\r\\n### Accessibility\\r\\n\\r\\n * ARIA attributes are applied to the indicator defining the valuemin, valuemax and valuenow attributes.\\r\\n\\r\\n### Upcoming work\\r\\n\\r\\n * Adding ARIA attribute for progressbar \\\"for\\\".\\r\\n\\r\\n### API Summary\\r\\n\\r\\nProperties:\\r\\n\\r\\n| Name      | Type                              | Description |\\r\\n| ---       | ---                               | --- |\\r\\n| `color`   | `\\\"primary\\\"|\\\"accent\\\"|\\\"warn\\\"`       | The color palette of the progress indicator |\\r\\n| `mode`    | `\\\"determinate\\\"|\\\"indeterminate\\\"`   | The mode of the progress indicator |\\r\\n| `value`   | number                            | The current progress percentage for determinate indicators |\\r\\n\"},{\"id\":\"radio\",\"content\":\"# MdRadio\\r\\nRadio buttons allow the user to select one option from a set. Use radio buttons for exclusive selection if you think that the user needs to see all available options side-by-side.\\r\\n\\r\\n![Preview](https://material.angularjs.org/material2_assets/radio/radios.png)\\r\\n\\r\\n### Setup\\r\\nImporting the symbols:\\r\\n```ts\\r\\nimport { MdRadioModule } from '@angular2-material/radio';\\r\\n```\\r\\n\\r\\nAdding providers and directives:\\r\\n```ts\\r\\n@NgModule({\\r\\n  imports: [MdRadioModule.forRoot()],\\r\\n  ...\\r\\n})\\r\\nexport class MyAppModule { }\\r\\n```\\r\\n\\r\\n### Examples\\r\\nA basic radio group would have the following markup.\\r\\n```html\\r\\n<md-radio-group>\\r\\n  <md-radio-button value=\\\"option_1\\\">1</md-radio-button>\\r\\n  <md-radio-button value=\\\"option_2\\\">2</md-radio-button>\\r\\n</md-radio-group>\\r\\n```\\r\\n\\r\\nA dynamic example, populated from a `data` variable:\\r\\n```html\\r\\n<md-radio-group [(value)]=\\\"groupValue\\\">\\r\\n  <md-radio-button *ngFor=\\\"let d of data\\\" [value]=\\\"d.value\\\">\\r\\n    {{d.label}}\\r\\n  </md-radio-button>\\r\\n</md-radio-group>\\r\\n```\\r\\n\\r\\nA dynamic example for use inside a form showing support for `[(ngModel)]`:\\r\\n```html\\r\\n<md-radio-group [(ngModel)]=\\\"chosenOption\\\">\\r\\n  <md-radio-button *ngFor=\\\"let o of options\\\" [value]=\\\"o.value\\\">\\r\\n    {{o.label}}\\r\\n  </md-radio-button>\\r\\n</md-radio-group>\\r\\n```\\r\\n\\r\\n## `<md-radio-group>`\\r\\n### Properties\\r\\n\\r\\n| Name | Type | Description |\\r\\n| --- | --- | --- |\\r\\n| `selected` | `MdRadioButton` | The currently selected button. |\\r\\n| `value` | `any` | The current value for this group. |\\r\\n| `disabled` | `boolean` | Whether the group is disabled. |\\r\\n\\r\\nWhen selection is changed, an event is emitted from the `change` EventEmitter property.\\r\\n\\r\\n### Notes\\r\\nThe `md-radio-group` component has no button initially selected.\\r\\n\\r\\n## `<md-radio-button>`\\r\\n### Properties\\r\\n\\r\\n| Name (attribute) | Type | Description |\\r\\n| --- | --- | --- |\\r\\n| `id` | `string` | The unique ID of this radio button. |\\r\\n| `name` | `string` | Group name, defaults to parent radio group if present. |\\r\\n| `value` | `any` | The value of this radio button. |\\r\\n| `checked` | `boolean` | Whether the radio is checked. |\\r\\n| `disabled` | `boolean` | Whether the radio is disabled. |\\r\\n| `aria-label` | `string` | Used to set the `aria-label` attribute of the underlying input element. |\\r\\n| `aria-labelledby` | `string` | Used to set the `aria-labelledby` attribute of the underlying input element.\\r\\n                                 If provided, this attribute takes precedence as the element's text alternative. |\\r\\n\\r\\nWhen checked, an event is emitted from the `change` EventEmitter property.\\r\\n\\r\\n### Notes\\r\\n* The `md-radio-button` component by default uses the accent color from the theme palette.\\r\\n\"},{\"id\":\"sidenav\",\"content\":\"# MdSidenav\\r\\n\\r\\nMdSidenav is the side navigation component for Material 2. It is composed of two components; `<md-sidenav-layout>` and `<md-sidenav>`.\\r\\n\\r\\n## Screenshots\\r\\n\\r\\n<img src=\\\"https://material.angularjs.org/material2_assets/sidenav-example.png\\\">\\r\\n\\r\\n\\r\\n## `<md-sidenav-layout>`\\r\\n\\r\\nThe parent component. Contains the code necessary to coordinate one or two sidenav and the backdrop.\\r\\n\\r\\n### Properties\\r\\n\\r\\n| Name | Description |\\r\\n| --- | --- |\\r\\n| `start` | The start aligned `MdSidenav` instance, or `null` if none is specified. In LTR direction, this is the sidenav shown on the left side. In RTL direction, it will show on the right. There can only be one sidenav on either side. |\\r\\n| `end` | The end aligned `MdSidenav` instance, or `null` if none is specified. This is the sidenav opposing the `start` sidenav. There can only be one sidenav on either side. |\\r\\n\\r\\n## `<md-sidenav>`\\r\\n\\r\\nThe sidenav panel.\\r\\n\\r\\n### Bound Properties\\r\\n\\r\\n| Name | Type | Description |\\r\\n| --- | --- | --- |\\r\\n| `align` | `\\\"start\\\"|\\\"end\\\"` | The alignment of this sidenav. In LTR direction, `\\\"start\\\"` will be shown on the left, `\\\"end\\\"` on the right. In RTL, it is reversed. `\\\"start\\\"` is used by default. An exception will be thrown if there are more than 1 sidenav on either side. |\\r\\n| `mode` | `\\\"over\\\"|\\\"push\\\"|\\\"side\\\"` | The mode or styling of the sidenav, default being `\\\"over\\\"`. With `\\\"over\\\"` the sidenav will appear above the content, and a backdrop will be shown. With `\\\"push\\\"` the sidenav will push the content of the `<md-sidenav-layout>` to the side, and show a backdrop over it. `\\\"side\\\"` will resize the content and keep the sidenav opened. Clicking the backdrop will close sidenavs that do not have `mode=\\\"side\\\"`. |\\r\\n| `opened` | `boolean` | Whether or not the sidenav is opened. Use this binding to open/close the sidenav. |\\r\\n\\r\\n### Events\\r\\n\\r\\n| Name | Description |\\r\\n| --- | --- |\\r\\n| `open-start` | Emitted when the sidenav is starting opening. This should only be used to coordinate animations. |\\r\\n| `close-start` | Emitted when the sidenav is starting closing. This should only be used to coordinate animations. |\\r\\n| `open` | Emitted when the sidenav is done opening. Use this for, e.g., setting focus on controls or updating state. |\\r\\n| `close` | Emitted when the sidenav is done closing. |\\r\\n\\r\\n### Methods\\r\\n\\r\\n| Signature | Description |\\r\\n| --- | --- |\\r\\n| `open(): Promise<void>` | Open the sidenav. Equivalent to `opened = true`. Returns a promise that will resolve when the animation completes, or be rejected if the animation was cancelled. |\\r\\n| `close(): Promise<void>` | Close the sidenav. Equivalent to `opened = false`. Returns a promise that will resolve when the animation completes, or be rejected if the animation was cancelled. |\\r\\n| `toggle(): Promise<void>` | Toggle the sidenav. This is equivalent to `opened = !opened`. Returns a promise that will resolve when the animation completes, or be rejected if the animation was cancelled. |\\r\\n\\r\\n### Notes\\r\\n\\r\\nThe `<md-sidenav>` will resize based on its content. You can also set its width in CSS, like so:\\r\\n\\r\\n```css\\r\\nmd-sidenav {\\r\\n  width: 200px;\\r\\n}\\r\\n```\\r\\n\\r\\nTry to avoid percent based width as `resize` events are not (yet) supported.\\r\\n\\r\\n## Examples\\r\\n\\r\\nHere's a simple example of using the sidenav:\\r\\n\\r\\n```html\\r\\n<app>\\r\\n  <md-sidenav-layout>\\r\\n    <md-sidenav #start (open)=\\\"mybutton.focus()\\\">\\r\\n      Start Sidenav.\\r\\n      <br>\\r\\n      <button md-button #mybutton (click)=\\\"start.close()\\\">Close</button>\\r\\n    </md-sidenav>\\r\\n    <md-sidenav #end align=\\\"end\\\">\\r\\n      End Sidenav.\\r\\n      <button md-button (click)=\\\"end.close()\\\">Close</button>\\r\\n    </md-sidenav>\\r\\n\\r\\n    My regular content. This will be moved into the proper DOM at runtime.\\r\\n  </md-sidenav-layout>\\r\\n</app>\\r\\n```\\r\\n\\r\\n\"},{\"id\":\"slide-toggle\",\"content\":\"# MdSlideToggle\\r\\n`MdSlideToggle` is a two-state control, which can be also called `switch`\\r\\n\\r\\n### Screenshots\\r\\n![image](https://material.angularjs.org/material2_assets/slide-toggle/toggles.png)\\r\\n\\r\\n## `<md-slide-toggle>`\\r\\n### Bound Properties\\r\\n\\r\\n| Name | Type | Description |\\r\\n| --- | --- | --- |\\r\\n| `disabled` | boolean | Disables the `slide-toggle` |\\r\\n| `color` | `\\\"primary\\\" | \\\"accent\\\" | \\\"warn\\\"` | The color palette of the `slide-toggle` |\\r\\n| `checked` | boolean | Sets the value of the `slide-toggle` |\\r\\n\\r\\n### Events\\r\\n| Name | Type | Description |\\r\\n| --- | --- | --- |\\r\\n| `change` | boolean | Event will be emitted on every value change.<br/>It emits the new `checked` value. |\\r\\n\\r\\n### Examples\\r\\nA basic slide-toggle would have the following markup.\\r\\n```html\\r\\n<md-slide-toggle [(ngModel)]=\\\"slideToggleModel\\\">\\r\\n  Default Slide Toggle\\r\\n</md-slide-toggle>\\r\\n```\\r\\n\\r\\nSlide toggle can be also disabled.\\r\\n```html\\r\\n<md-slide-toggle disabled>\\r\\n  Disabled Slide Toggle\\r\\n</md-slide-toggle>\\r\\n```\\r\\n\\r\\nThe `slide-toggle` can be also set to checked without a `ngModel`\\r\\n```html\\r\\n<md-slide-toggle [checked]=\\\"isChecked\\\">\\r\\n  Input Binding\\r\\n</md-slide-toggle>\\r\\n```\\r\\n\\r\\nYou may also want to listen on changes of the `slide-toggle`<br/>\\r\\nThe `slide-toggle` always emits the new value to the event binding `(change)`\\r\\n```html\\r\\n<md-slide-toggle (change)=\\\"printValue($event)\\\">\\r\\n  Prints Value on Change\\r\\n</md-slide-toggle>\\r\\n```\\r\\n\\r\\n## Theming\\r\\nA slide-toggle is default using the `accent` palette for its styling.\\r\\n\\r\\nModifying the color on a `slide-toggle` can be easily done, by using the following markup.\\r\\n```html\\r\\n<md-slide-toggle color=\\\"primary\\\">\\r\\n  Primary Slide Toggle\\r\\n</md-slide-toggle>\\r\\n```\\r\\n\\r\\nThe color can be also set dynamically by using a property binding.\\r\\n```html\\r\\n<md-slide-toggle [color]=\\\"myColor\\\">\\r\\n  Dynamic Color\\r\\n</md-slide-toggle>\\r\\n```\"},{\"id\":\"slider\",\"content\":\"# md-slider\\r\\n\\r\\n`MdSlider` is a component that allows users to select from a range of values by moving the slider\\r\\nthumb.\\r\\nYou can read more about the slider in the\\r\\n[Material Design spec](https://material.google.com/components/sliders.html).\\r\\n\\r\\n## Not Yet Implemented\\r\\n\\r\\n* Thumb Label\\r\\n* Color\\r\\n* Invert\\r\\n* NgModel\\r\\n* Keyboard Movement\\r\\n* Focus Ring\\r\\n* Smaller/grey thumb at minimum value\\r\\n\\r\\n## Usage\\r\\n\\r\\n### Setup\\r\\n\\r\\nImporting the module:\\r\\n```ts\\r\\n @NgModule({\\r\\n    imports: [MdSliderModule.forRoot()],\\r\\n    ...\\r\\n })\\r\\n export class MyAppModule { }\\r\\n```\\r\\n\\r\\n### Basic Usage\\r\\n\\r\\n`md-slider` can be used on its own as a slider with a min of `0`, a max of `100`, and a step of `1`.\\r\\n\\r\\n```html\\r\\n<md-slider></md-slider>\\r\\n```\\r\\n\\r\\n### Slider with Minimum and Maximum Values\\r\\n\\r\\nThe min and max on a `md-slider` can be set to give a different range of values.\\r\\nThese can be set individually and do not need to both be set.\\r\\n\\r\\n```html\\r\\n<md-slider min=\\\"1\\\" max=\\\"5\\\"></md-slider>\\r\\n```\\r\\n\\r\\n### Disabled Slider\\r\\n\\r\\n`md-slider` can be disabled so that the value cannot be changed and the thumb cannot be moved.\\r\\n\\r\\n```html\\r\\n<md-slider disabled></md-slider>\\r\\n```\\r\\n\\r\\n### Slider with Value\\r\\n\\r\\n`md-slider` can have a value defined so that it starts at a specific value on the slider.\\r\\n\\r\\n```html\\r\\n<md-slider value=\\\"24\\\"></md-slider>\\r\\n```\\r\\n\\r\\n### Slider with Step\\r\\n\\r\\n`md-slider` can have the step defined which declares where the thumb can snap to.\\r\\n\\r\\n```html\\r\\n<md-slider step=\\\"5\\\"></md-slider>\\r\\n```\\r\\n\\r\\n### Slider with Tick Interval\\r\\n\\r\\n`md-slider` can have a tick interval set to a number or to `auto`.\\r\\n`auto` will automatically draw tick marks on steps that are at least 30px apart and will always draw\\r\\ntick marks at the beginning and end of the slider.\\r\\nSetting `tick-interval` to a number will draw a tick mark at every `tick-interval` steps. An example\\r\\nof this is a `tick-interval` of `3` with a `step` of `4` will draw tick marks at every `3` steps,\\r\\nwhich is the same as every `12` values.\\r\\n\\r\\n```html\\r\\n<md-slider tick-interval=\\\"auto\\\"></md-slider>\\r\\n<md-slider tick-interval=\\\"3\\\" step=\\\"4\\\"></md-slider>\\r\\n```\\r\\n\\r\\n## `<md-slider>`\\r\\n\\r\\n### Bound Properties\\r\\n\\r\\n| Name | Type | Description |\\r\\n| --- | --- | --- |\\r\\n| `min` | number | Optional, the minimum number for the slider. Default = `0`. |\\r\\n| `max` | number | Optional, the maximum number for the slider. Default = `100`. |\\r\\n| `value` | number | Optional, the value to start the slider at. |\\r\\n| `tick-interval` | `\\\"auto\\\" | number` | Optional, how many steps between tick marks. |\\r\\n| `step` | number | Optional, declares where the thumb will snap to. Default = `1`. |\\r\\n| `disabled` | boolean | Optional, whether or not the slider is disabled. Default = `false`. |\\r\\n\"},{\"id\":\"snack-bar\",\"content\":\"# MdSnackBar\\r\\n`MdSnackBar` is a service, which opens snack bar notifications in the view.\\r\\n\\r\\n### Methods\\r\\n\\r\\n| Name |  Description |\\r\\n| --- | --- |\\r\\n| `open(message: string,<br>  actionLabel: string, config: MdSnackBarConfig): MdSnackBarRef<SimpleSnackBar>` | Creates and opens a simple snack bar noticiation matching material spec. |\\r\\n| `openFromComponent(component: ComponentType<T>, config: MdSnackBarConfig): MdSnackBarRef<T>` | Creates and opens a snack bar noticiation with a custom component as content. |\\r\\n\\r\\n### Config\\r\\n\\r\\n| Key |  Description |\\r\\n| --- | --- |\\r\\n| `viewContainerRef: ViewContainerRef` | The view container ref to attach the snack bar to. |\\r\\n| `role: AriaLivePoliteness = 'assertive'` | The politeness level to announce the snack bar with. |\\r\\n| `announcementMessage: string` | The message to announce with the snack bar. |\\r\\n\\r\\n\\r\\n### Example\\r\\nThe service can be injected in a component.\\r\\n```ts\\r\\n@Component({\\r\\n  selector: 'my-component'\\r\\n  providers: [MdSnackBar]\\r\\n})\\r\\nexport class MyComponent {\\r\\n\\r\\n constructor(snackBar: MdSnackBar\\r\\n             viewContainerRef: ViewContainerRef) {}\\r\\n\\r\\n failedAttempt() {\\r\\n   config = new MdSnackBarConfig(this.viewContainerRef);\\r\\n   this.snackBar.open('It didn\\\\'t quite work!', 'Try Again', config);\\r\\n }\\r\\n\\r\\n}\\r\\n```\"},{\"id\":\"tabs\",\"content\":\"# MdTabGroup\\r\\nTab groups allow the user to organize their content by labels such that only one tab is visible at any given time.\\r\\n\\r\\n## `<md-tab-group>`\\r\\n### Properties\\r\\n\\r\\n| Name | Type | Description |\\r\\n| --- | --- | --- |\\r\\n| `selectedIndex` | `number` | The index of the currently active tab. |\\r\\n\\r\\n### Events\\r\\n\\r\\n| Name | Type | Description |\\r\\n| --- | --- | --- |\\r\\n| `focusChange` | `Event` | Fired when focus changes from one label to another |\\r\\n| `selectChange` | `Event` | Fired when the selected tab changes |\\r\\n\\r\\n### Examples\\r\\nA basic tab group would have the following markup.\\r\\n```html\\r\\n<md-tab-group>\\r\\n  <md-tab>\\r\\n    <template md-tab-label>One</template>\\r\\n    <template md-tab-content>\\r\\n      <h1>Some tab content</h1>\\r\\n      <p>...</p>\\r\\n    </template>\\r\\n  </md-tab>\\r\\n  <md-tab>\\r\\n    <template md-tab-label>Two</template>\\r\\n    <template md-tab-content>\\r\\n      <h1>Some more tab content</h1>\\r\\n      <p>...</p>\\r\\n    </template>\\r\\n  </md-tab>\\r\\n</md-tab-group>\\r\\n```\\r\\n\\r\\nIt is also possible to specifiy the active tab by using the `selectedIndex` property.\\r\\n\\r\\n```html\\r\\n<md-tab-group [selectedIndex]=\\\"1\\\">\\r\\n  ...\\r\\n</md-tab-group>\\r\\n```\\r\\n\\r\\n**Note**: The index always starts counting from `zero`.\\r\\n\"},{\"id\":\"toolbar\",\"content\":\"# MdToolbar\\r\\n`MdToolbar` is a vertical aligned bar, which can hold the application title or actions.\\r\\n\\r\\n### Screenshots\\r\\n![Preview](https://cloud.githubusercontent.com/assets/4987015/13727769/6d952c78-e900-11e5-890a-ccfd46996812.png)\\r\\n\\r\\n## `<md-toolbar>`\\r\\n### Bound Properties\\r\\n\\r\\n| Name | Type | Description |\\r\\n| --- | --- | --- |\\r\\n| `color` | `\\\"primary\\\" | \\\"accent\\\" | \\\"warn\\\"` | The color palette for the toolbar |\\r\\n\\r\\n### Notes\\r\\nThe `md-toolbar` component will use by default the background palette.\\r\\n\\r\\n### Examples\\r\\nA basic toolbar would have the following markup.\\r\\n```html\\r\\n<md-toolbar [color]=\\\"myColor\\\">\\r\\n  <span>My Application Title</span>\\r\\n</md-toolbar>\\r\\n```\\r\\n\\r\\nToolbars can also have multiple rows.<br/>\\r\\nMultiple rows inside of a `md-toolbar` can be added by appending as many as needed `<md-toolbar-row>` elements.\\r\\n\\r\\n```html\\r\\n<md-toolbar [color]=\\\"myColor\\\">\\r\\n  <span>First Row</span>\\r\\n  \\r\\n  <md-toolbar-row>\\r\\n    <span>Second Row</span>\\r\\n  </md-toolbar-row>\\r\\n  \\r\\n  <md-toolbar-row>\\r\\n    <span>Third Row</span>\\r\\n  </md-toolbar-row>\\r\\n</md-toolbar>\\r\\n```\\r\\n\\r\\n### Alignment\\r\\nThe alignment inside of a toolbar row can be easily done by using the flexbox layout.<br/>\\r\\nFor example, the following markup aligns the items on the `right`.\\r\\n\\r\\nCustom HTML\\r\\n```html\\r\\n<md-toolbar color=\\\"primary\\\">\\r\\n  <span>Application Title</span>\\r\\n  \\r\\n  <!-- This fills the remaining space of the current row -->\\r\\n  <span class=\\\"example-fill-remaining-space\\\"></span>\\r\\n  \\r\\n  <span>Right Aligned Text</span>\\r\\n</md-toolbar>\\r\\n```\\r\\n\\r\\nCustom SCSS\\r\\n```scss\\r\\n.example-fill-remaining-space {\\r\\n  // This fills the remaining space, by using flexbox. \\r\\n  // Every toolbar row uses a flexbox row layout.\\r\\n  flex: 1 1 auto;\\r\\n}\\r\\n```\\r\\n\\r\\nOutput\\r\\n![image](https://cloud.githubusercontent.com/assets/4987015/13730760/0864894e-e959-11e5-9312-7f3cb990d80a.png)\\r\\n\"},{\"id\":\"tooltip\",\"content\":\"# MdTooltip\\r\\nTooltip allows the user to specify text to be displayed when the mouse hover over an element.\\r\\n\\r\\n### Setup\\r\\nFor alpha.7, you need to include the overlay styles in your app via a `link` element. This will\\r\\nlook something like\\r\\n```html\\r\\n<link href=\\\"vendor/@angular2-material/core/overlay/overlay.css\\\" rel=\\\"stylesheet\\\">\\r\\n```\\r\\n\\r\\n\\r\\n### Examples\\r\\nA button with a tooltip\\r\\n```html\\r\\n<button md-tooltip=\\\"some message\\\" tooltip-position=\\\"below\\\">Button</button>\\r\\n```\\r\\n\\r\\n## `[md-tooltip]`\\r\\n### Properties\\r\\n\\r\\n| Name | Type | Description |\\r\\n| --- | --- | --- |\\r\\n| `md-tooltip` | `string` | The message to be displayed. |\\r\\n| `tooltip-position` | `\\\"above\\\"|\\\"below\\\"|\\\"before\\\"|\\\"after\\\"` | The position of the tooltip. |\\r\\n\\r\\n### Methods\\r\\n\\r\\n| Name | Description |\\r\\n| --- | --- | --- |\\r\\n| `show` | Displays the tooltip. |\\r\\n| `hide` | Removes the tooltip. |\\r\\n| `toggle` | Displays or hides the tooltip. |\\r\\n\"}])\n\nC:\\jbart5-ng\\projects\\studio\\studio-main.ts:\n  180  	type: 'control',\n  181  	impl: function (ctx) {\n  182: 		@Component({\n  183  			selector: 'previewIframe',\n  184  			template: `<iframe sandbox=\"allow-same-origin allow-forms allow-scripts\" style=\"box-shadow:  2px 2px 6px 1px gray; margin-left: 2px; margin-top: 2px\"\n\n6 matches across 4 files\n\n\nSearching 128 files for \"label.md-card-title\" (regex)\n\nC:\\jbart5-ng\\src\\ui\\md-styles\\card-md.ts:\n   49  })\n   50  \n   51: jb.component('label.md-card-title', {\n   52      type: 'label.style',\n   53      impl :{$: 'customStyle', \n\nC:\\jbart5-ng\\projects\\hello-world\\hello.ts:\n    8        {$: 'label', \n    9          title: 'hello test', \n   10:         style :{$: 'label.md-card-title' }, \n   11          features :{$: 'css.width', width: '200', overflow: 'scroll' }\n   12        }\n\nC:\\jbart5-ng\\projects\\jbart-site\\jbart-site.ts:\n  150        {$: 'label', \n  151          title: 'label', \n  152:         style :{$: 'label.md-card-title' }\n  153        }, \n  154        {$: 'itemlist-with-groups', \n  ...\n  165          headingCtrl :{$: 'label', \n  166            title: '%title%', \n  167:           style :{$: 'label.md-card-title' }\n  168          }, \n  169          watchItems: true, \n\nC:\\jbart5-ng\\projects\\ui-tests\\md-tests.ts:\n   15    impl :{$: 'ng2-ui-test',  \n   16      control :{$: 'label', title: 'ccc', \n   17:         style :{$: 'label.md-card-title' }\n   18      },\n   19      expectedHtmlResult: { $: 'contains', text: 'cc' }\n\nC:\\jbart5-ng\\projects\\ui-tests\\ui-tests-old.js:\n   70    'md-card-title' :{$: 'ng2-ui-test',  \n   71      control :{$: 'label', title: 'ccc', \n   72:         style :{$: 'label.md-card-title' }\n   73      },\n   74      expectedHtmlResult: { $: 'contains', text: 'cc' }\n\n6 matches across 5 files\n\n\nSearching 128 files for \"('group\" (regex)\n\nUnmatched marking parenthesis ( or \\(.  The error occurred while parsing the regular expression: '('group>>>HERE>>>'. in regular expression ('group\n\n0 matches\n\nSearching 128 files for \"'group'\" (regex)\n\nC:\\jbart5-ng\\src\\ui\\dialog.js:\n    6  		{ id: 'id', as: 'string' },\n    7  		{ id: 'style', type: 'dialog.style', dynamic: true, defaultValue: { $:'dialog.default' }	},\n    8: 		{ id: 'content', type: 'control', dynamic: true, defaultValue :{$: 'group'}, forceDefaultCreation: true },\n    9  		{ id: 'menu', type: 'control', dynamic: true },\n   10  		{ id: 'title', as: 'string', dynamic: true  },\n\nC:\\jbart5-ng\\src\\ui\\group.js:\n    3  jb.type('group.style');\n    4  \n    5: jb.component('group',{\n    6    type: 'control',\n    7    params: [\n    .\n   99      { id: 'errorControl', type: 'control', defaultValue: { $:'label', title: 'error: %$error%', css: '{color: red; font-weight: bold}'} , dynamic: true },\n  100    ],\n  101:   impl :{$: 'group', \n  102:       controls :{$: 'group',\n  103            controls :{$call: 'control' },\n  104            features :{$: 'var', name: '%$dataVariable%', value: '%%'}\n\nC:\\jbart5-ng\\src\\ui\\itemlist-with-groups.js:\n   17      { id: 'features', type: 'feature[]', dynamic: true, flattenArray: true },\n   18    ],\n   19:   impl :{$: 'group', \n   20      title: '%$title%',\n   21      style :{$call: 'style'},\n\nC:\\jbart5-ng\\src\\ui\\itemlist.js:\n   12      { id: 'features', type: 'feature[]', dynamic: true, flattenArray: true },\n   13    ],\n   14:   impl :{$: 'group', \n   15      title: '%$title%',\n   16      style :{$call: 'style'},\n\nC:\\jbart5-ng\\src\\ui\\pulldown-menu.js:\n   88  				$: 'openDialog', \n   89  				style :{$: 'pulldownPopup.mainMenuPopup' }, \n   90: 				content :{$: 'group', \n   91  					controls: ctx => \n   92  						context.params.controls(ctx) \n\nC:\\jbart5-ng\\src\\ui\\tabs.js:\n   57  // jb.component('tabs.accordion',{\n   58  // 	type: 'tabs.style',\n   59: // 	impl :{$: 'group', \n   60  // 		cssClass: 'jb-accordion',\n   61  // 		controls: ctx => jb_rx.concat(ctx.vars.$model.tabs()),\n\nC:\\jbart5-ng\\projects\\hello-world\\hello.ts:\n    3  jb.component('hello-world.main', {\n    4    type: 'control', \n    5:   impl :{$: 'group', \n    6      style :{$: 'group.md-card' }, \n    7      controls: [\n    .\n   22  jb.component('hello-world.form', {\n   23    type: 'control', \n   24:   impl :{$: 'group', \n   25      style :{$: 'group.div' }, \n   26      controls: [\n   ..\n   46  jb.component('hello-world.group', {\n   47    type: 'control', \n   48:   impl :{$: 'group', \n   49      title: 'main', \n   50      style :{$: 'layout.vertical', spacing: 30 }, \n   51      controls: [\n   52:       {$: 'group', \n   53          title: '2.0', \n   54          controls: [\n\nC:\\jbart5-ng\\projects\\jbart-site\\jbart-site.ts:\n    3  jb.component('jbart-site.main', {\n    4    type: 'control', \n    5:   impl :{$: 'group', \n    6      title: 'main', \n    7      style :{$: 'layout.vertical', spacing: '' }, \n    8      controls: [\n    9:       {$: 'group', \n   10          title: 'site header', \n   11          style :{$: 'layout.flex', direction: 'row' }, \n   ..\n   44          features :{$: 'css', css: '{ background-color: #009688}' }\n   45        }, \n   46:       {$: 'group', \n   47          title: 'content', \n   48          style :{$: 'layout.flex', align: 'center' }, \n   ..\n   81          ]\n   82        }, \n   83:       {$: 'group', \n   84          title: 'jbart header', \n   85          style :{$: 'layout.flex', align: 'center', direction: undefined, wrap: true }, \n   ..\n  106              }\n  107            }, \n  108:           {$: 'group', \n  109              title: 'header text', \n  110              style :{$: 'layout.vertical', spacing: '19' }, \n  ...\n  145  jb.component('jbart-site.bb', {\n  146    type: 'control', \n  147:   impl :{$: 'group', \n  148      title: 'bbb', \n  149      controls: [\n\nC:\\jbart5-ng\\projects\\material-demo\\material-demo.js:\n   14  jb.component('material-demo.form', {\n   15    type: 'control', \n   16:   impl :{$: 'group', \n   17      title: 'input', \n   18      style :{$: 'layout.vertical', spacing: '33' }, \n   ..\n   22          databind: '%$person/company%'\n   23        }, \n   24:       {$: 'group', \n   25          title: 'Name', \n   26          style :{$: 'layout.vertical', spacing: '33' }, \n   ..\n   37          ]\n   38        }, \n   39:       {$: 'group', \n   40          title: 'address', \n   41          style :{$: 'layout.vertical' }, \n   ..\n   45          ]\n   46        }, \n   47:       {$: 'group', \n   48          title: 'City State', \n   49          style :{$: 'layout.horizontal' }, \n   ..\n  103  jb.component('material-demo.main', {\n  104    type: 'control', \n  105:   impl :{$: 'group', \n  106      style :{$: 'layout.vertical', spacing: 3 }, \n  107      controls: [\n  108:       {$: 'group', \n  109          title: 'toolbar', \n  110          style :{$: 'layout.horizontal', spacing: 3 }, \n  ...\n  129          ]\n  130        }, \n  131:       {$: 'group', \n  132          title: 'demos', \n  133          style :{$: 'layout.flex' }, \n  ...\n  155              itemVariable: 'item'\n  156            }, \n  157:           {$: 'group', \n  158              title: 'demo', \n  159              style :{$: 'layout.horizontal', spacing: 3 }, \n  160              controls: [\n  161:               {$: 'group', \n  162                  title: 'single demo', \n  163                  controls: [{$: 'material-demo.single-demo' }], \n  164                  features :{$: 'group.watch', data: '%$demo/html%' }\n  165                }, \n  166:               {$: 'group', \n  167                  title: 'editor', \n  168                  controls: [\n\nC:\\jbart5-ng\\projects\\studio\\studio-jb-editor.ts:\n   28    type: 'control', \n   29    params: [{ id: 'path', as: 'string' }], \n   30:   impl :{$: 'group', \n   31      title: 'main', \n   32      style :{$: 'layout.horizontal', spacing: 3 }, \n   ..\n   84          ]\n   85        }, \n   86:       {$: 'group', \n   87          title: 'watch selection', \n   88          controls: [\n   89:           {$: 'group', \n   90              title: 'hide if selection empty', \n   91              controls: [\n   92:               {$: 'group', \n   93                  title: 'watch selection content', \n   94:                 controls :{$: 'group', \n   95                    title: 'wait for probe', \n   96                    controls :{$: 'itemlist', \n   97                      items: '%$probeResult/finalResult%', \n   98                      controls: [\n   99:                       {$: 'group', \n  100                          title: 'in/out', \n  101                          controls: [\n  ...\n  149      { id: 'title', as: 'string'}\n  150    ],\n  151:   impl :{$: 'group', \n  152      title: '%$title%',\n  153      controls :{$: 'tree', cssClass: 'jb-control-tree', \n  ...\n  225    type: 'control', \n  226    params: [{ id: 'path', as: 'string' }], \n  227:   impl :{$: 'group', \n  228      controls: [\n  229        {$: 'dynamic-controls', \n  ...\n  324              cancelLabel: 'Cancel'\n  325            }, \n  326:           content :{$: 'group', \n  327              controls: [\n  328                {$: 'editable-text', \n\nC:\\jbart5-ng\\projects\\studio\\studio-main.ts:\n   11  jb.component('studio.all', {\n   12    type: 'control', \n   13:   impl :{$: 'group', \n   14      style :{$: 'layout.vertical', spacing: '0' }, \n   15      controls: [\n   16:       {$: 'group', \n   17          title: 'top bar', \n   18          style :{$: 'layout.horizontal', spacing: '3' }, \n   ..\n   24              style :{$: 'image.default' }\n   25            }, \n   26:           {$: 'group', \n   27              url: '/projects/studio/css/logo470x200.png', \n   28              title: 'title and menu', \n   ..\n   49                  }\n   50                }, \n   51:               {$: 'group', \n   52                  style :{$: 'layout.horizontal', spacing: 3 }, \n   53                  controls: [\n   ..\n   62          features :{$: 'css', css: '{ height: 90px; border-bottom: 1px #d9d9d9 solid}' }\n   63        }, \n   64:       {$: 'group', \n   65          cssClass: 'studio-widget-placeholder', \n   66          title: 'preview', \n   67          controls :{$: 'studio.renderWidget' }\n   68        }, \n   69:       {$: 'group', \n   70          cssClass: 'studio-footer', \n   71          title: 'pages', \n\nC:\\jbart5-ng\\projects\\studio\\studio-menu.ts:\n    4  jb.component('studio.main-menu', {\n    5    type: 'control', \n    6:   impl :{$: 'group', \n    7      style :{$: 'layout.horizontal', spacing: 3 }, \n    8      controls: [\n    .\n   72            {$: 'pulldown.menu-item', title: 'Field' }, \n   73            {$: 'pulldown.menu-item', title: 'Control' }, \n   74:           {$: 'pulldown.menu-item', title: 'Group' }\n   75          ]\n   76        }, \n\nC:\\jbart5-ng\\projects\\studio\\studio-new-control.ts:\n   32    impl :{$: 'openDialog', \n   33      style :{$: 'dialog.studio-floating' }, \n   34:     content :{$: 'group', \n   35        title: 'itemlist-with-find', \n   36        style :{$: 'layout.vertical', spacing: 3 }, \n   ..\n  111        features :{$: 'dialog-feature.autoFocusOnFirstInput' }\n  112      }, \n  113:     content :{$: 'group', \n  114        controls: [\n  115          {$: 'editable-text', \n  ...\n  129          var profile = {\n  130              type: 'control',\n  131:             impl: { $: 'group', title: ctx.exp('%$dialogData/name%') }\n  132          };\n  133          model.modify(model.newComp, id, { profile: profile }, ctx);\n\nC:\\jbart5-ng\\projects\\studio\\studio-open-project.ts:\n   16  jb.component('studio.choose-project', {\n   17    type: 'control', \n   18:   impl :{$: 'group', \n   19      features: [\n   20        {$: 'group.wait', \n\nC:\\jbart5-ng\\projects\\studio\\studio-popups.ts:\n  135            ]\n  136          }, \n  137:         genericControl :{$: 'group', \n  138            controls: [\n  139              {$: 'editable-number', \n\nC:\\jbart5-ng\\projects\\studio\\studio-properties-menu.ts:\n   26      { id: 'path', as: 'string' }\n   27    ], \n   28:   impl :{$: 'group', \n   29          style :{$: 'layout.horizontal' }, \n   30          controls : [\n   ..\n   87      }, \n   88      style :{$: 'pulldownPopup.contextMenuPopup' }, \n   89:     content :{$: 'group', \n   90        controls: [\n   91            {$: 'pulldown.menu-item', \n\nC:\\jbart5-ng\\projects\\studio\\studio-properties.ts:\n   44      { id: 'path', as: 'string' }\n   45    ], \n   46:   impl :{$: 'group', \n   47      style :{$: 'group.studio-properties-accordion' }, \n   48      controls: [\n   49:       {$: 'group', \n   50          title: { $pipeline: [\n   51            {$: 'studio.val', path: '%$path%' }, \n   ..\n   80          features :{$: 'group.studio-watch-path', path: '%$path%' }\n   81        }, \n   82:       {$: 'group', \n   83          title: { $pipeline: [\n   84            {$: 'studio.val', path: '%$path%' }, \n   ..\n  104    type: 'control',\n  105    params: [ {id: 'path', as: 'string' } ],\n  106:   impl :{$: 'group',\n  107      style :{$: 'property-sheet.studio-properties'},\n  108      features :{$: 'group.studio-watch-path', path: '%$path%'},\n  ...\n  187      { id: 'path', as: 'string' }\n  188    ], \n  189:   impl :{$: 'group', \n  190      title :{$: 'studio.prop-name', path: '%$path%' }, \n  191      features: [\n  ...\n  263      { id: 'path', as: 'string' }\n  264    ], \n  265:   impl :{$: 'group', \n  266      $vars: {\n  267        tgpCtrl :{$: 'object', expanded: true }\n  ...\n  276      ], \n  277      controls: [\n  278:       {$: 'group', \n  279          style :{$: 'layout.horizontal' }, \n  280          controls: [\n  ...\n  319          features :{$: 'css', css: '{ position: relative }' }\n  320        }, \n  321:       {$: 'group', \n  322          controls :{$: 'studio.properties-in-tgp', path: '%$path%' }, \n  323          features: [\n  ...\n  351    type: 'control', \n  352    params: [ {id: 'path', as: 'string' } ], \n  353:   impl :{$: 'group', \n  354      title :{$: 'studio.prop-name', path: '%$path%' }, \n  355      features : [\n  ...\n  377    type: 'control', \n  378    params: [{ id: 'path', as: 'string' }], \n  379:   impl :{$: 'group', \n  380      $vars: {\n  381        tgpCtrl :{$: 'object', expanded: false }\n  382      }, \n  383      controls: [\n  384:       {$: 'group', \n  385          style :{$: 'layout.horizontal' }, \n  386          controls: [\n  ...\n  417          features: [{$: 'css', css: '{ position: relative; margin-left2: -80px }' }]\n  418        }, \n  419:       {$: 'group', \n  420          controls :{$: 'studio.properties-in-tgp', path: '%$path%' }, \n  421          features: [\n  ...\n  443    type: 'control', \n  444    params: [{ id: 'path', as: 'string' }], \n  445:   impl :{$: 'group', \n  446      $vars: {\n  447        arrayCtrl :{$: 'object', expanded: true }\n  ...\n  449      style :{$: 'layout.vertical', spacing: '7' }, \n  450      controls: [\n  451:       {$: 'group', \n  452          title: 'items', \n  453          controls: [\n  454            {$: 'itemlist', \n  455              items :{$: 'studio.array-children', path: '%$path%' }, \n  456:             controls :{$: 'group', \n  457                style :{$: 'property-sheet.studio-plain' }, \n  458                controls :{$: 'studio.property-tgp-in-array', path: '%$arrayItem%' }\n\nC:\\jbart5-ng\\projects\\studio\\studio-style-editor.ts:\n   29    impl :{$: 'openDialog', \n   30      style :{$: 'pulldownPopup.contextMenuPopup' }, \n   31:     content :{$: 'group',\n   32        controls: [\n   33          {$: 'pulldown.menu-item', \n   ..\n   66      { id: 'path', as: 'string' }\n   67    ], \n   68:   impl :{$: 'group', \n   69      style :{$: 'property-sheet.titles-above' }, \n   70      controls: [\n\nC:\\jbart5-ng\\projects\\studio\\studio-suggestions.ts:\n    8    type: 'control', \n    9    params: [{ id: 'path', as: 'string' }], \n   10:   impl :{$: 'group', \n   11      title :{$: 'studio.prop-name', path: '%$path%' }, \n   12      controls: [\n   ..\n   51    type: 'control', \n   52    params: [{ id: 'path', as: 'string' }], \n   53:   impl :{$: 'group', \n   54      controls: [\n   55        {$: 'editable-text', \n\nC:\\jbart5-ng\\projects\\studio\\studio-tgp-model.ts:\n  279  \n  280  	wrapWithGroup(path) {\n  281: 		var result = { $: 'group', controls: [ profileFromPath(path) ] };\n  282  		jb.writeValue(profileRefFromPath(path),result);\n  283  	}\n\nC:\\jbart5-ng\\projects\\studio\\studio-toolbar.ts:\n   20  jb.component('studio.toolbar', {\n   21    type: 'control', \n   22:   impl :{$: 'group', \n   23      style :{$: 'studio-toolbar' }, \n   24      controls: [\n\nC:\\jbart5-ng\\projects\\studio\\studio-tree.ts:\n   24    impl :{$: 'openDialog', \n   25      style :{$: 'pulldownPopup.contextMenuPopup' }, \n   26:     content :{$: 'group', \n   27        controls: [\n   28          {$: 'pulldown.menu-item', \n\nC:\\jbart5-ng\\projects\\studio-helper\\path-tests.js:\n    4  	impl :{$: 'jb-path-test', \n    5  	 	$vars: { tst: 10 },\n    6: 		controlWithMark: {$: 'group', \n    7  			controls :{$: 'label', title: 'hello' } \n    8  		},\n    .\n   16  	 impl :{$: 'jb-path-test', \n   17  	 	$vars: { tst: 10 },\n   18: 		controlWithMark: {$: 'group', \n   19  			controls :{$: 'itemlist', \n   20  				items :{$list: [1,2]},\n   ..\n   31  	 impl :{$: 'jb-path-test', \n   32  	 	$vars: { tst: 10 },\n   33: 		controlWithMark: {$: 'group', \n   34  			controls :{$: 'test.inner-label', $mark: true } \n   35  		},\n   ..\n   50  		{ id: 'ctrl', type: 'control', dynamic: true }\n   51  	],\n   52: 	impl :{$: 'group', controls :{ $call: 'ctrl'} }\n   53  })\n   54  \n   ..\n   56  	 impl :{$: 'jb-path-test', \n   57  	 	$vars: { tst: 10 },\n   58: 		controlWithMark: {$: 'group', \n   59  			controls :{$: 'test.inner-label-template',\n   60  				ctrl :{$: 'label', title: 'hello', $mark: true } \n   ..\n   70  	 impl :{$: 'jb-path-test', \n   71  	 	$vars: { tst: 10 },\n   72: 		controlWithMark: {$: 'group', \n   73  			controls :{$: 'label', title: {$pipeline: ['$mark:hello'] } } \n   74  		},\n   ..\n   82  	 impl :{$: 'jb-path-test', \n   83  	 	$vars: { tst: 10 },\n   84: 		controlWithMark: {$: 'group', \n   85  			controls :{$: 'label', title :{$: 'pipeline', items: ['$mark:hello'] } } \n   86  		},\n   ..\n   94  	 impl :{$: 'jb-path-test', \n   95  	 	$vars: { tst: 10 },\n   96: 		controlWithMark: {$: 'group', \n   97  			controls :{$: 'label', title :{$: 'pipeline', items: '$mark:hello' } } \n   98  		},\n   ..\n  106  	 impl :{$: 'jb-path-test', \n  107  	 	$vars: { tst: 10 },\n  108: 		controlWithMark: {$: 'group', \n  109  			controls :{$: 'button', title : 'hello', action: [ {$: 'goto-url', url: 'google', $mark: true }] } \n  110  		},\n  ...\n  118  	 impl :{$: 'jb-path-test', \n  119  	 	$vars: { tst: 10 },\n  120: 		controlWithMark: {$: 'group', \n  121  			controls :{$: 'label', title : {$:'pipeline', items: ['hello', {$: 'filter', filter :'$mark:%% == \"hello\"'}] }} \n  122  		},\n  ...\n  130  // // 	 impl :{$: 'jb-path-test', \n  131  // 	 	$vars: { tst: 10 },\n  132: // 		controlWithMark: {$: 'group', \n  133  // 			controls :{$: 'label', title :{ $asIs: '$mark:hello'} },\n  134  // 		},\n\nC:\\jbart5-ng\\projects\\studio-helper\\studio-helper.js:\n   11  \n   12  jb.resource('studio-helper','group-with-custom-style',\n   13:   {$: 'group', \n   14      title: 'main', \n   15      style : {$: 'customStyle',\n   ..\n   22    },\n   23      controls : [\n   24:     {$: 'group', title: '2.0', controls : \n   25         [\n   26        { $: 'label', title: '2.1' },\n   ..\n   49    type: 'control', \n   50    params: [{ id: 'path', defaultValue: 'studio-helper-dummy.label' }], \n   51:   impl :{$: 'group', \n   52      $vars: { circuit: 'studio-helper-dummy.label' }, \n   53      title: 'main %', \n   ..\n   79  jb.component('studio-helper.studio-properties', {\n   80    type: 'control', \n   81:   impl :{$: 'group', \n   82      $vars: { circuit: 'studio-helper-dummy.simple-label' }, \n   83      controls :{$: 'studio.properties' , path: 'studio-helper-dummy.simple-label' }, \n   ..\n   95  jb.component('studio-helper.sample-control', {\n   96    type: 'control', \n   97:   impl :{$: 'group', \n   98      title: 'main', \n   99      controls: [\n  100:       {$: 'group', \n  101          title: '2.0', \n  102          controls: [\n  ...\n  116  jb.component('studio-helper.edit-style', {\n  117    type: 'control', \n  118:   impl :{$: 'group', \n  119      controls: [\n  120        {$: 'editable-text', \n  ...\n  146  jb.component('studio-helper.expandable', {\n  147    type: 'control', \n  148:   impl :{$: 'group', \n  149      title: 'expandable', \n  150      style :{$: 'group.expandable' }, \n  ...\n  184  jb.component('studio-helper.group-with-label', {\n  185    type: 'control', \n  186:   impl :{$: 'group', \n  187      controls: [\n  188        {$: 'label', \n  ...\n  199  jb.component('studio-helper.menu-selection', {\n  200    type: 'control', \n  201:   impl: {$: 'group', \n  202      title: 'menu selection', \n  203      features :{$: 'group.menu-keyboard-selection', autoFocus: true }, \n\nC:\\jbart5-ng\\projects\\ui-tests\\md-tests.ts:\n   48    type: 'test',\n   49    impl :{$: 'ng2-ui-test',  \n   50:     control :{$: 'group',\n   51        controls : [\n   52:         {$: 'group',\n   53                controls: [\n   54                  { $: 'editable-text', \n   ..\n  105        style :{$: 'tabs.md-tabs' },\n  106        tabs:[\n  107:         {$: 'group', title: 'tab1', controls :{$: 'label', title: 'in tab1' }},\n  108:         {$: 'group', title: 'tab2', controls :{$: 'label', title: 'in tab2' }},\n  109      ]\n  110    },\n\nC:\\jbart5-ng\\projects\\ui-tests\\ui-tests-old.js:\n   93  \n   94    'expandable-group' :{$: 'ng2-ui-test',  \n   95:     control :{$: 'group', title: 'test1',\n   96        style :{$: 'group.expandable'}, \n   97        controls: \n   ..\n  104    },\n  105    'editable-text-in-md-property-sheet' :{$: 'ng2-ui-test',  \n  106:     control :{$: 'group',\n  107        controls : [\n  108:         {$: 'group',\n  109                controls: [\n  110                  { $: 'editable-text', title: 'name', databind: '%$person/name%', style :{$: 'editable-text.md-input'} },\n  ...\n  144        style :{$: 'tabs.md-tabs' },\n  145        tabs:[\n  146:         {$: 'group', title: 'tab1', controls :{$: 'label', title: 'in tab1' }},\n  147:         {$: 'group', title: 'tab2', controls :{$: 'label', title: 'in tab2' }},\n  148      ]\n  149    },\n  ...\n  166  \n  167  group :{$: 'ng2-ui-test',  \n  168:   control :{$: 'group', controls: \n  169      [ \n  170        { $: 'button', title: 'button1' } ,\n  ...\n  208  // waitFor :{$: 'ng2-ui-test',  \n  209  //   waitFor: '%$wait2sec%',\n  210: //   control :{$: 'group', \n  211  //     controls :{$: 'label', title: 'after %$wait2sec% second delay' },\n  212  //     features: { $: 'group.wait', for: '%$wait2sec%' }\n  ...\n  217  // waitForErrorPromise :{$: 'ng2-ui-test',  \n  218  //   waitFor: '%$err2sec%',\n  219: //   control :{$: 'group', \n  220  //     controls :{$: 'label',  title: 'after %$err2sec% second delay' },\n  221  //     features: { $: 'group.wait', for: '%$err2sec%' }\n  ...\n  240  \n  241  'http-get': {$: 'ng2-ui-test',  \n  242:   control :{$: 'group', \n  243      controls :{$: 'itemlist', \n  244          items: '%$peopleFromUrl%',\n  245:         controls :{$:'group',\n  246            controls: [ \n  247              { $: 'label', title: '%name%' }, \n  ...\n  267      control :{$: 'itemlist',\n  268        items: '%$peopleFromUrlVar%',\n  269:         controls :{$:'group',\n  270            controls: [ \n  271              { $: 'label', title: '%name%' }, \n  ...\n  289  // },\n  290  \n  291: 'itemlist-DD' :{$: 'ng2-ui-test', control :{$: 'group', controls: \n  292    [\n  293      { $: 'itemlist', items: '%$people%', \n  ...\n  314  },\n  315  \n  316: 'itemlist-heading' :{$: 'ng2-ui-test', control :{$: 'group', controls: \n  317    [\n  318      { $: 'itemlist-with-groups', items: '%$people%', \n  ...\n  360  \n  361  itemlistWithAddButton :{$: 'ng2-ui-test',  \n  362:   control: { $: 'group', controls: \n  363      [\n  364        { $: 'itemlist', \n  ...\n  385  \n  386  itemlistWithMD :{$: 'ng2-ui-test',\n  387: control :{$: 'group', \n  388    controls: \n  389      [\n  ...\n  395          ],\n  396        },\n  397:       { $: 'group', \n  398          features :{$: 'group.data', data: '%$globals/selectedPerson%'} , \n  399           controls: [\n  ...\n  443  \n  444  'layout.horizontal' :{$: 'ng2-ui-test',  \n  445:   control :{$: 'group',\n  446        style :{$: 'layout.horizontal' },\n  447        controls: [\n  ...\n  462  \n  463  'editable-text-in-group' :{$: 'ng2-ui-test',  \n  464:   control :{$: 'group',\n  465          controls: [\n  466            { $: 'editable-text', title: 'name', databind: '%$person/name%' },\n  ...\n  473  \n  474  'editable-text-with-jb-val' :{$: 'ng2-ui-test',  \n  475:   control :{$: 'group',\n  476        $vars: {\n  477          a1 : ctx => { return {\n  ...\n  499  \n  500  'property-sheet.growing' :{$: 'ng2-ui-test',  \n  501:   control :{$: 'group',\n  502            style :{$: 'property-sheet.growing'},\n  503            controls: [\n  ...\n  519  \n  520  'property-sheet.style-on-focus' :{$: 'ng2-ui-test',  \n  521:   control :{$: 'group',\n  522            style :{$: 'property-sheet.style-on-focus'},\n  523            controls: [\n  ...\n  545  \n  546  'property-sheet.titles-above' :{$: 'ng2-ui-test',  \n  547:   control :{$: 'group',\n  548      controls : [\n  549:       {$: 'group',\n  550              style :{$: 'property-sheet.titles-above-float-left' },\n  551              controls: [\n  ...\n  561  \n  562  'property-sheet.titles-left' :{$: 'ng2-ui-test',  \n  563:   control :{$: 'group',\n  564      controls : [\n  565:       {$: 'group',\n  566              style :{$: 'property-sheet.titles-left' },\n  567              controls: [\n  ...\n  577  \n  578  'editable-number' :{$: 'ng2-ui-test',  \n  579:   control :{$: 'group', controls: \n  580      [\n  581        {$: 'editable-number', title: 'age',\n  ...\n  594  \n  595  'editable-boolean.all-styles' :{$: 'ng2-ui-test',  \n  596:   control :{$: 'group', controls: \n  597      [\n  598        {$: 'editable-boolean',\n  ...\n  620  \n  621  'editable-boolean-settings' :{$: 'ng2-ui-test',  \n  622:   control :{$: 'group', controls: \n  623      [\n  624        {$: 'editable-boolean',\n  ...\n  636  \n  637  'editable-boolean.expand-collapse' :{$: 'ng2-ui-test',  \n  638:   control :{$: 'group', \n  639    $vars: {\n  640        MyWidget :{$:'object', expanded: true}\n  ...\n  655  \n  656  'code-mirror' :{$: 'ng2-ui-test',  \n  657:   control :{$: 'group', \n  658      $vars: {\n  659        js: { $: 'object', text: 'function f1() { return 15 }'},\n  ...\n  682  \n  683  'prettyPrintComp' :{$: 'ng2-ui-test',  waitForPromise: {$delay: 50},\n  684:   control :{$: 'group', controls: [\n  685        {$: 'text', \n  686            text: ctx => jb_prettyPrintComp('inner-label1-tst',jbart.comps['inner-label1-tst']),\n  ...\n  697  \n  698  picklist :{$: 'ng2-ui-test',  \n  699:   control :{$: 'group', controls: \n  700        [\n  701:         { $: 'group', \n  702              style :{$: 'property-sheet.titles-left' },\n  703              controls :{$: 'picklist', \n  ...\n  716  \n  717  'picklist-groups' :{$: 'ng2-ui-test',  \n  718:   control :{$: 'group', controls: \n  719        [\n  720:         { $: 'group', \n  721              style :{$: 'property-sheet.titles-left' },\n  722              controls :{$: 'picklist',\n  ...\n  758  \n  759  'dynamic-controls' :{$: 'ng2-ui-test', \n  760:   control :{$: 'group',\n  761        style :{$: 'property-sheet.titles-left' },\n  762        controls :{$: 'dynamic-controls', \n  ...\n  771    control :{$: 'tabs',\n  772        tabs:[\n  773:         {$: 'group', title: 'tab1', controls :{$: 'label', title: 'in tab1' }},\n  774:         {$: 'group', title: 'tab2', controls :{$: 'label', title: 'in tab2' }},\n  775      ]\n  776    },\n  ...\n  783  \n  784  'group.accordion' :{$: 'ng2-ui-test', \n  785:   control :{$: 'group',\n  786        style :{$: 'group.accordion'},\n  787        controls:[\n  788:         {$: 'group', title: 'tab1', controls :{$: 'label', title: 'in tab1' }},\n  789:         {$: 'group', title: 'tab2', controls :{$: 'label', title: 'in tab2' }},\n  790      ]\n  791    },\n\nC:\\jbart5-ng\\projects\\ui-tests\\ui-tests.ts:\n   64  jb.component('ui-test.expandable-group', {\n   65    impl :{$: 'ng2-ui-test',  \n   66:     control :{$: 'group', title: 'test1',\n   67        style :{$: 'group.expandable'}, \n   68        controls: \n   ..\n   85  jb.component('ui-test.group', {\n   86    impl :{$: 'ng2-ui-test',  \n   87:   control :{$: 'group', controls: \n   88      [ \n   89        { $: 'button', title: 'button1' } ,\n   ..\n  155  jb.component('ui-test.http-get', {\n  156    impl:{$: 'ng2-ui-test',  \n  157:   control :{$: 'group', \n  158      controls :{$: 'itemlist', \n  159          items: '%$peopleFromUrl%',\n  160:         controls :{$:'group',\n  161            controls: [ \n  162              { $: 'label', title: '%name%' }, \n  ...\n  176  \n  177  jb.component('ui-test.itemlist-DD', {\n  178:   impl :{$: 'ng2-ui-test', control :{$: 'group', controls: \n  179    [\n  180      { $: 'itemlist', items: '%$people%', \n  ...\n  205  \n  206  jb.component('ui-test.itemlist-heading', {\n  207:   impl :{$: 'ng2-ui-test', control :{$: 'group', controls: \n  208    [\n  209      { $: 'itemlist-with-groups', items: '%$people%', \n  ...\n  257  jb.component('ui-test.itemlist-add-button', {\n  258    impl :{$: 'ng2-ui-test',  \n  259:   control: { $: 'group', controls: \n  260      [\n  261        { $: 'itemlist', \n  ...\n  286  jb.component('ui-test.itemlist-MD', {\n  287    impl :{$: 'ng2-ui-test',\n  288: control :{$: 'group', \n  289    controls: \n  290      [\n  ...\n  296          ],\n  297        },\n  298:       { $: 'group', \n  299          features :{$: 'group.data', data: '%$globals/selectedPerson%', watch1: true} , \n  300           controls: [\n  ...\n  352  jb.component('ui-test.layout-horizontal', {\n  353    impl :{$: 'ng2-ui-test',  \n  354:   control :{$: 'group',\n  355        style :{$: 'layout.horizontal' },\n  356        controls: [\n  ...\n  375  jb.component('ui-test.editable-text-in-group', {\n  376    impl :{$: 'ng2-ui-test',  \n  377:   control :{$: 'group',\n  378          controls: [\n  379            { $: 'editable-text', title: 'name', databind: '%$person/name%' },\n  ...\n  388  jb.component('ui-test.editable-text-with-jb-val', {\n  389    impl :{$: 'ng2-ui-test',  \n  390:   control :{$: 'group',\n  391        $vars: {\n  392          a1 : ctx => { return {\n  ...\n  416  jb.component('ui-test.property-sheet.growing', {\n  417    impl :{$: 'ng2-ui-test',  \n  418:   control :{$: 'group',\n  419            style :{$: 'property-sheet.growing'},\n  420            controls: [\n  ...\n  438  jb.component('ui-test.property-sheet.style-on-focus', {\n  439    impl :{$: 'ng2-ui-test',  \n  440:   control :{$: 'group',\n  441            style :{$: 'property-sheet.style-on-focus'},\n  442            controls: [\n  ...\n  466  jb.component('ui-test.property-sheet.titles-above', {\n  467    impl :{$: 'ng2-ui-test',  \n  468:   control :{$: 'group',\n  469      controls : [\n  470:       {$: 'group',\n  471              style :{$: 'property-sheet.titles-above-float-left' },\n  472              controls: [\n  ...\n  484  jb.component('ui-test.property-sheet.titles-left', {\n  485    impl :{$: 'ng2-ui-test',  \n  486:   control :{$: 'group',\n  487      controls : [\n  488:       {$: 'group',\n  489              style :{$: 'property-sheet.titles-left' },\n  490              controls: [\n  ...\n  502  jb.component('ui-test.editable-number', {\n  503    impl :{$: 'ng2-ui-test',  \n  504:   control :{$: 'group', controls: \n  505      [\n  506        {$: 'editable-number', title: 'age',\n  ...\n  521  jb.component('ui-test.editable-boolean.all-styles', {\n  522    impl :{$: 'ng2-ui-test',  \n  523:   control :{$: 'group', controls: \n  524      [\n  525        {$: 'editable-boolean',\n  ...\n  549  jb.component('ui-test.editable-boolean-settings', {\n  550    impl :{$: 'ng2-ui-test',  \n  551:   control :{$: 'group', controls: \n  552      [\n  553        {$: 'editable-boolean',\n  ...\n  567  jb.component('ui-test.editable-boolean.expand-collapse', {\n  568    impl :{$: 'ng2-ui-test',  \n  569:   control :{$: 'group', \n  570    $vars: {\n  571        MyWidget :{$:'object', expanded: true}\n  ...\n  588  jb.component('ui-test.code-mirror', {\n  589    impl :{$: 'ng2-ui-test',  \n  590:   control :{$: 'group', \n  591      $vars: {\n  592        js: { $: 'object', text: 'function f1() { return 15 }'},\n  ...\n  617  jb.component('ui-test.prettyPrintComp', {\n  618    impl :{$: 'ng2-ui-test',  waitForPromise: {$delay: 50},\n  619:   control :{$: 'group', controls: [\n  620        {$: 'text', \n  621            text: ctx => jb_prettyPrintComp('inner-label1-tst',jbart.comps['inner-label1-tst']),\n  ...\n  634  jb.component('ui-test.picklist', {\n  635    impl :{$: 'ng2-ui-test',  \n  636:   control :{$: 'group', controls: \n  637        [\n  638:         { $: 'group', \n  639              style :{$: 'property-sheet.titles-left' },\n  640              controls :{$: 'picklist', \n  ...\n  655  jb.component('ui-test.picklist-groups', {\n  656    impl :{$: 'ng2-ui-test',  \n  657:   control :{$: 'group', controls: \n  658        [\n  659:         { $: 'group', \n  660              style :{$: 'property-sheet.titles-left' },\n  661              controls :{$: 'picklist',\n  ...\n  703  jb.component('ui-test.dynamic-controls', {\n  704    impl :{$: 'ng2-ui-test', \n  705:   control :{$: 'group',\n  706        style :{$: 'property-sheet.titles-left' },\n  707        controls :{$: 'dynamic-controls', \n  ...\n  718    control :{$: 'tabs',\n  719        tabs:[\n  720:         {$: 'group', title: 'tab1', controls :{$: 'label', title: 'in tab1' }},\n  721:         {$: 'group', title: 'tab2', controls :{$: 'label', title: 'in tab2' }},\n  722      ]\n  723    },\n  ...\n  732  jb.component('ui-test.group.accordion', {\n  733    impl :{$: 'ng2-ui-test', \n  734:   control :{$: 'group',\n  735        style :{$: 'group.accordion'},\n  736        controls:[\n  737:         {$: 'group', title: 'tab1', controls :{$: 'label', title: 'in tab1' }},\n  738:         {$: 'group', title: 'tab2', controls :{$: 'label', title: 'in tab2' }},\n  739      ]\n  740    },\n\nC:\\jbart5-ng\\src\\testing\\ui-testers-ctrls.ts:\n    3  jb.component('ui-tests.show-tests', {\n    4  	type: 'control',\n    5: 	impl :{$: 'group',\n    6  		$vars : {\n    7  			module: ctx =>\n    .\n   65  jb.component('ui-tests.single-test', {\n   66  	type: 'control',\n   67: 	impl :{$: 'group',\n   68   		controls: {$: 'itemlog',\n   69  			items: ctx =>\n   ..\n   79  		{ id: 'testResult',as: 'single', defaultValue: '%%'},\n   80  	],\n   81: 	impl :{$: 'group',\n   82  //		layout :{$: 'md-layout', layout: 'row',  },\n   83  		controls: \n   ..\n  117  jb.component('ui-tests.show-one-test-in-project', {\n  118  	type: 'control',\n  119: 	impl :{$: 'group',\n  120  		layout :{$: 'md-layout', layout: 'row',  },\n  121  		controls: \n\nC:\\Dropbox\\mega\\mega.js:\n   15       { id: 'items', as: 'array' }\n   16    ], \n   17:   impl :{$: 'group', \n   18      style :{$: 'property-sheet.titles-left', \n   19        vSpacing: 20, \n   ..\n   25          controlItems: '%$items%', \n   26          itemVariable: 'Fld', \n   27:         genericControl :{$: 'group', \n   28            $vars: {\n   29              fldType: ctx => ctx.exp('%$Fld/$type%').replace('MCSurvey.DynamicForm.DataModel.','').replace(', MCSurvey','')\n   ..\n   39                title: '%$Fld/Text%'\n   40              }, \n   41:             {$: 'group', \n   42:               controls :{$: 'mega.group', title: 'group', items: '%$Fld/Items%' }, \n   43                features: [\n   44                  {$: 'group-item.if', \n\n182 matches across 29 files\n\n\nSearching 128 files for \"'group.style'\" (regex)\n\nC:\\jbart5-ng\\src\\ui\\group.js:\n    1  jbLoadModules(['jb-core','jb-ui','jb-ui/jb-rx']).then(loadedModules => { var jb = loadedModules['jb-core'].jb, jb_ui = loadedModules['jb-ui'], jb_rx = loadedModules['jb-ui/jb-rx'];\n    2  \n    3: jb.type('group.style');\n    4  \n    5  jb.component('group',{\n    .\n    7    params: [\n    8      { id: 'title', as: 'string' , dynamic: true },\n    9:     { id: 'style', type: 'group.style', defaultValue: { $: 'group.section' }, essential: true , dynamic: true },\n   10      { id: 'controls', type: 'control[]', essential: true, flattenArray: true, dynamic: true },\n   11      { id: 'features', type: 'feature[]', dynamic: true },\n   ..\n   81  \n   82  jb.component('group.section', {\n   83:   type: 'group.style',\n   84    impl :{$: 'customStyle',\n   85      template: '<section class=\"jb-group\"><jb_comp *ngFor=\"let ctrl of ctrls\" [comp]=\"ctrl.comp\" [flatten]=\"true\"></jb_comp></section>',\n\nC:\\jbart5-ng\\src\\ui\\itemlist.js:\n   63  \n   64  jb.component('itemlist.ul-li', {\n   65:   type: 'group.style',\n   66    impl :{$: 'customStyle',\n   67      features :{$: 'group.initGroup'},\n\nC:\\jbart5-ng\\src\\ui\\itemlog.js:\n   32  \n   33  jb.component('itemlog.div', {\n   34:   type: 'group.style',\n   35    impl :{$: 'customStyle',\n   36      template: `<div class=\"jb-group jb-itemlog\"><div jb-item *ngFor=\"let item of items\">\n\nC:\\jbart5-ng\\src\\ui\\md-styles\\card-md.ts:\n    6  \n    7  jb.component('group.md-card', {\n    8:   type: 'group.style',\n    9    impl :{$: 'customStyle',\n   10      template: `<div><md-card>\n   ..\n   17  \n   18  jb.component('group.md-card-actions', {\n   19:   type: 'group.style',\n   20    impl :{$: 'customStyle',\n   21      template: `<div><md-card-actions>\n   ..\n   28  \n   29  jb.component('group.md-card-content', {\n   30:   type: 'group.style',\n   31    impl :{$: 'customStyle',\n   32      template: `<div><md-card-content>\n   ..\n   39  \n   40  jb.component('group.md-card-header', {\n   41:   type: 'group.style',\n   42    impl :{$: 'customStyle',\n   43      template: `<div><md-card-header>\n\nC:\\jbart5-ng\\src\\ui\\styles\\group-styles.ts:\n    3  \n    4  jb.component('group.div', {\n    5:   type: 'group.style',\n    6    impl :{$: 'customStyle',\n    7      template: `<div class=\"jb-group\">\n    .\n   13  \n   14  jb.component('group.expandable', {\n   15:   type: 'group.style',\n   16    impl :{$: 'customStyle', \n   17        template: `<section class=\"jb-group\">\n   ..\n   46  \n   47  jb.component('group.accordion', {\n   48:   type: 'group.style',\n   49    impl :{$: 'customStyle', \n   50        template: `<section class=\"jb-group\">\n   ..\n   83  \n   84  jb.component('toolbar.simple', {\n   85:   type: 'group.style',\n   86    impl :{$: 'customStyle', \n   87      features :{$: 'group.initGroup' },\n\nC:\\jbart5-ng\\src\\ui\\styles\\layout-styles.ts:\n    3  \n    4  jb.component('layout.vertical', {\n    5:   type: 'group.style',\n    6    params: [\n    7      { id: 'spacing', as: 'number', defaultValue: 3 }\n    .\n   18  \n   19  jb.component('layout.horizontal', {\n   20:   type: 'group.style',\n   21    params: [\n   22      { id: 'spacing', as: 'number', defaultValue: 3 }\n   ..\n   34  \n   35  jb.component('layout.flex', {\n   36:   type: 'group.style',\n   37    params: [\n   38        { id: 'align', as: 'string', options: ',flex-start,flex-end,center,space-between,space-around' },\n\nC:\\jbart5-ng\\src\\ui\\styles\\property-sheet-styles.ts:\n    2  \n    3  jb.component('property-sheet.titles-above', {\n    4:   type: 'group.style',\n    5    params: [\n    6      { id: 'spacing', as: 'number', defaultValue: 20 }\n    .\n   30  \n   31  jb.component('property-sheet.titles-above-float-left', {\n   32:   type: 'group.style',\n   33    params: [\n   34      { id: 'spacing', as: 'number', defaultValue: 20 },\n   ..\n   63  \n   64  jb.component('property-sheet.titles-left', {\n   65:   type: 'group.style',\n   66    params: [\n   67      { id: 'vSpacing', as: 'number', defaultValue: 20 },\n   ..\n   93  \n   94  jb.component('property-sheet.style-on-focus', {\n   95:   type: 'group.style',\n   96    params: [\n   97      { id: 'vSpacing', as: 'number', defaultValue: 20 },\n   ..\n  166  \n  167  jb.component('property-sheet.growing', {\n  168:   type: 'group.style',\n  169    params: [\n  170      { id: 'vSpacing', as: 'number', defaultValue: 20 },\n\nC:\\jbart5-ng\\projects\\studio\\studio-styles.ts:\n   90  \n   91  jb.component('property-sheet.studio-properties', {\n   92:   type: 'group.style', \n   93    impl :{$: 'customStyle', \n   94      features :{$: 'group.initGroup' }, \n   ..\n  135  \n  136  jb.component('property-sheet.studio-plain', {\n  137:   type: 'group.style', \n  138    impl :{$: 'customStyle', \n  139      features :{$: 'group.initGroup' }, \n  ...\n  280  \n  281  jb.component('group.studio-properties-accordion', {\n  282:   type: 'group.style', \n  283    impl :{$: 'customStyle', \n  284      template: `<section class=\"jb-group\">\n\nC:\\jbart5-ng\\projects\\studio\\studio-toolbar.ts:\n  118  \n  119  jb.component('studio-toolbar', {\n  120:   type: 'group.style',\n  121    impl :{$: 'customStyle', \n  122      features :{$: 'group.initGroup' },\n\n25 matches across 9 files\n\n\nSearching 128 files for \"angular2-materi\" (regex)\n\nC:\\jbart5-ng\\src\\ui\\jb-ui.ts:\n    6  \n    7  import { CommonModule, NgClass,NgStyle} from '@angular/common';\n    8: // import {PORTAL_DIRECTIVES} from '@angular2-material/core/portal/portal-directives'; // bug fix for @angular2-material\n    9: // import {MD_RIPPLE_DIRECTIVES} from '@angular2-material/core/ripple/ripple'; // bug fix for @angular2-material\n   10  \n   11  // import * as jb_rx from 'jb-ui/jb-rx';\n\nC:\\jbart5-ng\\src\\ui\\md-styles\\button-md.ts:\n    1  import {jb} from 'jb-core';\n    2  import * as jb_ui from 'jb-ui';\n    3: import {MdButton} from '@angular2-material/button/button.js';\n    4: import {MdIcon} from '@angular2-material/icon/icon.js';\n    5: import {MdIconRegistry} from '@angular2-material/icon/icon-registry';\n    6  \n    7: import {PORTAL_DIRECTIVES} from '@angular2-material/core/portal/portal-directives'; // bug fix for @angular2-material\n    8: import {MD_RIPPLE_DIRECTIVES} from '@angular2-material/core/ripple/ripple'; // bug fix for @angular2-material\n    9  \n   10  jb_ui.registerDirectives({MdButton: MdButton,MdIcon: MdIcon, PORTAL_DIRECTIVES:PORTAL_DIRECTIVES,MD_RIPPLE_DIRECTIVES:MD_RIPPLE_DIRECTIVES});\n\nC:\\jbart5-ng\\src\\ui\\md-styles\\card-md.ts:\n    1  import {jb} from 'jb-core';\n    2  import * as jb_ui from 'jb-ui';\n    3: import {MD_CARD_DIRECTIVES} from '@angular2-material/card/card.js';\n    4  \n    5  jb_ui.registerDirectives({MD_CARD_DIRECTIVES: MD_CARD_DIRECTIVES });\n\nC:\\jbart5-ng\\src\\ui\\md-styles\\dialog-md.ts:\n    1  import {jb} from 'jb-core';\n    2: import {MdButton} from '@angular2-material/button/button.js';\n    3  \n    4  jb.component('dialog.md-dialog-ok-cancel', {\n\nC:\\jbart5-ng\\src\\ui\\md-styles\\editable-boolean-md.ts:\n    2  import * as jb_ui from 'jb-ui';\n    3  \n    4: import {MdSlideToggle} from '@angular2-material/slide-toggle/slide-toggle.js';\n    5  \n    6  jb_ui.registerDirectives({MdSlideToggle: MdSlideToggle});\n\nC:\\jbart5-ng\\src\\ui\\md-styles\\input-md.ts:\n    2  import * as jb_ui from 'jb-ui';\n    3  \n    4: import {MdInput} from '@angular2-material/input/input.js';\n    5  jb_ui.registerDirectives({MdInput: MdInput});\n    6  \n\nC:\\jbart5-ng\\src\\ui\\md-styles\\sidenav-md.ts:\n    2  import * as jb_ui from 'jb-ui';\n    3  \n    4: import {MD_SIDENAV_DIRECTIVES} from '@angular2-material/sidenav/sidenav';\n    5  \n    6  jb_ui.registerDirectives({MD_SIDENAV_DIRECTIVES: MD_SIDENAV_DIRECTIVES});\n\nC:\\jbart5-ng\\src\\ui\\md-styles\\tabs-md.ts:\n    2  import * as jb_ui from 'jb-ui';\n    3  \n    4: import {MD_TABS_DIRECTIVES,TABS_INTERNAL_DIRECTIVES} from '@angular2-material/tabs/tabs.js';\n    5: import {MdToolbar} from '@angular2-material/toolbar/toolbar';\n    6  \n    7  \n\nC:\\jbart5-ng\\index.html:\n   27    },\n   28          packages: {        \n   29: 'node_modules/@angular2-material/core': {\n   30    format: 'cjs',\n   31    defaultExtension: 'js',\n   32    main: 'core.js'\n   33  },\n   34: 'node_modules/@angular2-material/button': {\n   35    format: 'cjs',\n   36    defaultExtension: 'js',\n\nC:\\jbart5-ng\\build\\ng2materialDemo.js:\n    9    },\n   10    ng: {\n   11:     src: ['node_modules/@angular/**/bundles/*.js', 'node_modules/@angular2-material/**/*.js' ],\n   12      dest: target,\n   13    },\n\nC:\\jbart5-ng\\projects\\material-demo\\all-readmes.js:\n    1: jb_resource('material-demo','readmes',[{\"id\":\"button\",\"content\":\"# md-button\\r\\n\\r\\n`md-button` is an HTML `<button>` or `<a>` tag enhanced with styling and animation to match the\\r\\n[Material Design button spec](https://www.google.com/design/spec/components/buttons.html).\\r\\n\\r\\nUsers should employ a button element (`<button>`) when clicking triggers some action in the current\\r\\nview *without navigating*. An anchor element (`<a>`) should be used when clicking *navigates*\\r\\nthe user to another URL. Depending on which element is used, the component will either be an\\r\\ninstance of `MdButton` or `MdAnchor`. Visually, the two are identical.\\r\\n\\r\\n\\r\\n### Button types\\r\\n\\r\\nThere are five types of buttons:\\r\\n 1. Flat buttons - `md-button`\\r\\n    * Rectangular button\\r\\n    * Defaults to white background\\r\\n    * No box shadow\\r\\n 2. Raised buttons - `md-raised-button`\\r\\n    * Rectangular button\\r\\n    * Defaults to white background\\r\\n    * Box shadow applied\\r\\n 3. Icon buttons - `md-icon-button`\\r\\n    * Circular button\\r\\n    * Transparent background\\r\\n    * 40 by 40 px\\r\\n 4. Floating Action Buttons (FABs) - `md-fab`\\r\\n    * Circular button\\r\\n    * Defaults background to \\\"accent\\\" palette defined in theme\\r\\n    * Box shadow applied\\r\\n    * 56 by 56 px\\r\\n 5. Mini Floating Action Buttons (Mini FABs) - `md-mini-fab`\\r\\n    * Circular button\\r\\n    * Defaults background to \\\"accent\\\" palette defined in theme\\r\\n    * Box shadow applied\\r\\n    * 40 by 40 px\\r\\n\\r\\nEach is an attribute directive that you can add to a `button` or `a` tag.  You can provide custom content to the button by inserting it\\r\\nbetween the tags, as you would with a normal button.\\r\\n\\r\\nExample:\\r\\n\\r\\n ```html\\r\\n<button md-button>FLAT</button>\\r\\n<button md-raised-button>RAISED</button>\\r\\n<button md-icon-button>\\r\\n    <md-icon class=\\\"md-24\\\">favorite</md-icon>\\r\\n</button>\\r\\n<button md-fab>\\r\\n    <md-icon class=\\\"md-24\\\">add</md-icon>\\r\\n</button>\\r\\n<button md-mini-fab>\\r\\n    <md-icon class=\\\"md-24\\\">add</md-icon>\\r\\n</button>\\r\\n ```\\r\\n\\r\\nOutput:\\r\\n\\r\\n<img src=\\\"https://material.angularjs.org/material2_assets/buttons/basic-buttons.png\\\">\\r\\n\\r\\n### Theming\\r\\n\\r\\nAll button types can be themed to match your \\\"primary\\\" palette, your \\\"accent\\\" palette, or your \\\"warn\\\" palette using the `color` attribute.\\r\\nSimply pass in the palette name.\\r\\n\\r\\nIn flat buttons, the palette chosen will affect the text color, while in other buttons, it affects the background.\\r\\n\\r\\nExample:\\r\\n\\r\\n ```html\\r\\n<button md-raised-button color=\\\"primary\\\">PRIMARY</button>\\r\\n<button md-raised-button color=\\\"accent\\\">ACCENT</button>\\r\\n<button md-raised-button color=\\\"warn\\\">WARN</button>\\r\\n ```\\r\\n\\r\\nOutput:\\r\\n\\r\\n<img src=\\\"https://material.angularjs.org/material2_assets/buttons/colored-buttons.png\\\">\\r\\n\\r\\n### Disabling\\r\\n\\r\\nYou can disable any button type through the native `disabled` property.  You can add it directly, or bind it to a property on your\\r\\ncomponent class by adding `[disabled]=\\\"isDisabled\\\"` given that the `isDisabled`\\r\\nproperty exists.\\r\\n\\r\\n```html\\r\\n<button md-button disabled>OFF</button>\\r\\n<button md-raised-button [disabled]=\\\"isDisabled\\\">OFF</button>\\r\\n<button md-mini-fab [disabled]=\\\"isDisabled\\\"><md-icon>check</md-icon></button>\\r\\n```\\r\\n\\r\\nOutput:\\r\\n\\r\\n<img src=\\\"https://material.angularjs.org/material2_assets/buttons/disabled-buttons.png\\\">\\r\\n\\r\\n### Accessibility\\r\\n\\r\\n * In high contrast mode, a strong border is added to the button to make it easier to see.\\r\\n * Button focus events originating from the keyboard will retain focus styles, while button focus events from the mouse will not.\\r\\n * As `md-button` is added to an existing `button` or `a` tag, it enjoys all the accessibility natively built into these elements.\\r\\n\\r\\n\\r\\n### Upcoming work\\r\\n\\r\\nWe will also be adding ink ripples to buttons in an upcoming milestone.\\r\\n\\r\\n### API Summary\\r\\n\\r\\nProperties:\\r\\n\\r\\n| Name | Type | Description |\\r\\n| --- | --- | --- |\\r\\n| `color` | `\\\"primary\\\"|\\\"accent\\\"|\\\"warn\\\"` | The color palette of the button\\r\\n| `disabled` | boolean | Whether or not the button is disabled\\r\\n| `disableRipple` | boolean | Whether the ripple effect when the button is clicked should be disabled\\r\\n\"},{\"id\":\"button-toggle\",\"content\":\"# md-button-toggle\\r\\n\\r\\n`MdButtonToggle` is a group of buttons that can be toggled.\\r\\nThere are two modes, `multiple` and `exclusive`.\\r\\nWhen in 'exclusive' mode, only one button can be selected at a time (like radio buttons).\\r\\nWhen in 'multiple' mode, multiple buttons can be selected at once (like checkboxes).\\r\\nYou can read more about button toggles in the\\r\\n[Material Design spec](https://material.google.com/components/buttons.html#buttons-toggle-buttons).\\r\\n\\r\\n## Usage\\r\\n\\r\\n### Setup\\r\\n\\r\\nImporting the module:\\r\\n```ts\\r\\n @NgModule({\\r\\n    imports: [MdButtonToggleModule.forRoot()],\\r\\n    ...\\r\\n })\\r\\n export class MyAppModule { }\\r\\n```\\r\\n\\r\\n### Basic Usage\\r\\n\\r\\n`md-button-toggle` can be used on its own and acts as a checkbox.\\r\\n\\r\\n```html\\r\\n<md-button-toggle>Bold</md-button-toggle>\\r\\n```\\r\\n\\r\\nOutput:\\r\\n\\r\\n![Basic Toggle Button Example](https://material.angularjs.org/material2_assets/button-toggle/basic-toggle.png)\\r\\n\\r\\n### Exclusive Selection\\r\\n\\r\\n`md-button-toggle` can be used in an exclusive selection group when surrounded by\\r\\n`md-button-toggle-group`. This styles all buttons within the group to appear as a single\\r\\ngroup of button toggles and allows only one button toggle to be selected at a time.\\r\\n\\r\\n```html\\r\\n<md-button-toggle-group name=\\\"alignment\\\">\\r\\n    <md-button-toggle value=\\\"left\\\"><md-icon>format_align_left</md-icon></md-button-toggle>\\r\\n    <md-button-toggle value=\\\"center\\\"><md-icon>format_align_center</md-icon></md-button-toggle>\\r\\n    <md-button-toggle value=\\\"right\\\"><md-icon>format_align_right</md-icon></md-button-toggle>\\r\\n    <md-button-toggle value=\\\"justify\\\"><md-icon>format_align_justify</md-icon></md-button-toggle>\\r\\n</md-button-toggle-group>\\r\\n```\\r\\n\\r\\nOutput:\\r\\n\\r\\n![Exclusive Toggle Button Example](https://material.angularjs.org/material2_assets/button-toggle/exclusive-toggle.png)\\r\\n\\r\\n### Multiple Selection\\r\\n\\r\\n`md-button-toggle` can be used in a multiple selection group when surrounded by\\r\\n`md-button-toggle-group multiple`. This styles all buttons within the group to appear as a single\\r\\ngroup of button toggles.\\r\\n\\r\\n```html\\r\\n<md-button-toggle-group multiple>\\r\\n    <md-button-toggle>Flour</md-button-toggle>\\r\\n    <md-button-toggle>Eggs</md-button-toggle>\\r\\n    <md-button-toggle>Sugar</md-button-toggle>\\r\\n    <md-button-toggle>Milk</md-button-toggle>\\r\\n</md-button-toggle-group>\\r\\n```\\r\\n\\r\\nOutput:\\r\\n\\r\\n![Multiple Toggle Button Example](https://material.angularjs.org/material2_assets/button-toggle/multi-toggle.png)\\r\\n\\r\\n## Dynamic Exclusive Selection\\r\\n\\r\\n`md-button-toggle`s can be used with `ngModel` to dynamically create groups and update the value for\\r\\na group.\\r\\n\\r\\n```html\\r\\n<md-button-toggle-group name=\\\"pies\\\" [(ngModel)]=\\\"favoritePie\\\">\\r\\n    <md-button-toggle *ngFor=\\\"let pie of pieOptions\\\" [value]=\\\"pie\\\">\\r\\n        {{pie}}\\r\\n    </md-button-toggle>\\r\\n</md-button-toggle-group>\\r\\n<p>Your favorite type of pie is: {{favoritePie}}</p>\\r\\n```\\r\\n\\r\\n### Disabled Button Toggle\\r\\n\\r\\n`md-button-toggle-group` and `md-button-toggle` can both be disabled by adding a `disabled`\\r\\nattribute to either one. Adding `disabled` to an exclusive group or a multiple group will disable\\r\\nthe entire group. Adding `disabled` to a single toggle will disable that toggle.\\r\\n\\r\\n```html\\r\\n<md-button-toggle-group disabled>\\r\\n    <md-button-toggle value=\\\"one\\\">One</md-button-toggle>\\r\\n    <md-button-toggle value=\\\"two\\\">Two</md-button-toggle>\\r\\n    <md-button-toggle value=\\\"three\\\">Three</md-button-toggle>\\r\\n</md-button-toggle-group>\\r\\n\\r\\n<md-button-toggle-group>\\r\\n    <md-button-toggle value=\\\"red\\\" disabled>Red</md-button-toggle>\\r\\n    <md-button-toggle value=\\\"blue\\\">Blue</md-button-toggle>\\r\\n</md-button-toggle-group>\\r\\n```\\r\\n\\r\\nOutput:\\r\\n\\r\\n![Disabled Toggle Buttons Example](https://material.angularjs.org/material2_assets/button-toggle/disabled-toggles.png)\\r\\n\\r\\n## `<md-button-toggle>`\\r\\n\\r\\n### Bound Properties\\r\\n\\r\\n| Name | Type | Description |\\r\\n| --- | --- | --- |\\r\\n| `id` | string | The unique ID of the toggle. IDs are generated by default when not specified. |\\r\\n| `name` | string | Optional, defaults to parent group name if one exists for exclusive selection toggles, otherwise null. This is used to differentiate between different groups. |\\r\\n| `value` | any | Value of the toggle. Only used when in a group to determine which are selected. |\\r\\n| `checked` | boolean | Optional, default = `false`. Whether or not the toggle is checked. |\\r\\n| `disabled` | boolean | Optional, default = `false`. Whether or not the toggle is disabled |\\r\\n\\r\\n### Events\\r\\n\\r\\n| Name | Description |\\r\\n| --- | --- |\\r\\n| `change` | Emitted when the `checked` value is changed. |\\r\\n\\r\\n## `<md-button-toggle-group>`\\r\\n\\r\\n### Bound Properties\\r\\n\\r\\n| Name | Type | Description |\\r\\n| --- | --- | --- |\\r\\n| `name` | string | Optional, the name of the group. |\\r\\n| `disabled` | boolean | Optional, default = `false`. |\\r\\n| `value` | any | The current value for the group. Will be set to the value of the selected toggle or a list of values from the selected toggles. |\\r\\n| `selected` | `mdButtonToggle` | The current selected toggle or a list of the selected toggles. |\\r\\n\\r\\n### Attributes\\r\\n\\r\\n| Name | Type | Description |\\r\\n| --- | --- | --- |\\r\\n| `multiple` | boolean | Optional, default = `false`. Whether or not the group allows multiple selection. |\\r\\n\\r\\n### Events\\r\\n\\r\\n| Name | Description |\\r\\n| --- | --- |\\r\\n| `change` | Emitted when the `value` of the group changes. |\\r\\n\"},{\"id\":\"card\",\"content\":\"# md-card\\r\\n\\r\\n`md-card` is a content container component that conforms to the spec of a Material Design card.\\r\\n\\r\\nSee plunker example [here](http://plnkr.co/edit/pkUNGMXPcf8RXKapXNXQ?p=preview).\\r\\n\\r\\n## Usage\\r\\n\\r\\nSimply add your content between `md-card` tags to consume basic card styles like box-shadow and default padding.\\r\\n\\r\\n```html\\r\\n<md-card>\\r\\n   Basic card.\\r\\n</md-card>\\r\\n```\\r\\n\\r\\nOutput:\\r\\n\\r\\n<img src=\\\"https://material.angularjs.org/material2_assets/cards/basic-card-min.png\\\">\\r\\n\\r\\n### Preset sections \\r\\n\\r\\nWe also provide a number of preset sections that you can mix and match within the `md-card` tags. \\r\\n\\r\\n  * `<md-card-title>`: adds styles for a title\\r\\n  * `<md-card-subtitle>`: adds styles for a subtitle\\r\\n  * `<md-card-content>`: main content section, intended for blocks of text\\r\\n  * `<img md-card-image>`: stretches image to container width\\r\\n  * `<md-card-actions>`: wraps and styles buttons\\r\\n  * `<md-card-footer>`: anchors section to bottom of card (e.g progress bar)\\r\\n\\r\\nExample markup for a card with section presets:\\r\\n\\r\\n```html\\r\\n<md-card>\\r\\n   <md-card-subtitle>Subtitle first</md-card-subtitle>\\r\\n   <md-card-title>Card with title</md-card-title>   \\r\\n   <md-card-content>\\r\\n        <p>This is supporting text.</p>\\r\\n        <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do \\r\\n        tempor incididunt ut labore et dolore magna aliqua. Ut enim ad</p>\\r\\n   </md-card-content>\\r\\n   <md-card-actions>\\r\\n        <button md-button>LIKE</button>\\r\\n        <button md-button>SHARE</button>\\r\\n   </md-card-actions>\\r\\n</md-card>\\r\\n```\\r\\n\\r\\nOutput:\\r\\n\\r\\n<img src=\\\"https://material.angularjs.org/material2_assets/cards/sections-card-min.png\\\">\\r\\n\\r\\n#### Preset shortcuts\\r\\n\\r\\n`md-card-actions` has a few layout shortcuts. You can add `align=\\\"end\\\"` to align the buttons at the end of\\r\\nthe main axis (flex-end). The default is `align=\\\"start\\\"` (flex-start).\\r\\n\\r\\n### Preset layouts\\r\\n\\r\\nYou can also leverage preset layouts that format some of the sections together.\\r\\n\\r\\n#### `<md-card-header>`\\r\\n\\r\\nFormats the following sections into a header:\\r\\n\\r\\n  * `<md-card-title>`: title to format within header\\r\\n  * `<md-card-subtitle>`: subtitle to format within header\\r\\n  * `<img md-card-avatar>`: image to use for avatar\\r\\n    \\r\\nExample markup for a card with a header:\\r\\n\\r\\n```html\\r\\n<md-card>\\r\\n   <md-card-header>\\r\\n      <img md-card-avatar src=\\\"path/to/img.png\\\">\\r\\n      <md-card-title>Header title</md-card-title>\\r\\n      <md-card-subtitle>Header subtitle</md-card-subtitle>\\r\\n   </md-card-header>\\r\\n   <img md-card-image src=\\\"path/to/img.png\\\">\\r\\n   <md-card-content>\\r\\n      <p>Here is some more content</p>\\r\\n   </md-card-content>\\r\\n</md-card>\\r\\n```\\r\\n\\r\\nOutput:\\r\\n\\r\\n<img src=\\\"https://material.angularjs.org/material2_assets/cards/header-card-min.png\\\">    \\r\\n    \\r\\n#### `<md-card-title-group>`\\r\\n\\r\\nGroups the following sections together:\\r\\n\\r\\n  * `<md-card-title>`: title to format within group\\r\\n  * `<md-card-subtitle>`: subtitle to format within group\\r\\n  * One of the following image sizes:\\r\\n    * `<img md-card-sm-image>`\\r\\n    * `<img md-card-md-image>`\\r\\n    * `<img md-card-lg-image>`\\r\\n\\r\\nExample markup for a card with title-group layout:\\r\\n\\r\\n```html\\r\\n<md-card>\\r\\n   <md-card-title-group>\\r\\n      <img md-card-sm-image src=\\\"path/to/img.png\\\">\\r\\n      <md-card-title>Card with title</md-card-title>\\r\\n      <md-card-subtitle>Subtitle</md-card-subtitle>\\r\\n   </md-card-title-group>\\r\\n</md-card>\\r\\n```\\r\\n\\r\\nOutput:\\r\\n\\r\\n<img src=\\\"https://material.angularjs.org/material2_assets/cards/title-group-card-min.png\\\">\"},{\"id\":\"checkbox\",\"content\":\"# md-checkbox\\r\\n\\r\\n`md-checkbox` is a Material Design selection control that allows users to make a binary choice for\\r\\na predetermined conditioned. It is modeled after the browser's native checkbox element, and behaves\\r\\nin the same way. Similar to the native checkbox element, it supports an indeterminate state for\\r\\n\\\"mixed\\\" checkboxes.\\r\\n\\r\\nA demo of the checkbox can be found at https://plnkr.co/edit/P7qce8lN9n2flS6kBhDy?p=preview.\\r\\n\\r\\n## Usage\\r\\n\\r\\n### Basic Usage\\r\\n\\r\\n`md-checkbox` can be used anywhere a normal checkbox would be used, and in the same way.\\r\\n\\r\\n```html\\r\\n<ul>\\r\\n  <li *ngFor=\\\"let todo of todos\\\">\\r\\n    <md-checkbox [checked]=\\\"todo.completed\\\"\\r\\n                 (change)=\\\"todo.completed = $event\\\">\\r\\n      {{todo.name}}\\r\\n    </md-checkbox>\\r\\n  </li>\\r\\n</ul>\\r\\n```\\r\\n\\r\\n### Usage within Forms\\r\\n\\r\\nIn addition to supporting native checkbox functionality, `md-checkbox` also supports `[(ngModel)]`\\r\\nfor use within forms.\\r\\n\\r\\n```html\\r\\n<form (submit)=\\\"saveUser()\\\">\\r\\n  <!-- Form fields... -->\\r\\n  <div>\\r\\n    <md-checkbox [(ngModel)]=\\\"user.agreesToTOS\\\">\\r\\n      I have read and agree to the terms of service.\\r\\n    </md-checkbox>\\r\\n  </div>\\r\\n  <button type=\\\"submit\\\" [disabled]=\\\"!user.agreesToTOS\\\">Sign Up</button>\\r\\n</form>\\r\\n```\\r\\n\\r\\n### Indeterminate Checkboxes\\r\\n\\r\\nIndeterminate checkboxes are useful when a checkbox needs to be in a \\\"mixed\\\" state\\r\\n\\r\\n```html\\r\\n<md-checkbox [checked]=\\\"false\\\"\\r\\n             [indeterminate]=\\\"isIndeterminate\\\"\\r\\n             (change)=\\\"isIndeterminate = false\\\">\\r\\n  Click the Button Below to Make Me Indeterminate.\\r\\n</md-checkbox>\\r\\n<button type=\\\"button\\\" (click)=\\\"isIndeterminate = true\\\">\\r\\n  Make Indeterminate\\r\\n</button>\\r\\n```\\r\\n\\r\\n### Alignment\\r\\n\\r\\nNote that checkboxes can be aligned to come at the \\\"start\\\" or the \\\"end\\\" of its corresponding label.\\r\\n\\r\\n```html\\r\\n<md-checkbox [checked]=\\\"true\\\" align=\\\"end\\\">\\r\\n  I come after my label.\\r\\n</md-checkbox>\\r\\n```\\r\\n\\r\\nNote that this alignment is preserved within RTL layouts.\\r\\n\\r\\n### Accessibility\\r\\n\\r\\nBy default, `md-checkbox` provides all the accessibility attributes needed. It also supports\\r\\nkeyboard navigation and toggling via the spacebar. However, you can provide an `aria-label` to the\\r\\ncheckbox if you do not wish to have any label text.\\r\\n\\r\\n```html\\r\\n<md-checkbox [checked]=\\\"false\\\" aria-label=\\\"My standalone checkbox\\\"></md-checkbox>\\r\\n```\\r\\n\"},{\"id\":\"core\",\"content\":\"Core library code for other `@angular2-material` components.\\r\\nThis should be added as a dependency for any project using the components.\\r\\n\"},{\"id\":\"dialog\",\"content\":\"\"},{\"id\":\"grid-list\",\"content\":\"# md-grid-list\\r\\n\\r\\n`md-grid-list` is an alternative list view that arranges cells into grid-based layout. \\r\\nSee Material Design spec [here](https://www.google.com/design/spec/components/grid-lists.html).\\r\\n\\r\\n## Usage\\r\\n\\r\\n### Simple grid list\\r\\n\\r\\nTo use `md-grid-list`, import the MdGridList module into your application's NgModule:\\r\\n\\r\\n*my-app-module.ts*\\r\\n```ts\\r\\nimport {MdGridListModule} from '@angular2-material/grid-list';\\r\\n\\r\\n@NgModule({\\r\\n  imports: [MdGridListModule.forRoot()],\\r\\n  ...\\r\\n})\\r\\nexport class MyAppModule {}\\r\\n```\\r\\n\\r\\nIn your template, create an `md-grid-list` element and specify the number of columns you want for\\r\\nyour grid using the `cols` property (this is the only mandatory attribute). \\r\\n\\r\\nYou can define each tile using an `md-grid-tile` element, passing any tile content between its tags.\\r\\n\\r\\nTiles are greedily placed in the first position of the grid that fits them, so row count depends on \\r\\nhow many tiles can fit in each row, given the col count and the colspan/rowspan of each tile.\\r\\n\\r\\n```html\\r\\n<md-grid-list cols=\\\"4\\\" [style.background]=\\\"'lightblue'\\\">\\r\\n   <md-grid-tile>One</md-grid-tile>\\r\\n   <md-grid-tile>Two</md-grid-tile>\\r\\n   <md-grid-tile>Three</md-grid-tile>\\r\\n   <md-grid-tile>Four</md-grid-tile>\\r\\n</md-grid-list>\\r\\n```\\r\\n\\r\\nOutput:\\r\\n\\r\\n<img src=\\\"https://material.angularjs.org/material2_assets/grid-list/basic-grid-list.png\\\">\\r\\n\\r\\n## Grid list config\\r\\n\\r\\n####`cols`\\r\\n\\r\\nThe `cols` property controls the number of columns displayed in your grid. It must be set or the \\r\\ngrid list will not be able to generate your layout.\\r\\n\\r\\nEx: `<md-grid-list cols=\\\"3\\\">...`\\r\\n\\r\\nDefault: There is no reasonable default value for this, so if it is unspecified, the grid list will \\r\\nthrow an error.\\r\\n\\r\\n####`rowHeight`\\r\\n\\r\\nRow height for the list can be calculated in three ways:\\r\\n\\r\\n1. **Fixed height**: The height can be in `px`, `em`, or `rem`.  If no units are specified, `px` \\r\\nunits are assumed. \\r\\n   \\r\\n   Ex: `<md-grid-list cols=\\\"3\\\" rowHeight=\\\"100px\\\">...`\\r\\n        \\r\\n2. **Ratio**: This ratio is width:height, and must be passed in with a colon, not a decimal.\\r\\n\\r\\n   Ex: `<md-grid-list cols=\\\"3\\\" rowHeight=\\\"4:3\\\">...`.\\r\\n        \\r\\n3. **Fit**:  This mode automatically divides the available height by the number of rows.  Please note\\r\\nthe height of the grid-list or its container must be set.  \\r\\n\\r\\n   Ex: `<md-grid-list cols=\\\"3\\\" rowHeight=\\\"fit\\\">...`\\r\\n\\r\\nDefaults to a 1:1 ratio of width:height. \\r\\n        \\r\\n####`gutterSize`\\r\\n\\r\\nGutter size can be set to any `px`, `em`, or `rem` value with the `gutterSize` property.  If no \\r\\nunits are specified, `px` units are assumed.\\r\\n\\r\\nEx: `<md-grid-list cols=\\\"3\\\" gutterSize=\\\"4px\\\">...`\\r\\n\\r\\nDefaults to `1px`.\\r\\n        \\r\\n## Grid tile config\\r\\n\\r\\nYou can set the rowspan and colspan of each tile individually, using the `rowspan` and `colspan` \\r\\nproperties.  If not set, they both default to `1`.\\r\\n\\r\\n```html\\r\\n<md-grid-list cols=\\\"4\\\" rowHeight=\\\"100px\\\">\\r\\n  <md-grid-tile *ngFor=\\\"let tile of tiles\\\" [colspan]=\\\"tile.cols\\\" [rowspan]=\\\"tile.rows\\\"\\r\\n  [style.background]=\\\"tile.color\\\">\\r\\n    {{tile.text}}\\r\\n  </md-grid-tile>\\r\\n</md-grid-list>\\r\\n```\\r\\n\\r\\n```javascript\\r\\n...\\r\\nexport class MyComp {\\r\\n  tiles: any[] = [\\r\\n    {text: 'One', cols: 3, rows: 1, color: 'lightblue'},\\r\\n    {text: 'Two', cols: 1, rows: 2, color: 'lightgreen'},\\r\\n    {text: 'Three', cols: 1, rows: 1, color: 'lightpink'},\\r\\n    {text: 'Four', cols: 2, rows: 1, color: '#DDBDF1'},\\r\\n  ];\\r\\n}\\r\\n```\\r\\n\\r\\nOutput:\\r\\n\\r\\n<img src=\\\"https://material.angularjs.org/material2_assets/grid-list/fancy-grid-list.png\\\">\\r\\n\\r\\n## TODO\\r\\n\\r\\n- Grid tile headers and footers\\r\\n- Responsive sizing support\\r\\n\"},{\"id\":\"icon\",\"content\":\"# md-icon\\r\\n\\r\\n`md-icon` is a component that displays an icon, which can be a font glyph or an SVG image.\\r\\n\\r\\n## MdIconRegistry\\r\\n\\r\\n`MdIconRegistry` is an injectable service that allows you to associate icon names with SVG URLs and define aliases for CSS font classes. Its methods are discussed below and listed in the API summary.\\r\\n\\r\\n## Font icons\\r\\n\\r\\n### Ligatures\\r\\n\\r\\nSome fonts are designed to show icons by using [ligatures](https://en.wikipedia.org/wiki/Typographic_ligature), for example by rendering the text \\\"home\\\" as a home image. To use a ligature icon, put its text in the content of the `md-icon` component, for example:\\r\\n```html\\r\\n<md-icon>home</md-icon>\\r\\n```\\r\\n\\r\\nBy default the [Material icons font](http://google.github.io/material-design-icons/#icon-font-for-the-web) is used. (You will still need to include the HTML to load the font and its CSS, as described in the link). You can specify a different font by setting the `fontSet` input to either the CSS class to apply to use the desired font, or to an alias previously registered with `MdIconRegistry.registerFontClassAlias`, for example:\\r\\n```javascript\\r\\nmdIconRegistry.registerFontClassAlias('myfont', 'my-icon-font-class');\\r\\n```\\r\\n\\r\\n```html\\r\\n<md-icon fontSet=\\\"myfont\\\">help</md-icon>\\r\\n```\\r\\n\\r\\n### Font icons via CSS\\r\\n\\r\\nFonts can also display icons by defining a CSS class for each icon glyph, which typically uses a :before selector to cause the icon to appear. [FontAwesome](https://fortawesome.github.io/Font-Awesome/examples/) uses this approach to display its icons. To use such a font, set the `fontSet` input to the font's CSS class (either the class itself or an alias registered with `MdIconRegistry.registerFontClassAlias`), and set the `fontIcon` input to the class for the specific icon to show. Example:\\r\\n\\r\\n```html\\r\\n<md-icon fontSet=\\\"fa\\\" fontIcon=\\\"fa-square\\\"></md-icon>\\r\\n```\\r\\n\\r\\nFor both types of font icons, you can specify the default font class to use when `fontSet` is not explicitly set by calling `MdIconRegistry.setDefaultFontSetClass`.\\r\\n\\r\\n## SVG icons\\r\\n\\r\\nWhen an `md-icon` component displays an SVG icon, it does so by directly inlining the SVG content into the page as a child of the component. (Rather than using an <img> tag or a div background image). This makes it easier to apply CSS styles to SVG icons. For example, the default color of the SVG content is the CSS [currentColor](http://www.quirksmode.org/css/color/currentcolor.html) value. This makes SVG icons by default have the same color as surrounding text, and allows you to change the color by setting the \\\"color\\\" style on the `md-icon` element.\\r\\n\\r\\n### Icons from URLs\\r\\n\\r\\nSVG icons can be used either by directly specifying the icon's URL, or by associating an icon name with a URL and then referring to the name. To use a URL directly, set the `svgSrc` input:\\r\\n```html\\r\\n<md-icon svgSrc=\\\"/assets/sun.svg\\\"></md-icon>\\r\\n```\\r\\n\\r\\n### Named icons\\r\\n\\r\\nTo associate a name with an icon URL, use the `addSvgIcon` or `addSvgIconInNamespace` methods of `MdIconRegistry`. After registering an icon, it can be displayed by setting the `svgIcon` input. For an icon in the default namespace, use the name directly. For a non-default namespace, use the format `[namespace]:[name]`. Examples:\\r\\n```javascript\\r\\nmdIconRegistry.addSvgIcon('moon', '/assets/moon.svg');\\r\\nmdIconRegistry.addSvgIconInNamespace('animals', 'cat', '/assets/cat.svg');\\r\\n```\\r\\n\\r\\n```html\\r\\n<md-icon svgIcon=\\\"moon\\\"></md-icon>\\r\\n<md-icon svgIcon=\\\"animals:cat\\\"></md-icon>\\r\\n```\\r\\n\\r\\n### Icon sets\\r\\n\\r\\nIcon sets allow grouping multiple icons into a single SVG file. The content of an icon set file looks like this, where each nested `<svg>` tag defines an individual icon, and is identified with a unique \\\"id\\\" attribute.\\r\\n```\\r\\n<svg>\\r\\n  <defs>\\r\\n    <svg id=\\\"mercury\\\">...</svg>\\r\\n    <svg id=\\\"venus\\\">...</svg>\\r\\n    <svg id=\\\"earth\\\">...</svg>\\r\\n    <svg id=\\\"mars\\\">...</svg>\\r\\n  </defs>\\r\\n</svg>\\r\\n```\\r\\n\\r\\nIcon sets are registered using the `addSvgIconSet` or `addSvgIconSetInNamespace` methods of `MdIconRegistry`. After an icon set is registered, each of its embedded icons can be accessed by their \\\"id\\\" attributes. To display an icon from an icon set, use the `svgIcon` input in the same way as for individually registered icons. Example:\\r\\n```javascript\\r\\nmdIconRegistry.addSvgIconSetInNamespace('planets', '/assets/planets.svg');\\r\\n```\\r\\n\\r\\n```html\\r\\n<md-icon svgIcon=\\\"planets:venus\\\"></md-icon>\\r\\n```\\r\\n\\r\\nMultiple icon sets can be registered in the same namespace. If you request an icon whose id appears in more than one icon set, the icon from the most recently registered set will be used.\\r\\n\\r\\nNote that all SVG icons are fetched via XmlHttpRequest, and due to the same-origin policy their URLs must be on the same domain as the containing page, or their servers must be configured to allow cross-domain access.\\r\\n\\r\\n### Accessibility\\r\\n\\r\\nIf you set an \\\"aria-label\\\" attribute on the md-icon element, its value will be used as-is. If you do not, the md-icon component will attempt to set the aria-label value from one of these sources:\\r\\n* The `alt` attribute\\r\\n* The `fontIcon` input\\r\\n* The name of the icon from the `svgIcon` input (not including any namespace)\\r\\n* The text content of the component (for ligature icons)\\r\\n\\r\\n### API Summary\\r\\n\\r\\nmd-icon Properties:\\r\\n\\r\\n| Name         | Type     | Description |\\r\\n| ---          | ---      | --- |\\r\\n| `svgSrc`     | string   | The URL of the SVG icon to display |\\r\\n| `svgIcon`    | string   | The name (and possibly namespace) of an icon previously registered with `MdIconRegistry.addSvgIcon` or `MdIconRegistry.addSvgIconInNamespace` |\\r\\n| `fontSet`    | string   | The font to use to display an icon glyph. The value can be either a CSS class name, or an alias previously defined with `MdIconRegistry.registerFontClassAlias` |\\r\\n| `fontIcon`   | string   | The CSS class that identifies the specific icon to use from an icon font |\\r\\n\\r\\nMdIconRegistry methods (all methods return `this` for chaining):\\r\\n\\r\\n| Signature   | Description |\\r\\n| ---         | --- |\\r\\n| addSvgIcon(name: string, url: string): MdIconProvider | Associates an icon name with a URL in the default namespace. When an `md-icon` component has its `svgIcon` input set to this name, the icon will be loaded from this URL. |\\r\\n| addSvgIconInNamespace(namespace: string, iconName: string, url: string): MdIconProvider | Associates an icon name with a URL in the specified namespace. |\\r\\n| addSvgIconSet(url: string): MdIconProvider | Makes the icons contained in the icon set from a URL available in the default namespace. |\\r\\n| addSvgIconSetInNamespace(namespace: string, url: string): MdIconProvider | Makes the icons contained in the icon set from a URL available in the specified namespace. |\\r\\n| registerFontClassAlias(alias: string, className: string): MdIconProvider | Associates a font alias with a CSS class. When an `md-icon` component has its `fontSet` input set to the alias, the CSS class will be added to the component's element. It is assumed that the user has defined a corresponding CSS rule to set the desired font. |\\r\\n| setDefaultFontSetClass(className: string): MdIconProvider | Sets the default CSS class to apply to font icons when mdFontSet is not set. |\\r\\n\"},{\"id\":\"input\",\"content\":\"# mdInput\\r\\n\\r\\nInputs are the basic input component of Material 2. The spec can be found [here](https://www.google.com/design/spec/components/text-fields.html).\\r\\n\\r\\n\\r\\n\\r\\n## Notes\\r\\n* The `<md-input>` component fully support two-way binding of `ngModel`, as if it was a normal `<input>`.\\r\\n\\r\\n\\r\\n\\r\\n## Type\\r\\n\\r\\nAt the time of writing this README, the `[type]` attribute is copied to the actual `<input>` element in the `<md-input>`.\\r\\n\\r\\nThe valid `type` attribute values are any supported by your browser, with the exception of `file`, `checkbox` and `radio`. File inputs aren't supported for now, while check boxes and radio buttons have their own components.\\r\\n\\r\\n\\r\\n\\r\\n## Prefix and Suffix\\r\\n\\r\\nYou can include HTML before, and after the input tag, as prefix or suffix. It will be underlined as per the Material specification, and clicking it will focus the input.\\r\\n\\r\\nTo add a prefix, use the `md-prefix` attribute on the element. Similarly, to add a suffix, use the `md-suffix` attribute. For example, in a template:\\r\\n\\r\\n#### Example\\r\\n\\r\\n```html\\r\\n<md-input placeholder=\\\"amount\\\" align=\\\"end\\\">\\r\\n  <span md-prefix>$&nbsp;</span>\\r\\n  <span md-suffix>.00</span>\\r\\n</md-input>\\r\\n```\\r\\n\\r\\nWill result in this:\\r\\n\\r\\n<img src=\\\"https://material.angularjs.org/material2_assets/input/prefix-suffix.png\\\">\\r\\n\\r\\n\\r\\n\\r\\n## Hint Labels\\r\\n\\r\\nHint labels are the labels that shows the underline. You can have up to two hint labels; one on the `start` of the line (left in an LTR language, right in RTL), or one on the `end`.\\r\\n\\r\\nYou specify a hint-label in one of two ways; either using the `hintLabel` attribute, or using an `<md-hint>` directive in the `<md-input>`, which takes an `align` attribute containing the side. The attribute version is assumed to be at the `start`.\\r\\n\\r\\nSpecifying a side twice will result in an exception during initialization.\\r\\n\\r\\n#### Example\\r\\n\\r\\nA simple character counter can be made like the following:\\r\\n\\r\\n```html\\r\\n<md-input placeholder=\\\"Character count (100 max)\\\" maxlength=\\\"100\\\" class=\\\"demo-full-width\\\"\\r\\n          value=\\\"Hello world. How are you?\\\"\\r\\n          #characterCountHintExample>\\r\\n  <md-hint align=\\\"end\\\">{{characterCountHintExample.characterCount}} / 100</md-hint>\\r\\n</md-input>\\r\\n```\\r\\n\\r\\n<img src=\\\"https://material.angularjs.org/material2_assets/input/character-count.png\\\">\\r\\n\\r\\n\\r\\n\\r\\n## Divider Color\\r\\n\\r\\nThe divider (line under the `<md-input>` content) color can be changed by using the `dividerColor` attribute. A value of `primary` is the default and will correspond to your theme primary color. Alternatively, you can specify `accent` or `warn`.\\r\\n\\r\\n#### Example\\r\\n\\r\\n^((please note that this example has been doctored to show the colors; they would normally show only on focus)^)\\r\\n\\r\\n<img src=\\\"https://material.angularjs.org/material2_assets/input/divider-colors.png\\\">\\r\\n\\r\\n\\r\\n\\r\\n## Labelling\\r\\n\\r\\nYou can label the `<md-input>` as you would a regular `<input>`.\\r\\n\\r\\n\\r\\n\\r\\n## Full Forms\\r\\n\\r\\nYou can make a full form using inputs, and it will support autofill natively.\\r\\n\\r\\n#### Example\\r\\n\\r\\n```html\\r\\n<md-card class=\\\"demo-card demo-basic\\\">\\r\\n  <md-toolbar color=\\\"primary\\\">Basic</md-toolbar>\\r\\n  <md-card-content>\\r\\n    <form>\\r\\n      <md-input class=\\\"demo-full-width\\\" placeholder=\\\"Company (disabled)\\\" disabled value=\\\"Google\\\">\\r\\n      </md-input>\\r\\n\\r\\n      <table style=\\\"width: 100%\\\" cellspacing=\\\"0\\\"><tr>\\r\\n        <td><md-input placeholder=\\\"First name\\\" style=\\\"width: 100%\\\"></md-input></td>\\r\\n        <td><md-input placeholder=\\\"Long Last Name That Will Be Truncated\\\" style=\\\"width: 100%\\\"></md-input></td>\\r\\n      </tr></table>\\r\\n      <p>\\r\\n        <md-input class=\\\"demo-full-width\\\" placeholder=\\\"Address\\\" value=\\\"1600 Amphitheatre Pkway\\\"></md-input>\\r\\n        <md-input class=\\\"demo-full-width\\\" placeholder=\\\"Address 2\\\"></md-input>\\r\\n      </p>\\r\\n      <table style=\\\"width: 100%\\\" cellspacing=\\\"0\\\"><tr>\\r\\n        <td><md-input class=\\\"demo-full-width\\\" placeholder=\\\"City\\\"></md-input></td>\\r\\n        <td><md-input class=\\\"demo-full-width\\\" placeholder=\\\"State\\\"></md-input></td>\\r\\n        <td><md-input #postalCode class=\\\"demo-full-width\\\" maxlength=\\\"5\\\"\\r\\n                      placeholder=\\\"Postal Code\\\"\\r\\n                      value=\\\"94043\\\">\\r\\n          <md-hint align=\\\"end\\\">{{postalCode.characterCount}} / 5</md-hint>\\r\\n        </md-input></td>\\r\\n      </tr></table>\\r\\n    </form>\\r\\n  </md-card-content>\\r\\n</md-card>\\r\\n```\\r\\n\\r\\nWill result in this:\\r\\n\\r\\n<img src=\\\"https://material.angularjs.org/material2_assets/input/full-form.png\\\">\\r\\n\"},{\"id\":\"list\",\"content\":\"# md-list\\r\\n\\r\\n`md-list` is a container component that wraps and formats a series of line items. As the base list component,\\r\\n it provides Material Design styling, but no behavior of its own.\\r\\n\\r\\n## Usage\\r\\n\\r\\n### Simple list\\r\\n\\r\\nTo use `md-list`, import the MdList module into your application's NgModule:\\r\\n\\r\\n*my-app-module.ts*\\r\\n```ts\\r\\nimport {MdListModule} from '@angular2-material/list';\\r\\n\\r\\n@NgModule({\\r\\n  imports: [MdListModule.forRoot()],\\r\\n  ...\\r\\n})\\r\\nexport class MyAppModule {}\\r\\n```\\r\\n\\r\\nIn your template, create an `md-list` element and wrap each of your items in an `md-list-item` tag.\\r\\n\\r\\n```html\\r\\n<md-list>\\r\\n   <md-list-item> Pepper </md-list-item>\\r\\n   <md-list-item> Salt </md-list-item>\\r\\n   <md-list-item> Paprika </md-list-item>\\r\\n</md-list>\\r\\n```\\r\\n\\r\\nOutput:\\r\\n\\r\\n<img src=\\\"https://material.angularjs.org/material2_assets/list/basic-list.png\\\">\\r\\n\\r\\n### Multi-line lists\\r\\n\\r\\nIf your list requires multiple lines per list item, annotate each line with an `md-line` attribute.\\r\\nYou can use whichever heading tag is appropriate for your DOM hierarchy (doesn't have to be `h3`),\\r\\nas long as the `md-line` attribute is included.\\r\\n\\r\\n```html\\r\\n<!-- two line list -->\\r\\n<md-list>\\r\\n  <md-list-item *ngFor=\\\"let message of messages\\\">\\r\\n    <h3 md-line> {{message.from}} </h3>\\r\\n    <p md-line>\\r\\n      <span> {{message.subject}} </span>\\r\\n      <span class=\\\"demo-2\\\"> -- {{message.message}} </span>\\r\\n    </p>\\r\\n  </md-list-item>\\r\\n</md-list>\\r\\n\\r\\n<!-- three line list -->\\r\\n<md-list>\\r\\n  <md-list-item *ngFor=\\\"let message of messages\\\">\\r\\n    <h3 md-line> {{message.from}} </h3>\\r\\n    <p md-line> {{message.subject}} </p>\\r\\n    <p md-line class=\\\"demo-2\\\"> {{message.message}} </p>\\r\\n  </md-list-item>\\r\\n</md-list>\\r\\n```\\r\\n\\r\\nTwo line list output:\\r\\n\\r\\n<img src=\\\"https://material.angularjs.org/material2_assets/list/two-line-list.png\\\">\\r\\n\\r\\nThree line list output:\\r\\n\\r\\n<img src=\\\"https://material.angularjs.org/material2_assets/list/three-line-list.png\\\">\\r\\n\\r\\n### Lists with avatars\\r\\n\\r\\nTo include an avatar, add an image tag with an `md-list-avatar` attribute.\\r\\n\\r\\n```html\\r\\n<md-list>\\r\\n  <md-list-item *ngFor=\\\"let message of messages\\\">\\r\\n    <img md-list-avatar src=\\\"...\\\" alt=\\\"...\\\">\\r\\n    <h3 md-line> {{message.from}} </h3>\\r\\n    <p md-line>\\r\\n      <span> {{message.subject}} </span>\\r\\n      <span class=\\\"demo-2\\\"> -- {{message.message}} </span>\\r\\n    </p>\\r\\n  </md-list-item>\\r\\n</md-list>\\r\\n```\\r\\n\\r\\nOutput:\\r\\n\\r\\n<img src=\\\"https://material.angularjs.org/material2_assets/list/list-with-avatar-2.png\\\">\\r\\n\\r\\n### Dense lists\\r\\nLists are also available in \\\"dense layout\\\" mode, which shrinks the font size and height of the list\\r\\nto suit UIs that may need to display more information.  To enable this mode, add a `dense` attribute\\r\\nto the main `md-list` tag.\\r\\n\\r\\n\\r\\n```html\\r\\n<md-list dense>\\r\\n   <md-list-item> Pepper </md-list-item>\\r\\n   <md-list-item> Salt </md-list-item>\\r\\n   <md-list-item> Paprika </md-list-item>\\r\\n</md-list>\\r\\n```\\r\\n\\r\\nOutput:\\r\\n\\r\\n<img src=\\\"https://material.angularjs.org/material2_assets/list/dense-list.png\\\">\\r\\n\\r\\n### Lists with multiple sections\\r\\n\\r\\nYou can add a subheader to a list by annotating a heading tag with an `md-subheader` attribute. To add a divider,\\r\\nuse `<md-divider>` tags.\\r\\n\\r\\n```html\\r\\n<md-list>\\r\\n   <h3 md-subheader>Folders</h3>\\r\\n   <md-list-item *ngFor=\\\"let folder of folders\\\">\\r\\n      <md-icon md-list-avatar>folder</md-icon>\\r\\n      <h4 md-line>{{folder.name}}</h4>\\r\\n      <p md-line class=\\\"demo-2\\\"> {{folder.updated}} </p>\\r\\n   </md-list-item>\\r\\n   <md-divider></md-divider>\\r\\n   <h3 md-subheader>Notes</h3>\\r\\n   <md-list-item *ngFor=\\\"let note of notes\\\">\\r\\n      <md-icon md-list-avatar>note</md-icon>\\r\\n      <h4 md-line>{{note.name}}</h4>\\r\\n      <p md-line class=\\\"demo-2\\\"> {{note.updated}} </p>\\r\\n   </md-list-item>\\r\\n</md-list>\\r\\n```\\r\\n\\r\\nOutput:\\r\\n\\r\\n<img src=\\\"https://material.angularjs.org/material2_assets/list/subheader-list.png\\\">\\r\\n\\r\\n### Navigation lists\\r\\n\\r\\nUse `md-nav-list` tags for navigation lists (i.e. lists that have anchor tags).\\r\\n\\r\\nSimple nav lists can tack an `md-list-item` attribute onto the anchor tag itself:\\r\\n\\r\\n```html\\r\\n<md-nav-list>\\r\\n   <a md-list-item href=\\\"...\\\" *ngFor=\\\"let link of links\\\"> {{ link }} </a>\\r\\n</md-nav-list>\\r\\n```\\r\\n\\r\\nIf you require a more complex nav list (e.g. with more than one target per item), wrap your anchor tag in an `md-list-item` element.\\r\\n\\r\\n```html\\r\\n<md-nav-list>\\r\\n  <md-list-item *ngFor=\\\"let link of links\\\">\\r\\n     <a md-line href=\\\"...\\\">{{ link }}</a>\\r\\n     <button md-icon-button (click)=\\\"showInfo(link)\\\">\\r\\n        <md-icon>info</md-icon>\\r\\n     </button>\\r\\n  </md-list-item>\\r\\n</md-nav-list>\\r\\n```\\r\\n\\r\\n### Lists with secondary text\\r\\nSecondary text styling will be part of a broader typography module to\\r\\n[come later](https://github.com/angular/material2/issues/205), and won’t be implemented as part of this component\\r\\nspecifically. Gray text in the examples above comes from a \\\"demo-2\\\" class added manually by the demo.\\r\\n\"},{\"id\":\"menu\",\"content\":\"# md-menu\\r\\n\\r\\n`md-menu` is a list of options that displays when triggered.  You can read more about menus in the \\r\\n[Material Design spec](https://material.google.com/components/menus.html).\\r\\n\\r\\n### Not yet implemented\\r\\n\\r\\n- `prevent-close` option, to turn off automatic menu close when clicking outside the menu\\r\\n- Custom offset support\\r\\n- Menu groupings (which menus are allowed to open together)\\r\\n\\r\\n## Usage\\r\\n\\r\\n### Setup\\r\\n\\r\\nImport the MdMenu module.\\r\\n\\r\\n*my-app-module.ts*\\r\\n```ts\\r\\nimport {MdMenuModule} from '@angular2-material/menu';\\r\\n\\r\\n@NgModule({\\r\\n  imports: [MdMenuModule.forRoot()],\\r\\n  ...\\r\\n})\\r\\nexport class MyAppModule {}\\r\\n```\\r\\n\\r\\nFor alpha.7, you need to include the overlay styles in your app via a `link` element. This will\\r\\nlook something like\\r\\n```html\\r\\n<link href=\\\"vendor/@angular2-material/core/overlay/overlay.css\\\" rel=\\\"stylesheet\\\">\\r\\n```\\r\\n\\r\\n### Simple menu\\r\\n\\r\\nIn your template, create an `md-menu` element. You can use either `<button>` or `<anchor>` tags for \\r\\nyour menu items, as long as each is tagged with an `md-menu-item` attribute. Note that you can \\r\\ndisable items by adding the `disabled` boolean attribute or binding to it.\\r\\n\\r\\n*my-comp.html*\\r\\n```html\\r\\n<!-- this menu starts as hidden by default -->\\r\\n<md-menu>\\r\\n    <button md-menu-item> Refresh </button>\\r\\n    <button md-menu-item> Settings </button>\\r\\n    <button md-menu-item> Help </button>\\r\\n    <button md-menu-item disabled> Sign Out </button>\\r\\n</md-menu>\\r\\n```\\r\\n\\r\\nMenus are hidden by default, so you'll want to connect up a menu trigger that can open your menu.  \\r\\nYou can do so by adding a button tag with an `md-menu-trigger-for` attribute and passing in the menu \\r\\ninstance.  You can create a local reference to your menu instance by adding `#menu=\\\"mdMenu\\\"` to  \\r\\nyour menu element.\\r\\n\\r\\n*my-comp.html*\\r\\n```html\\r\\n<!-- menu opens when trigger button is clicked -->\\r\\n<button md-icon-button [md-menu-trigger-for]=\\\"menu\\\">\\r\\n   <md-icon>more_vert</md-icon>\\r\\n</button>\\r\\n\\r\\n<md-menu #menu=\\\"mdMenu\\\">\\r\\n    <button md-menu-item> Refresh </button>\\r\\n    <button md-menu-item> Settings </button>\\r\\n    <button md-menu-item> Help </button>\\r\\n    <button md-menu-item disabled> Sign Out </button>\\r\\n</md-menu>\\r\\n```\\r\\n\\r\\nOutput:\\r\\n\\r\\n<img src=\\\"https://material.angularjs.org/material2_assets/menu/default_closed.png\\\">\\r\\n<img src=\\\"https://material.angularjs.org/material2_assets/menu/default_open.png\\\">\\r\\n\\r\\n### Toggling the menu programmatically\\r\\n\\r\\nYou can also use the menu's API to open or close the menu programmatically from your class. Please \\r\\nnote that in this case, an `md-menu-trigger-for` attribute is still necessary to connect \\r\\nthe menu to its trigger element in the DOM.\\r\\n  \\r\\n*my-comp.component.ts*\\r\\n```ts\\r\\nclass MyComp {\\r\\n  @ViewChild(MdMenuTrigger) trigger: MdMenuTrigger;\\r\\n\\r\\n  someMethod() {\\r\\n    this.trigger.openMenu();\\r\\n  }\\r\\n}\\r\\n```\\r\\n\\r\\n*my-comp.html*\\r\\n```html\\r\\n<button md-icon-button [md-menu-trigger-for]=\\\"menu\\\">\\r\\n   <md-icon>more_vert</md-icon>\\r\\n</button>\\r\\n\\r\\n<md-menu #menu=\\\"mdMenu\\\">\\r\\n    <button md-menu-item> Refresh </button>\\r\\n    <button md-menu-item> Settings </button>\\r\\n    <button md-menu-item> Help </button>\\r\\n    <button md-menu-item disabled> Sign Out </button>\\r\\n</md-menu>\\r\\n```\\r\\n\\r\\n### Customizing menu position\\r\\n\\r\\nBy default, the menu will display after and below its trigger.  You can change this display position \\r\\nusing the `x-position` (`before | after`) and `y-position` (`above | below`) attributes.  \\r\\n\\r\\n*my-comp.html*\\r\\n```html\\r\\n<md-menu x-position=\\\"before\\\" #menu=\\\"mdMenu\\\">\\r\\n    <button md-menu-item> Refresh </button>\\r\\n    <button md-menu-item> Settings </button>\\r\\n    <button md-menu-item> Help </button>\\r\\n    <button md-menu-item disabled> Sign Out </button>\\r\\n</md-menu>\\r\\n```\\r\\n\\r\\nOutput:\\r\\n\\r\\n<img src=\\\"https://material.angularjs.org/material2_assets/menu/before_closed.png\\\">\\r\\n<img src=\\\"https://material.angularjs.org/material2_assets/menu/before_open.png\\\">\\r\\n\\r\\n### Accessibility\\r\\n\\r\\nThe menu adds `role=\\\"menu\\\"` to the main menu element and `role=\\\"menuitem\\\"` to each menu item. It \\r\\nalso adds `aria-hasPopup=\\\"true\\\"` to the trigger element.\\r\\n\\r\\n#### Keyboard events:\\r\\n- <kbd>DOWN_ARROW</kbd>: Focus next menu item\\r\\n- <kbd>UP_ARROW</kbd>: Focus previous menu item\\r\\n- <kbd>ENTER</kbd>: Select focused item\\r\\n\\r\\n### Menu attributes\\r\\n\\r\\n| Signature | Values | Description |\\r\\n| --- | --- | --- |\\r\\n| `x-position` | `before | after` | The horizontal position of the menu in relation to the trigger. Defaults to `after`. | \\r\\n| `y-position` | `above | below` | The vertical position of the menu in relation to the trigger. Defaults to `below`. |\\r\\n \\r\\n### Trigger Programmatic API\\r\\n\\r\\n**Properties**\\r\\n\\r\\n| Name | Type | Description |\\r\\n| --- | --- | --- |\\r\\n| `menuOpen` | `Boolean` | Property that is true when the menu is open. It is not settable (use methods below). | \\r\\n| `onMenuOpen` | `Observable<void>` | Observable that emits when the menu opens. | \\r\\n| `onMenuClose` | `Observable<void>` | Observable that emits when the menu closes. | \\r\\n\\r\\n**Methods**\\r\\n\\r\\n| Method | Returns | Description |\\r\\n| --- | --- | --- |\\r\\n| `openMenu()` | `Promise<void>` | Opens the menu. Returns a promise that will resolve when the menu has opened. |\\r\\n| `closeMenu()` | `Promise<void>` | Closes the menu. Returns a promise that will resolve when the menu has closed. |\\r\\n| `toggleMenu()` | `Promise<void>` | Toggles the menu. Returns a promise that will resolve when the menu has completed opening or closing. |  \\r\\n| `destroyMenu()` | `Promise<void>` | Destroys the menu overlay completely. \\r\\n  \\r\\n\\r\\n\"},{\"id\":\"progress-bar\",\"content\":\"# md-progress-bar\\r\\n\\r\\n`md-progress-bar` is a component for indicating progress and activity, matching the spec of \\r\\n[Material Design Progress & Activity](https://www.google.com/design/spec/components/progress-activity.html).\\r\\n\\r\\n### Progress Modes\\r\\n\\r\\nThere are four modes:\\r\\n 1. Determinate - `<md-progress-bar mode=\\\"determinate\\\">`\\r\\n    * Indicates how long an operation will take when the percentage complete is detectable. \\r\\n 2. Indeterminate - `<md-progress-bar mode=\\\"indeterminate\\\">`\\r\\n    * Indicates the user must wait while something finishes when it’s not necessary or possible to indicate how long it will take.\\r\\n 3. Buffer - `<md-progress-bar mode=\\\"buffer\\\">`\\r\\n    * Indicates how long an operation will take when the percentage complete is detectable, also provides a value of the preloading for the operation.\\r\\n 4. Query - `<md-progress-bar mode=\\\"query\\\">`\\r\\n    * Indicates the user must wait while something finishes when it is not yet possible to indicate how long it will take, but will be possible.  Once possible, the progress mode should be moved to buffer or determinate.\\r\\n      \\r\\n\\r\\nExample:\\r\\n\\r\\n ```html\\r\\n<md-progress-bar mode=\\\"determinate\\\" value=\\\"myValue\\\"></md-progress-bar>\\r\\n<md-progress-bar mode=\\\"indeterminate\\\"></md-progress-bar>\\r\\n<md-progress-bar mode=\\\"buffer\\\" value=\\\"myValue\\\" bufferValue=\\\"myBufferValue\\\"></md-progress-bar>\\r\\n<md-progress-bar mode=\\\"query\\\"></md-progress-bar>\\r\\n ```\\r\\n\\r\\n### Theming\\r\\n\\r\\nAll progress indicators can be themed to match your \\\"primary\\\" palette, your \\\"accent\\\" palette, or your \\\"warn\\\" palette using the appropriate class.\\r\\n\\r\\nExample:\\r\\n\\r\\n ```html\\r\\n<md-progress-bar mode=\\\"indeterminate\\\" color=\\\"primary\\\"></md-progress-bar>\\r\\n<md-progress-bar mode=\\\"indeterminate\\\" color=\\\"accent\\\"></md-progress-bar>\\r\\n<md-progress-bar mode=\\\"indeterminate\\\" color=\\\"warn\\\"></md-progress-bar>\\r\\n ```\\r\\n\\r\\n### Accessibility\\r\\n\\r\\n * ARIA attributes are applied to the indicator defining the valuemin, valuemax and valuenow attributes.\\r\\n\\r\\n\\r\\n### API Summary\\r\\n\\r\\nProperties:\\r\\n\\r\\n| Name            | Type                                                     | Description |\\r\\n| ---             | ---                                                      | --- |\\r\\n| `color`         | `\\\"primary\\\" | \\\"accent\\\" | \\\"warn\\\"`                          | The color palette of the progress indicator |\\r\\n| `mode`          | `\\\"determinate\\\" | \\\"indeterminate\\\" | \\\"buffer\\\" | \\\"query\\\"`   | The mode of the progress indicator |\\r\\n| `value`         | number                                                   | The current progress percentage for determinate indicators |\\r\\n| `bufferValue`   | number                                                   | The current progress percentage for buffer secondary indicators |\\r\\n\"},{\"id\":\"progress-circle\",\"content\":\"# md-progress-circle\\r\\n\\r\\n`md-progress-circle` is a component for indicating progress and activity, matching the spec of \\r\\n[Material Design Progress & Activity](https://www.google.com/design/spec/components/progress-activity.html).\\r\\n\\r\\n### Progress Modes\\r\\n\\r\\nThere are two modes:\\r\\n 1. Determinate - `<md-progress-circle mode=\\\"determinate\\\">`\\r\\n    * Indicates how long an operation will take when the percentage complete is detectable. \\r\\n 2. Indeterminate - `<md-progress-circle mode=\\\"indeterminate\\\">` or `<md-spinner>`\\r\\n    * Indicates the user must wait while something finishes when it’s not necessary or possible to indicate how long it\\r\\n      will take.\\r\\n\\r\\nExample:\\r\\n\\r\\n ```html\\r\\n<md-progress-circle mode=\\\"determinate\\\" [value]=\\\"myValue\\\"></md-progress-circle>\\r\\n<md-progress-circle mode=\\\"indeterminate\\\"></md-progress-circle>\\r\\n<md-spinner></md-spinner>\\r\\n ```\\r\\n\\r\\n### Theming\\r\\n\\r\\nAll progress indicators can be themed to match your \\\"primary\\\" palette, your \\\"accent\\\" palette, or your \\\"warn\\\" palette using the appropriate class.\\r\\n\\r\\nExample:\\r\\n\\r\\n ```html\\r\\n<md-progress-circle mode=\\\"indeterminate\\\" color=\\\"primary\\\"></md-progress-circle>\\r\\n<md-progress-circle mode=\\\"indeterminate\\\" color=\\\"accent\\\"></md-progress-circle>\\r\\n<md-progress-circle mode=\\\"indeterminate\\\" color=\\\"warn\\\"></md-progress-circle>\\r\\n ```\\r\\n\\r\\n### Accessibility\\r\\n\\r\\n * ARIA attributes are applied to the indicator defining the valuemin, valuemax and valuenow attributes.\\r\\n\\r\\n### Upcoming work\\r\\n\\r\\n * Adding ARIA attribute for progressbar \\\"for\\\".\\r\\n\\r\\n### API Summary\\r\\n\\r\\nProperties:\\r\\n\\r\\n| Name      | Type                              | Description |\\r\\n| ---       | ---                               | --- |\\r\\n| `color`   | `\\\"primary\\\"|\\\"accent\\\"|\\\"warn\\\"`       | The color palette of the progress indicator |\\r\\n| `mode`    | `\\\"determinate\\\"|\\\"indeterminate\\\"`   | The mode of the progress indicator |\\r\\n| `value`   | number                            | The current progress percentage for determinate indicators |\\r\\n\"},{\"id\":\"radio\",\"content\":\"# MdRadio\\r\\nRadio buttons allow the user to select one option from a set. Use radio buttons for exclusive selection if you think that the user needs to see all available options side-by-side.\\r\\n\\r\\n![Preview](https://material.angularjs.org/material2_assets/radio/radios.png)\\r\\n\\r\\n### Setup\\r\\nImporting the symbols:\\r\\n```ts\\r\\nimport { MdRadioModule } from '@angular2-material/radio';\\r\\n```\\r\\n\\r\\nAdding providers and directives:\\r\\n```ts\\r\\n@NgModule({\\r\\n  imports: [MdRadioModule.forRoot()],\\r\\n  ...\\r\\n})\\r\\nexport class MyAppModule { }\\r\\n```\\r\\n\\r\\n### Examples\\r\\nA basic radio group would have the following markup.\\r\\n```html\\r\\n<md-radio-group>\\r\\n  <md-radio-button value=\\\"option_1\\\">1</md-radio-button>\\r\\n  <md-radio-button value=\\\"option_2\\\">2</md-radio-button>\\r\\n</md-radio-group>\\r\\n```\\r\\n\\r\\nA dynamic example, populated from a `data` variable:\\r\\n```html\\r\\n<md-radio-group [(value)]=\\\"groupValue\\\">\\r\\n  <md-radio-button *ngFor=\\\"let d of data\\\" [value]=\\\"d.value\\\">\\r\\n    {{d.label}}\\r\\n  </md-radio-button>\\r\\n</md-radio-group>\\r\\n```\\r\\n\\r\\nA dynamic example for use inside a form showing support for `[(ngModel)]`:\\r\\n```html\\r\\n<md-radio-group [(ngModel)]=\\\"chosenOption\\\">\\r\\n  <md-radio-button *ngFor=\\\"let o of options\\\" [value]=\\\"o.value\\\">\\r\\n    {{o.label}}\\r\\n  </md-radio-button>\\r\\n</md-radio-group>\\r\\n```\\r\\n\\r\\n## `<md-radio-group>`\\r\\n### Properties\\r\\n\\r\\n| Name | Type | Description |\\r\\n| --- | --- | --- |\\r\\n| `selected` | `MdRadioButton` | The currently selected button. |\\r\\n| `value` | `any` | The current value for this group. |\\r\\n| `disabled` | `boolean` | Whether the group is disabled. |\\r\\n\\r\\nWhen selection is changed, an event is emitted from the `change` EventEmitter property.\\r\\n\\r\\n### Notes\\r\\nThe `md-radio-group` component has no button initially selected.\\r\\n\\r\\n## `<md-radio-button>`\\r\\n### Properties\\r\\n\\r\\n| Name (attribute) | Type | Description |\\r\\n| --- | --- | --- |\\r\\n| `id` | `string` | The unique ID of this radio button. |\\r\\n| `name` | `string` | Group name, defaults to parent radio group if present. |\\r\\n| `value` | `any` | The value of this radio button. |\\r\\n| `checked` | `boolean` | Whether the radio is checked. |\\r\\n| `disabled` | `boolean` | Whether the radio is disabled. |\\r\\n| `aria-label` | `string` | Used to set the `aria-label` attribute of the underlying input element. |\\r\\n| `aria-labelledby` | `string` | Used to set the `aria-labelledby` attribute of the underlying input element.\\r\\n                                 If provided, this attribute takes precedence as the element's text alternative. |\\r\\n\\r\\nWhen checked, an event is emitted from the `change` EventEmitter property.\\r\\n\\r\\n### Notes\\r\\n* The `md-radio-button` component by default uses the accent color from the theme palette.\\r\\n\"},{\"id\":\"sidenav\",\"content\":\"# MdSidenav\\r\\n\\r\\nMdSidenav is the side navigation component for Material 2. It is composed of two components; `<md-sidenav-layout>` and `<md-sidenav>`.\\r\\n\\r\\n## Screenshots\\r\\n\\r\\n<img src=\\\"https://material.angularjs.org/material2_assets/sidenav-example.png\\\">\\r\\n\\r\\n\\r\\n## `<md-sidenav-layout>`\\r\\n\\r\\nThe parent component. Contains the code necessary to coordinate one or two sidenav and the backdrop.\\r\\n\\r\\n### Properties\\r\\n\\r\\n| Name | Description |\\r\\n| --- | --- |\\r\\n| `start` | The start aligned `MdSidenav` instance, or `null` if none is specified. In LTR direction, this is the sidenav shown on the left side. In RTL direction, it will show on the right. There can only be one sidenav on either side. |\\r\\n| `end` | The end aligned `MdSidenav` instance, or `null` if none is specified. This is the sidenav opposing the `start` sidenav. There can only be one sidenav on either side. |\\r\\n\\r\\n## `<md-sidenav>`\\r\\n\\r\\nThe sidenav panel.\\r\\n\\r\\n### Bound Properties\\r\\n\\r\\n| Name | Type | Description |\\r\\n| --- | --- | --- |\\r\\n| `align` | `\\\"start\\\"|\\\"end\\\"` | The alignment of this sidenav. In LTR direction, `\\\"start\\\"` will be shown on the left, `\\\"end\\\"` on the right. In RTL, it is reversed. `\\\"start\\\"` is used by default. An exception will be thrown if there are more than 1 sidenav on either side. |\\r\\n| `mode` | `\\\"over\\\"|\\\"push\\\"|\\\"side\\\"` | The mode or styling of the sidenav, default being `\\\"over\\\"`. With `\\\"over\\\"` the sidenav will appear above the content, and a backdrop will be shown. With `\\\"push\\\"` the sidenav will push the content of the `<md-sidenav-layout>` to the side, and show a backdrop over it. `\\\"side\\\"` will resize the content and keep the sidenav opened. Clicking the backdrop will close sidenavs that do not have `mode=\\\"side\\\"`. |\\r\\n| `opened` | `boolean` | Whether or not the sidenav is opened. Use this binding to open/close the sidenav. |\\r\\n\\r\\n### Events\\r\\n\\r\\n| Name | Description |\\r\\n| --- | --- |\\r\\n| `open-start` | Emitted when the sidenav is starting opening. This should only be used to coordinate animations. |\\r\\n| `close-start` | Emitted when the sidenav is starting closing. This should only be used to coordinate animations. |\\r\\n| `open` | Emitted when the sidenav is done opening. Use this for, e.g., setting focus on controls or updating state. |\\r\\n| `close` | Emitted when the sidenav is done closing. |\\r\\n\\r\\n### Methods\\r\\n\\r\\n| Signature | Description |\\r\\n| --- | --- |\\r\\n| `open(): Promise<void>` | Open the sidenav. Equivalent to `opened = true`. Returns a promise that will resolve when the animation completes, or be rejected if the animation was cancelled. |\\r\\n| `close(): Promise<void>` | Close the sidenav. Equivalent to `opened = false`. Returns a promise that will resolve when the animation completes, or be rejected if the animation was cancelled. |\\r\\n| `toggle(): Promise<void>` | Toggle the sidenav. This is equivalent to `opened = !opened`. Returns a promise that will resolve when the animation completes, or be rejected if the animation was cancelled. |\\r\\n\\r\\n### Notes\\r\\n\\r\\nThe `<md-sidenav>` will resize based on its content. You can also set its width in CSS, like so:\\r\\n\\r\\n```css\\r\\nmd-sidenav {\\r\\n  width: 200px;\\r\\n}\\r\\n```\\r\\n\\r\\nTry to avoid percent based width as `resize` events are not (yet) supported.\\r\\n\\r\\n## Examples\\r\\n\\r\\nHere's a simple example of using the sidenav:\\r\\n\\r\\n```html\\r\\n<app>\\r\\n  <md-sidenav-layout>\\r\\n    <md-sidenav #start (open)=\\\"mybutton.focus()\\\">\\r\\n      Start Sidenav.\\r\\n      <br>\\r\\n      <button md-button #mybutton (click)=\\\"start.close()\\\">Close</button>\\r\\n    </md-sidenav>\\r\\n    <md-sidenav #end align=\\\"end\\\">\\r\\n      End Sidenav.\\r\\n      <button md-button (click)=\\\"end.close()\\\">Close</button>\\r\\n    </md-sidenav>\\r\\n\\r\\n    My regular content. This will be moved into the proper DOM at runtime.\\r\\n  </md-sidenav-layout>\\r\\n</app>\\r\\n```\\r\\n\\r\\n\"},{\"id\":\"slide-toggle\",\"content\":\"# MdSlideToggle\\r\\n`MdSlideToggle` is a two-state control, which can be also called `switch`\\r\\n\\r\\n### Screenshots\\r\\n![image](https://material.angularjs.org/material2_assets/slide-toggle/toggles.png)\\r\\n\\r\\n## `<md-slide-toggle>`\\r\\n### Bound Properties\\r\\n\\r\\n| Name | Type | Description |\\r\\n| --- | --- | --- |\\r\\n| `disabled` | boolean | Disables the `slide-toggle` |\\r\\n| `color` | `\\\"primary\\\" | \\\"accent\\\" | \\\"warn\\\"` | The color palette of the `slide-toggle` |\\r\\n| `checked` | boolean | Sets the value of the `slide-toggle` |\\r\\n\\r\\n### Events\\r\\n| Name | Type | Description |\\r\\n| --- | --- | --- |\\r\\n| `change` | boolean | Event will be emitted on every value change.<br/>It emits the new `checked` value. |\\r\\n\\r\\n### Examples\\r\\nA basic slide-toggle would have the following markup.\\r\\n```html\\r\\n<md-slide-toggle [(ngModel)]=\\\"slideToggleModel\\\">\\r\\n  Default Slide Toggle\\r\\n</md-slide-toggle>\\r\\n```\\r\\n\\r\\nSlide toggle can be also disabled.\\r\\n```html\\r\\n<md-slide-toggle disabled>\\r\\n  Disabled Slide Toggle\\r\\n</md-slide-toggle>\\r\\n```\\r\\n\\r\\nThe `slide-toggle` can be also set to checked without a `ngModel`\\r\\n```html\\r\\n<md-slide-toggle [checked]=\\\"isChecked\\\">\\r\\n  Input Binding\\r\\n</md-slide-toggle>\\r\\n```\\r\\n\\r\\nYou may also want to listen on changes of the `slide-toggle`<br/>\\r\\nThe `slide-toggle` always emits the new value to the event binding `(change)`\\r\\n```html\\r\\n<md-slide-toggle (change)=\\\"printValue($event)\\\">\\r\\n  Prints Value on Change\\r\\n</md-slide-toggle>\\r\\n```\\r\\n\\r\\n## Theming\\r\\nA slide-toggle is default using the `accent` palette for its styling.\\r\\n\\r\\nModifying the color on a `slide-toggle` can be easily done, by using the following markup.\\r\\n```html\\r\\n<md-slide-toggle color=\\\"primary\\\">\\r\\n  Primary Slide Toggle\\r\\n</md-slide-toggle>\\r\\n```\\r\\n\\r\\nThe color can be also set dynamically by using a property binding.\\r\\n```html\\r\\n<md-slide-toggle [color]=\\\"myColor\\\">\\r\\n  Dynamic Color\\r\\n</md-slide-toggle>\\r\\n```\"},{\"id\":\"slider\",\"content\":\"# md-slider\\r\\n\\r\\n`MdSlider` is a component that allows users to select from a range of values by moving the slider\\r\\nthumb.\\r\\nYou can read more about the slider in the\\r\\n[Material Design spec](https://material.google.com/components/sliders.html).\\r\\n\\r\\n## Not Yet Implemented\\r\\n\\r\\n* Thumb Label\\r\\n* Color\\r\\n* Invert\\r\\n* NgModel\\r\\n* Keyboard Movement\\r\\n* Focus Ring\\r\\n* Smaller/grey thumb at minimum value\\r\\n\\r\\n## Usage\\r\\n\\r\\n### Setup\\r\\n\\r\\nImporting the module:\\r\\n```ts\\r\\n @NgModule({\\r\\n    imports: [MdSliderModule.forRoot()],\\r\\n    ...\\r\\n })\\r\\n export class MyAppModule { }\\r\\n```\\r\\n\\r\\n### Basic Usage\\r\\n\\r\\n`md-slider` can be used on its own as a slider with a min of `0`, a max of `100`, and a step of `1`.\\r\\n\\r\\n```html\\r\\n<md-slider></md-slider>\\r\\n```\\r\\n\\r\\n### Slider with Minimum and Maximum Values\\r\\n\\r\\nThe min and max on a `md-slider` can be set to give a different range of values.\\r\\nThese can be set individually and do not need to both be set.\\r\\n\\r\\n```html\\r\\n<md-slider min=\\\"1\\\" max=\\\"5\\\"></md-slider>\\r\\n```\\r\\n\\r\\n### Disabled Slider\\r\\n\\r\\n`md-slider` can be disabled so that the value cannot be changed and the thumb cannot be moved.\\r\\n\\r\\n```html\\r\\n<md-slider disabled></md-slider>\\r\\n```\\r\\n\\r\\n### Slider with Value\\r\\n\\r\\n`md-slider` can have a value defined so that it starts at a specific value on the slider.\\r\\n\\r\\n```html\\r\\n<md-slider value=\\\"24\\\"></md-slider>\\r\\n```\\r\\n\\r\\n### Slider with Step\\r\\n\\r\\n`md-slider` can have the step defined which declares where the thumb can snap to.\\r\\n\\r\\n```html\\r\\n<md-slider step=\\\"5\\\"></md-slider>\\r\\n```\\r\\n\\r\\n### Slider with Tick Interval\\r\\n\\r\\n`md-slider` can have a tick interval set to a number or to `auto`.\\r\\n`auto` will automatically draw tick marks on steps that are at least 30px apart and will always draw\\r\\ntick marks at the beginning and end of the slider.\\r\\nSetting `tick-interval` to a number will draw a tick mark at every `tick-interval` steps. An example\\r\\nof this is a `tick-interval` of `3` with a `step` of `4` will draw tick marks at every `3` steps,\\r\\nwhich is the same as every `12` values.\\r\\n\\r\\n```html\\r\\n<md-slider tick-interval=\\\"auto\\\"></md-slider>\\r\\n<md-slider tick-interval=\\\"3\\\" step=\\\"4\\\"></md-slider>\\r\\n```\\r\\n\\r\\n## `<md-slider>`\\r\\n\\r\\n### Bound Properties\\r\\n\\r\\n| Name | Type | Description |\\r\\n| --- | --- | --- |\\r\\n| `min` | number | Optional, the minimum number for the slider. Default = `0`. |\\r\\n| `max` | number | Optional, the maximum number for the slider. Default = `100`. |\\r\\n| `value` | number | Optional, the value to start the slider at. |\\r\\n| `tick-interval` | `\\\"auto\\\" | number` | Optional, how many steps between tick marks. |\\r\\n| `step` | number | Optional, declares where the thumb will snap to. Default = `1`. |\\r\\n| `disabled` | boolean | Optional, whether or not the slider is disabled. Default = `false`. |\\r\\n\"},{\"id\":\"snack-bar\",\"content\":\"# MdSnackBar\\r\\n`MdSnackBar` is a service, which opens snack bar notifications in the view.\\r\\n\\r\\n### Methods\\r\\n\\r\\n| Name |  Description |\\r\\n| --- | --- |\\r\\n| `open(message: string,<br>  actionLabel: string, config: MdSnackBarConfig): MdSnackBarRef<SimpleSnackBar>` | Creates and opens a simple snack bar noticiation matching material spec. |\\r\\n| `openFromComponent(component: ComponentType<T>, config: MdSnackBarConfig): MdSnackBarRef<T>` | Creates and opens a snack bar noticiation with a custom component as content. |\\r\\n\\r\\n### Config\\r\\n\\r\\n| Key |  Description |\\r\\n| --- | --- |\\r\\n| `viewContainerRef: ViewContainerRef` | The view container ref to attach the snack bar to. |\\r\\n| `role: AriaLivePoliteness = 'assertive'` | The politeness level to announce the snack bar with. |\\r\\n| `announcementMessage: string` | The message to announce with the snack bar. |\\r\\n\\r\\n\\r\\n### Example\\r\\nThe service can be injected in a component.\\r\\n```ts\\r\\n@Component({\\r\\n  selector: 'my-component'\\r\\n  providers: [MdSnackBar]\\r\\n})\\r\\nexport class MyComponent {\\r\\n\\r\\n constructor(snackBar: MdSnackBar\\r\\n             viewContainerRef: ViewContainerRef) {}\\r\\n\\r\\n failedAttempt() {\\r\\n   config = new MdSnackBarConfig(this.viewContainerRef);\\r\\n   this.snackBar.open('It didn\\\\'t quite work!', 'Try Again', config);\\r\\n }\\r\\n\\r\\n}\\r\\n```\"},{\"id\":\"tabs\",\"content\":\"# MdTabGroup\\r\\nTab groups allow the user to organize their content by labels such that only one tab is visible at any given time.\\r\\n\\r\\n## `<md-tab-group>`\\r\\n### Properties\\r\\n\\r\\n| Name | Type | Description |\\r\\n| --- | --- | --- |\\r\\n| `selectedIndex` | `number` | The index of the currently active tab. |\\r\\n\\r\\n### Events\\r\\n\\r\\n| Name | Type | Description |\\r\\n| --- | --- | --- |\\r\\n| `focusChange` | `Event` | Fired when focus changes from one label to another |\\r\\n| `selectChange` | `Event` | Fired when the selected tab changes |\\r\\n\\r\\n### Examples\\r\\nA basic tab group would have the following markup.\\r\\n```html\\r\\n<md-tab-group>\\r\\n  <md-tab>\\r\\n    <template md-tab-label>One</template>\\r\\n    <template md-tab-content>\\r\\n      <h1>Some tab content</h1>\\r\\n      <p>...</p>\\r\\n    </template>\\r\\n  </md-tab>\\r\\n  <md-tab>\\r\\n    <template md-tab-label>Two</template>\\r\\n    <template md-tab-content>\\r\\n      <h1>Some more tab content</h1>\\r\\n      <p>...</p>\\r\\n    </template>\\r\\n  </md-tab>\\r\\n</md-tab-group>\\r\\n```\\r\\n\\r\\nIt is also possible to specifiy the active tab by using the `selectedIndex` property.\\r\\n\\r\\n```html\\r\\n<md-tab-group [selectedIndex]=\\\"1\\\">\\r\\n  ...\\r\\n</md-tab-group>\\r\\n```\\r\\n\\r\\n**Note**: The index always starts counting from `zero`.\\r\\n\"},{\"id\":\"toolbar\",\"content\":\"# MdToolbar\\r\\n`MdToolbar` is a vertical aligned bar, which can hold the application title or actions.\\r\\n\\r\\n### Screenshots\\r\\n![Preview](https://cloud.githubusercontent.com/assets/4987015/13727769/6d952c78-e900-11e5-890a-ccfd46996812.png)\\r\\n\\r\\n## `<md-toolbar>`\\r\\n### Bound Properties\\r\\n\\r\\n| Name | Type | Description |\\r\\n| --- | --- | --- |\\r\\n| `color` | `\\\"primary\\\" | \\\"accent\\\" | \\\"warn\\\"` | The color palette for the toolbar |\\r\\n\\r\\n### Notes\\r\\nThe `md-toolbar` component will use by default the background palette.\\r\\n\\r\\n### Examples\\r\\nA basic toolbar would have the following markup.\\r\\n```html\\r\\n<md-toolbar [color]=\\\"myColor\\\">\\r\\n  <span>My Application Title</span>\\r\\n</md-toolbar>\\r\\n```\\r\\n\\r\\nToolbars can also have multiple rows.<br/>\\r\\nMultiple rows inside of a `md-toolbar` can be added by appending as many as needed `<md-toolbar-row>` elements.\\r\\n\\r\\n```html\\r\\n<md-toolbar [color]=\\\"myColor\\\">\\r\\n  <span>First Row</span>\\r\\n  \\r\\n  <md-toolbar-row>\\r\\n    <span>Second Row</span>\\r\\n  </md-toolbar-row>\\r\\n  \\r\\n  <md-toolbar-row>\\r\\n    <span>Third Row</span>\\r\\n  </md-toolbar-row>\\r\\n</md-toolbar>\\r\\n```\\r\\n\\r\\n### Alignment\\r\\nThe alignment inside of a toolbar row can be easily done by using the flexbox layout.<br/>\\r\\nFor example, the following markup aligns the items on the `right`.\\r\\n\\r\\nCustom HTML\\r\\n```html\\r\\n<md-toolbar color=\\\"primary\\\">\\r\\n  <span>Application Title</span>\\r\\n  \\r\\n  <!-- This fills the remaining space of the current row -->\\r\\n  <span class=\\\"example-fill-remaining-space\\\"></span>\\r\\n  \\r\\n  <span>Right Aligned Text</span>\\r\\n</md-toolbar>\\r\\n```\\r\\n\\r\\nCustom SCSS\\r\\n```scss\\r\\n.example-fill-remaining-space {\\r\\n  // This fills the remaining space, by using flexbox. \\r\\n  // Every toolbar row uses a flexbox row layout.\\r\\n  flex: 1 1 auto;\\r\\n}\\r\\n```\\r\\n\\r\\nOutput\\r\\n![image](https://cloud.githubusercontent.com/assets/4987015/13730760/0864894e-e959-11e5-9312-7f3cb990d80a.png)\\r\\n\"},{\"id\":\"tooltip\",\"content\":\"# MdTooltip\\r\\nTooltip allows the user to specify text to be displayed when the mouse hover over an element.\\r\\n\\r\\n### Setup\\r\\nFor alpha.7, you need to include the overlay styles in your app via a `link` element. This will\\r\\nlook something like\\r\\n```html\\r\\n<link href=\\\"vendor/@angular2-material/core/overlay/overlay.css\\\" rel=\\\"stylesheet\\\">\\r\\n```\\r\\n\\r\\n\\r\\n### Examples\\r\\nA button with a tooltip\\r\\n```html\\r\\n<button md-tooltip=\\\"some message\\\" tooltip-position=\\\"below\\\">Button</button>\\r\\n```\\r\\n\\r\\n## `[md-tooltip]`\\r\\n### Properties\\r\\n\\r\\n| Name | Type | Description |\\r\\n| --- | --- | --- |\\r\\n| `md-tooltip` | `string` | The message to be displayed. |\\r\\n| `tooltip-position` | `\\\"above\\\"|\\\"below\\\"|\\\"before\\\"|\\\"after\\\"` | The position of the tooltip. |\\r\\n\\r\\n### Methods\\r\\n\\r\\n| Name | Description |\\r\\n| --- | --- | --- |\\r\\n| `show` | Displays the tooltip. |\\r\\n| `hide` | Removes the tooltip. |\\r\\n| `toggle` | Displays or hides the tooltip. |\\r\\n\"}])\n\nC:\\jbart5-ng\\projects\\material-demo\\ng-material-demo-loader.ts:\n    4  import {Component,NgModule,Injectable} from '@angular/core';\n    5  import {ViewChildren,QueryList,ViewEncapsulation,ViewChild,ViewContainerRef} from '@angular/core';\n    6: import {MD_INPUT_DIRECTIVES} from '@angular2-material/input/input';\n    7: import {MD_BUTTON_DIRECTIVES} from '@angular2-material/button/button';\n    8: import {MD_CARD_DIRECTIVES} from '@angular2-material/card/card';\n    9: import {MD_CHECKBOX_DIRECTIVES} from '@angular2-material/checkbox/checkbox';\n   10: import {MD_RADIO_DIRECTIVES} from '@angular2-material/radio/radio';\n   11: import {MdIcon} from '@angular2-material/icon/icon';\n   12: import {MdToolbar} from '@angular2-material/toolbar/toolbar';\n   13: //import {MdTooltip,TooltipComponent} from '@angular2-material/tooltip/tooltip';\n   14  \n   15: import {MD_BUTTON_TOGGLE_DIRECTIVES} from '@angular2-material/button-toggle/button-toggle';\n   16: import {MD_GRID_LIST_DIRECTIVES} from '@angular2-material/grid-list/grid-list';\n   17: import {MD_LIST_DIRECTIVES} from '@angular2-material/list/list';\n   18: import {MdRipple, MD_RIPPLE_DIRECTIVES} from '@angular2-material/core/ripple/ripple'; \n   19  \n   20: import {MD_PROGRESS_BAR_DIRECTIVES} from '@angular2-material/progress-bar/progress-bar'; \n   21: import {MD_PROGRESS_CIRCLE_DIRECTIVES} from '@angular2-material/progress-circle/progress-circle'; \n   22: import {MD_SLIDER_DIRECTIVES} from '@angular2-material/slider/slider';\n   23  \n   24: import {MdLiveAnnouncer} from '@angular2-material/core/a11y/live-announcer';\n   25: import { Overlay, OverlayState,OverlayOrigin, OVERLAY_PROVIDERS, ComponentPortal, Portal,TemplatePortalDirective} from '@angular2-material/core/core';\n   26  \n   27  import {\n   28    MdUniqueSelectionDispatcher\n   29: } from '@angular2-material/core/coordination/unique-selection-dispatcher';\n   30  \n   31  \n\nC:\\jbart5-ng\\src\\loader\\load-jbart.js:\n  136          studio: '/dist/projects/studio',\n  137  //        'hammerjs' : '/node_modules/hammerjs',\n  138:         '@angular2-material': '/node_modules/@angular2-material',\n  139          '@angular':  '/node_modules/@angular'\n  140        },\n  ...\n  157            defaultExtension: 'js',\n  158          },     \n  159:         '@angular2-material': {\n  160            format: 'cjs',\n  161            defaultExtension: 'js',\n\n49 matches across 13 files\n\n\nSearching 128 files for \"input.js\" (regex)\n\nC:\\jbart5-ng\\src\\ui\\md-styles\\input-md.ts:\n    2  import * as jb_ui from 'jb-ui';\n    3  \n    4: import {MdInput} from '@angular2-material/input/input.js';\n    5  jb_ui.registerDirectives({MdInput: MdInput});\n    6  \n\n1 match in 1 file\n\n\nSearching 128 files for \"ui-tests/rxjs/Subject\" (regex)\n\nC:\\jbart5-ng\\src\\ui\\md-styles\\group-md.ts:\n    ERROR: Unable to open file\n\n0 matches\n\nSearching 128 files for \"rxjs/Subject\" (regex)\n\nC:\\jbart5-ng\\src\\ui\\jb-rx.ts:\n    1: import {Subject} from 'rxjs/Subject';\n    2  import {Observable} from 'rxjs/Observable';\n    3  import 'rxjs/add/operator/merge';\n    .\n   24  //import * as jb_ui from 'jb-ui/jb-ui';\n   25  \n   26: export {Subject} from 'rxjs/Subject';\n   27  export {Observable} from 'rxjs/Observable';\n   28  \n\nC:\\jbart5-ng\\src\\ui\\md-styles\\group-md.ts:\n    ERROR: Unable to open file\n\n2 matches in 1 file\n\n\nSearching 128 files for \"rxjs/Subject\" (regex)\n\nC:\\jbart5-ng\\src\\ui\\jb-rx.ts:\n    1: //import {Subject} from 'rxjs/Subject';\n    2  //import {Observable} from 'rxjs/Observable';\n    3  import 'rxjs/add/operator/merge';\n    .\n   24  //import * as jb_ui from 'jb-ui/jb-ui';\n   25  \n   26: //export {Subject} from 'rxjs/Subject';\n   27  //export {Observable} from 'rxjs/Observable';\n   28  \n\nC:\\jbart5-ng\\src\\ui\\md-styles\\group-md.ts:\n    ERROR: Unable to open file\n\n2 matches in 1 file\n\n\nSearching 129 files for \"injector\"\n\nC:\\jbart5-ng\\src\\ui\\http.ts:\n   10  	],\n   11  	impl: (ctx,url) =>\n   12: 		ctx.vars.injector.get(Http)\n   13  			.get(url)\n   14  			.map(x=>\n\nC:\\jbart5-ng\\src\\ui\\jb-ui.ts:\n   14  export class jBartAllModule { }\n   15  \n   16: // import { NgModule, enableProdMode, Directive, Component, View, ViewContainerRef, ViewChild, Compiler, ElementRef, Renderer, Injector, Input, provide, NgZone, ViewEncapsulation, ChangeDetectionStrategy, ChangeDetectorRef} from '@angular/core';\n   17  // import { FormsModule, NG_VALUE_ACCESSOR,ControlValueAccessor, DefaultValueAccessor,  provideForms } from '@angular/forms';\n   18  // import { HttpModule, HTTP_PROVIDERS} from '@angular/http';\n   ..\n  466    	this._nativeElement = cmp_ref._hostElement.nativeElement;\n  467    	// assigning the disposable functions on the parent cmp. Probably these lines will need a change on next ng versions\n  468: 	var parentInjector = cmp_ref.hostView._view.parentInjector._view.parentInjector._view;\n  469: 	var parentCmp = parentInjector && (parentInjector._Cmp_0_4 || parentInjector.context);\n  470    	if (!parentCmp)\n  471    		return jb.logError('flattenjBComp: can not get parent component');\n  ...\n  539  })\n  540  export class jBartWidget {\n  541: 	constructor(private elementRef: ElementRef, public ngZone: NgZone, private injector: Injector) { }\n  542  	ngOnInit() { \n  543  		jbart.widgetLoaded = true; // indication for waitForIframeLoad\n  ...\n  591  			var resources = (jb.widgets[ns] && jb.widgets[ns].resources) || {};\n  592  			jb.extend(resources, { window: window, globals: { } });\n  593: 			jbart.initialCtx = jb.ctx({ resources: resources, vars: {ngZone: this.ngZone, injector: this.injector} }, {});\n  594  		}\n  595  		if (jbart.studioGlobals)\n\nC:\\jbart5-ng\\src\\ui\\ui-common.js:\n   87  })\n   88  \n   89: jb.component('injector-get', {\n   90  	type: 'data',\n   91  	params: [\n   ..\n   95  		var provider = jbart.ng.providers[providerId];\n   96  		if (provider)\n   97: 			return ctx.vars.injector.get(provider);\n   98: 		jb.logError('injector-get: provider ' + providerId + ' is not registered. Use jb_ui.registerProviders to register it');\n   99  	}\n  100  })\n\nC:\\jbart5-ng\\src\\ui\\md-styles\\group-md.ts:\n    ERROR: Unable to open file\n\nC:\\jbart5-ng\\src\\ui\\tree\\tree.ts:\n    5  import {NgClass} from 'angular2/common';\n    6  import {Observable,Subject} from 'rxjs/Rx';\n    7: import {Directive, Component, ElementRef, Injector, Input, NgZone} from '@angular/core';\n    8  \n    9  jb.type('tree.nodeModel');\n\n16 matches across 4 files\n\n\nSearching 129 files for \"injector\"\n\nC:\\jbart5-ng\\src\\ui\\http.ts:\n   10  	],\n   11  	impl: (ctx,url) =>\n   12: 		ctx.vars.injector.get(Http)\n   13  			.get(url)\n   14  			.map(x=>\n\nC:\\jbart5-ng\\src\\ui\\jb-ui.ts:\n   14  export class jBartAllModule { }\n   15  \n   16: // import { NgModule, enableProdMode, Directive, Component, View, ViewContainerRef, ViewChild, Compiler, ElementRef, Renderer, Injector, Input, provide, NgZone, ViewEncapsulation, ChangeDetectionStrategy, ChangeDetectorRef} from '@angular/core';\n   17  // import { FormsModule, NG_VALUE_ACCESSOR,ControlValueAccessor, DefaultValueAccessor,  provideForms } from '@angular/forms';\n   18  // import { HttpModule, HTTP_PROVIDERS} from '@angular/http';\n   ..\n  466    	this._nativeElement = cmp_ref._hostElement.nativeElement;\n  467    	// assigning the disposable functions on the parent cmp. Probably these lines will need a change on next ng versions\n  468: 	var parentInjector = cmp_ref.hostView._view.parentInjector._view.parentInjector._view;\n  469: 	var parentCmp = parentInjector && (parentInjector._Cmp_0_4 || parentInjector.context);\n  470    	if (!parentCmp)\n  471    		return jb.logError('flattenjBComp: can not get parent component');\n  ...\n  539  })\n  540  export class jBartWidget {\n  541: 	constructor(private elementRef: ElementRef, public ngZone: NgZone, private injector: Injector) { }\n  542  	ngOnInit() { \n  543  		jbart.widgetLoaded = true; // indication for waitForIframeLoad\n  ...\n  591  			var resources = (jb.widgets[ns] && jb.widgets[ns].resources) || {};\n  592  			jb.extend(resources, { window: window, globals: { } });\n  593: 			jbart.initialCtx = jb.ctx({ resources: resources, vars: {ngZone: this.ngZone, injector: this.injector} }, {});\n  594  		}\n  595  		if (jbart.studioGlobals)\n\nC:\\jbart5-ng\\src\\ui\\ui-common.js:\n   87  })\n   88  \n   89: jb.component('injector-get', {\n   90  	type: 'data',\n   91  	params: [\n   ..\n   95  		var provider = jbart.ng.providers[providerId];\n   96  		if (provider)\n   97: 			return ctx.vars.injector.get(provider);\n   98: 		jb.logError('injector-get: provider ' + providerId + ' is not registered. Use jb_ui.registerProviders to register it');\n   99  	}\n  100  })\n\nC:\\jbart5-ng\\src\\ui\\md-styles\\group-md.ts:\n    ERROR: Unable to open file\n\n15 matches across 3 files\n\n\nSearching 129 files for \"injector-get\"\n\nC:\\jbart5-ng\\src\\ui\\ui-common.js:\n   87  })\n   88  \n   89: jb.component('injector-get', {\n   90  	type: 'data',\n   91  	params: [\n   ..\n   96  		if (provider)\n   97  			return ctx.vars.injector.get(provider);\n   98: 		jb.logError('injector-get: provider ' + providerId + ' is not registered. Use jb_ui.registerProviders to register it');\n   99  	}\n  100  })\n\nC:\\jbart5-ng\\src\\ui\\md-styles\\group-md.ts:\n    ERROR: Unable to open file\n\n2 matches in 1 file\n\n\nSearching 129 files for \"jb_rx.Obs\"\n\nC:\\jbart5-ng\\src\\ui\\dialog.js:\n  173  		var dialog = context.vars.$dialog;\n  174  		jb.delay(10).then(() =>  { // delay - close older before    		\n  175: 			var clickoutEm = jb_rx.Observable.fromEvent(document, 'mousedown')\n  176: 			      			.merge(jb_rx.Observable.fromEvent(\n  177  			      				(jbart.previewWindow || {}).document, 'mousedown'))\n  178  			      			.filter(e =>\n  ...\n  277  				  }\n  278  \n  279: 				  var mouseUpEm = jb_rx.Observable.fromEvent(document, 'mouseup')\n  280: 				      			.merge(jb_rx.Observable.fromEvent(\n  281  				      				(jbart.previewWindow || {}).document, 'mouseup'))\n  282            						.takeUntil( cmp.jbEmitter.filter(x=>x =='destroy') )\n  283  \n  284: 				  var mouseMoveEm = jb_rx.Observable.fromEvent(document, 'mousemove')\n  285: 				      			.merge(jb_rx.Observable.fromEvent(\n  286  				      				(jbart.previewWindow || {}).document, 'mousemove'))\n  287            						.takeUntil( cmp.jbEmitter.filter(x=>x =='destroy') )\n\nC:\\jbart5-ng\\src\\ui\\features.js:\n   13        beforeInit: function(cmp) {\n   14            var waiting = cmp.jbWait();\n   15:           cmp.jbGroupChildrenEm = jb_rx.observableFromCtx(context.setData(waitFor))\n   16              .flatMap(x=>{\n   17                  var data = context.params.mapToResource(x);\n   ..\n   24              .startWith([loading(context)])\n   25              .catch(e=> \n   26:               jb_rx.Observable.of([error(context.setVars({error:e}))]));\n   27        },\n   28        observable: () => {} // to create jbEmitter\n   ..\n   72    impl: (context, data) => ({\n   73        beforeInit: function(cmp) {\n   74:           cmp.jbWatchGroupChildrenEm = (cmp.jbWatchGroupChildrenEm || jb_rx.Observable.of())\n   75                .merge(cmp.jbEmitter\n   76                  .filter(x => x == 'check')\n\nC:\\jbart5-ng\\src\\ui\\field.js:\n   40        var data_ref = context.vars.$model && context.vars.$model.databind;\n   41        if (!data_ref) return;\n   42:       var includeFirstEm = includeFirst ? jb_rx.Observable.of(jb.val(data_ref)) : jb_rx.Observable.of();\n   43        jb_rx.refObservable(data_ref,cmp)\n   44              .merge(includeFirstEm)\n\nC:\\jbart5-ng\\src\\ui\\group.js:\n   23          cmp.initGroup = function() {\n   24            cmp.title = context.params.title(context);\n   25:           (cmp.jbGroupChildrenEm || jb_rx.Observable.of(context.params.controls(cmp.ctx)))\n   26:               .merge(cmp.jbWatchGroupChildrenEm || jb_rx.Observable.of())\n   27                .takeUntil( cmp.jbEmitter.filter(x=>x =='destroy') )\n   28                .subscribe(comps=> {\n\nC:\\jbart5-ng\\src\\ui\\jb-ui.ts:\n  389    ngOnInit() {\n  390    	// redraw if script changed at studio\n  391: 		(jbart.modifiedCtrlsEm || jb_rx.Observable.of())\n  392: 				.merge(jbart.studioModifiedCtrlsEm || jb_rx.Observable.of())\n  393  				.flatMap(e=> {\n  394  					if (this.comp && [this.comp.callerPath, this.comp.ctx && this.comp.ctx.path].indexOf(e.path) != -1) {\n\nC:\\jbart5-ng\\src\\ui\\tabs.js:\n   18  \n   19          cmp.initTabs = function() {\n   20:           (cmp.jbGroupChildrenEm || jb_rx.Observable.of(context.params.tabs(cmp.ctx)))\n   21:               .merge(cmp.jbWatchGroupChildrenEm || jb_rx.Observable.of())\n   22                .subscribe(comps=> {\n   23                	cmp.comps = comps;\n\nC:\\jbart5-ng\\src\\ui\\md-styles\\group-md.ts:\n    ERROR: Unable to open file\n\nC:\\jbart5-ng\\src\\ui\\tree\\tree.ts:\n  138  \n  139    		  var databindObs = (context.params.databind && jb_rx.refObservable(context.params.databind,cmp)\n  140:         	.distinctUntilChanged()) || jb_rx.Observable.of();\n  141  \n  142  		  tree.selectionEmitter\n\nC:\\jbart5-ng\\projects\\material-demo\\material-demo-pick.js:\n  115  		  cmp.titleBelow = false;\n  116  \n  117: 		  var mouseMoveEm = jb_rx.Observable.fromEvent(document, 'mousemove');\n  118: 		  var userPick = jb_rx.Observable.fromEvent(document, 'mousedown');\n  119: 		  var keyUpEm = jb_rx.Observable.fromEvent(document, 'keyup');\n  120  \n  121  \n\nC:\\jbart5-ng\\projects\\studio\\studio-path.ts:\n  213    impl: (context, path_ref) =>({\n  214        beforeInit: cmp => {\n  215:           cmp.jbWatchGroupChildrenEm = (cmp.jbWatchGroupChildrenEm || jb_rx.Observable.of())\n  216                .merge(cmp.jbEmitter\n  217                  .filter(x => x == 'check')\n\nC:\\jbart5-ng\\projects\\studio\\studio-pick-dialog.ts:\n   78  		  cmp.titleBelow = false;\n   79  \n   80: 		  var mouseMoveEm = jb_rx.Observable.fromEvent(_window.document, 'mousemove');\n   81: 		  var userPick = jb_rx.Observable.fromEvent(document, 'mousedown')\n   82: 		      			.merge(jb_rx.Observable.fromEvent(\n   83  		      				(jbart.previewWindow || {}).document, 'mousedown'));\n   84: 		  var keyUpEm = jb_rx.Observable.fromEvent(document, 'keyup')\n   85: 		      			.merge(jb_rx.Observable.fromEvent(\n   86  		      				(jbart.previewWindow || {}).document, 'keyup'));\n   87  \n\nC:\\jbart5-ng\\projects\\studio\\studio-suggestions.ts:\n  228          var inputClosed = cmp.jbEmitter.filter(x=>x =='destroy');\n  229  \n  230:         cmp.keyEm = jb_rx.Observable.fromEvent(input, 'keydown')\n  231            .takeUntil(inputClosed);\n  232          suggestionCtx.keyEm = cmp.keyEm;\n\n28 matches across 11 files\n\n\nSearching 130 files for \"createComp\"\n\nC:\\jbart5-ng\\src\\ui\\jb-ui.ts:\n   70  		else\n   71  			try { \n   72: 			this.factory = factory_hash[this.hashkey()] = compiler.compileComponentSync(this.comp || this.createComp());\n   73  		} catch (e) {\n   74  			jb.logError('ng compilation error',this, e);\n   ..\n  445  	  		var componentFactory = this.compiler.compileComponentSync(comp);\n  446  \n  447: 	   	var cmp_ref = this.childView.createComponent(componentFactory);\n  448  	   	comp.registerMethods && comp.registerMethods(cmp_ref,this);\n  449  	    this.flattenjBComp(cmp_ref);\n  ...\n  514  export function insertComponent(comp, resolver, parentView) {\n  515    	return comp.compile(resolver).then(componentFactory => \n  516:   		comp.registerMethods(parentView.createComponent(componentFactory),comp)\n  517      )\n  518  }\n\nC:\\jbart5-ng\\src\\ui\\md-styles\\group-md.ts:\n    ERROR: Unable to open file\n\nC:\\jbart5-ng\\node_modules\\rxjs\\bundles\\Rx.js:\n  460       * @return {Notification<any>} The valueless \"complete\" Notification.\n  461       */\n  462:     Notification.createComplete = function () {\n  463          return this.completeNotification;\n  464      };\n  ...\n 7749      };\n 7750      DelaySubscriber.prototype._complete = function () {\n 7751:         this.scheduleNotification(Notification_1.Notification.createComplete());\n 7752      };\n 7753      return DelaySubscriber;\n ....\n 10020      MaterializeSubscriber.prototype._complete = function () {\n 10021          var destination = this.destination;\n 10022:         destination.next(Notification_1.Notification.createComplete());\n 10023          destination.complete();\n 10024      };\n .....\n 10839      };\n 10840      ObserveOnSubscriber.prototype._complete = function () {\n 10841:         this.scheduleMessage(Notification_1.Notification.createComplete());\n 10842      };\n 10843      return ObserveOnSubscriber;\n .....\n 15935              messages.push({ frame: _this.frame - outerFrame, notification: Notification_1.Notification.createError(err) });\n 15936          }, function () {\n 15937:             messages.push({ frame: _this.frame - outerFrame, notification: Notification_1.Notification.createComplete() });\n 15938          });\n 15939          return messages;\n .....\n 15958                  actual.push({ frame: _this.frame, notification: Notification_1.Notification.createError(err) });\n 15959              }, function () {\n 15960:                 actual.push({ frame: _this.frame, notification: Notification_1.Notification.createComplete() });\n 15961              });\n 15962          }, 0);\n .....\n 16079                      break;\n 16080                  case '|':\n 16081:                     notification = Notification_1.Notification.createComplete();\n 16082                      break;\n 16083                  case '^':\n\n10 matches across 2 files\n\n\nSearching 130 files for \"createComp(\"\n\nC:\\jbart5-ng\\src\\ui\\jb-ui.ts:\n   70  		else\n   71  			try { \n   72: 			this.factory = factory_hash[this.hashkey()] = compiler.compileComponentSync(this.comp || this.createComp());\n   73  		} catch (e) {\n   74  			jb.logError('ng compilation error',this, e);\n\nC:\\jbart5-ng\\src\\ui\\md-styles\\group-md.ts:\n    ERROR: Unable to open file\n\n1 match in 1 file\n\n\nSearching 130 files for \"jBartAllModule\"\n\nC:\\jbart5-ng\\src\\ui\\jb-ui.ts:\n  676    bootstrap:    [ jBartWidget ]\n  677  })\n  678: export class jBartAllModule { }\n  679  \n  680  \n\nC:\\jbart5-ng\\src\\ui\\md-styles\\group-md.ts:\n    ERROR: Unable to open file\n\nC:\\jbart5-ng\\src\\loader\\load-jbart.js:\n  198  function jbBootstrap(loadedModules) {\n  199    var platform = loadedModules['@angular/platform-browser-dynamic'].platformBrowserDynamic();\n  200:   var jbartModule = loadedModules['jb-ui'].jBartAllModule;\n  201    platform.bootstrapModule(jbartModule)\n  202      .catch(err => console.error(err))\n\n2 matches across 2 files\n\n\nSearching 130 files for \"setElementAttribute\"\n\nC:\\jbart5-ng\\src\\ui\\jb-ui.ts:\n   83  	  	var elem = cmp_ref._hostElement.nativeElement;\n   84  //	  	elem.setAttribute('jb-ctx',ctx.id);\n   85: 		cmp.renderer.setElementAttribute(elem,'jb-ctx',ctx.id);\n   86  		garbageCollectCtxDictionary();\n   87  		jbart.ctxDictionary[ctx.id] = ctx;\n\nC:\\jbart5-ng\\src\\ui\\md-styles\\group-md.ts:\n    ERROR: Unable to open file\n\nC:\\jbart5-ng\\src\\testing\\ui-testers.ts:\n   22  						.subscribe(x=>{\n   23  							Array.from(cmp.elementRef.nativeElement.querySelectorAll('input')).forEach(inp=>\n   24: 								cmp.renderer.setElementAttribute(inp,'title2',inp.value || '')\n   25  							)\n   26  							var html = cmp.elementRef.nativeElement.outerHTML;\n\n2 matches across 2 files\n\n\nSearching 130 files for \"Renderer\"\n\nC:\\jbart5-ng\\src\\ui\\jb-ui.ts:\n    1  import {jb} from 'jb-core';\n    2: import { enableProdMode, Compiler, NgModule, Component, View, ViewContainerRef, ViewChild, ViewChildElementRef, ElementRef, Injector, Renderer, Input, NgZone, ChangeDetectionStrategy, ChangeDetectorRef } from '@angular/core';\n    3  import { BrowserModule } from '@angular/platform-browser';\n    4  import { CommonModule } from '@angular/common';\n    .\n    6  import { FormsModule } from '@angular/forms';\n    7  \n    8: // import { NgModule, enableProdMode, Directive, Component, View, ViewContainerRef, ViewChild, Compiler, ElementRef, Renderer, Injector, Input, provide, NgZone, ViewEncapsulation, ChangeDetectionStrategy, ChangeDetectorRef} from '@angular/core';\n    9  // import { FormsModule, NG_VALUE_ACCESSOR,ControlValueAccessor, DefaultValueAccessor,  provideForms } from '@angular/forms';\n   10  // import { HttpModule, HTTP_PROVIDERS} from '@angular/http';\n   ..\n   83  	  	var elem = cmp_ref._hostElement.nativeElement;\n   84  //	  	elem.setAttribute('jb-ctx',ctx.id);\n   85: 		cmp.renderer.setElementAttribute(elem,'jb-ctx',ctx.id);\n   86  		garbageCollectCtxDictionary();\n   87  		jbart.ctxDictionary[ctx.id] = ctx;\n   ..\n  118  	    if (!this.annotations.selector)	this.annotations.selector = 'div';\n  119  \n  120: 	    var Cmp = function(dcl, elementRef, renderer, changeDetection) { this.dcl = dcl; this.elementRef = elementRef; this.renderer = renderer; this.changeDt =  changeDetection }\n  121  		Cmp = Reflect.decorate([\n  122  			Component(this.annotations),\n  123: 			Reflect.metadata('design:paramtypes', [Compiler, ElementRef, Renderer, ChangeDetectorRef])\n  124  		], Cmp);\n  125  		Cmp.prototype.ngOnInit = function() {\n\nC:\\jbart5-ng\\src\\ui\\md-styles\\group-md.ts:\n    ERROR: Unable to open file\n\nC:\\jbart5-ng\\src\\testing\\ui-testers.ts:\n   22  						.subscribe(x=>{\n   23  							Array.from(cmp.elementRef.nativeElement.querySelectorAll('input')).forEach(inp=>\n   24: 								cmp.renderer.setElementAttribute(inp,'title2',inp.value || '')\n   25  							)\n   26  							var html = cmp.elementRef.nativeElement.outerHTML;\n\nC:\\jbart5-ng\\node_modules\\@angular\\forms\\bundles\\forms.umd.js:\n  466       */\n  467      var CheckboxControlValueAccessor = (function () {\n  468:         function CheckboxControlValueAccessor(_renderer, _elementRef) {\n  469:             this._renderer = _renderer;\n  470              this._elementRef = _elementRef;\n  471              this.onChange = function (_) { };\n  ...\n  473          }\n  474          CheckboxControlValueAccessor.prototype.writeValue = function (value) {\n  475:             this._renderer.setElementProperty(this._elementRef.nativeElement, 'checked', value);\n  476          };\n  477          CheckboxControlValueAccessor.prototype.registerOnChange = function (fn) { this.onChange = fn; };\n  478          CheckboxControlValueAccessor.prototype.registerOnTouched = function (fn) { this.onTouched = fn; };\n  479          CheckboxControlValueAccessor.prototype.setDisabledState = function (isDisabled) {\n  480:             this._renderer.setElementProperty(this._elementRef.nativeElement, 'disabled', isDisabled);\n  481          };\n  482          CheckboxControlValueAccessor.decorators = [\n  ...\n  489          /** @nocollapse */\n  490          CheckboxControlValueAccessor.ctorParameters = [\n  491:             { type: _angular_core.Renderer, },\n  492              { type: _angular_core.ElementRef, },\n  493          ];\n  ...\n  512       */\n  513      var DefaultValueAccessor = (function () {\n  514:         function DefaultValueAccessor(_renderer, _elementRef) {\n  515:             this._renderer = _renderer;\n  516              this._elementRef = _elementRef;\n  517              this.onChange = function (_) { };\n  ...\n  520          DefaultValueAccessor.prototype.writeValue = function (value) {\n  521              var normalizedValue = isBlank(value) ? '' : value;\n  522:             this._renderer.setElementProperty(this._elementRef.nativeElement, 'value', normalizedValue);\n  523          };\n  524          DefaultValueAccessor.prototype.registerOnChange = function (fn) { this.onChange = fn; };\n  525          DefaultValueAccessor.prototype.registerOnTouched = function (fn) { this.onTouched = fn; };\n  526          DefaultValueAccessor.prototype.setDisabledState = function (isDisabled) {\n  527:             this._renderer.setElementProperty(this._elementRef.nativeElement, 'disabled', isDisabled);\n  528          };\n  529          DefaultValueAccessor.decorators = [\n  ...\n  539          /** @nocollapse */\n  540          DefaultValueAccessor.ctorParameters = [\n  541:             { type: _angular_core.Renderer, },\n  542              { type: _angular_core.ElementRef, },\n  543          ];\n  ...\n  584       */\n  585      var NumberValueAccessor = (function () {\n  586:         function NumberValueAccessor(_renderer, _elementRef) {\n  587:             this._renderer = _renderer;\n  588              this._elementRef = _elementRef;\n  589              this.onChange = function (_) { };\n  ...\n  593              // The value needs to be normalized for IE9, otherwise it is set to 'null' when null\n  594              var normalizedValue = isBlank(value) ? '' : value;\n  595:             this._renderer.setElementProperty(this._elementRef.nativeElement, 'value', normalizedValue);\n  596          };\n  597          NumberValueAccessor.prototype.registerOnChange = function (fn) {\n  ...\n  600          NumberValueAccessor.prototype.registerOnTouched = function (fn) { this.onTouched = fn; };\n  601          NumberValueAccessor.prototype.setDisabledState = function (isDisabled) {\n  602:             this._renderer.setElementProperty(this._elementRef.nativeElement, 'disabled', isDisabled);\n  603          };\n  604          NumberValueAccessor.decorators = [\n  ...\n  615          /** @nocollapse */\n  616          NumberValueAccessor.ctorParameters = [\n  617:             { type: _angular_core.Renderer, },\n  618              { type: _angular_core.ElementRef, },\n  619          ];\n  ...\n  745       */\n  746      var RadioControlValueAccessor = (function () {\n  747:         function RadioControlValueAccessor(_renderer, _elementRef, _registry, _injector) {\n  748:             this._renderer = _renderer;\n  749              this._elementRef = _elementRef;\n  750              this._registry = _registry;\n  ...\n  761          RadioControlValueAccessor.prototype.writeValue = function (value) {\n  762              this._state = value === this.value;\n  763:             this._renderer.setElementProperty(this._elementRef.nativeElement, 'checked', this._state);\n  764          };\n  765          RadioControlValueAccessor.prototype.registerOnChange = function (fn) {\n  ...\n  774          RadioControlValueAccessor.prototype.registerOnTouched = function (fn) { this.onTouched = fn; };\n  775          RadioControlValueAccessor.prototype.setDisabledState = function (isDisabled) {\n  776:             this._renderer.setElementProperty(this._elementRef.nativeElement, 'disabled', isDisabled);\n  777          };\n  778          RadioControlValueAccessor.prototype._checkName = function () {\n  ...\n  795          /** @nocollapse */\n  796          RadioControlValueAccessor.ctorParameters = [\n  797:             { type: _angular_core.Renderer, },\n  798              { type: _angular_core.ElementRef, },\n  799              { type: RadioControlRegistry, },\n  ...\n  862       */\n  863      var SelectControlValueAccessor = (function () {\n  864:         function SelectControlValueAccessor(_renderer, _elementRef) {\n  865:             this._renderer = _renderer;\n  866              this._elementRef = _elementRef;\n  867              /** @internal */\n  ...\n  875              this.value = value;\n  876              var valueString = _buildValueString(this._getOptionId(value), value);\n  877:             this._renderer.setElementProperty(this._elementRef.nativeElement, 'value', valueString);\n  878          };\n  879          SelectControlValueAccessor.prototype.registerOnChange = function (fn) {\n  ...\n  886          SelectControlValueAccessor.prototype.registerOnTouched = function (fn) { this.onTouched = fn; };\n  887          SelectControlValueAccessor.prototype.setDisabledState = function (isDisabled) {\n  888:             this._renderer.setElementProperty(this._elementRef.nativeElement, 'disabled', isDisabled);\n  889          };\n  890          /** @internal */\n  ...\n  913          /** @nocollapse */\n  914          SelectControlValueAccessor.ctorParameters = [\n  915:             { type: _angular_core.Renderer, },\n  916              { type: _angular_core.ElementRef, },\n  917          ];\n  ...\n  928       */\n  929      var NgSelectOption = (function () {\n  930:         function NgSelectOption(_element, _renderer, _select) {\n  931              this._element = _element;\n  932:             this._renderer = _renderer;\n  933              this._select = _select;\n  934              if (isPresent(this._select))\n  ...\n  957          /** @internal */\n  958          NgSelectOption.prototype._setElementValue = function (value) {\n  959:             this._renderer.setElementProperty(this._element.nativeElement, 'value', value);\n  960          };\n  961          NgSelectOption.prototype.ngOnDestroy = function () {\n  ...\n  971          NgSelectOption.ctorParameters = [\n  972              { type: _angular_core.ElementRef, },\n  973:             { type: _angular_core.Renderer, },\n  974              { type: SelectControlValueAccessor, decorators: [{ type: _angular_core.Optional }, { type: _angular_core.Host },] },\n  975          ];\n  ...\n 1004       */\n 1005      var SelectMultipleControlValueAccessor = (function () {\n 1006:         function SelectMultipleControlValueAccessor(_renderer, _elementRef) {\n 1007:             this._renderer = _renderer;\n 1008              this._elementRef = _elementRef;\n 1009              /** @internal */\n ....\n 1051          SelectMultipleControlValueAccessor.prototype.registerOnTouched = function (fn) { this.onTouched = fn; };\n 1052          SelectMultipleControlValueAccessor.prototype.setDisabledState = function (isDisabled) {\n 1053:             this._renderer.setElementProperty(this._elementRef.nativeElement, 'disabled', isDisabled);\n 1054          };\n 1055          /** @internal */\n ....\n 1082          /** @nocollapse */\n 1083          SelectMultipleControlValueAccessor.ctorParameters = [\n 1084:             { type: _angular_core.Renderer, },\n 1085              { type: _angular_core.ElementRef, },\n 1086          ];\n ....\n 1099       */\n 1100      var NgSelectMultipleOption = (function () {\n 1101:         function NgSelectMultipleOption(_element, _renderer, _select) {\n 1102              this._element = _element;\n 1103:             this._renderer = _renderer;\n 1104              this._select = _select;\n 1105              if (isPresent(this._select)) {\n ....\n 1134          /** @internal */\n 1135          NgSelectMultipleOption.prototype._setElementValue = function (value) {\n 1136:             this._renderer.setElementProperty(this._element.nativeElement, 'value', value);\n 1137          };\n 1138          /** @internal */\n 1139          NgSelectMultipleOption.prototype._setSelected = function (selected) {\n 1140:             this._renderer.setElementProperty(this._element.nativeElement, 'selected', selected);\n 1141          };\n 1142          NgSelectMultipleOption.prototype.ngOnDestroy = function () {\n ....\n 1152          NgSelectMultipleOption.ctorParameters = [\n 1153              { type: _angular_core.ElementRef, },\n 1154:             { type: _angular_core.Renderer, },\n 1155              { type: SelectMultipleControlValueAccessor, decorators: [{ type: _angular_core.Optional }, { type: _angular_core.Host },] },\n 1156          ];\n\n54 matches across 3 files\n\n\nSearching 130 files for \"Renderer\"\n\nC:\\jbart5-ng\\src\\ui\\jb-ui.ts:\n    6  import { FormsModule } from '@angular/forms';\n    7  \n    8: // import { NgModule, enableProdMode, Directive, Component, View, ViewContainerRef, ViewChild, Compiler, ElementRef, Renderer, Injector, Input, provide, NgZone, ViewEncapsulation, ChangeDetectionStrategy, ChangeDetectorRef} from '@angular/core';\n    9  // import { FormsModule, NG_VALUE_ACCESSOR,ControlValueAccessor, DefaultValueAccessor,  provideForms } from '@angular/forms';\n   10  // import { HttpModule, HTTP_PROVIDERS} from '@angular/http';\n   ..\n   83  	  	var elem = cmp_ref._hostElement.nativeElement;\n   84  //	  	elem.setAttribute('jb-ctx',ctx.id);\n   85: 		cmp.renderer.setElementAttribute(elem,'jb-ctx',ctx.id);\n   86  		garbageCollectCtxDictionary();\n   87  		jbart.ctxDictionary[ctx.id] = ctx;\n   ..\n  118  	    if (!this.annotations.selector)	this.annotations.selector = 'div';\n  119  \n  120: 	    var Cmp = function(dcl, elementRef, renderer, changeDetection) { this.dcl = dcl; this.elementRef = elementRef; this.renderer = renderer; this.changeDt =  changeDetection }\n  121  		Cmp = Reflect.decorate([\n  122  			Component(this.annotations),\n  123: 			Reflect.metadata('design:paramtypes', [Compiler, ElementRef, Renderer, ChangeDetectorRef])\n  124  		], Cmp);\n  125  		Cmp.prototype.ngOnInit = function() {\n\nC:\\jbart5-ng\\src\\ui\\md-styles\\group-md.ts:\n    ERROR: Unable to open file\n\nC:\\jbart5-ng\\src\\testing\\ui-testers.ts:\n   22  						.subscribe(x=>{\n   23  							Array.from(cmp.elementRef.nativeElement.querySelectorAll('input')).forEach(inp=>\n   24: 								cmp.renderer.setElementAttribute(inp,'title2',inp.value || '')\n   25  							)\n   26  							var html = cmp.elementRef.nativeElement.outerHTML;\n\nC:\\jbart5-ng\\node_modules\\@angular\\forms\\bundles\\forms.umd.js:\n  466       */\n  467      var CheckboxControlValueAccessor = (function () {\n  468:         function CheckboxControlValueAccessor(_renderer, _elementRef) {\n  469:             this._renderer = _renderer;\n  470              this._elementRef = _elementRef;\n  471              this.onChange = function (_) { };\n  ...\n  473          }\n  474          CheckboxControlValueAccessor.prototype.writeValue = function (value) {\n  475:             this._renderer.setElementProperty(this._elementRef.nativeElement, 'checked', value);\n  476          };\n  477          CheckboxControlValueAccessor.prototype.registerOnChange = function (fn) { this.onChange = fn; };\n  478          CheckboxControlValueAccessor.prototype.registerOnTouched = function (fn) { this.onTouched = fn; };\n  479          CheckboxControlValueAccessor.prototype.setDisabledState = function (isDisabled) {\n  480:             this._renderer.setElementProperty(this._elementRef.nativeElement, 'disabled', isDisabled);\n  481          };\n  482          CheckboxControlValueAccessor.decorators = [\n  ...\n  489          /** @nocollapse */\n  490          CheckboxControlValueAccessor.ctorParameters = [\n  491:             { type: _angular_core.Renderer, },\n  492              { type: _angular_core.ElementRef, },\n  493          ];\n  ...\n  512       */\n  513      var DefaultValueAccessor = (function () {\n  514:         function DefaultValueAccessor(_renderer, _elementRef) {\n  515:             this._renderer = _renderer;\n  516              this._elementRef = _elementRef;\n  517              this.onChange = function (_) { };\n  ...\n  520          DefaultValueAccessor.prototype.writeValue = function (value) {\n  521              var normalizedValue = isBlank(value) ? '' : value;\n  522:             this._renderer.setElementProperty(this._elementRef.nativeElement, 'value', normalizedValue);\n  523          };\n  524          DefaultValueAccessor.prototype.registerOnChange = function (fn) { this.onChange = fn; };\n  525          DefaultValueAccessor.prototype.registerOnTouched = function (fn) { this.onTouched = fn; };\n  526          DefaultValueAccessor.prototype.setDisabledState = function (isDisabled) {\n  527:             this._renderer.setElementProperty(this._elementRef.nativeElement, 'disabled', isDisabled);\n  528          };\n  529          DefaultValueAccessor.decorators = [\n  ...\n  539          /** @nocollapse */\n  540          DefaultValueAccessor.ctorParameters = [\n  541:             { type: _angular_core.Renderer, },\n  542              { type: _angular_core.ElementRef, },\n  543          ];\n  ...\n  584       */\n  585      var NumberValueAccessor = (function () {\n  586:         function NumberValueAccessor(_renderer, _elementRef) {\n  587:             this._renderer = _renderer;\n  588              this._elementRef = _elementRef;\n  589              this.onChange = function (_) { };\n  ...\n  593              // The value needs to be normalized for IE9, otherwise it is set to 'null' when null\n  594              var normalizedValue = isBlank(value) ? '' : value;\n  595:             this._renderer.setElementProperty(this._elementRef.nativeElement, 'value', normalizedValue);\n  596          };\n  597          NumberValueAccessor.prototype.registerOnChange = function (fn) {\n  ...\n  600          NumberValueAccessor.prototype.registerOnTouched = function (fn) { this.onTouched = fn; };\n  601          NumberValueAccessor.prototype.setDisabledState = function (isDisabled) {\n  602:             this._renderer.setElementProperty(this._elementRef.nativeElement, 'disabled', isDisabled);\n  603          };\n  604          NumberValueAccessor.decorators = [\n  ...\n  615          /** @nocollapse */\n  616          NumberValueAccessor.ctorParameters = [\n  617:             { type: _angular_core.Renderer, },\n  618              { type: _angular_core.ElementRef, },\n  619          ];\n  ...\n  745       */\n  746      var RadioControlValueAccessor = (function () {\n  747:         function RadioControlValueAccessor(_renderer, _elementRef, _registry, _injector) {\n  748:             this._renderer = _renderer;\n  749              this._elementRef = _elementRef;\n  750              this._registry = _registry;\n  ...\n  761          RadioControlValueAccessor.prototype.writeValue = function (value) {\n  762              this._state = value === this.value;\n  763:             this._renderer.setElementProperty(this._elementRef.nativeElement, 'checked', this._state);\n  764          };\n  765          RadioControlValueAccessor.prototype.registerOnChange = function (fn) {\n  ...\n  774          RadioControlValueAccessor.prototype.registerOnTouched = function (fn) { this.onTouched = fn; };\n  775          RadioControlValueAccessor.prototype.setDisabledState = function (isDisabled) {\n  776:             this._renderer.setElementProperty(this._elementRef.nativeElement, 'disabled', isDisabled);\n  777          };\n  778          RadioControlValueAccessor.prototype._checkName = function () {\n  ...\n  795          /** @nocollapse */\n  796          RadioControlValueAccessor.ctorParameters = [\n  797:             { type: _angular_core.Renderer, },\n  798              { type: _angular_core.ElementRef, },\n  799              { type: RadioControlRegistry, },\n  ...\n  862       */\n  863      var SelectControlValueAccessor = (function () {\n  864:         function SelectControlValueAccessor(_renderer, _elementRef) {\n  865:             this._renderer = _renderer;\n  866              this._elementRef = _elementRef;\n  867              /** @internal */\n  ...\n  875              this.value = value;\n  876              var valueString = _buildValueString(this._getOptionId(value), value);\n  877:             this._renderer.setElementProperty(this._elementRef.nativeElement, 'value', valueString);\n  878          };\n  879          SelectControlValueAccessor.prototype.registerOnChange = function (fn) {\n  ...\n  886          SelectControlValueAccessor.prototype.registerOnTouched = function (fn) { this.onTouched = fn; };\n  887          SelectControlValueAccessor.prototype.setDisabledState = function (isDisabled) {\n  888:             this._renderer.setElementProperty(this._elementRef.nativeElement, 'disabled', isDisabled);\n  889          };\n  890          /** @internal */\n  ...\n  913          /** @nocollapse */\n  914          SelectControlValueAccessor.ctorParameters = [\n  915:             { type: _angular_core.Renderer, },\n  916              { type: _angular_core.ElementRef, },\n  917          ];\n  ...\n  928       */\n  929      var NgSelectOption = (function () {\n  930:         function NgSelectOption(_element, _renderer, _select) {\n  931              this._element = _element;\n  932:             this._renderer = _renderer;\n  933              this._select = _select;\n  934              if (isPresent(this._select))\n  ...\n  957          /** @internal */\n  958          NgSelectOption.prototype._setElementValue = function (value) {\n  959:             this._renderer.setElementProperty(this._element.nativeElement, 'value', value);\n  960          };\n  961          NgSelectOption.prototype.ngOnDestroy = function () {\n  ...\n  971          NgSelectOption.ctorParameters = [\n  972              { type: _angular_core.ElementRef, },\n  973:             { type: _angular_core.Renderer, },\n  974              { type: SelectControlValueAccessor, decorators: [{ type: _angular_core.Optional }, { type: _angular_core.Host },] },\n  975          ];\n  ...\n 1004       */\n 1005      var SelectMultipleControlValueAccessor = (function () {\n 1006:         function SelectMultipleControlValueAccessor(_renderer, _elementRef) {\n 1007:             this._renderer = _renderer;\n 1008              this._elementRef = _elementRef;\n 1009              /** @internal */\n ....\n 1051          SelectMultipleControlValueAccessor.prototype.registerOnTouched = function (fn) { this.onTouched = fn; };\n 1052          SelectMultipleControlValueAccessor.prototype.setDisabledState = function (isDisabled) {\n 1053:             this._renderer.setElementProperty(this._elementRef.nativeElement, 'disabled', isDisabled);\n 1054          };\n 1055          /** @internal */\n ....\n 1082          /** @nocollapse */\n 1083          SelectMultipleControlValueAccessor.ctorParameters = [\n 1084:             { type: _angular_core.Renderer, },\n 1085              { type: _angular_core.ElementRef, },\n 1086          ];\n ....\n 1099       */\n 1100      var NgSelectMultipleOption = (function () {\n 1101:         function NgSelectMultipleOption(_element, _renderer, _select) {\n 1102              this._element = _element;\n 1103:             this._renderer = _renderer;\n 1104              this._select = _select;\n 1105              if (isPresent(this._select)) {\n ....\n 1134          /** @internal */\n 1135          NgSelectMultipleOption.prototype._setElementValue = function (value) {\n 1136:             this._renderer.setElementProperty(this._element.nativeElement, 'value', value);\n 1137          };\n 1138          /** @internal */\n 1139          NgSelectMultipleOption.prototype._setSelected = function (selected) {\n 1140:             this._renderer.setElementProperty(this._element.nativeElement, 'selected', selected);\n 1141          };\n 1142          NgSelectMultipleOption.prototype.ngOnDestroy = function () {\n ....\n 1152          NgSelectMultipleOption.ctorParameters = [\n 1153              { type: _angular_core.ElementRef, },\n 1154:             { type: _angular_core.Renderer, },\n 1155              { type: SelectMultipleControlValueAccessor, decorators: [{ type: _angular_core.Optional }, { type: _angular_core.Host },] },\n 1156          ];\n\n53 matches across 3 files\n\n\nSearching 130 files for \"renderer\"\n\nC:\\jbart5-ng\\src\\ui\\jb-ui.ts:\n    6  import { FormsModule } from '@angular/forms';\n    7  \n    8: // import { NgModule, enableProdMode, Directive, Component, View, ViewContainerRef, ViewChild, Compiler, ElementRef, Renderer, Injector, Input, provide, NgZone, ViewEncapsulation, ChangeDetectionStrategy, ChangeDetectorRef} from '@angular/core';\n    9  // import { FormsModule, NG_VALUE_ACCESSOR,ControlValueAccessor, DefaultValueAccessor,  provideForms } from '@angular/forms';\n   10  // import { HttpModule, HTTP_PROVIDERS} from '@angular/http';\n   ..\n   83  	  	var elem = cmp_ref._hostElement.nativeElement;\n   84  //	  	elem.setAttribute('jb-ctx',ctx.id);\n   85: 		cmp.renderer.setElementAttribute(elem,'jb-ctx',ctx.id);\n   86  		garbageCollectCtxDictionary();\n   87  		jbart.ctxDictionary[ctx.id] = ctx;\n   ..\n  118  	    if (!this.annotations.selector)	this.annotations.selector = 'div';\n  119  \n  120: 	    var Cmp = function(dcl, elementRef, changeDetection) { this.dcl = dcl; this.elementRef = elementRef; this.renderer = renderer; this.changeDt =  changeDetection }\n  121  		Cmp = Reflect.decorate([\n  122  			Component(this.annotations),\n  123: 			Reflect.metadata('design:paramtypes', [Compiler, ElementRef, Renderer, ChangeDetectorRef])\n  124  		], Cmp);\n  125  		Cmp.prototype.ngOnInit = function() {\n\nC:\\jbart5-ng\\src\\ui\\md-styles\\group-md.ts:\n    ERROR: Unable to open file\n\nC:\\jbart5-ng\\src\\testing\\ui-testers.ts:\n   22  						.subscribe(x=>{\n   23  							Array.from(cmp.elementRef.nativeElement.querySelectorAll('input')).forEach(inp=>\n   24: 								cmp.renderer.setElementAttribute(inp,'title2',inp.value || '')\n   25  							)\n   26  							var html = cmp.elementRef.nativeElement.outerHTML;\n\nC:\\jbart5-ng\\node_modules\\@angular\\forms\\bundles\\forms.umd.js:\n  466       */\n  467      var CheckboxControlValueAccessor = (function () {\n  468:         function CheckboxControlValueAccessor(_renderer, _elementRef) {\n  469:             this._renderer = _renderer;\n  470              this._elementRef = _elementRef;\n  471              this.onChange = function (_) { };\n  ...\n  473          }\n  474          CheckboxControlValueAccessor.prototype.writeValue = function (value) {\n  475:             this._renderer.setElementProperty(this._elementRef.nativeElement, 'checked', value);\n  476          };\n  477          CheckboxControlValueAccessor.prototype.registerOnChange = function (fn) { this.onChange = fn; };\n  478          CheckboxControlValueAccessor.prototype.registerOnTouched = function (fn) { this.onTouched = fn; };\n  479          CheckboxControlValueAccessor.prototype.setDisabledState = function (isDisabled) {\n  480:             this._renderer.setElementProperty(this._elementRef.nativeElement, 'disabled', isDisabled);\n  481          };\n  482          CheckboxControlValueAccessor.decorators = [\n  ...\n  489          /** @nocollapse */\n  490          CheckboxControlValueAccessor.ctorParameters = [\n  491:             { type: _angular_core.Renderer, },\n  492              { type: _angular_core.ElementRef, },\n  493          ];\n  ...\n  512       */\n  513      var DefaultValueAccessor = (function () {\n  514:         function DefaultValueAccessor(_renderer, _elementRef) {\n  515:             this._renderer = _renderer;\n  516              this._elementRef = _elementRef;\n  517              this.onChange = function (_) { };\n  ...\n  520          DefaultValueAccessor.prototype.writeValue = function (value) {\n  521              var normalizedValue = isBlank(value) ? '' : value;\n  522:             this._renderer.setElementProperty(this._elementRef.nativeElement, 'value', normalizedValue);\n  523          };\n  524          DefaultValueAccessor.prototype.registerOnChange = function (fn) { this.onChange = fn; };\n  525          DefaultValueAccessor.prototype.registerOnTouched = function (fn) { this.onTouched = fn; };\n  526          DefaultValueAccessor.prototype.setDisabledState = function (isDisabled) {\n  527:             this._renderer.setElementProperty(this._elementRef.nativeElement, 'disabled', isDisabled);\n  528          };\n  529          DefaultValueAccessor.decorators = [\n  ...\n  539          /** @nocollapse */\n  540          DefaultValueAccessor.ctorParameters = [\n  541:             { type: _angular_core.Renderer, },\n  542              { type: _angular_core.ElementRef, },\n  543          ];\n  ...\n  584       */\n  585      var NumberValueAccessor = (function () {\n  586:         function NumberValueAccessor(_renderer, _elementRef) {\n  587:             this._renderer = _renderer;\n  588              this._elementRef = _elementRef;\n  589              this.onChange = function (_) { };\n  ...\n  593              // The value needs to be normalized for IE9, otherwise it is set to 'null' when null\n  594              var normalizedValue = isBlank(value) ? '' : value;\n  595:             this._renderer.setElementProperty(this._elementRef.nativeElement, 'value', normalizedValue);\n  596          };\n  597          NumberValueAccessor.prototype.registerOnChange = function (fn) {\n  ...\n  600          NumberValueAccessor.prototype.registerOnTouched = function (fn) { this.onTouched = fn; };\n  601          NumberValueAccessor.prototype.setDisabledState = function (isDisabled) {\n  602:             this._renderer.setElementProperty(this._elementRef.nativeElement, 'disabled', isDisabled);\n  603          };\n  604          NumberValueAccessor.decorators = [\n  ...\n  615          /** @nocollapse */\n  616          NumberValueAccessor.ctorParameters = [\n  617:             { type: _angular_core.Renderer, },\n  618              { type: _angular_core.ElementRef, },\n  619          ];\n  ...\n  745       */\n  746      var RadioControlValueAccessor = (function () {\n  747:         function RadioControlValueAccessor(_renderer, _elementRef, _registry, _injector) {\n  748:             this._renderer = _renderer;\n  749              this._elementRef = _elementRef;\n  750              this._registry = _registry;\n  ...\n  761          RadioControlValueAccessor.prototype.writeValue = function (value) {\n  762              this._state = value === this.value;\n  763:             this._renderer.setElementProperty(this._elementRef.nativeElement, 'checked', this._state);\n  764          };\n  765          RadioControlValueAccessor.prototype.registerOnChange = function (fn) {\n  ...\n  774          RadioControlValueAccessor.prototype.registerOnTouched = function (fn) { this.onTouched = fn; };\n  775          RadioControlValueAccessor.prototype.setDisabledState = function (isDisabled) {\n  776:             this._renderer.setElementProperty(this._elementRef.nativeElement, 'disabled', isDisabled);\n  777          };\n  778          RadioControlValueAccessor.prototype._checkName = function () {\n  ...\n  795          /** @nocollapse */\n  796          RadioControlValueAccessor.ctorParameters = [\n  797:             { type: _angular_core.Renderer, },\n  798              { type: _angular_core.ElementRef, },\n  799              { type: RadioControlRegistry, },\n  ...\n  862       */\n  863      var SelectControlValueAccessor = (function () {\n  864:         function SelectControlValueAccessor(_renderer, _elementRef) {\n  865:             this._renderer = _renderer;\n  866              this._elementRef = _elementRef;\n  867              /** @internal */\n  ...\n  875              this.value = value;\n  876              var valueString = _buildValueString(this._getOptionId(value), value);\n  877:             this._renderer.setElementProperty(this._elementRef.nativeElement, 'value', valueString);\n  878          };\n  879          SelectControlValueAccessor.prototype.registerOnChange = function (fn) {\n  ...\n  886          SelectControlValueAccessor.prototype.registerOnTouched = function (fn) { this.onTouched = fn; };\n  887          SelectControlValueAccessor.prototype.setDisabledState = function (isDisabled) {\n  888:             this._renderer.setElementProperty(this._elementRef.nativeElement, 'disabled', isDisabled);\n  889          };\n  890          /** @internal */\n  ...\n  913          /** @nocollapse */\n  914          SelectControlValueAccessor.ctorParameters = [\n  915:             { type: _angular_core.Renderer, },\n  916              { type: _angular_core.ElementRef, },\n  917          ];\n  ...\n  928       */\n  929      var NgSelectOption = (function () {\n  930:         function NgSelectOption(_element, _renderer, _select) {\n  931              this._element = _element;\n  932:             this._renderer = _renderer;\n  933              this._select = _select;\n  934              if (isPresent(this._select))\n  ...\n  957          /** @internal */\n  958          NgSelectOption.prototype._setElementValue = function (value) {\n  959:             this._renderer.setElementProperty(this._element.nativeElement, 'value', value);\n  960          };\n  961          NgSelectOption.prototype.ngOnDestroy = function () {\n  ...\n  971          NgSelectOption.ctorParameters = [\n  972              { type: _angular_core.ElementRef, },\n  973:             { type: _angular_core.Renderer, },\n  974              { type: SelectControlValueAccessor, decorators: [{ type: _angular_core.Optional }, { type: _angular_core.Host },] },\n  975          ];\n  ...\n 1004       */\n 1005      var SelectMultipleControlValueAccessor = (function () {\n 1006:         function SelectMultipleControlValueAccessor(_renderer, _elementRef) {\n 1007:             this._renderer = _renderer;\n 1008              this._elementRef = _elementRef;\n 1009              /** @internal */\n ....\n 1051          SelectMultipleControlValueAccessor.prototype.registerOnTouched = function (fn) { this.onTouched = fn; };\n 1052          SelectMultipleControlValueAccessor.prototype.setDisabledState = function (isDisabled) {\n 1053:             this._renderer.setElementProperty(this._elementRef.nativeElement, 'disabled', isDisabled);\n 1054          };\n 1055          /** @internal */\n ....\n 1082          /** @nocollapse */\n 1083          SelectMultipleControlValueAccessor.ctorParameters = [\n 1084:             { type: _angular_core.Renderer, },\n 1085              { type: _angular_core.ElementRef, },\n 1086          ];\n ....\n 1099       */\n 1100      var NgSelectMultipleOption = (function () {\n 1101:         function NgSelectMultipleOption(_element, _renderer, _select) {\n 1102              this._element = _element;\n 1103:             this._renderer = _renderer;\n 1104              this._select = _select;\n 1105              if (isPresent(this._select)) {\n ....\n 1134          /** @internal */\n 1135          NgSelectMultipleOption.prototype._setElementValue = function (value) {\n 1136:             this._renderer.setElementProperty(this._element.nativeElement, 'value', value);\n 1137          };\n 1138          /** @internal */\n 1139          NgSelectMultipleOption.prototype._setSelected = function (selected) {\n 1140:             this._renderer.setElementProperty(this._element.nativeElement, 'selected', selected);\n 1141          };\n 1142          NgSelectMultipleOption.prototype.ngOnDestroy = function () {\n ....\n 1152          NgSelectMultipleOption.ctorParameters = [\n 1153              { type: _angular_core.ElementRef, },\n 1154:             { type: _angular_core.Renderer, },\n 1155              { type: SelectMultipleControlValueAccessor, decorators: [{ type: _angular_core.Optional }, { type: _angular_core.Host },] },\n 1156          ];\n\n52 matches across 3 files\n\n\nSearching 130 files for \"renderer\"\n\nC:\\jbart5-ng\\src\\ui\\jb-ui.ts:\n    6  import { FormsModule } from '@angular/forms';\n    7  \n    8: // import { NgModule, enableProdMode, Directive, Component, View, ViewContainerRef, ViewChild, Compiler, ElementRef, Renderer, Injector, Input, provide, NgZone, ViewEncapsulation, ChangeDetectionStrategy, ChangeDetectorRef} from '@angular/core';\n    9  // import { FormsModule, NG_VALUE_ACCESSOR,ControlValueAccessor, DefaultValueAccessor,  provideForms } from '@angular/forms';\n   10  // import { HttpModule, HTTP_PROVIDERS} from '@angular/http';\n   ..\n   83  	  	var elem = cmp_ref._hostElement.nativeElement;\n   84  	  	elem.setAttribute('jb-ctx',ctx.id);\n   85: //		cmp.renderer.setElementAttribute(elem,'jb-ctx',ctx.id);\n   86  		garbageCollectCtxDictionary();\n   87  		jbart.ctxDictionary[ctx.id] = ctx;\n   ..\n  118  	    if (!this.annotations.selector)	this.annotations.selector = 'div';\n  119  \n  120: 	    var Cmp = function(dcl, elementRef, changeDetection) { this.dcl = dcl; this.elementRef = elementRef; this.renderer = renderer; this.changeDt =  changeDetection }\n  121  		Cmp = Reflect.decorate([\n  122  			Component(this.annotations),\n  123: 			Reflect.metadata('design:paramtypes', [Compiler, ElementRef, Renderer, ChangeDetectorRef])\n  124  		], Cmp);\n  125  		Cmp.prototype.ngOnInit = function() {\n\nC:\\jbart5-ng\\src\\ui\\md-styles\\group-md.ts:\n    ERROR: Unable to open file\n\nC:\\jbart5-ng\\src\\testing\\ui-testers.ts:\n   22  						.subscribe(x=>{\n   23  							Array.from(cmp.elementRef.nativeElement.querySelectorAll('input')).forEach(inp=>\n   24: 								cmp.renderer.setElementAttribute(inp,'title2',inp.value || '')\n   25  							)\n   26  							var html = cmp.elementRef.nativeElement.outerHTML;\n\nC:\\jbart5-ng\\node_modules\\@angular\\forms\\bundles\\forms.umd.js:\n  466       */\n  467      var CheckboxControlValueAccessor = (function () {\n  468:         function CheckboxControlValueAccessor(_renderer, _elementRef) {\n  469:             this._renderer = _renderer;\n  470              this._elementRef = _elementRef;\n  471              this.onChange = function (_) { };\n  ...\n  473          }\n  474          CheckboxControlValueAccessor.prototype.writeValue = function (value) {\n  475:             this._renderer.setElementProperty(this._elementRef.nativeElement, 'checked', value);\n  476          };\n  477          CheckboxControlValueAccessor.prototype.registerOnChange = function (fn) { this.onChange = fn; };\n  478          CheckboxControlValueAccessor.prototype.registerOnTouched = function (fn) { this.onTouched = fn; };\n  479          CheckboxControlValueAccessor.prototype.setDisabledState = function (isDisabled) {\n  480:             this._renderer.setElementProperty(this._elementRef.nativeElement, 'disabled', isDisabled);\n  481          };\n  482          CheckboxControlValueAccessor.decorators = [\n  ...\n  489          /** @nocollapse */\n  490          CheckboxControlValueAccessor.ctorParameters = [\n  491:             { type: _angular_core.Renderer, },\n  492              { type: _angular_core.ElementRef, },\n  493          ];\n  ...\n  512       */\n  513      var DefaultValueAccessor = (function () {\n  514:         function DefaultValueAccessor(_renderer, _elementRef) {\n  515:             this._renderer = _renderer;\n  516              this._elementRef = _elementRef;\n  517              this.onChange = function (_) { };\n  ...\n  520          DefaultValueAccessor.prototype.writeValue = function (value) {\n  521              var normalizedValue = isBlank(value) ? '' : value;\n  522:             this._renderer.setElementProperty(this._elementRef.nativeElement, 'value', normalizedValue);\n  523          };\n  524          DefaultValueAccessor.prototype.registerOnChange = function (fn) { this.onChange = fn; };\n  525          DefaultValueAccessor.prototype.registerOnTouched = function (fn) { this.onTouched = fn; };\n  526          DefaultValueAccessor.prototype.setDisabledState = function (isDisabled) {\n  527:             this._renderer.setElementProperty(this._elementRef.nativeElement, 'disabled', isDisabled);\n  528          };\n  529          DefaultValueAccessor.decorators = [\n  ...\n  539          /** @nocollapse */\n  540          DefaultValueAccessor.ctorParameters = [\n  541:             { type: _angular_core.Renderer, },\n  542              { type: _angular_core.ElementRef, },\n  543          ];\n  ...\n  584       */\n  585      var NumberValueAccessor = (function () {\n  586:         function NumberValueAccessor(_renderer, _elementRef) {\n  587:             this._renderer = _renderer;\n  588              this._elementRef = _elementRef;\n  589              this.onChange = function (_) { };\n  ...\n  593              // The value needs to be normalized for IE9, otherwise it is set to 'null' when null\n  594              var normalizedValue = isBlank(value) ? '' : value;\n  595:             this._renderer.setElementProperty(this._elementRef.nativeElement, 'value', normalizedValue);\n  596          };\n  597          NumberValueAccessor.prototype.registerOnChange = function (fn) {\n  ...\n  600          NumberValueAccessor.prototype.registerOnTouched = function (fn) { this.onTouched = fn; };\n  601          NumberValueAccessor.prototype.setDisabledState = function (isDisabled) {\n  602:             this._renderer.setElementProperty(this._elementRef.nativeElement, 'disabled', isDisabled);\n  603          };\n  604          NumberValueAccessor.decorators = [\n  ...\n  615          /** @nocollapse */\n  616          NumberValueAccessor.ctorParameters = [\n  617:             { type: _angular_core.Renderer, },\n  618              { type: _angular_core.ElementRef, },\n  619          ];\n  ...\n  745       */\n  746      var RadioControlValueAccessor = (function () {\n  747:         function RadioControlValueAccessor(_renderer, _elementRef, _registry, _injector) {\n  748:             this._renderer = _renderer;\n  749              this._elementRef = _elementRef;\n  750              this._registry = _registry;\n  ...\n  761          RadioControlValueAccessor.prototype.writeValue = function (value) {\n  762              this._state = value === this.value;\n  763:             this._renderer.setElementProperty(this._elementRef.nativeElement, 'checked', this._state);\n  764          };\n  765          RadioControlValueAccessor.prototype.registerOnChange = function (fn) {\n  ...\n  774          RadioControlValueAccessor.prototype.registerOnTouched = function (fn) { this.onTouched = fn; };\n  775          RadioControlValueAccessor.prototype.setDisabledState = function (isDisabled) {\n  776:             this._renderer.setElementProperty(this._elementRef.nativeElement, 'disabled', isDisabled);\n  777          };\n  778          RadioControlValueAccessor.prototype._checkName = function () {\n  ...\n  795          /** @nocollapse */\n  796          RadioControlValueAccessor.ctorParameters = [\n  797:             { type: _angular_core.Renderer, },\n  798              { type: _angular_core.ElementRef, },\n  799              { type: RadioControlRegistry, },\n  ...\n  862       */\n  863      var SelectControlValueAccessor = (function () {\n  864:         function SelectControlValueAccessor(_renderer, _elementRef) {\n  865:             this._renderer = _renderer;\n  866              this._elementRef = _elementRef;\n  867              /** @internal */\n  ...\n  875              this.value = value;\n  876              var valueString = _buildValueString(this._getOptionId(value), value);\n  877:             this._renderer.setElementProperty(this._elementRef.nativeElement, 'value', valueString);\n  878          };\n  879          SelectControlValueAccessor.prototype.registerOnChange = function (fn) {\n  ...\n  886          SelectControlValueAccessor.prototype.registerOnTouched = function (fn) { this.onTouched = fn; };\n  887          SelectControlValueAccessor.prototype.setDisabledState = function (isDisabled) {\n  888:             this._renderer.setElementProperty(this._elementRef.nativeElement, 'disabled', isDisabled);\n  889          };\n  890          /** @internal */\n  ...\n  913          /** @nocollapse */\n  914          SelectControlValueAccessor.ctorParameters = [\n  915:             { type: _angular_core.Renderer, },\n  916              { type: _angular_core.ElementRef, },\n  917          ];\n  ...\n  928       */\n  929      var NgSelectOption = (function () {\n  930:         function NgSelectOption(_element, _renderer, _select) {\n  931              this._element = _element;\n  932:             this._renderer = _renderer;\n  933              this._select = _select;\n  934              if (isPresent(this._select))\n  ...\n  957          /** @internal */\n  958          NgSelectOption.prototype._setElementValue = function (value) {\n  959:             this._renderer.setElementProperty(this._element.nativeElement, 'value', value);\n  960          };\n  961          NgSelectOption.prototype.ngOnDestroy = function () {\n  ...\n  971          NgSelectOption.ctorParameters = [\n  972              { type: _angular_core.ElementRef, },\n  973:             { type: _angular_core.Renderer, },\n  974              { type: SelectControlValueAccessor, decorators: [{ type: _angular_core.Optional }, { type: _angular_core.Host },] },\n  975          ];\n  ...\n 1004       */\n 1005      var SelectMultipleControlValueAccessor = (function () {\n 1006:         function SelectMultipleControlValueAccessor(_renderer, _elementRef) {\n 1007:             this._renderer = _renderer;\n 1008              this._elementRef = _elementRef;\n 1009              /** @internal */\n ....\n 1051          SelectMultipleControlValueAccessor.prototype.registerOnTouched = function (fn) { this.onTouched = fn; };\n 1052          SelectMultipleControlValueAccessor.prototype.setDisabledState = function (isDisabled) {\n 1053:             this._renderer.setElementProperty(this._elementRef.nativeElement, 'disabled', isDisabled);\n 1054          };\n 1055          /** @internal */\n ....\n 1082          /** @nocollapse */\n 1083          SelectMultipleControlValueAccessor.ctorParameters = [\n 1084:             { type: _angular_core.Renderer, },\n 1085              { type: _angular_core.ElementRef, },\n 1086          ];\n ....\n 1099       */\n 1100      var NgSelectMultipleOption = (function () {\n 1101:         function NgSelectMultipleOption(_element, _renderer, _select) {\n 1102              this._element = _element;\n 1103:             this._renderer = _renderer;\n 1104              this._select = _select;\n 1105              if (isPresent(this._select)) {\n ....\n 1134          /** @internal */\n 1135          NgSelectMultipleOption.prototype._setElementValue = function (value) {\n 1136:             this._renderer.setElementProperty(this._element.nativeElement, 'value', value);\n 1137          };\n 1138          /** @internal */\n 1139          NgSelectMultipleOption.prototype._setSelected = function (selected) {\n 1140:             this._renderer.setElementProperty(this._element.nativeElement, 'selected', selected);\n 1141          };\n 1142          NgSelectMultipleOption.prototype.ngOnDestroy = function () {\n ....\n 1152          NgSelectMultipleOption.ctorParameters = [\n 1153              { type: _angular_core.ElementRef, },\n 1154:             { type: _angular_core.Renderer, },\n 1155              { type: SelectMultipleControlValueAccessor, decorators: [{ type: _angular_core.Optional }, { type: _angular_core.Host },] },\n 1156          ];\n\n52 matches across 3 files\n\n\nSearching 130 files for \"renderer\"\n\nC:\\jbart5-ng\\src\\ui\\jb-ui.ts:\n    6  import { FormsModule } from '@angular/forms';\n    7  \n    8: // import { NgModule, enableProdMode, Directive, Component, View, ViewContainerRef, ViewChild, Compiler, ElementRef, Renderer, Injector, Input, provide, NgZone, ViewEncapsulation, ChangeDetectionStrategy, ChangeDetectorRef} from '@angular/core';\n    9  // import { FormsModule, NG_VALUE_ACCESSOR,ControlValueAccessor, DefaultValueAccessor,  provideForms } from '@angular/forms';\n   10  // import { HttpModule, HTTP_PROVIDERS} from '@angular/http';\n   ..\n   83  	  	var elem = cmp_ref._hostElement.nativeElement;\n   84  	  	elem.setAttribute('jb-ctx',ctx.id);\n   85: //		cmp.renderer.setElementAttribute(elem,'jb-ctx',ctx.id);\n   86  		garbageCollectCtxDictionary();\n   87  		jbart.ctxDictionary[ctx.id] = ctx;\n   ..\n  121  		Cmp = Reflect.decorate([\n  122  			Component(this.annotations),\n  123: 			Reflect.metadata('design:paramtypes', [Compiler, ElementRef, Renderer, ChangeDetectorRef])\n  124  		], Cmp);\n  125  		Cmp.prototype.ngOnInit = function() {\n\nC:\\jbart5-ng\\src\\ui\\md-styles\\group-md.ts:\n    ERROR: Unable to open file\n\nC:\\jbart5-ng\\src\\testing\\ui-testers.ts:\n   22  						.subscribe(x=>{\n   23  							Array.from(cmp.elementRef.nativeElement.querySelectorAll('input')).forEach(inp=>\n   24: 								cmp.renderer.setElementAttribute(inp,'title2',inp.value || '')\n   25  							)\n   26  							var html = cmp.elementRef.nativeElement.outerHTML;\n\nC:\\jbart5-ng\\node_modules\\@angular\\forms\\bundles\\forms.umd.js:\n  466       */\n  467      var CheckboxControlValueAccessor = (function () {\n  468:         function CheckboxControlValueAccessor(_renderer, _elementRef) {\n  469:             this._renderer = _renderer;\n  470              this._elementRef = _elementRef;\n  471              this.onChange = function (_) { };\n  ...\n  473          }\n  474          CheckboxControlValueAccessor.prototype.writeValue = function (value) {\n  475:             this._renderer.setElementProperty(this._elementRef.nativeElement, 'checked', value);\n  476          };\n  477          CheckboxControlValueAccessor.prototype.registerOnChange = function (fn) { this.onChange = fn; };\n  478          CheckboxControlValueAccessor.prototype.registerOnTouched = function (fn) { this.onTouched = fn; };\n  479          CheckboxControlValueAccessor.prototype.setDisabledState = function (isDisabled) {\n  480:             this._renderer.setElementProperty(this._elementRef.nativeElement, 'disabled', isDisabled);\n  481          };\n  482          CheckboxControlValueAccessor.decorators = [\n  ...\n  489          /** @nocollapse */\n  490          CheckboxControlValueAccessor.ctorParameters = [\n  491:             { type: _angular_core.Renderer, },\n  492              { type: _angular_core.ElementRef, },\n  493          ];\n  ...\n  512       */\n  513      var DefaultValueAccessor = (function () {\n  514:         function DefaultValueAccessor(_renderer, _elementRef) {\n  515:             this._renderer = _renderer;\n  516              this._elementRef = _elementRef;\n  517              this.onChange = function (_) { };\n  ...\n  520          DefaultValueAccessor.prototype.writeValue = function (value) {\n  521              var normalizedValue = isBlank(value) ? '' : value;\n  522:             this._renderer.setElementProperty(this._elementRef.nativeElement, 'value', normalizedValue);\n  523          };\n  524          DefaultValueAccessor.prototype.registerOnChange = function (fn) { this.onChange = fn; };\n  525          DefaultValueAccessor.prototype.registerOnTouched = function (fn) { this.onTouched = fn; };\n  526          DefaultValueAccessor.prototype.setDisabledState = function (isDisabled) {\n  527:             this._renderer.setElementProperty(this._elementRef.nativeElement, 'disabled', isDisabled);\n  528          };\n  529          DefaultValueAccessor.decorators = [\n  ...\n  539          /** @nocollapse */\n  540          DefaultValueAccessor.ctorParameters = [\n  541:             { type: _angular_core.Renderer, },\n  542              { type: _angular_core.ElementRef, },\n  543          ];\n  ...\n  584       */\n  585      var NumberValueAccessor = (function () {\n  586:         function NumberValueAccessor(_renderer, _elementRef) {\n  587:             this._renderer = _renderer;\n  588              this._elementRef = _elementRef;\n  589              this.onChange = function (_) { };\n  ...\n  593              // The value needs to be normalized for IE9, otherwise it is set to 'null' when null\n  594              var normalizedValue = isBlank(value) ? '' : value;\n  595:             this._renderer.setElementProperty(this._elementRef.nativeElement, 'value', normalizedValue);\n  596          };\n  597          NumberValueAccessor.prototype.registerOnChange = function (fn) {\n  ...\n  600          NumberValueAccessor.prototype.registerOnTouched = function (fn) { this.onTouched = fn; };\n  601          NumberValueAccessor.prototype.setDisabledState = function (isDisabled) {\n  602:             this._renderer.setElementProperty(this._elementRef.nativeElement, 'disabled', isDisabled);\n  603          };\n  604          NumberValueAccessor.decorators = [\n  ...\n  615          /** @nocollapse */\n  616          NumberValueAccessor.ctorParameters = [\n  617:             { type: _angular_core.Renderer, },\n  618              { type: _angular_core.ElementRef, },\n  619          ];\n  ...\n  745       */\n  746      var RadioControlValueAccessor = (function () {\n  747:         function RadioControlValueAccessor(_renderer, _elementRef, _registry, _injector) {\n  748:             this._renderer = _renderer;\n  749              this._elementRef = _elementRef;\n  750              this._registry = _registry;\n  ...\n  761          RadioControlValueAccessor.prototype.writeValue = function (value) {\n  762              this._state = value === this.value;\n  763:             this._renderer.setElementProperty(this._elementRef.nativeElement, 'checked', this._state);\n  764          };\n  765          RadioControlValueAccessor.prototype.registerOnChange = function (fn) {\n  ...\n  774          RadioControlValueAccessor.prototype.registerOnTouched = function (fn) { this.onTouched = fn; };\n  775          RadioControlValueAccessor.prototype.setDisabledState = function (isDisabled) {\n  776:             this._renderer.setElementProperty(this._elementRef.nativeElement, 'disabled', isDisabled);\n  777          };\n  778          RadioControlValueAccessor.prototype._checkName = function () {\n  ...\n  795          /** @nocollapse */\n  796          RadioControlValueAccessor.ctorParameters = [\n  797:             { type: _angular_core.Renderer, },\n  798              { type: _angular_core.ElementRef, },\n  799              { type: RadioControlRegistry, },\n  ...\n  862       */\n  863      var SelectControlValueAccessor = (function () {\n  864:         function SelectControlValueAccessor(_renderer, _elementRef) {\n  865:             this._renderer = _renderer;\n  866              this._elementRef = _elementRef;\n  867              /** @internal */\n  ...\n  875              this.value = value;\n  876              var valueString = _buildValueString(this._getOptionId(value), value);\n  877:             this._renderer.setElementProperty(this._elementRef.nativeElement, 'value', valueString);\n  878          };\n  879          SelectControlValueAccessor.prototype.registerOnChange = function (fn) {\n  ...\n  886          SelectControlValueAccessor.prototype.registerOnTouched = function (fn) { this.onTouched = fn; };\n  887          SelectControlValueAccessor.prototype.setDisabledState = function (isDisabled) {\n  888:             this._renderer.setElementProperty(this._elementRef.nativeElement, 'disabled', isDisabled);\n  889          };\n  890          /** @internal */\n  ...\n  913          /** @nocollapse */\n  914          SelectControlValueAccessor.ctorParameters = [\n  915:             { type: _angular_core.Renderer, },\n  916              { type: _angular_core.ElementRef, },\n  917          ];\n  ...\n  928       */\n  929      var NgSelectOption = (function () {\n  930:         function NgSelectOption(_element, _renderer, _select) {\n  931              this._element = _element;\n  932:             this._renderer = _renderer;\n  933              this._select = _select;\n  934              if (isPresent(this._select))\n  ...\n  957          /** @internal */\n  958          NgSelectOption.prototype._setElementValue = function (value) {\n  959:             this._renderer.setElementProperty(this._element.nativeElement, 'value', value);\n  960          };\n  961          NgSelectOption.prototype.ngOnDestroy = function () {\n  ...\n  971          NgSelectOption.ctorParameters = [\n  972              { type: _angular_core.ElementRef, },\n  973:             { type: _angular_core.Renderer, },\n  974              { type: SelectControlValueAccessor, decorators: [{ type: _angular_core.Optional }, { type: _angular_core.Host },] },\n  975          ];\n  ...\n 1004       */\n 1005      var SelectMultipleControlValueAccessor = (function () {\n 1006:         function SelectMultipleControlValueAccessor(_renderer, _elementRef) {\n 1007:             this._renderer = _renderer;\n 1008              this._elementRef = _elementRef;\n 1009              /** @internal */\n ....\n 1051          SelectMultipleControlValueAccessor.prototype.registerOnTouched = function (fn) { this.onTouched = fn; };\n 1052          SelectMultipleControlValueAccessor.prototype.setDisabledState = function (isDisabled) {\n 1053:             this._renderer.setElementProperty(this._elementRef.nativeElement, 'disabled', isDisabled);\n 1054          };\n 1055          /** @internal */\n ....\n 1082          /** @nocollapse */\n 1083          SelectMultipleControlValueAccessor.ctorParameters = [\n 1084:             { type: _angular_core.Renderer, },\n 1085              { type: _angular_core.ElementRef, },\n 1086          ];\n ....\n 1099       */\n 1100      var NgSelectMultipleOption = (function () {\n 1101:         function NgSelectMultipleOption(_element, _renderer, _select) {\n 1102              this._element = _element;\n 1103:             this._renderer = _renderer;\n 1104              this._select = _select;\n 1105              if (isPresent(this._select)) {\n ....\n 1134          /** @internal */\n 1135          NgSelectMultipleOption.prototype._setElementValue = function (value) {\n 1136:             this._renderer.setElementProperty(this._element.nativeElement, 'value', value);\n 1137          };\n 1138          /** @internal */\n 1139          NgSelectMultipleOption.prototype._setSelected = function (selected) {\n 1140:             this._renderer.setElementProperty(this._element.nativeElement, 'selected', selected);\n 1141          };\n 1142          NgSelectMultipleOption.prototype.ngOnDestroy = function () {\n ....\n 1152          NgSelectMultipleOption.ctorParameters = [\n 1153              { type: _angular_core.ElementRef, },\n 1154:             { type: _angular_core.Renderer, },\n 1155              { type: SelectMultipleControlValueAccessor, decorators: [{ type: _angular_core.Optional }, { type: _angular_core.Host },] },\n 1156          ];\n\n50 matches across 3 files\n\n\nSearching 130 files for \"renderer\"\n\nC:\\jbart5-ng\\src\\ui\\jb-ui.ts:\n    6  import { FormsModule } from '@angular/forms';\n    7  \n    8: // import { NgModule, enableProdMode, Directive, Component, View, ViewContainerRef, ViewChild, Compiler, ElementRef, Renderer, Injector, Input, provide, NgZone, ViewEncapsulation, ChangeDetectionStrategy, ChangeDetectorRef} from '@angular/core';\n    9  // import { FormsModule, NG_VALUE_ACCESSOR,ControlValueAccessor, DefaultValueAccessor,  provideForms } from '@angular/forms';\n   10  // import { HttpModule, HTTP_PROVIDERS} from '@angular/http';\n   ..\n   83  	  	var elem = cmp_ref._hostElement.nativeElement;\n   84  	  	elem.setAttribute('jb-ctx',ctx.id);\n   85: //		cmp.renderer.setElementAttribute(elem,'jb-ctx',ctx.id);\n   86  		garbageCollectCtxDictionary();\n   87  		jbart.ctxDictionary[ctx.id] = ctx;\n\nC:\\jbart5-ng\\src\\ui\\md-styles\\group-md.ts:\n    ERROR: Unable to open file\n\nC:\\jbart5-ng\\src\\testing\\ui-testers.ts:\n   22  						.subscribe(x=>{\n   23  							Array.from(cmp.elementRef.nativeElement.querySelectorAll('input')).forEach(inp=>\n   24: 								cmp.renderer.setElementAttribute(inp,'title2',inp.value || '')\n   25  							)\n   26  							var html = cmp.elementRef.nativeElement.outerHTML;\n\nC:\\jbart5-ng\\node_modules\\@angular\\forms\\bundles\\forms.umd.js:\n  466       */\n  467      var CheckboxControlValueAccessor = (function () {\n  468:         function CheckboxControlValueAccessor(_renderer, _elementRef) {\n  469:             this._renderer = _renderer;\n  470              this._elementRef = _elementRef;\n  471              this.onChange = function (_) { };\n  ...\n  473          }\n  474          CheckboxControlValueAccessor.prototype.writeValue = function (value) {\n  475:             this._renderer.setElementProperty(this._elementRef.nativeElement, 'checked', value);\n  476          };\n  477          CheckboxControlValueAccessor.prototype.registerOnChange = function (fn) { this.onChange = fn; };\n  478          CheckboxControlValueAccessor.prototype.registerOnTouched = function (fn) { this.onTouched = fn; };\n  479          CheckboxControlValueAccessor.prototype.setDisabledState = function (isDisabled) {\n  480:             this._renderer.setElementProperty(this._elementRef.nativeElement, 'disabled', isDisabled);\n  481          };\n  482          CheckboxControlValueAccessor.decorators = [\n  ...\n  489          /** @nocollapse */\n  490          CheckboxControlValueAccessor.ctorParameters = [\n  491:             { type: _angular_core.Renderer, },\n  492              { type: _angular_core.ElementRef, },\n  493          ];\n  ...\n  512       */\n  513      var DefaultValueAccessor = (function () {\n  514:         function DefaultValueAccessor(_renderer, _elementRef) {\n  515:             this._renderer = _renderer;\n  516              this._elementRef = _elementRef;\n  517              this.onChange = function (_) { };\n  ...\n  520          DefaultValueAccessor.prototype.writeValue = function (value) {\n  521              var normalizedValue = isBlank(value) ? '' : value;\n  522:             this._renderer.setElementProperty(this._elementRef.nativeElement, 'value', normalizedValue);\n  523          };\n  524          DefaultValueAccessor.prototype.registerOnChange = function (fn) { this.onChange = fn; };\n  525          DefaultValueAccessor.prototype.registerOnTouched = function (fn) { this.onTouched = fn; };\n  526          DefaultValueAccessor.prototype.setDisabledState = function (isDisabled) {\n  527:             this._renderer.setElementProperty(this._elementRef.nativeElement, 'disabled', isDisabled);\n  528          };\n  529          DefaultValueAccessor.decorators = [\n  ...\n  539          /** @nocollapse */\n  540          DefaultValueAccessor.ctorParameters = [\n  541:             { type: _angular_core.Renderer, },\n  542              { type: _angular_core.ElementRef, },\n  543          ];\n  ...\n  584       */\n  585      var NumberValueAccessor = (function () {\n  586:         function NumberValueAccessor(_renderer, _elementRef) {\n  587:             this._renderer = _renderer;\n  588              this._elementRef = _elementRef;\n  589              this.onChange = function (_) { };\n  ...\n  593              // The value needs to be normalized for IE9, otherwise it is set to 'null' when null\n  594              var normalizedValue = isBlank(value) ? '' : value;\n  595:             this._renderer.setElementProperty(this._elementRef.nativeElement, 'value', normalizedValue);\n  596          };\n  597          NumberValueAccessor.prototype.registerOnChange = function (fn) {\n  ...\n  600          NumberValueAccessor.prototype.registerOnTouched = function (fn) { this.onTouched = fn; };\n  601          NumberValueAccessor.prototype.setDisabledState = function (isDisabled) {\n  602:             this._renderer.setElementProperty(this._elementRef.nativeElement, 'disabled', isDisabled);\n  603          };\n  604          NumberValueAccessor.decorators = [\n  ...\n  615          /** @nocollapse */\n  616          NumberValueAccessor.ctorParameters = [\n  617:             { type: _angular_core.Renderer, },\n  618              { type: _angular_core.ElementRef, },\n  619          ];\n  ...\n  745       */\n  746      var RadioControlValueAccessor = (function () {\n  747:         function RadioControlValueAccessor(_renderer, _elementRef, _registry, _injector) {\n  748:             this._renderer = _renderer;\n  749              this._elementRef = _elementRef;\n  750              this._registry = _registry;\n  ...\n  761          RadioControlValueAccessor.prototype.writeValue = function (value) {\n  762              this._state = value === this.value;\n  763:             this._renderer.setElementProperty(this._elementRef.nativeElement, 'checked', this._state);\n  764          };\n  765          RadioControlValueAccessor.prototype.registerOnChange = function (fn) {\n  ...\n  774          RadioControlValueAccessor.prototype.registerOnTouched = function (fn) { this.onTouched = fn; };\n  775          RadioControlValueAccessor.prototype.setDisabledState = function (isDisabled) {\n  776:             this._renderer.setElementProperty(this._elementRef.nativeElement, 'disabled', isDisabled);\n  777          };\n  778          RadioControlValueAccessor.prototype._checkName = function () {\n  ...\n  795          /** @nocollapse */\n  796          RadioControlValueAccessor.ctorParameters = [\n  797:             { type: _angular_core.Renderer, },\n  798              { type: _angular_core.ElementRef, },\n  799              { type: RadioControlRegistry, },\n  ...\n  862       */\n  863      var SelectControlValueAccessor = (function () {\n  864:         function SelectControlValueAccessor(_renderer, _elementRef) {\n  865:             this._renderer = _renderer;\n  866              this._elementRef = _elementRef;\n  867              /** @internal */\n  ...\n  875              this.value = value;\n  876              var valueString = _buildValueString(this._getOptionId(value), value);\n  877:             this._renderer.setElementProperty(this._elementRef.nativeElement, 'value', valueString);\n  878          };\n  879          SelectControlValueAccessor.prototype.registerOnChange = function (fn) {\n  ...\n  886          SelectControlValueAccessor.prototype.registerOnTouched = function (fn) { this.onTouched = fn; };\n  887          SelectControlValueAccessor.prototype.setDisabledState = function (isDisabled) {\n  888:             this._renderer.setElementProperty(this._elementRef.nativeElement, 'disabled', isDisabled);\n  889          };\n  890          /** @internal */\n  ...\n  913          /** @nocollapse */\n  914          SelectControlValueAccessor.ctorParameters = [\n  915:             { type: _angular_core.Renderer, },\n  916              { type: _angular_core.ElementRef, },\n  917          ];\n  ...\n  928       */\n  929      var NgSelectOption = (function () {\n  930:         function NgSelectOption(_element, _renderer, _select) {\n  931              this._element = _element;\n  932:             this._renderer = _renderer;\n  933              this._select = _select;\n  934              if (isPresent(this._select))\n  ...\n  957          /** @internal */\n  958          NgSelectOption.prototype._setElementValue = function (value) {\n  959:             this._renderer.setElementProperty(this._element.nativeElement, 'value', value);\n  960          };\n  961          NgSelectOption.prototype.ngOnDestroy = function () {\n  ...\n  971          NgSelectOption.ctorParameters = [\n  972              { type: _angular_core.ElementRef, },\n  973:             { type: _angular_core.Renderer, },\n  974              { type: SelectControlValueAccessor, decorators: [{ type: _angular_core.Optional }, { type: _angular_core.Host },] },\n  975          ];\n  ...\n 1004       */\n 1005      var SelectMultipleControlValueAccessor = (function () {\n 1006:         function SelectMultipleControlValueAccessor(_renderer, _elementRef) {\n 1007:             this._renderer = _renderer;\n 1008              this._elementRef = _elementRef;\n 1009              /** @internal */\n ....\n 1051          SelectMultipleControlValueAccessor.prototype.registerOnTouched = function (fn) { this.onTouched = fn; };\n 1052          SelectMultipleControlValueAccessor.prototype.setDisabledState = function (isDisabled) {\n 1053:             this._renderer.setElementProperty(this._elementRef.nativeElement, 'disabled', isDisabled);\n 1054          };\n 1055          /** @internal */\n ....\n 1082          /** @nocollapse */\n 1083          SelectMultipleControlValueAccessor.ctorParameters = [\n 1084:             { type: _angular_core.Renderer, },\n 1085              { type: _angular_core.ElementRef, },\n 1086          ];\n ....\n 1099       */\n 1100      var NgSelectMultipleOption = (function () {\n 1101:         function NgSelectMultipleOption(_element, _renderer, _select) {\n 1102              this._element = _element;\n 1103:             this._renderer = _renderer;\n 1104              this._select = _select;\n 1105              if (isPresent(this._select)) {\n ....\n 1134          /** @internal */\n 1135          NgSelectMultipleOption.prototype._setElementValue = function (value) {\n 1136:             this._renderer.setElementProperty(this._element.nativeElement, 'value', value);\n 1137          };\n 1138          /** @internal */\n 1139          NgSelectMultipleOption.prototype._setSelected = function (selected) {\n 1140:             this._renderer.setElementProperty(this._element.nativeElement, 'selected', selected);\n 1141          };\n 1142          NgSelectMultipleOption.prototype.ngOnDestroy = function () {\n ....\n 1152          NgSelectMultipleOption.ctorParameters = [\n 1153              { type: _angular_core.ElementRef, },\n 1154:             { type: _angular_core.Renderer, },\n 1155              { type: SelectMultipleControlValueAccessor, decorators: [{ type: _angular_core.Optional }, { type: _angular_core.Host },] },\n 1156          ];\n\n49 matches across 3 files\n\n\nSearching 130 files for \"renderer\"\n\nC:\\jbart5-ng\\src\\ui\\jb-ui.ts:\n    6  import { FormsModule } from '@angular/forms';\n    7  \n    8: // import { NgModule, enableProdMode, Directive, Component, View, ViewContainerRef, ViewChild, Compiler, ElementRef, Renderer, Injector, Input, provide, NgZone, ViewEncapsulation, ChangeDetectionStrategy, ChangeDetectorRef} from '@angular/core';\n    9  // import { FormsModule, NG_VALUE_ACCESSOR,ControlValueAccessor, DefaultValueAccessor,  provideForms } from '@angular/forms';\n   10  // import { HttpModule, HTTP_PROVIDERS} from '@angular/http';\n   ..\n   83  	  	var elem = cmp_ref._hostElement.nativeElement;\n   84  	  	elem.setAttribute('jb-ctx',ctx.id);\n   85: //		cmp.renderer.setElementAttribute(elem,'jb-ctx',ctx.id);\n   86  		garbageCollectCtxDictionary();\n   87  		jbart.ctxDictionary[ctx.id] = ctx;\n\nC:\\jbart5-ng\\src\\ui\\md-styles\\group-md.ts:\n    ERROR: Unable to open file\n\nC:\\jbart5-ng\\node_modules\\@angular\\forms\\bundles\\forms.umd.js:\n  466       */\n  467      var CheckboxControlValueAccessor = (function () {\n  468:         function CheckboxControlValueAccessor(_renderer, _elementRef) {\n  469:             this._renderer = _renderer;\n  470              this._elementRef = _elementRef;\n  471              this.onChange = function (_) { };\n  ...\n  473          }\n  474          CheckboxControlValueAccessor.prototype.writeValue = function (value) {\n  475:             this._renderer.setElementProperty(this._elementRef.nativeElement, 'checked', value);\n  476          };\n  477          CheckboxControlValueAccessor.prototype.registerOnChange = function (fn) { this.onChange = fn; };\n  478          CheckboxControlValueAccessor.prototype.registerOnTouched = function (fn) { this.onTouched = fn; };\n  479          CheckboxControlValueAccessor.prototype.setDisabledState = function (isDisabled) {\n  480:             this._renderer.setElementProperty(this._elementRef.nativeElement, 'disabled', isDisabled);\n  481          };\n  482          CheckboxControlValueAccessor.decorators = [\n  ...\n  489          /** @nocollapse */\n  490          CheckboxControlValueAccessor.ctorParameters = [\n  491:             { type: _angular_core.Renderer, },\n  492              { type: _angular_core.ElementRef, },\n  493          ];\n  ...\n  512       */\n  513      var DefaultValueAccessor = (function () {\n  514:         function DefaultValueAccessor(_renderer, _elementRef) {\n  515:             this._renderer = _renderer;\n  516              this._elementRef = _elementRef;\n  517              this.onChange = function (_) { };\n  ...\n  520          DefaultValueAccessor.prototype.writeValue = function (value) {\n  521              var normalizedValue = isBlank(value) ? '' : value;\n  522:             this._renderer.setElementProperty(this._elementRef.nativeElement, 'value', normalizedValue);\n  523          };\n  524          DefaultValueAccessor.prototype.registerOnChange = function (fn) { this.onChange = fn; };\n  525          DefaultValueAccessor.prototype.registerOnTouched = function (fn) { this.onTouched = fn; };\n  526          DefaultValueAccessor.prototype.setDisabledState = function (isDisabled) {\n  527:             this._renderer.setElementProperty(this._elementRef.nativeElement, 'disabled', isDisabled);\n  528          };\n  529          DefaultValueAccessor.decorators = [\n  ...\n  539          /** @nocollapse */\n  540          DefaultValueAccessor.ctorParameters = [\n  541:             { type: _angular_core.Renderer, },\n  542              { type: _angular_core.ElementRef, },\n  543          ];\n  ...\n  584       */\n  585      var NumberValueAccessor = (function () {\n  586:         function NumberValueAccessor(_renderer, _elementRef) {\n  587:             this._renderer = _renderer;\n  588              this._elementRef = _elementRef;\n  589              this.onChange = function (_) { };\n  ...\n  593              // The value needs to be normalized for IE9, otherwise it is set to 'null' when null\n  594              var normalizedValue = isBlank(value) ? '' : value;\n  595:             this._renderer.setElementProperty(this._elementRef.nativeElement, 'value', normalizedValue);\n  596          };\n  597          NumberValueAccessor.prototype.registerOnChange = function (fn) {\n  ...\n  600          NumberValueAccessor.prototype.registerOnTouched = function (fn) { this.onTouched = fn; };\n  601          NumberValueAccessor.prototype.setDisabledState = function (isDisabled) {\n  602:             this._renderer.setElementProperty(this._elementRef.nativeElement, 'disabled', isDisabled);\n  603          };\n  604          NumberValueAccessor.decorators = [\n  ...\n  615          /** @nocollapse */\n  616          NumberValueAccessor.ctorParameters = [\n  617:             { type: _angular_core.Renderer, },\n  618              { type: _angular_core.ElementRef, },\n  619          ];\n  ...\n  745       */\n  746      var RadioControlValueAccessor = (function () {\n  747:         function RadioControlValueAccessor(_renderer, _elementRef, _registry, _injector) {\n  748:             this._renderer = _renderer;\n  749              this._elementRef = _elementRef;\n  750              this._registry = _registry;\n  ...\n  761          RadioControlValueAccessor.prototype.writeValue = function (value) {\n  762              this._state = value === this.value;\n  763:             this._renderer.setElementProperty(this._elementRef.nativeElement, 'checked', this._state);\n  764          };\n  765          RadioControlValueAccessor.prototype.registerOnChange = function (fn) {\n  ...\n  774          RadioControlValueAccessor.prototype.registerOnTouched = function (fn) { this.onTouched = fn; };\n  775          RadioControlValueAccessor.prototype.setDisabledState = function (isDisabled) {\n  776:             this._renderer.setElementProperty(this._elementRef.nativeElement, 'disabled', isDisabled);\n  777          };\n  778          RadioControlValueAccessor.prototype._checkName = function () {\n  ...\n  795          /** @nocollapse */\n  796          RadioControlValueAccessor.ctorParameters = [\n  797:             { type: _angular_core.Renderer, },\n  798              { type: _angular_core.ElementRef, },\n  799              { type: RadioControlRegistry, },\n  ...\n  862       */\n  863      var SelectControlValueAccessor = (function () {\n  864:         function SelectControlValueAccessor(_renderer, _elementRef) {\n  865:             this._renderer = _renderer;\n  866              this._elementRef = _elementRef;\n  867              /** @internal */\n  ...\n  875              this.value = value;\n  876              var valueString = _buildValueString(this._getOptionId(value), value);\n  877:             this._renderer.setElementProperty(this._elementRef.nativeElement, 'value', valueString);\n  878          };\n  879          SelectControlValueAccessor.prototype.registerOnChange = function (fn) {\n  ...\n  886          SelectControlValueAccessor.prototype.registerOnTouched = function (fn) { this.onTouched = fn; };\n  887          SelectControlValueAccessor.prototype.setDisabledState = function (isDisabled) {\n  888:             this._renderer.setElementProperty(this._elementRef.nativeElement, 'disabled', isDisabled);\n  889          };\n  890          /** @internal */\n  ...\n  913          /** @nocollapse */\n  914          SelectControlValueAccessor.ctorParameters = [\n  915:             { type: _angular_core.Renderer, },\n  916              { type: _angular_core.ElementRef, },\n  917          ];\n  ...\n  928       */\n  929      var NgSelectOption = (function () {\n  930:         function NgSelectOption(_element, _renderer, _select) {\n  931              this._element = _element;\n  932:             this._renderer = _renderer;\n  933              this._select = _select;\n  934              if (isPresent(this._select))\n  ...\n  957          /** @internal */\n  958          NgSelectOption.prototype._setElementValue = function (value) {\n  959:             this._renderer.setElementProperty(this._element.nativeElement, 'value', value);\n  960          };\n  961          NgSelectOption.prototype.ngOnDestroy = function () {\n  ...\n  971          NgSelectOption.ctorParameters = [\n  972              { type: _angular_core.ElementRef, },\n  973:             { type: _angular_core.Renderer, },\n  974              { type: SelectControlValueAccessor, decorators: [{ type: _angular_core.Optional }, { type: _angular_core.Host },] },\n  975          ];\n  ...\n 1004       */\n 1005      var SelectMultipleControlValueAccessor = (function () {\n 1006:         function SelectMultipleControlValueAccessor(_renderer, _elementRef) {\n 1007:             this._renderer = _renderer;\n 1008              this._elementRef = _elementRef;\n 1009              /** @internal */\n ....\n 1051          SelectMultipleControlValueAccessor.prototype.registerOnTouched = function (fn) { this.onTouched = fn; };\n 1052          SelectMultipleControlValueAccessor.prototype.setDisabledState = function (isDisabled) {\n 1053:             this._renderer.setElementProperty(this._elementRef.nativeElement, 'disabled', isDisabled);\n 1054          };\n 1055          /** @internal */\n ....\n 1082          /** @nocollapse */\n 1083          SelectMultipleControlValueAccessor.ctorParameters = [\n 1084:             { type: _angular_core.Renderer, },\n 1085              { type: _angular_core.ElementRef, },\n 1086          ];\n ....\n 1099       */\n 1100      var NgSelectMultipleOption = (function () {\n 1101:         function NgSelectMultipleOption(_element, _renderer, _select) {\n 1102              this._element = _element;\n 1103:             this._renderer = _renderer;\n 1104              this._select = _select;\n 1105              if (isPresent(this._select)) {\n ....\n 1134          /** @internal */\n 1135          NgSelectMultipleOption.prototype._setElementValue = function (value) {\n 1136:             this._renderer.setElementProperty(this._element.nativeElement, 'value', value);\n 1137          };\n 1138          /** @internal */\n 1139          NgSelectMultipleOption.prototype._setSelected = function (selected) {\n 1140:             this._renderer.setElementProperty(this._element.nativeElement, 'selected', selected);\n 1141          };\n 1142          NgSelectMultipleOption.prototype.ngOnDestroy = function () {\n ....\n 1152          NgSelectMultipleOption.ctorParameters = [\n 1153              { type: _angular_core.ElementRef, },\n 1154:             { type: _angular_core.Renderer, },\n 1155              { type: SelectMultipleControlValueAccessor, decorators: [{ type: _angular_core.Optional }, { type: _angular_core.Host },] },\n 1156          ];\n\n48 matches across 2 files\n\n\nSearching 130 files for \"ng.directives\"\n\nC:\\jbart5-ng\\src\\ui\\jb-ui.ts:\n  273  				annotations.directives = (annotations.directives || []).concat(\n  274  					jb.toarray(options.directives).map(x=>\n  275: 						typeof x == 'string' ? jbart.ng.directives[x] : x)\n  276  					)\n  277  \n  ...\n  646  \n  647  export function registerDirectives(obj) {\n  648: 	jb.extend(jbart.ng.directives,obj)\n  649  }\n  650  export function registerProviders(obj) {\n\nC:\\jbart5-ng\\src\\ui\\styles.js:\n   12  	],\n   13  	impl: function (context,template,css,features,methods,atts,noViewEncapsulation) {\n   14: 		var defaultOptions = {directives: jb.entries(jbart.ng.directives)\n   15  			.map(x=>x[0])\n   16  		};\n   ..\n   39  	],\n   40  	impl: (ctx,title,html,css,options,features) => {\n   41: 		var defaultOptions = {directives: jb.entries(jbart.ng.directives)\n   42  			.map(x=>x[0])\n   43  		};\n\nC:\\jbart5-ng\\src\\ui\\md-styles\\group-md.ts:\n    ERROR: Unable to open file\n\n4 matches across 2 files\n\n\nSearching 130 files for \"ng.directives\"\n\nC:\\jbart5-ng\\src\\ui\\jb-ui.ts:\n  273  				annotations.directives = (annotations.directives || []).concat(\n  274  					jb.toarray(options.directives).map(x=>\n  275: 						typeof x == 'string' ? jbart.ng.directives[x] : x)\n  276  					)\n  277  \n  ...\n  646  \n  647  export function registerDirectives(obj) {\n  648: 	jb.extend(jbart.ng.directives,obj)\n  649  }\n  650  export function registerProviders(obj) {\n\nC:\\jbart5-ng\\src\\ui\\styles.js:\n   12  	],\n   13  	impl: function (context,template,css,features,methods,atts,noViewEncapsulation) {\n   14: 		var defaultOptions = {directives: jb.entries(jbart.ng.directives)\n   15  			.map(x=>x[0])\n   16  		};\n   ..\n   39  	],\n   40  	impl: (ctx,title,html,css,options,features) => {\n   41: 		var defaultOptions = {directives: jb.entries(jbart.ng.directives)\n   42  			.map(x=>x[0])\n   43  		};\n\nC:\\jbart5-ng\\src\\ui\\md-styles\\group-md.ts:\n    ERROR: Unable to open file\n\n4 matches across 2 files\n\n\nSearching 129 files for \"registerDirectives\"\n\nC:\\jbart5-ng\\src\\ui\\jb-ui.ts:\n  645  }\n  646  \n  647: export function registerDirectives(obj) {\n  648  	jb.entries(obj).forEach(e=>{\n  649  		if (!e[1]) \n  650: 			jb.logError('registerDirectives: no object for directive ' + e[0]);\n  651  		else\n  652  			jbart.ng.directives[e[0]] = e[1];\n\nC:\\jbart5-ng\\src\\ui\\md-styles\\button-md.ts:\n    3  import {MdButton,MdIcon,MdIconRegistry,PORTAL_DIRECTIVES,MD_RIPPLE_DIRECTIVES} from '@angular/material';\n    4  \n    5: jb_ui.registerDirectives({MdButton: MdButton,MdIcon: MdIcon, PORTAL_DIRECTIVES:PORTAL_DIRECTIVES,MD_RIPPLE_DIRECTIVES:MD_RIPPLE_DIRECTIVES});\n    6  jb_ui.registerProviders({MdIconRegistry: MdIconRegistry});\n    7  \n\nC:\\jbart5-ng\\src\\ui\\md-styles\\card-md.ts:\n    3  import {MD_CARD_DIRECTIVES} from '@angular/material';\n    4  \n    5: jb_ui.registerDirectives({MD_CARD_DIRECTIVES: MD_CARD_DIRECTIVES });\n    6  \n    7  jb.component('group.md-card', {\n\nC:\\jbart5-ng\\src\\ui\\md-styles\\editable-boolean-md.ts:\n    4  import {MdSlideToggle} from '@angular/material';\n    5  \n    6: jb_ui.registerDirectives({MdSlideToggle: MdSlideToggle});\n    7  \n    8  jb.component('editable-boolean.md-slide-toggle', {\n\nC:\\jbart5-ng\\src\\ui\\md-styles\\input-md.ts:\n    3  \n    4  import {MdInput} from '@angular/material';\n    5: jb_ui.registerDirectives({MdInput: MdInput});\n    6  \n    7  jb.component('editable-text.md-input',{\n\nC:\\jbart5-ng\\src\\ui\\md-styles\\sidenav-md.ts:\n    4  import {MD_SIDENAV_DIRECTIVES} from '@angular/material';\n    5  \n    6: jb_ui.registerDirectives({MD_SIDENAV_DIRECTIVES: MD_SIDENAV_DIRECTIVES});\n    7  \n    8  jb.component('sidenav.md', {\n\nC:\\jbart5-ng\\src\\ui\\md-styles\\tabs-md.ts:\n    4  import {MD_TABS_DIRECTIVES,TABS_INTERNAL_DIRECTIVES,MdToolbar} from '@angular/material';\n    5  \n    6: jb_ui.registerDirectives({MD_TABS_DIRECTIVES: MD_TABS_DIRECTIVES, MdToolbar:MdToolbar,TABS_INTERNAL_DIRECTIVES: TABS_INTERNAL_DIRECTIVES});\n    7  \n    8  jb.component('tabs.md-tabs', {\n\nC:\\jbart5-ng\\src\\ui\\tree\\tree.ts:\n  115  }\n  116  \n  117: //jb_ui.registerDirectives({TreeNode: TreeNode, TreeNodeLine:TreeNodeLine});\n  118  \n  119  \n\nC:\\jbart5-ng\\projects\\material-demo\\ng-material-demo-loader.ts:\n   35    OVERLAY_PROVIDERS: OVERLAY_PROVIDERS,\n   36  });\n   37: jb_ui.registerDirectives({\n   38    MD_CHECKBOX_DIRECTIVES: MD_CHECKBOX_DIRECTIVES, \n   39    MD_RADIO_DIRECTIVES:MD_RADIO_DIRECTIVES, \n\n10 matches across 9 files\n\n\nSearching 129 files for \"registerDirectives\"\n\nC:\\jbart5-ng\\src\\ui\\jb-ui.ts:\n  645  }\n  646  \n  647: export function registerDirectives(obj) {\n  648  	jb.entries(obj).forEach(e=>{\n  649  		if (!e[1]) \n  650: 			jb.logError('registerDirectives: no object for directive ' + e[0]);\n  651  		else\n  652  			jbart.ng.directives[e[0]] = e[1];\n\nC:\\jbart5-ng\\src\\ui\\md-styles\\button-md.ts:\n    4  import {MdButton,MdIcon,MdIconRegistry} from '@angular/material';\n    5  \n    6: //jb_ui.registerDirectives({MdButton: MdButton,MdIcon: MdIcon});\n    7  //jb_ui.registerProviders({MdIconRegistry: MdIconRegistry});\n    8  \n\nC:\\jbart5-ng\\src\\ui\\md-styles\\card-md.ts:\n    3  import {MD_CARD_DIRECTIVES} from '@angular/material';\n    4  \n    5: //jb_ui.registerDirectives({MD_CARD_DIRECTIVES: MD_CARD_DIRECTIVES });\n    6  \n    7  jb.component('group.md-card', {\n\nC:\\jbart5-ng\\src\\ui\\md-styles\\editable-boolean-md.ts:\n    4  import {MdSlideToggle} from '@angular/material';\n    5  \n    6: //jb_ui.registerDirectives({MdSlideToggle: MdSlideToggle});\n    7  \n    8  jb.component('editable-boolean.md-slide-toggle', {\n\nC:\\jbart5-ng\\src\\ui\\md-styles\\input-md.ts:\n    3  \n    4  import {MdInput} from '@angular/material';\n    5: //jb_ui.registerDirectives({MdInput: MdInput});\n    6  \n    7  jb.component('editable-text.md-input',{\n\nC:\\jbart5-ng\\src\\ui\\md-styles\\sidenav-md.ts:\n    4  import {MD_SIDENAV_DIRECTIVES} from '@angular/material';\n    5  \n    6: //jb_ui.registerDirectives({MD_SIDENAV_DIRECTIVES: MD_SIDENAV_DIRECTIVES});\n    7  \n    8  jb.component('sidenav.md', {\n\nC:\\jbart5-ng\\src\\ui\\md-styles\\tabs-md.ts:\n    4  import {MD_TABS_DIRECTIVES,TABS_INTERNAL_DIRECTIVES,MdToolbar} from '@angular/material';\n    5  \n    6: //jb_ui.registerDirectives({MD_TABS_DIRECTIVES: MD_TABS_DIRECTIVES, MdToolbar:MdToolbar,TABS_INTERNAL_DIRECTIVES: TABS_INTERNAL_DIRECTIVES});\n    7  \n    8  jb.component('tabs.md-tabs', {\n\nC:\\jbart5-ng\\src\\ui\\tree\\tree.ts:\n  115  }\n  116  \n  117: //jb_ui.registerDirectives({TreeNode: TreeNode, TreeNodeLine:TreeNodeLine});\n  118  \n  119  \n\nC:\\jbart5-ng\\projects\\material-demo\\ng-material-demo-loader.ts:\n   35    OVERLAY_PROVIDERS: OVERLAY_PROVIDERS,\n   36  });\n   37: jb_ui.registerDirectives({\n   38    MD_CHECKBOX_DIRECTIVES: MD_CHECKBOX_DIRECTIVES, \n   39    MD_RADIO_DIRECTIVES:MD_RADIO_DIRECTIVES, \n\n10 matches across 9 files\n\n\nSearching 129 files for \"jBartComponentDependencies\"\n\nC:\\jbart5-ng\\src\\ui\\jb-ui.ts:\n  184  \n  185  	    var DynamicModule = function() { }\n  186: 	    Reflect.getMetadata('annotations', jBartComponentDependencies)[0].imports = jb.entries(jbart.ng.directives).map(x=>x[1]);\n  187  		var DynamicModule = Reflect.decorate([\n  188  			NgModule({\n  189: 				imports: [jBartComponentDependencies, CommonModule, FormsModule, HttpModule, BrowserModule],\n  190    				declarations: [Cmp],\n  191    				exports: [Cmp]\n  ...\n  614    exports: [ jbComp ],\n  615  })\n  616: class jBartComponentDependencies { }\n  617  \n  618  export function wrapWithLauchingElement(f,context,elem) {\n  ...\n  680  \n  681  @NgModule({\n  682:   imports:      [ jBartComponentDependencies, CommonModule, FormsModule, HttpModule, BrowserModule  ],\n  683    declarations: [ jBartWidget ],\n  684    providers:    [ ],\n\n4 matches in 1 file\n\n\nSearching 129 files for \"jBartComponentDependencies\"\n\nC:\\jbart5-ng\\src\\ui\\jb-ui.ts:\n  184  \n  185  	    var DynamicModule = function() { }\n  186: 	    Reflect.getMetadata('annotations', jBartComponentDependencies)[0].imports = jb.entries(jbart.ng.directives).map(x=>x[1]);\n  187  		var DynamicModule = Reflect.decorate([\n  188  			NgModule({\n  189: 				imports: [jBartComponentDependencies, CommonModule, FormsModule, HttpModule, BrowserModule],\n  190    				declarations: [Cmp],\n  191    				exports: [Cmp]\n  ...\n  614    exports: [ jbComp ],\n  615  })\n  616: class jBartComponentDependencies { }\n  617  \n  618  export function wrapWithLauchingElement(f,context,elem) {\n  ...\n  680  \n  681  @NgModule({\n  682:   imports:      [ jBartComponentDependencies, CommonModule, FormsModule, HttpModule, BrowserModule  ],\n  683    declarations: [ jBartWidget ],\n  684    providers:    [ ],\n\n4 matches in 1 file\n\n\nSearching 129 files for \"jBartComponentDependencies\"\n\nC:\\jbart5-ng\\src\\ui\\jb-ui.ts:\n  184  \n  185  	    var DynamicModule = function() { }\n  186: 	    Reflect.getMetadata('annotations', jBartComponentDependencies)[0].declarations = [ngComp].jb.entries(jbart.ng.directives).map(x=>x[1]);\n  187  		var DynamicModule = Reflect.decorate([\n  188  			NgModule({\n  189: 				imports: [jBartComponentDependencies, CommonModule, FormsModule, HttpModule, BrowserModule],\n  190    				declarations: [Cmp],\n  191    				exports: [Cmp]\n  ...\n  614    exports: [ jbComp ],\n  615  })\n  616: class jBartComponentDependencies { }\n  617  \n  618  export function wrapWithLauchingElement(f,context,elem) {\n  ...\n  680  \n  681  @NgModule({\n  682:   imports:      [ jBartComponentDependencies, CommonModule, FormsModule, HttpModule, BrowserModule  ],\n  683    declarations: [ jBartWidget ],\n  684    providers:    [ ],\n\n4 matches in 1 file\n\n\nSearching 129 files for \"jBartComponentDependencies\"\n\nC:\\jbart5-ng\\src\\ui\\jb-ui.ts:\n  184  \n  185  	    var DynamicModule = function() { }\n  186: 	    Reflect.getMetadata('annotations', jBartComponentDependencies)[0].declarations = [ngComp].jb.entries(jbart.ng.directives).map(x=>x[1]);\n  187  		var DynamicModule = Reflect.decorate([\n  188  			NgModule({\n  189: 				imports: [jBartComponentDependencies, CommonModule, FormsModule, HttpModule, BrowserModule],\n  190    				declarations: [Cmp],\n  191    				exports: [Cmp]\n  ...\n  614    exports: [ jbComp ],\n  615  })\n  616: class jBartComponentDependencies { }\n  617  \n  618  export function wrapWithLauchingElement(f,context,elem) {\n  ...\n  680  \n  681  @NgModule({\n  682:   imports:      [ jBartComponentDependencies, CommonModule, FormsModule, HttpModule, BrowserModule  ],\n  683    declarations: [ jBartWidget ],\n  684    providers:    [ ],\n\n4 matches in 1 file\n\n\nSearching 129 files for \"jBartComponentDependencies\"\n\nC:\\jbart5-ng\\src\\ui\\jb-ui.ts:\n  184  \n  185  	    var DynamicModule = function() { }\n  186: 	    //Reflect.getMetadata('annotations', jBartComponentDependencies)[0].declarations = [jbComp].concat(jb.entries(jbart.ng.directives).map(x=>x[1]));\n  187  		var DynamicModule = Reflect.decorate([\n  188  			NgModule({\n  189: 				imports: [jBartComponentDependencies, CommonModule, FormsModule, HttpModule, BrowserModule],\n  190    				declarations: [Cmp].concat(jb.entries(jbart.ng.directives).map(x=>x[1])),\n  191    				exports: [Cmp]\n  ...\n  614    exports: [ jbComp ],\n  615  })\n  616: class jBartComponentDependencies { }\n  617  \n  618  export function wrapWithLauchingElement(f,context,elem) {\n  ...\n  680  \n  681  @NgModule({\n  682:   imports:      [ jBartComponentDependencies, CommonModule, FormsModule, HttpModule, BrowserModule  ],\n  683    declarations: [ jBartWidget ],\n  684    providers:    [ ],\n\n4 matches in 1 file\n\n\nSearching 129 files for \"registerDirectives\"\n\nC:\\jbart5-ng\\src\\ui\\jb-ui.ts:\n  641  }\n  642  \n  643: export function registerDirectives(obj) {\n  644  	jb.entries(obj).forEach(e=>{\n  645  		if (!e[1]) \n  646: 			jb.logError('registerDirectives: no object for directive ' + e[0]);\n  647  		else\n  648  			jbart.ng.directives[e[0]] = e[1];\n\nC:\\jbart5-ng\\src\\ui\\md-styles\\button-md.ts:\n    4  import {MdButton,MdIcon,MdIconRegistry} from '@angular/material';\n    5  \n    6: //jb_ui.registerDirectives({MdButton: MdButton,MdIcon: MdIcon});\n    7  //jb_ui.registerProviders({MdIconRegistry: MdIconRegistry});\n    8  \n\nC:\\jbart5-ng\\src\\ui\\md-styles\\card-md.ts:\n    3  import {MD_CARD_DIRECTIVES} from '@angular/material';\n    4  \n    5: //jb_ui.registerDirectives({MD_CARD_DIRECTIVES: MD_CARD_DIRECTIVES });\n    6  \n    7  jb.component('group.md-card', {\n\nC:\\jbart5-ng\\src\\ui\\md-styles\\editable-boolean-md.ts:\n    4  import {MdSlideToggle} from '@angular/material';\n    5  \n    6: jb_ui.registerDirectives({MdSlideToggle: MdSlideToggle});\n    7  \n    8  jb.component('editable-boolean.md-slide-toggle', {\n\nC:\\jbart5-ng\\src\\ui\\md-styles\\input-md.ts:\n    3  \n    4  import {MdInput} from '@angular/material';\n    5: //jb_ui.registerDirectives({MdInput: MdInput});\n    6  \n    7  jb.component('editable-text.md-input',{\n\nC:\\jbart5-ng\\src\\ui\\md-styles\\sidenav-md.ts:\n    4  import {MD_SIDENAV_DIRECTIVES} from '@angular/material';\n    5  \n    6: //jb_ui.registerDirectives({MD_SIDENAV_DIRECTIVES: MD_SIDENAV_DIRECTIVES});\n    7  \n    8  jb.component('sidenav.md', {\n\nC:\\jbart5-ng\\src\\ui\\md-styles\\tabs-md.ts:\n    4  import {MD_TABS_DIRECTIVES,TABS_INTERNAL_DIRECTIVES,MdToolbar} from '@angular/material';\n    5  \n    6: //jb_ui.registerDirectives({MD_TABS_DIRECTIVES: MD_TABS_DIRECTIVES, MdToolbar:MdToolbar,TABS_INTERNAL_DIRECTIVES: TABS_INTERNAL_DIRECTIVES});\n    7  \n    8  jb.component('tabs.md-tabs', {\n\nC:\\jbart5-ng\\src\\ui\\tree\\tree.ts:\n  115  }\n  116  \n  117: //jb_ui.registerDirectives({TreeNode: TreeNode, TreeNodeLine:TreeNodeLine});\n  118  \n  119  \n\nC:\\jbart5-ng\\projects\\material-demo\\ng-material-demo-loader.ts:\n   35    OVERLAY_PROVIDERS: OVERLAY_PROVIDERS,\n   36  });\n   37: jb_ui.registerDirectives({\n   38    MD_CHECKBOX_DIRECTIVES: MD_CHECKBOX_DIRECTIVES, \n   39    MD_RADIO_DIRECTIVES:MD_RADIO_DIRECTIVES, \n\n10 matches across 9 files\n\n\nSearching 129 files for \"TreeNode\"\n\nC:\\jbart5-ng\\src\\ui\\tree\\json-tree.ts:\n   44  \n   45  		if (typeof val != 'object')\n   46: 			return prop + `: <span class=\"treenode-val\" title=\"${val}\">${val}</span>`;\n   47  \n   48  		return prop + ': ' + Object.getOwnPropertyNames(val)\n   49  			.filter(p=> typeof val[p] == 'string' || typeof val[p] == 'number' || typeof val[p] == 'boolean')\n   50  			.map(p=> \n   51: 				p + `= <span class=\"treenode-val\" title=\"${val[p]}\">${val[p]}</span>`)\n   52  			.join(', ')\n   53  	}\n\nC:\\jbart5-ng\\src\\ui\\tree\\tree.ts:\n   39  					expanded: jb.obj(tree.nodeModel.rootPath, true),\n   40  					el: cmp.elementRef.nativeElement,\n   41: 					elemToPath: el => $(el).closest('.treenode').attr('path'),\n   42  					selectionEmitter: new jb_rx.Subject(),\n   43  				})\n   ..\n   50  	type: 'tree.style',\n   51  	impl :{$:'customStyle',\n   52: 		template: '<span><jb_node [tree]=\"tree\" [path]=\"tree.nodeModel.rootPath\" class=\"jb-control-tree treenode\" [ngClass]=\"{selected: tree.selected == tree.nodeModel.rootPath}\"></jb_node></span>',\n   53: 		directives: ['TreeNode', 'TreeNodeLine'],\n   54  	}\n   55  })\n   ..\n   58  @Component({\n   59  	selector: 'node_line',\n   60: 	template: `<div class=\"treenode-line\" [ngClass]=\"{collapsed: !tree.expanded[path]}\">\n   61: 				<button class=\"treenode-expandbox\" (click)=\"flip()\" [ngClass]=\"{nochildren: !model.isArray(path)}\">\n   62  					<div class=\"frame\"></div><div class=\"line-lr\"></div><div class=\"line-tb\"></div>\n   63  				</button>\n   64  				<i class=\"material-icons\">{{icon}}</i>\n   65: 				<span class=\"treenode-label\" [innerHTML]=\"title\"></span>\n   66  			  </div>`,\n   67  	styles: [`i {font-size: 16px; margin-left: -4px; padding-right:2px }`]\n   68  })\n   69: class TreeNodeLine {\n   70  	@Input('path') path;\n   71  	@Input('tree') tree;\n   ..\n   90      selector: 'jb_node',\n   91  	template: `<node_line [tree]=\"tree\" [path]=\"path\"></node_line>\n   92: 		<ul *ngIf=\"tree.expanded[path]\" class=\"treenode-children\">\n   93: 		  <li *ngFor=\"let childPath of tree.nodeModel.children(path)\" class=\"treenode-li\">\n   94: 			<jb_node [tree]=\"tree\" [path]=\"childPath\" class=\"treenode\" [ngClass]=\"{selected: tree.selected == childPath}\"></jb_node>\n   95  		  </li>\n   96  		</ul>`,\n   97: 	directives: [TreeNodeLine,TreeNode]\n   98  })\n   99: class TreeNode {\n  100  	@Input('path') path;\n  101  	@Input('tree') tree;\n  ...\n  156  		  var first_selected = jb.val(context.params.databind);\n  157  		  if (!first_selected && context.params.autoSelectFirst) {\n  158: 			  var first = tree.el.querySelectorAll('.treenode')[0];\n  159  			  first_selected = tree.elemToPath(first);\n  160  		  }\n  ...\n  217  //						event.stopPropagation();\n  218  						var diff = event.keyCode == 40 ? 1 : -1;\n  219: 						var nodes = Array.from(tree.el.querySelectorAll('.treenode'));\n  220: 						var selected = tree.el.querySelector('.treenode.selected');\n  221  						return tree.elemToPath(nodes[nodes.indexOf(selected) + diff]) || tree.selected;\n  222  					}).subscribe(x=> \n  ...\n  237  					jb_ui.wrapWithLauchingElement(action, \n  238  						context.setData(tree.selected).setVars({regainFocus: cmp.getKeyboardFocus }), \n  239: 						tree.el.querySelector('.treenode.selected'))()\n  240  				}\n  241  			}\n  ...\n  297  			var drake = tree.drake = dragula([], {\n  298  				moves: function(el) { \n  299: 					return $(el).is('.jb-array-node>.treenode-children>.treenode-li') \n  300  				}\n  301  	        });\n  ...\n  326  		  	if (tree.drake)\n  327  			  tree.drake.containers = \n  328: 				  $(cmp.elementRef.nativeElement).findIncludeSelf('.jb-array-node').children().filter('.treenode-children').get();\n  329    		}\n  330  \n  ...\n  333  })\n  334  \n  335: //jb_ui.registerDirectives({TreeNode: TreeNode, TreeNodeLine:TreeNodeLine});\n  336  \n\nC:\\jbart5-ng\\css\\ng2-styles.css:\n  137  .jb-control-tree { margin: 0; padding: 0; }\n  138  .jb-control-tree:focus { outline: none; }\n  139: .jb-control-tree .treenode-children { margin: 0; padding: 0 0 0 10px; min-height: 7px}\n  140  .jb-control-tree ul,li { list-style: none; padding: 1px 0;}\n  141: .jb-control-tree .treenode-line { width:300px; display: flex; box-orient: horizontal; padding-bottom: 3px; }\n  142: .jb-control-tree .treenode-label { display: block; color: #3D443D; font-size: 12px; vertical-align: top; padding: 0; \n  143    overflow: hidden; text-overflow: ellipsis; white-space: nowrap;}\n  144: .jb-control-tree .treenode-label .treenode-val { color: red; } \n  145: .jb-control-tree .treenode-icon { width: 16px; height1:14px; display: inline-block;  background: url('icons1.png?v=16_02') no-repeat; \n  146    margin-right: 2px; vertical-align: top; background-position: 0px -16px;} /* fix background position to get other icons */\n  147  \n  148: .jb-control-tree .treenode-expandbox { border: none; background: none; position: relative; width:9px; height:9px; padding: 0; vertical-align: top;  \n  149      margin-top: 3px;  margin-right: 3px;  cursor: pointer;}\n  150: .jb-control-tree .treenode-expandbox div { position: absolute; }\n  151: .jb-control-tree .treenode-expandbox:focus { outline: none; }\n  152: .jb-control-tree .treenode-expandbox .frame { background: #F8FFF9; border-radius: 3px; border: 1px solid #91B193; top: 0px; left: 0px; right: 0px; bottom: 0px; }\n  153: .jb-control-tree .treenode-expandbox .line-lr { background: #91B193; top: 4px; left: 2px; width: 5px; height: 1px; }\n  154: .jb-control-tree .treenode-expandbox .line-tb { background: #91B193; left: 4px; top: 2px; height: 5px; width: 1px; display: none;}\n  155: .jb-control-tree .treenode-line.collapsed .line-tb { display: block; }\n  156: .jb-control-tree .treenode.collapsed .line-tb { display: block; }\n  157: .jb-control-tree .treenode.leaf .treenode-expandbox { cursor: default; }\n  158  \n  159: .jb-control-tree .treenode-expandbox.nochildren .frame { display: none; }\n  160: .jb-control-tree .treenode-expandbox.nochildren .line-lr { display: none; }\n  161: .jb-control-tree .treenode-expandbox.nochildren .line-tb { display: none;}\n  162  \n  163  /*\n  164: .jb-control-tree .treenode.collapsed>.treenode-children { display: none; }\n  165: .jb-control-tree .treenode-line.collapsed>.treenode-children { display: none; }\n  166: .jb-control-tree .treenode.leaf .treenode-expandbox div { display: none; }\n  167: .jb-control-tree .treenode.leaf .treenode-children { display: none; }\n  168  */\n  169  \n  170: .treenode.selected>*>*>.treenode-label { background: #D9E8FB;}\n  171  \n  172  /********* pulldown menu ********* */\n\nC:\\jbart5-ng\\projects\\studio\\studio-tgp-model.ts:\n  126  			compName = `actions (${val.length})`;\n  127  		if (compName)\n  128: 			return prop + `= <span class=\"treenode-val\">${compName}</span>`;\n  129  		else if (typeof val == 'string')\n  130: 			return prop + (collapsed ? `: <span class=\"treenode-val\" title=\"${val}\">${val}</span>` : '');\n  131  		return prop + (Array.isArray(val) ? ` (${val.length})` : '');\n  132  	}\n\nC:\\jbart5-ng\\projects\\studio\\css\\ng2-styles.css:\n  110  .jb-control-tree { margin: 0; padding: 0; }\n  111  .jb-control-tree:focus { outline: none; }\n  112: .jb-control-tree .treenode-children { margin: 0; padding: 0 0 0 10px; }\n  113  .jb-control-tree ul,li { list-style: none; padding: 1px 0;}\n  114: .jb-control-tree .treenode-line { width:300px; display: flex; box-orient: horizontal; padding-bottom: 3px; }\n  115: .jb-control-tree .treenode-label { display: block; color: #3D443D; font-size: 12px; vertical-align: top; padding: 0; \n  116    overflow: hidden; text-overflow: ellipsis; white-space: nowrap;}\n  117: .jb-control-tree .treenode-icon { width: 16px; height1:14px; display: inline-block;  background: url('icons1.png?v=16_02') no-repeat; \n  118    margin-right: 2px; vertical-align: top; background-position: 0px -16px;} /* fix background position to get other icons */\n  119  \n  120: .jb-control-tree .treenode-expandbox { border: none; background: none; position: relative; width:9px; height:9px; padding: 0; vertical-align: top;  \n  121      margin-top: 3px;  margin-right: 3px;  cursor: pointer;}\n  122: .jb-control-tree .treenode-expandbox div { position: absolute; }\n  123: .jb-control-tree .treenode-expandbox:focus { outline: none; }\n  124: .jb-control-tree .treenode-expandbox .frame { background: #F8FFF9; border-radius: 3px; border: 1px solid #91B193; top: 0px; left: 0px; right: 0px; bottom: 0px; }\n  125: .jb-control-tree .treenode-expandbox .line-lr { background: #91B193; top: 4px; left: 2px; width: 5px; height: 1px; }\n  126: .jb-control-tree .treenode-expandbox .line-tb { background: #91B193; left: 4px; top: 2px; height: 5px; width: 1px; display: none;}\n  127: .jb-control-tree .treenode-line.collapsed .line-tb { display: block; }\n  128: .jb-control-tree .treenode.collapsed .line-tb { display: block; }\n  129: .jb-control-tree .treenode.leaf .treenode-expandbox { cursor: default; }\n  130  \n  131: .jb-control-tree .treenode-expandbox.nochildren .frame { display: none; }\n  132: .jb-control-tree .treenode-expandbox.nochildren .line-lr { display: none; }\n  133: .jb-control-tree .treenode-expandbox.nochildren .line-tb { display: none;}\n  134  \n  135  /*\n  136: .jb-control-tree .treenode.collapsed>.treenode-children { display: none; }\n  137: .jb-control-tree .treenode-line.collapsed>.treenode-children { display: none; }\n  138: .jb-control-tree .treenode.leaf .treenode-expandbox div { display: none; }\n  139: .jb-control-tree .treenode.leaf .treenode-children { display: none; }\n  140  */\n  141  \n  142: .treenode.selected>*>*>.treenode-label { background: #D9E8FB;}\n  143  \n  144  /********* pulldown menu ********* */\n\nC:\\jbart5-ng\\projects\\studio\\css\\studio.css:\n  220  .CodeMirror-hints { z-index: 200 !important; }\n  221  \n  222: .studio-control-tree .treenode-children { margin: 0; padding: 1px 0 3px 10px; }\n  223: .studio-control-tree .treenode { list-style: none; padding: 1px 0;}\n  224: .studio-control-tree .treenode-line { display: -webkit-box; -webkit-box-orient: horizontal; width:100px;  }\n  225: .studio-control-tree .treenode-label { color: #3D443D; font-size: 12px; vertical-align: top; height: 15px; -webkit-user-select: none; padding: 1px 2px 0 1px; /* display: inline-block; */ max-width: 240px; overflow: hidden; text-overflow: ellipsis; white-space: nowrap;}\n  226: .studio-control-tree .treenode-icon { width: 16px; height:14px; display: inline-block;  background: url('studio_icons.png?v=17_02') no-repeat; margin-right: 2px; vertical-align: top;   background-position: 0px -16px;}\n  227  \n  228: .studio-control-tree .treenode-expandbox { border: none; background: none; position: relative; width:9px;	height:9px;	padding: 0;	vertical-align: top;	margin-top: 3px;	margin-right: 3px;	cursor: pointer;}\n  229: .studio-control-tree .treenode-expandbox div { position: absolute; }\n  230: .studio-control-tree .treenode-expandbox:focus { outline: none; }\n  231: .studio-control-tree .treenode-expandbox .frame { background: #F8FFF9; border-radius: 3px; border: 1px solid #91B193; top: 0px; left: 0px; right: 0px; bottom: 0px; }\n  232: .studio-control-tree .treenode-expandbox .line-lr { background: #91B193; top: 4px; left: 2px; width: 5px; height: 1px; }\n  233: .studio-control-tree .treenode-expandbox .line-tb { background: #91B193; left: 4px; top: 2px; height: 5px; width: 1px; display: none;}\n  234: .studio-control-tree .treenode.collapsed .line-tb { display: block; }\n  235: .studio-control-tree .treenode.collapsed>.treenode-children { display: none; }\n  236: .studio-control-tree .treenode.leaf .treenode-expandbox div { display: none; }\n  237: .studio-control-tree .treenode.leaf .treenode-expandbox { cursor: default; }\n  238: .studio-control-tree .treenode.leaf .treenode-children { display: none; }\n  239  \n  240: .studio-control-tree .treenode.selected>div>.treenode-label { background: #D9E8FB;}\n  241  \n  242  /* drag and drop */\n  243  \n  244: .gu-mirror .treenode-children { margin: 0; padding: 1px 0 3px 10px; }\n  245  \n  246: .gu-mirror .treenode { list-style: none; padding: 1px 0;}\n  247: .gu-mirror .treenode-line { display: -webkit-box; -webkit-box-orient: horizontal; width:100px;  }\n  248: .gu-mirror .treenode-label { color: #3D443D; font-size: 12px; vertical-align: top; height: 15px; -webkit-user-select: none; padding: 1px 2px 0 1px; /* display: inline-block; */ max-width: 240px; overflow: hidden; text-overflow: ellipsis; white-space: nowrap;}\n  249: .gu-mirror .treenode-icon { width: 16px; height:14px; display: inline-block;  background: url('studio_icons.png?v=17_02') no-repeat; margin-right: 2px; vertical-align: top;   background-position: 0px -16px;}\n  250  \n  251: .gu-mirror .treenode-expandbox { border: none; background: none; position: relative; width:9px;	height:9px;	padding: 0;	vertical-align: top;	margin-top: 3px;	margin-right: 3px;	cursor: pointer;}\n  252: .gu-mirror .treenode-expandbox div { position: absolute; }\n  253: .gu-mirror .treenode-expandbox:focus { outline: none; }\n  254: .gu-mirror .treenode-expandbox .frame { background: #F8FFF9; border-radius: 3px; border: 1px solid #91B193; top: 0px; left: 0px; right: 0px; bottom: 0px; }\n  255: .gu-mirror .treenode-expandbox .line-lr { background: #91B193; top: 4px; left: 2px; width: 5px; height: 1px; }\n  256: .gu-mirror .treenode-expandbox .line-tb { background: #91B193; left: 4px; top: 2px; height: 5px; width: 1px; display: none;}\n  257: .gu-mirror .treenode.collapsed .line-tb { display: block; }\n  258: .gu-mirror .treenode.collapsed>.treenode-children { display: none; }\n  259: .gu-mirror .treenode.leaf .treenode-expandbox div { display: none; }\n  260: .gu-mirror .treenode.leaf .treenode-expandbox { cursor: default; }\n  261: .gu-mirror .treenode.leaf .treenode-children { display: none; }\n  262  \n  263: .gu-mirror .treenode.selected>div>.treenode-label { background: #D9E8FB;}\n  264  \n  265  /* jbEditor */\n\n129 matches across 6 files\n\n\nSearching 130 files for \"MdCoreModule\"\n\nC:\\jbart5-ng\\node_modules\\@angular\\material\\material.umd.js:\n 2038      if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n 2039  };\n 2040: var MdCoreModule = (function () {\n 2041:     function MdCoreModule() {\n 2042      }\n 2043:     MdCoreModule.forRoot = function () {\n 2044          return {\n 2045:             ngModule: MdCoreModule,\n 2046              providers: [A11Y_PROVIDERS, OVERLAY_PROVIDERS],\n 2047          };\n 2048      };\n 2049:     MdCoreModule = __decorate([\n 2050          _angular_core.NgModule({\n 2051              imports: [MdLineModule, RtlModule, MdRippleModule, PortalModule, OverlayModule, A11yModule],\n ....\n 2053          }), \n 2054          __metadata('design:paramtypes', [])\n 2055:     ], MdCoreModule);\n 2056:     return MdCoreModule;\n 2057  }());\n 2058  \n ....\n 8877  }());\n 8878  \n 8879: exports.MdCoreModule = MdCoreModule;\n 8880  exports.Dir = Dir;\n 8881  exports.RtlModule = RtlModule;\n\n9 matches in 1 file\n\n\nSearching 130 files for \"annotations.imports\"\n\nC:\\jbart5-ng\\src\\ui\\jb-ui.ts:\n  188  			NgModule({\n  189  				imports: [jbCompModule, CommonModule, FormsModule, HttpModule, BrowserModule]\n  190: 						.concat(this.annotations.imports || []).filter(x=>x),\n  191    				declarations: [Cmp],\n  192    				exports: [Cmp]\n  ...\n  275  \n  276  		if (options.imports)\n  277: 				annotations.imports = (annotations.imports||[]).concat(options.imports);\n  278  		// if (options.directives !== undefined)\n  279  		// 		annotations.directives = (annotations.directives || []).concat(\n\n3 matches in 1 file\n\n\nSearching 130 files for \"imports:\"\n\nC:\\jbart5-ng\\src\\ui\\jb-ui.ts:\n  103  	hashkey() {\n  104  		return JSON.stringify(jb.extend({},this.annotations,{\n  105: 			imports: '', providers: '',\n  106  			host: jb.extend({},this.annotations.host || {}),\n  107  		}));\n  ...\n  187  		var DynamicModule = Reflect.decorate([\n  188  			NgModule({\n  189: 				imports: [jbCompModule, CommonModule, FormsModule, HttpModule, BrowserModule]\n  190  						.concat(this.annotations.imports || []).filter(x=>x),\n  191  				providers : this.annotations.providers,\n  ...\n  679  \n  680  @NgModule({\n  681:   imports: [],\n  682    declarations: [ jbComp ], // is overriden dynamically\n  683    exports: [ jbComp ],\n  ...\n  686  \n  687  @NgModule({\n  688:   imports:      [ jbCompModule, CommonModule, FormsModule, HttpModule, BrowserModule ],\n  689    declarations: [ jBartWidget ],\n  690    bootstrap:    [ jBartWidget ]\n\nC:\\jbart5-ng\\src\\ui\\styles.js:\n   17  				css: css,\n   18  				atts: atts,\n   19: 				imports: context.profile.imports,\n   20  				featuresOptions: features()\n   21  			},methods);\n\nC:\\jbart5-ng\\src\\ui\\md-styles\\button-md.ts:\n   11    impl :{$: 'customStyle', \n   12        template: '<div><button md-button (click)=\"clicked()\">{{title}}</button></div>',\n   13:       imports: MdButtonModule\n   14    }\n   15  })\n   ..\n   19    impl :{$: 'customStyle', \n   20        template: '<div><button md-raised-button (click)=\"clicked()\">{{title}}</button></div>',\n   21:       imports: MdButtonModule\n   22    }\n   23  })\n   ..\n   35                </button></div>`,\n   36        css: 'button {min-width: 2px; margin-top: -3px; padding: 4px}',\n   37:       imports: MdButtonModule,\n   38        providers: MdIconRegistry,\n   39    }\n   ..\n   59        button { width: %$size%px; height: %$size%px; padding: %$padding%px }\n   60        i { font-size:%$size%px; }`,\n   61:       imports: MdButtonModule,\n   62        providers: MdIconRegistry,\n   63    }\n   ..\n   77        .material-icons { font-size:12px;  }\n   78        `,\n   79:       imports: MdButtonModule,\n   80        providers: MdIconRegistry,\n   81    }\n   ..\n   94                  <i class=\"material-icons md-24\">%$icon%</i>\n   95                </button></div>`,\n   96:       imports: MdButtonModule,\n   97        providers: MdIconRegistry,\n   98    }\n   ..\n  110                  <i class=\"material-icons md-24\">%$icon%</i>\n  111                </button></div>`,\n  112:       imports: MdButtonModule,\n  113        providers: MdIconRegistry,\n  114    }\n\nC:\\jbart5-ng\\src\\ui\\md-styles\\dialog-md.ts:\n   29  		`,\n   30  	  css: `.dialog-buttons { display: flex; justify-content: flex-end; margin: 5px }`,\n   31:       imports: 'MdButton'\n   32  	}\n   33  })\n\nC:\\jbart5-ng\\src\\ui\\md-styles\\editable-boolean-md.ts:\n   10        features :{$: 'field.databind' },\n   11        template: `<div><md-slide-toggle [ngModel]=\"jbModel()\" (change)=\"jbModel($event.target.value)\">{{text()}}</md-slide-toggle></div>`,\n   12:       imports: MdSlideToggleModule\n   13    }\n   14  })\n   ..\n   28      background-color-old: rgba(0, 150, 136, 0.26); }\n   29        `,\n   30:       imports: MdSlideToggleModule\n   31    }\n   32  })\n\nC:\\jbart5-ng\\src\\ui\\md-styles\\input-md.ts:\n   18        },\n   19        css: 'md-input { {?width: %$width%px?} }',\n   20:     imports: MdInputModule\n   21  	}\n   22  })\n\nC:\\jbart5-ng\\src\\ui\\md-styles\\tabs-md.ts:\n   22         css: '{?!.md-tab-label { min-width: %$tabWidth%px} ?}',\n   23        features :{$: 'tabs.initTabs'},\n   24:       imports: MdTabsModule\n   25      }\n   26  })\n\nC:\\jbart5-ng\\src\\ui\\tree\\tree.ts:\n   81  \n   82  @NgModule({\n   83:   imports: [ CommonModule],\n   84    declarations: [ TreeNode, TreeNodeLine ], // is overriden dynamically\n   85    exports: [ TreeNode, TreeNodeLine ],\n   ..\n  121  		template: '<span><jb_node [tree]=\"tree\" [path]=\"tree.nodeModel.rootPath\" class=\"jb-control-tree treenode\" [ngClass]=\"{selected: tree.selected == tree.nodeModel.rootPath}\"></jb_node></span>',\n  122  //		directives: ['TreeNode', 'TreeNodeLine'],\n  123: 		imports: [jbTreeModule]\n  124  	}\n  125  })\n\nC:\\jbart5-ng\\projects\\material-demo\\all-readmes.js:\n    1: jb_resource('material-demo','readmes',[{\"id\":\"button\",\"content\":\"# md-button\\r\\n\\r\\n`md-button` is an HTML `<button>` or `<a>` tag enhanced with styling and animation to match the\\r\\n[Material Design button spec](https://www.google.com/design/spec/components/buttons.html).\\r\\n\\r\\nUsers should employ a button element (`<button>`) when clicking triggers some action in the current\\r\\nview *without navigating*. An anchor element (`<a>`) should be used when clicking *navigates*\\r\\nthe user to another URL. Depending on which element is used, the component will either be an\\r\\ninstance of `MdButton` or `MdAnchor`. Visually, the two are identical.\\r\\n\\r\\n\\r\\n### Button types\\r\\n\\r\\nThere are five types of buttons:\\r\\n 1. Flat buttons - `md-button`\\r\\n    * Rectangular button\\r\\n    * Defaults to white background\\r\\n    * No box shadow\\r\\n 2. Raised buttons - `md-raised-button`\\r\\n    * Rectangular button\\r\\n    * Defaults to white background\\r\\n    * Box shadow applied\\r\\n 3. Icon buttons - `md-icon-button`\\r\\n    * Circular button\\r\\n    * Transparent background\\r\\n    * 40 by 40 px\\r\\n 4. Floating Action Buttons (FABs) - `md-fab`\\r\\n    * Circular button\\r\\n    * Defaults background to \\\"accent\\\" palette defined in theme\\r\\n    * Box shadow applied\\r\\n    * 56 by 56 px\\r\\n 5. Mini Floating Action Buttons (Mini FABs) - `md-mini-fab`\\r\\n    * Circular button\\r\\n    * Defaults background to \\\"accent\\\" palette defined in theme\\r\\n    * Box shadow applied\\r\\n    * 40 by 40 px\\r\\n\\r\\nEach is an attribute directive that you can add to a `button` or `a` tag.  You can provide custom content to the button by inserting it\\r\\nbetween the tags, as you would with a normal button.\\r\\n\\r\\nExample:\\r\\n\\r\\n ```html\\r\\n<button md-button>FLAT</button>\\r\\n<button md-raised-button>RAISED</button>\\r\\n<button md-icon-button>\\r\\n    <md-icon class=\\\"md-24\\\">favorite</md-icon>\\r\\n</button>\\r\\n<button md-fab>\\r\\n    <md-icon class=\\\"md-24\\\">add</md-icon>\\r\\n</button>\\r\\n<button md-mini-fab>\\r\\n    <md-icon class=\\\"md-24\\\">add</md-icon>\\r\\n</button>\\r\\n ```\\r\\n\\r\\nOutput:\\r\\n\\r\\n<img src=\\\"https://material.angularjs.org/material2_assets/buttons/basic-buttons.png\\\">\\r\\n\\r\\n### Theming\\r\\n\\r\\nAll button types can be themed to match your \\\"primary\\\" palette, your \\\"accent\\\" palette, or your \\\"warn\\\" palette using the `color` attribute.\\r\\nSimply pass in the palette name.\\r\\n\\r\\nIn flat buttons, the palette chosen will affect the text color, while in other buttons, it affects the background.\\r\\n\\r\\nExample:\\r\\n\\r\\n ```html\\r\\n<button md-raised-button color=\\\"primary\\\">PRIMARY</button>\\r\\n<button md-raised-button color=\\\"accent\\\">ACCENT</button>\\r\\n<button md-raised-button color=\\\"warn\\\">WARN</button>\\r\\n ```\\r\\n\\r\\nOutput:\\r\\n\\r\\n<img src=\\\"https://material.angularjs.org/material2_assets/buttons/colored-buttons.png\\\">\\r\\n\\r\\n### Disabling\\r\\n\\r\\nYou can disable any button type through the native `disabled` property.  You can add it directly, or bind it to a property on your\\r\\ncomponent class by adding `[disabled]=\\\"isDisabled\\\"` given that the `isDisabled`\\r\\nproperty exists.\\r\\n\\r\\n```html\\r\\n<button md-button disabled>OFF</button>\\r\\n<button md-raised-button [disabled]=\\\"isDisabled\\\">OFF</button>\\r\\n<button md-mini-fab [disabled]=\\\"isDisabled\\\"><md-icon>check</md-icon></button>\\r\\n```\\r\\n\\r\\nOutput:\\r\\n\\r\\n<img src=\\\"https://material.angularjs.org/material2_assets/buttons/disabled-buttons.png\\\">\\r\\n\\r\\n### Accessibility\\r\\n\\r\\n * In high contrast mode, a strong border is added to the button to make it easier to see.\\r\\n * Button focus events originating from the keyboard will retain focus styles, while button focus events from the mouse will not.\\r\\n * As `md-button` is added to an existing `button` or `a` tag, it enjoys all the accessibility natively built into these elements.\\r\\n\\r\\n\\r\\n### Upcoming work\\r\\n\\r\\nWe will also be adding ink ripples to buttons in an upcoming milestone.\\r\\n\\r\\n### API Summary\\r\\n\\r\\nProperties:\\r\\n\\r\\n| Name | Type | Description |\\r\\n| --- | --- | --- |\\r\\n| `color` | `\\\"primary\\\"|\\\"accent\\\"|\\\"warn\\\"` | The color palette of the button\\r\\n| `disabled` | boolean | Whether or not the button is disabled\\r\\n| `disableRipple` | boolean | Whether the ripple effect when the button is clicked should be disabled\\r\\n\"},{\"id\":\"button-toggle\",\"content\":\"# md-button-toggle\\r\\n\\r\\n`MdButtonToggle` is a group of buttons that can be toggled.\\r\\nThere are two modes, `multiple` and `exclusive`.\\r\\nWhen in 'exclusive' mode, only one button can be selected at a time (like radio buttons).\\r\\nWhen in 'multiple' mode, multiple buttons can be selected at once (like checkboxes).\\r\\nYou can read more about button toggles in the\\r\\n[Material Design spec](https://material.google.com/components/buttons.html#buttons-toggle-buttons).\\r\\n\\r\\n## Usage\\r\\n\\r\\n### Setup\\r\\n\\r\\nImporting the module:\\r\\n```ts\\r\\n @NgModule({\\r\\n    imports: [MdButtonToggleModule.forRoot()],\\r\\n    ...\\r\\n })\\r\\n export class MyAppModule { }\\r\\n```\\r\\n\\r\\n### Basic Usage\\r\\n\\r\\n`md-button-toggle` can be used on its own and acts as a checkbox.\\r\\n\\r\\n```html\\r\\n<md-button-toggle>Bold</md-button-toggle>\\r\\n```\\r\\n\\r\\nOutput:\\r\\n\\r\\n![Basic Toggle Button Example](https://material.angularjs.org/material2_assets/button-toggle/basic-toggle.png)\\r\\n\\r\\n### Exclusive Selection\\r\\n\\r\\n`md-button-toggle` can be used in an exclusive selection group when surrounded by\\r\\n`md-button-toggle-group`. This styles all buttons within the group to appear as a single\\r\\ngroup of button toggles and allows only one button toggle to be selected at a time.\\r\\n\\r\\n```html\\r\\n<md-button-toggle-group name=\\\"alignment\\\">\\r\\n    <md-button-toggle value=\\\"left\\\"><md-icon>format_align_left</md-icon></md-button-toggle>\\r\\n    <md-button-toggle value=\\\"center\\\"><md-icon>format_align_center</md-icon></md-button-toggle>\\r\\n    <md-button-toggle value=\\\"right\\\"><md-icon>format_align_right</md-icon></md-button-toggle>\\r\\n    <md-button-toggle value=\\\"justify\\\"><md-icon>format_align_justify</md-icon></md-button-toggle>\\r\\n</md-button-toggle-group>\\r\\n```\\r\\n\\r\\nOutput:\\r\\n\\r\\n![Exclusive Toggle Button Example](https://material.angularjs.org/material2_assets/button-toggle/exclusive-toggle.png)\\r\\n\\r\\n### Multiple Selection\\r\\n\\r\\n`md-button-toggle` can be used in a multiple selection group when surrounded by\\r\\n`md-button-toggle-group multiple`. This styles all buttons within the group to appear as a single\\r\\ngroup of button toggles.\\r\\n\\r\\n```html\\r\\n<md-button-toggle-group multiple>\\r\\n    <md-button-toggle>Flour</md-button-toggle>\\r\\n    <md-button-toggle>Eggs</md-button-toggle>\\r\\n    <md-button-toggle>Sugar</md-button-toggle>\\r\\n    <md-button-toggle>Milk</md-button-toggle>\\r\\n</md-button-toggle-group>\\r\\n```\\r\\n\\r\\nOutput:\\r\\n\\r\\n![Multiple Toggle Button Example](https://material.angularjs.org/material2_assets/button-toggle/multi-toggle.png)\\r\\n\\r\\n## Dynamic Exclusive Selection\\r\\n\\r\\n`md-button-toggle`s can be used with `ngModel` to dynamically create groups and update the value for\\r\\na group.\\r\\n\\r\\n```html\\r\\n<md-button-toggle-group name=\\\"pies\\\" [(ngModel)]=\\\"favoritePie\\\">\\r\\n    <md-button-toggle *ngFor=\\\"let pie of pieOptions\\\" [value]=\\\"pie\\\">\\r\\n        {{pie}}\\r\\n    </md-button-toggle>\\r\\n</md-button-toggle-group>\\r\\n<p>Your favorite type of pie is: {{favoritePie}}</p>\\r\\n```\\r\\n\\r\\n### Disabled Button Toggle\\r\\n\\r\\n`md-button-toggle-group` and `md-button-toggle` can both be disabled by adding a `disabled`\\r\\nattribute to either one. Adding `disabled` to an exclusive group or a multiple group will disable\\r\\nthe entire group. Adding `disabled` to a single toggle will disable that toggle.\\r\\n\\r\\n```html\\r\\n<md-button-toggle-group disabled>\\r\\n    <md-button-toggle value=\\\"one\\\">One</md-button-toggle>\\r\\n    <md-button-toggle value=\\\"two\\\">Two</md-button-toggle>\\r\\n    <md-button-toggle value=\\\"three\\\">Three</md-button-toggle>\\r\\n</md-button-toggle-group>\\r\\n\\r\\n<md-button-toggle-group>\\r\\n    <md-button-toggle value=\\\"red\\\" disabled>Red</md-button-toggle>\\r\\n    <md-button-toggle value=\\\"blue\\\">Blue</md-button-toggle>\\r\\n</md-button-toggle-group>\\r\\n```\\r\\n\\r\\nOutput:\\r\\n\\r\\n![Disabled Toggle Buttons Example](https://material.angularjs.org/material2_assets/button-toggle/disabled-toggles.png)\\r\\n\\r\\n## `<md-button-toggle>`\\r\\n\\r\\n### Bound Properties\\r\\n\\r\\n| Name | Type | Description |\\r\\n| --- | --- | --- |\\r\\n| `id` | string | The unique ID of the toggle. IDs are generated by default when not specified. |\\r\\n| `name` | string | Optional, defaults to parent group name if one exists for exclusive selection toggles, otherwise null. This is used to differentiate between different groups. |\\r\\n| `value` | any | Value of the toggle. Only used when in a group to determine which are selected. |\\r\\n| `checked` | boolean | Optional, default = `false`. Whether or not the toggle is checked. |\\r\\n| `disabled` | boolean | Optional, default = `false`. Whether or not the toggle is disabled |\\r\\n\\r\\n### Events\\r\\n\\r\\n| Name | Description |\\r\\n| --- | --- |\\r\\n| `change` | Emitted when the `checked` value is changed. |\\r\\n\\r\\n## `<md-button-toggle-group>`\\r\\n\\r\\n### Bound Properties\\r\\n\\r\\n| Name | Type | Description |\\r\\n| --- | --- | --- |\\r\\n| `name` | string | Optional, the name of the group. |\\r\\n| `disabled` | boolean | Optional, default = `false`. |\\r\\n| `value` | any | The current value for the group. Will be set to the value of the selected toggle or a list of values from the selected toggles. |\\r\\n| `selected` | `mdButtonToggle` | The current selected toggle or a list of the selected toggles. |\\r\\n\\r\\n### Attributes\\r\\n\\r\\n| Name | Type | Description |\\r\\n| --- | --- | --- |\\r\\n| `multiple` | boolean | Optional, default = `false`. Whether or not the group allows multiple selection. |\\r\\n\\r\\n### Events\\r\\n\\r\\n| Name | Description |\\r\\n| --- | --- |\\r\\n| `change` | Emitted when the `value` of the group changes. |\\r\\n\"},{\"id\":\"card\",\"content\":\"# md-card\\r\\n\\r\\n`md-card` is a content container component that conforms to the spec of a Material Design card.\\r\\n\\r\\nSee plunker example [here](http://plnkr.co/edit/pkUNGMXPcf8RXKapXNXQ?p=preview).\\r\\n\\r\\n## Usage\\r\\n\\r\\nSimply add your content between `md-card` tags to consume basic card styles like box-shadow and default padding.\\r\\n\\r\\n```html\\r\\n<md-card>\\r\\n   Basic card.\\r\\n</md-card>\\r\\n```\\r\\n\\r\\nOutput:\\r\\n\\r\\n<img src=\\\"https://material.angularjs.org/material2_assets/cards/basic-card-min.png\\\">\\r\\n\\r\\n### Preset sections \\r\\n\\r\\nWe also provide a number of preset sections that you can mix and match within the `md-card` tags. \\r\\n\\r\\n  * `<md-card-title>`: adds styles for a title\\r\\n  * `<md-card-subtitle>`: adds styles for a subtitle\\r\\n  * `<md-card-content>`: main content section, intended for blocks of text\\r\\n  * `<img md-card-image>`: stretches image to container width\\r\\n  * `<md-card-actions>`: wraps and styles buttons\\r\\n  * `<md-card-footer>`: anchors section to bottom of card (e.g progress bar)\\r\\n\\r\\nExample markup for a card with section presets:\\r\\n\\r\\n```html\\r\\n<md-card>\\r\\n   <md-card-subtitle>Subtitle first</md-card-subtitle>\\r\\n   <md-card-title>Card with title</md-card-title>   \\r\\n   <md-card-content>\\r\\n        <p>This is supporting text.</p>\\r\\n        <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do \\r\\n        tempor incididunt ut labore et dolore magna aliqua. Ut enim ad</p>\\r\\n   </md-card-content>\\r\\n   <md-card-actions>\\r\\n        <button md-button>LIKE</button>\\r\\n        <button md-button>SHARE</button>\\r\\n   </md-card-actions>\\r\\n</md-card>\\r\\n```\\r\\n\\r\\nOutput:\\r\\n\\r\\n<img src=\\\"https://material.angularjs.org/material2_assets/cards/sections-card-min.png\\\">\\r\\n\\r\\n#### Preset shortcuts\\r\\n\\r\\n`md-card-actions` has a few layout shortcuts. You can add `align=\\\"end\\\"` to align the buttons at the end of\\r\\nthe main axis (flex-end). The default is `align=\\\"start\\\"` (flex-start).\\r\\n\\r\\n### Preset layouts\\r\\n\\r\\nYou can also leverage preset layouts that format some of the sections together.\\r\\n\\r\\n#### `<md-card-header>`\\r\\n\\r\\nFormats the following sections into a header:\\r\\n\\r\\n  * `<md-card-title>`: title to format within header\\r\\n  * `<md-card-subtitle>`: subtitle to format within header\\r\\n  * `<img md-card-avatar>`: image to use for avatar\\r\\n    \\r\\nExample markup for a card with a header:\\r\\n\\r\\n```html\\r\\n<md-card>\\r\\n   <md-card-header>\\r\\n      <img md-card-avatar src=\\\"path/to/img.png\\\">\\r\\n      <md-card-title>Header title</md-card-title>\\r\\n      <md-card-subtitle>Header subtitle</md-card-subtitle>\\r\\n   </md-card-header>\\r\\n   <img md-card-image src=\\\"path/to/img.png\\\">\\r\\n   <md-card-content>\\r\\n      <p>Here is some more content</p>\\r\\n   </md-card-content>\\r\\n</md-card>\\r\\n```\\r\\n\\r\\nOutput:\\r\\n\\r\\n<img src=\\\"https://material.angularjs.org/material2_assets/cards/header-card-min.png\\\">    \\r\\n    \\r\\n#### `<md-card-title-group>`\\r\\n\\r\\nGroups the following sections together:\\r\\n\\r\\n  * `<md-card-title>`: title to format within group\\r\\n  * `<md-card-subtitle>`: subtitle to format within group\\r\\n  * One of the following image sizes:\\r\\n    * `<img md-card-sm-image>`\\r\\n    * `<img md-card-md-image>`\\r\\n    * `<img md-card-lg-image>`\\r\\n\\r\\nExample markup for a card with title-group layout:\\r\\n\\r\\n```html\\r\\n<md-card>\\r\\n   <md-card-title-group>\\r\\n      <img md-card-sm-image src=\\\"path/to/img.png\\\">\\r\\n      <md-card-title>Card with title</md-card-title>\\r\\n      <md-card-subtitle>Subtitle</md-card-subtitle>\\r\\n   </md-card-title-group>\\r\\n</md-card>\\r\\n```\\r\\n\\r\\nOutput:\\r\\n\\r\\n<img src=\\\"https://material.angularjs.org/material2_assets/cards/title-group-card-min.png\\\">\"},{\"id\":\"checkbox\",\"content\":\"# md-checkbox\\r\\n\\r\\n`md-checkbox` is a Material Design selection control that allows users to make a binary choice for\\r\\na predetermined conditioned. It is modeled after the browser's native checkbox element, and behaves\\r\\nin the same way. Similar to the native checkbox element, it supports an indeterminate state for\\r\\n\\\"mixed\\\" checkboxes.\\r\\n\\r\\nA demo of the checkbox can be found at https://plnkr.co/edit/P7qce8lN9n2flS6kBhDy?p=preview.\\r\\n\\r\\n## Usage\\r\\n\\r\\n### Basic Usage\\r\\n\\r\\n`md-checkbox` can be used anywhere a normal checkbox would be used, and in the same way.\\r\\n\\r\\n```html\\r\\n<ul>\\r\\n  <li *ngFor=\\\"let todo of todos\\\">\\r\\n    <md-checkbox [checked]=\\\"todo.completed\\\"\\r\\n                 (change)=\\\"todo.completed = $event\\\">\\r\\n      {{todo.name}}\\r\\n    </md-checkbox>\\r\\n  </li>\\r\\n</ul>\\r\\n```\\r\\n\\r\\n### Usage within Forms\\r\\n\\r\\nIn addition to supporting native checkbox functionality, `md-checkbox` also supports `[(ngModel)]`\\r\\nfor use within forms.\\r\\n\\r\\n```html\\r\\n<form (submit)=\\\"saveUser()\\\">\\r\\n  <!-- Form fields... -->\\r\\n  <div>\\r\\n    <md-checkbox [(ngModel)]=\\\"user.agreesToTOS\\\">\\r\\n      I have read and agree to the terms of service.\\r\\n    </md-checkbox>\\r\\n  </div>\\r\\n  <button type=\\\"submit\\\" [disabled]=\\\"!user.agreesToTOS\\\">Sign Up</button>\\r\\n</form>\\r\\n```\\r\\n\\r\\n### Indeterminate Checkboxes\\r\\n\\r\\nIndeterminate checkboxes are useful when a checkbox needs to be in a \\\"mixed\\\" state\\r\\n\\r\\n```html\\r\\n<md-checkbox [checked]=\\\"false\\\"\\r\\n             [indeterminate]=\\\"isIndeterminate\\\"\\r\\n             (change)=\\\"isIndeterminate = false\\\">\\r\\n  Click the Button Below to Make Me Indeterminate.\\r\\n</md-checkbox>\\r\\n<button type=\\\"button\\\" (click)=\\\"isIndeterminate = true\\\">\\r\\n  Make Indeterminate\\r\\n</button>\\r\\n```\\r\\n\\r\\n### Alignment\\r\\n\\r\\nNote that checkboxes can be aligned to come at the \\\"start\\\" or the \\\"end\\\" of its corresponding label.\\r\\n\\r\\n```html\\r\\n<md-checkbox [checked]=\\\"true\\\" align=\\\"end\\\">\\r\\n  I come after my label.\\r\\n</md-checkbox>\\r\\n```\\r\\n\\r\\nNote that this alignment is preserved within RTL layouts.\\r\\n\\r\\n### Accessibility\\r\\n\\r\\nBy default, `md-checkbox` provides all the accessibility attributes needed. It also supports\\r\\nkeyboard navigation and toggling via the spacebar. However, you can provide an `aria-label` to the\\r\\ncheckbox if you do not wish to have any label text.\\r\\n\\r\\n```html\\r\\n<md-checkbox [checked]=\\\"false\\\" aria-label=\\\"My standalone checkbox\\\"></md-checkbox>\\r\\n```\\r\\n\"},{\"id\":\"core\",\"content\":\"Core library code for other `@angular2-material` components.\\r\\nThis should be added as a dependency for any project using the components.\\r\\n\"},{\"id\":\"dialog\",\"content\":\"\"},{\"id\":\"grid-list\",\"content\":\"# md-grid-list\\r\\n\\r\\n`md-grid-list` is an alternative list view that arranges cells into grid-based layout. \\r\\nSee Material Design spec [here](https://www.google.com/design/spec/components/grid-lists.html).\\r\\n\\r\\n## Usage\\r\\n\\r\\n### Simple grid list\\r\\n\\r\\nTo use `md-grid-list`, import the MdGridList module into your application's NgModule:\\r\\n\\r\\n*my-app-module.ts*\\r\\n```ts\\r\\nimport {MdGridListModule} from '@angular2-material/grid-list';\\r\\n\\r\\n@NgModule({\\r\\n  imports: [MdGridListModule.forRoot()],\\r\\n  ...\\r\\n})\\r\\nexport class MyAppModule {}\\r\\n```\\r\\n\\r\\nIn your template, create an `md-grid-list` element and specify the number of columns you want for\\r\\nyour grid using the `cols` property (this is the only mandatory attribute). \\r\\n\\r\\nYou can define each tile using an `md-grid-tile` element, passing any tile content between its tags.\\r\\n\\r\\nTiles are greedily placed in the first position of the grid that fits them, so row count depends on \\r\\nhow many tiles can fit in each row, given the col count and the colspan/rowspan of each tile.\\r\\n\\r\\n```html\\r\\n<md-grid-list cols=\\\"4\\\" [style.background]=\\\"'lightblue'\\\">\\r\\n   <md-grid-tile>One</md-grid-tile>\\r\\n   <md-grid-tile>Two</md-grid-tile>\\r\\n   <md-grid-tile>Three</md-grid-tile>\\r\\n   <md-grid-tile>Four</md-grid-tile>\\r\\n</md-grid-list>\\r\\n```\\r\\n\\r\\nOutput:\\r\\n\\r\\n<img src=\\\"https://material.angularjs.org/material2_assets/grid-list/basic-grid-list.png\\\">\\r\\n\\r\\n## Grid list config\\r\\n\\r\\n####`cols`\\r\\n\\r\\nThe `cols` property controls the number of columns displayed in your grid. It must be set or the \\r\\ngrid list will not be able to generate your layout.\\r\\n\\r\\nEx: `<md-grid-list cols=\\\"3\\\">...`\\r\\n\\r\\nDefault: There is no reasonable default value for this, so if it is unspecified, the grid list will \\r\\nthrow an error.\\r\\n\\r\\n####`rowHeight`\\r\\n\\r\\nRow height for the list can be calculated in three ways:\\r\\n\\r\\n1. **Fixed height**: The height can be in `px`, `em`, or `rem`.  If no units are specified, `px` \\r\\nunits are assumed. \\r\\n   \\r\\n   Ex: `<md-grid-list cols=\\\"3\\\" rowHeight=\\\"100px\\\">...`\\r\\n        \\r\\n2. **Ratio**: This ratio is width:height, and must be passed in with a colon, not a decimal.\\r\\n\\r\\n   Ex: `<md-grid-list cols=\\\"3\\\" rowHeight=\\\"4:3\\\">...`.\\r\\n        \\r\\n3. **Fit**:  This mode automatically divides the available height by the number of rows.  Please note\\r\\nthe height of the grid-list or its container must be set.  \\r\\n\\r\\n   Ex: `<md-grid-list cols=\\\"3\\\" rowHeight=\\\"fit\\\">...`\\r\\n\\r\\nDefaults to a 1:1 ratio of width:height. \\r\\n        \\r\\n####`gutterSize`\\r\\n\\r\\nGutter size can be set to any `px`, `em`, or `rem` value with the `gutterSize` property.  If no \\r\\nunits are specified, `px` units are assumed.\\r\\n\\r\\nEx: `<md-grid-list cols=\\\"3\\\" gutterSize=\\\"4px\\\">...`\\r\\n\\r\\nDefaults to `1px`.\\r\\n        \\r\\n## Grid tile config\\r\\n\\r\\nYou can set the rowspan and colspan of each tile individually, using the `rowspan` and `colspan` \\r\\nproperties.  If not set, they both default to `1`.\\r\\n\\r\\n```html\\r\\n<md-grid-list cols=\\\"4\\\" rowHeight=\\\"100px\\\">\\r\\n  <md-grid-tile *ngFor=\\\"let tile of tiles\\\" [colspan]=\\\"tile.cols\\\" [rowspan]=\\\"tile.rows\\\"\\r\\n  [style.background]=\\\"tile.color\\\">\\r\\n    {{tile.text}}\\r\\n  </md-grid-tile>\\r\\n</md-grid-list>\\r\\n```\\r\\n\\r\\n```javascript\\r\\n...\\r\\nexport class MyComp {\\r\\n  tiles: any[] = [\\r\\n    {text: 'One', cols: 3, rows: 1, color: 'lightblue'},\\r\\n    {text: 'Two', cols: 1, rows: 2, color: 'lightgreen'},\\r\\n    {text: 'Three', cols: 1, rows: 1, color: 'lightpink'},\\r\\n    {text: 'Four', cols: 2, rows: 1, color: '#DDBDF1'},\\r\\n  ];\\r\\n}\\r\\n```\\r\\n\\r\\nOutput:\\r\\n\\r\\n<img src=\\\"https://material.angularjs.org/material2_assets/grid-list/fancy-grid-list.png\\\">\\r\\n\\r\\n## TODO\\r\\n\\r\\n- Grid tile headers and footers\\r\\n- Responsive sizing support\\r\\n\"},{\"id\":\"icon\",\"content\":\"# md-icon\\r\\n\\r\\n`md-icon` is a component that displays an icon, which can be a font glyph or an SVG image.\\r\\n\\r\\n## MdIconRegistry\\r\\n\\r\\n`MdIconRegistry` is an injectable service that allows you to associate icon names with SVG URLs and define aliases for CSS font classes. Its methods are discussed below and listed in the API summary.\\r\\n\\r\\n## Font icons\\r\\n\\r\\n### Ligatures\\r\\n\\r\\nSome fonts are designed to show icons by using [ligatures](https://en.wikipedia.org/wiki/Typographic_ligature), for example by rendering the text \\\"home\\\" as a home image. To use a ligature icon, put its text in the content of the `md-icon` component, for example:\\r\\n```html\\r\\n<md-icon>home</md-icon>\\r\\n```\\r\\n\\r\\nBy default the [Material icons font](http://google.github.io/material-design-icons/#icon-font-for-the-web) is used. (You will still need to include the HTML to load the font and its CSS, as described in the link). You can specify a different font by setting the `fontSet` input to either the CSS class to apply to use the desired font, or to an alias previously registered with `MdIconRegistry.registerFontClassAlias`, for example:\\r\\n```javascript\\r\\nmdIconRegistry.registerFontClassAlias('myfont', 'my-icon-font-class');\\r\\n```\\r\\n\\r\\n```html\\r\\n<md-icon fontSet=\\\"myfont\\\">help</md-icon>\\r\\n```\\r\\n\\r\\n### Font icons via CSS\\r\\n\\r\\nFonts can also display icons by defining a CSS class for each icon glyph, which typically uses a :before selector to cause the icon to appear. [FontAwesome](https://fortawesome.github.io/Font-Awesome/examples/) uses this approach to display its icons. To use such a font, set the `fontSet` input to the font's CSS class (either the class itself or an alias registered with `MdIconRegistry.registerFontClassAlias`), and set the `fontIcon` input to the class for the specific icon to show. Example:\\r\\n\\r\\n```html\\r\\n<md-icon fontSet=\\\"fa\\\" fontIcon=\\\"fa-square\\\"></md-icon>\\r\\n```\\r\\n\\r\\nFor both types of font icons, you can specify the default font class to use when `fontSet` is not explicitly set by calling `MdIconRegistry.setDefaultFontSetClass`.\\r\\n\\r\\n## SVG icons\\r\\n\\r\\nWhen an `md-icon` component displays an SVG icon, it does so by directly inlining the SVG content into the page as a child of the component. (Rather than using an <img> tag or a div background image). This makes it easier to apply CSS styles to SVG icons. For example, the default color of the SVG content is the CSS [currentColor](http://www.quirksmode.org/css/color/currentcolor.html) value. This makes SVG icons by default have the same color as surrounding text, and allows you to change the color by setting the \\\"color\\\" style on the `md-icon` element.\\r\\n\\r\\n### Icons from URLs\\r\\n\\r\\nSVG icons can be used either by directly specifying the icon's URL, or by associating an icon name with a URL and then referring to the name. To use a URL directly, set the `svgSrc` input:\\r\\n```html\\r\\n<md-icon svgSrc=\\\"/assets/sun.svg\\\"></md-icon>\\r\\n```\\r\\n\\r\\n### Named icons\\r\\n\\r\\nTo associate a name with an icon URL, use the `addSvgIcon` or `addSvgIconInNamespace` methods of `MdIconRegistry`. After registering an icon, it can be displayed by setting the `svgIcon` input. For an icon in the default namespace, use the name directly. For a non-default namespace, use the format `[namespace]:[name]`. Examples:\\r\\n```javascript\\r\\nmdIconRegistry.addSvgIcon('moon', '/assets/moon.svg');\\r\\nmdIconRegistry.addSvgIconInNamespace('animals', 'cat', '/assets/cat.svg');\\r\\n```\\r\\n\\r\\n```html\\r\\n<md-icon svgIcon=\\\"moon\\\"></md-icon>\\r\\n<md-icon svgIcon=\\\"animals:cat\\\"></md-icon>\\r\\n```\\r\\n\\r\\n### Icon sets\\r\\n\\r\\nIcon sets allow grouping multiple icons into a single SVG file. The content of an icon set file looks like this, where each nested `<svg>` tag defines an individual icon, and is identified with a unique \\\"id\\\" attribute.\\r\\n```\\r\\n<svg>\\r\\n  <defs>\\r\\n    <svg id=\\\"mercury\\\">...</svg>\\r\\n    <svg id=\\\"venus\\\">...</svg>\\r\\n    <svg id=\\\"earth\\\">...</svg>\\r\\n    <svg id=\\\"mars\\\">...</svg>\\r\\n  </defs>\\r\\n</svg>\\r\\n```\\r\\n\\r\\nIcon sets are registered using the `addSvgIconSet` or `addSvgIconSetInNamespace` methods of `MdIconRegistry`. After an icon set is registered, each of its embedded icons can be accessed by their \\\"id\\\" attributes. To display an icon from an icon set, use the `svgIcon` input in the same way as for individually registered icons. Example:\\r\\n```javascript\\r\\nmdIconRegistry.addSvgIconSetInNamespace('planets', '/assets/planets.svg');\\r\\n```\\r\\n\\r\\n```html\\r\\n<md-icon svgIcon=\\\"planets:venus\\\"></md-icon>\\r\\n```\\r\\n\\r\\nMultiple icon sets can be registered in the same namespace. If you request an icon whose id appears in more than one icon set, the icon from the most recently registered set will be used.\\r\\n\\r\\nNote that all SVG icons are fetched via XmlHttpRequest, and due to the same-origin policy their URLs must be on the same domain as the containing page, or their servers must be configured to allow cross-domain access.\\r\\n\\r\\n### Accessibility\\r\\n\\r\\nIf you set an \\\"aria-label\\\" attribute on the md-icon element, its value will be used as-is. If you do not, the md-icon component will attempt to set the aria-label value from one of these sources:\\r\\n* The `alt` attribute\\r\\n* The `fontIcon` input\\r\\n* The name of the icon from the `svgIcon` input (not including any namespace)\\r\\n* The text content of the component (for ligature icons)\\r\\n\\r\\n### API Summary\\r\\n\\r\\nmd-icon Properties:\\r\\n\\r\\n| Name         | Type     | Description |\\r\\n| ---          | ---      | --- |\\r\\n| `svgSrc`     | string   | The URL of the SVG icon to display |\\r\\n| `svgIcon`    | string   | The name (and possibly namespace) of an icon previously registered with `MdIconRegistry.addSvgIcon` or `MdIconRegistry.addSvgIconInNamespace` |\\r\\n| `fontSet`    | string   | The font to use to display an icon glyph. The value can be either a CSS class name, or an alias previously defined with `MdIconRegistry.registerFontClassAlias` |\\r\\n| `fontIcon`   | string   | The CSS class that identifies the specific icon to use from an icon font |\\r\\n\\r\\nMdIconRegistry methods (all methods return `this` for chaining):\\r\\n\\r\\n| Signature   | Description |\\r\\n| ---         | --- |\\r\\n| addSvgIcon(name: string, url: string): MdIconProvider | Associates an icon name with a URL in the default namespace. When an `md-icon` component has its `svgIcon` input set to this name, the icon will be loaded from this URL. |\\r\\n| addSvgIconInNamespace(namespace: string, iconName: string, url: string): MdIconProvider | Associates an icon name with a URL in the specified namespace. |\\r\\n| addSvgIconSet(url: string): MdIconProvider | Makes the icons contained in the icon set from a URL available in the default namespace. |\\r\\n| addSvgIconSetInNamespace(namespace: string, url: string): MdIconProvider | Makes the icons contained in the icon set from a URL available in the specified namespace. |\\r\\n| registerFontClassAlias(alias: string, className: string): MdIconProvider | Associates a font alias with a CSS class. When an `md-icon` component has its `fontSet` input set to the alias, the CSS class will be added to the component's element. It is assumed that the user has defined a corresponding CSS rule to set the desired font. |\\r\\n| setDefaultFontSetClass(className: string): MdIconProvider | Sets the default CSS class to apply to font icons when mdFontSet is not set. |\\r\\n\"},{\"id\":\"input\",\"content\":\"# mdInput\\r\\n\\r\\nInputs are the basic input component of Material 2. The spec can be found [here](https://www.google.com/design/spec/components/text-fields.html).\\r\\n\\r\\n\\r\\n\\r\\n## Notes\\r\\n* The `<md-input>` component fully support two-way binding of `ngModel`, as if it was a normal `<input>`.\\r\\n\\r\\n\\r\\n\\r\\n## Type\\r\\n\\r\\nAt the time of writing this README, the `[type]` attribute is copied to the actual `<input>` element in the `<md-input>`.\\r\\n\\r\\nThe valid `type` attribute values are any supported by your browser, with the exception of `file`, `checkbox` and `radio`. File inputs aren't supported for now, while check boxes and radio buttons have their own components.\\r\\n\\r\\n\\r\\n\\r\\n## Prefix and Suffix\\r\\n\\r\\nYou can include HTML before, and after the input tag, as prefix or suffix. It will be underlined as per the Material specification, and clicking it will focus the input.\\r\\n\\r\\nTo add a prefix, use the `md-prefix` attribute on the element. Similarly, to add a suffix, use the `md-suffix` attribute. For example, in a template:\\r\\n\\r\\n#### Example\\r\\n\\r\\n```html\\r\\n<md-input placeholder=\\\"amount\\\" align=\\\"end\\\">\\r\\n  <span md-prefix>$&nbsp;</span>\\r\\n  <span md-suffix>.00</span>\\r\\n</md-input>\\r\\n```\\r\\n\\r\\nWill result in this:\\r\\n\\r\\n<img src=\\\"https://material.angularjs.org/material2_assets/input/prefix-suffix.png\\\">\\r\\n\\r\\n\\r\\n\\r\\n## Hint Labels\\r\\n\\r\\nHint labels are the labels that shows the underline. You can have up to two hint labels; one on the `start` of the line (left in an LTR language, right in RTL), or one on the `end`.\\r\\n\\r\\nYou specify a hint-label in one of two ways; either using the `hintLabel` attribute, or using an `<md-hint>` directive in the `<md-input>`, which takes an `align` attribute containing the side. The attribute version is assumed to be at the `start`.\\r\\n\\r\\nSpecifying a side twice will result in an exception during initialization.\\r\\n\\r\\n#### Example\\r\\n\\r\\nA simple character counter can be made like the following:\\r\\n\\r\\n```html\\r\\n<md-input placeholder=\\\"Character count (100 max)\\\" maxlength=\\\"100\\\" class=\\\"demo-full-width\\\"\\r\\n          value=\\\"Hello world. How are you?\\\"\\r\\n          #characterCountHintExample>\\r\\n  <md-hint align=\\\"end\\\">{{characterCountHintExample.characterCount}} / 100</md-hint>\\r\\n</md-input>\\r\\n```\\r\\n\\r\\n<img src=\\\"https://material.angularjs.org/material2_assets/input/character-count.png\\\">\\r\\n\\r\\n\\r\\n\\r\\n## Divider Color\\r\\n\\r\\nThe divider (line under the `<md-input>` content) color can be changed by using the `dividerColor` attribute. A value of `primary` is the default and will correspond to your theme primary color. Alternatively, you can specify `accent` or `warn`.\\r\\n\\r\\n#### Example\\r\\n\\r\\n^((please note that this example has been doctored to show the colors; they would normally show only on focus)^)\\r\\n\\r\\n<img src=\\\"https://material.angularjs.org/material2_assets/input/divider-colors.png\\\">\\r\\n\\r\\n\\r\\n\\r\\n## Labelling\\r\\n\\r\\nYou can label the `<md-input>` as you would a regular `<input>`.\\r\\n\\r\\n\\r\\n\\r\\n## Full Forms\\r\\n\\r\\nYou can make a full form using inputs, and it will support autofill natively.\\r\\n\\r\\n#### Example\\r\\n\\r\\n```html\\r\\n<md-card class=\\\"demo-card demo-basic\\\">\\r\\n  <md-toolbar color=\\\"primary\\\">Basic</md-toolbar>\\r\\n  <md-card-content>\\r\\n    <form>\\r\\n      <md-input class=\\\"demo-full-width\\\" placeholder=\\\"Company (disabled)\\\" disabled value=\\\"Google\\\">\\r\\n      </md-input>\\r\\n\\r\\n      <table style=\\\"width: 100%\\\" cellspacing=\\\"0\\\"><tr>\\r\\n        <td><md-input placeholder=\\\"First name\\\" style=\\\"width: 100%\\\"></md-input></td>\\r\\n        <td><md-input placeholder=\\\"Long Last Name That Will Be Truncated\\\" style=\\\"width: 100%\\\"></md-input></td>\\r\\n      </tr></table>\\r\\n      <p>\\r\\n        <md-input class=\\\"demo-full-width\\\" placeholder=\\\"Address\\\" value=\\\"1600 Amphitheatre Pkway\\\"></md-input>\\r\\n        <md-input class=\\\"demo-full-width\\\" placeholder=\\\"Address 2\\\"></md-input>\\r\\n      </p>\\r\\n      <table style=\\\"width: 100%\\\" cellspacing=\\\"0\\\"><tr>\\r\\n        <td><md-input class=\\\"demo-full-width\\\" placeholder=\\\"City\\\"></md-input></td>\\r\\n        <td><md-input class=\\\"demo-full-width\\\" placeholder=\\\"State\\\"></md-input></td>\\r\\n        <td><md-input #postalCode class=\\\"demo-full-width\\\" maxlength=\\\"5\\\"\\r\\n                      placeholder=\\\"Postal Code\\\"\\r\\n                      value=\\\"94043\\\">\\r\\n          <md-hint align=\\\"end\\\">{{postalCode.characterCount}} / 5</md-hint>\\r\\n        </md-input></td>\\r\\n      </tr></table>\\r\\n    </form>\\r\\n  </md-card-content>\\r\\n</md-card>\\r\\n```\\r\\n\\r\\nWill result in this:\\r\\n\\r\\n<img src=\\\"https://material.angularjs.org/material2_assets/input/full-form.png\\\">\\r\\n\"},{\"id\":\"list\",\"content\":\"# md-list\\r\\n\\r\\n`md-list` is a container component that wraps and formats a series of line items. As the base list component,\\r\\n it provides Material Design styling, but no behavior of its own.\\r\\n\\r\\n## Usage\\r\\n\\r\\n### Simple list\\r\\n\\r\\nTo use `md-list`, import the MdList module into your application's NgModule:\\r\\n\\r\\n*my-app-module.ts*\\r\\n```ts\\r\\nimport {MdListModule} from '@angular2-material/list';\\r\\n\\r\\n@NgModule({\\r\\n  imports: [MdListModule.forRoot()],\\r\\n  ...\\r\\n})\\r\\nexport class MyAppModule {}\\r\\n```\\r\\n\\r\\nIn your template, create an `md-list` element and wrap each of your items in an `md-list-item` tag.\\r\\n\\r\\n```html\\r\\n<md-list>\\r\\n   <md-list-item> Pepper </md-list-item>\\r\\n   <md-list-item> Salt </md-list-item>\\r\\n   <md-list-item> Paprika </md-list-item>\\r\\n</md-list>\\r\\n```\\r\\n\\r\\nOutput:\\r\\n\\r\\n<img src=\\\"https://material.angularjs.org/material2_assets/list/basic-list.png\\\">\\r\\n\\r\\n### Multi-line lists\\r\\n\\r\\nIf your list requires multiple lines per list item, annotate each line with an `md-line` attribute.\\r\\nYou can use whichever heading tag is appropriate for your DOM hierarchy (doesn't have to be `h3`),\\r\\nas long as the `md-line` attribute is included.\\r\\n\\r\\n```html\\r\\n<!-- two line list -->\\r\\n<md-list>\\r\\n  <md-list-item *ngFor=\\\"let message of messages\\\">\\r\\n    <h3 md-line> {{message.from}} </h3>\\r\\n    <p md-line>\\r\\n      <span> {{message.subject}} </span>\\r\\n      <span class=\\\"demo-2\\\"> -- {{message.message}} </span>\\r\\n    </p>\\r\\n  </md-list-item>\\r\\n</md-list>\\r\\n\\r\\n<!-- three line list -->\\r\\n<md-list>\\r\\n  <md-list-item *ngFor=\\\"let message of messages\\\">\\r\\n    <h3 md-line> {{message.from}} </h3>\\r\\n    <p md-line> {{message.subject}} </p>\\r\\n    <p md-line class=\\\"demo-2\\\"> {{message.message}} </p>\\r\\n  </md-list-item>\\r\\n</md-list>\\r\\n```\\r\\n\\r\\nTwo line list output:\\r\\n\\r\\n<img src=\\\"https://material.angularjs.org/material2_assets/list/two-line-list.png\\\">\\r\\n\\r\\nThree line list output:\\r\\n\\r\\n<img src=\\\"https://material.angularjs.org/material2_assets/list/three-line-list.png\\\">\\r\\n\\r\\n### Lists with avatars\\r\\n\\r\\nTo include an avatar, add an image tag with an `md-list-avatar` attribute.\\r\\n\\r\\n```html\\r\\n<md-list>\\r\\n  <md-list-item *ngFor=\\\"let message of messages\\\">\\r\\n    <img md-list-avatar src=\\\"...\\\" alt=\\\"...\\\">\\r\\n    <h3 md-line> {{message.from}} </h3>\\r\\n    <p md-line>\\r\\n      <span> {{message.subject}} </span>\\r\\n      <span class=\\\"demo-2\\\"> -- {{message.message}} </span>\\r\\n    </p>\\r\\n  </md-list-item>\\r\\n</md-list>\\r\\n```\\r\\n\\r\\nOutput:\\r\\n\\r\\n<img src=\\\"https://material.angularjs.org/material2_assets/list/list-with-avatar-2.png\\\">\\r\\n\\r\\n### Dense lists\\r\\nLists are also available in \\\"dense layout\\\" mode, which shrinks the font size and height of the list\\r\\nto suit UIs that may need to display more information.  To enable this mode, add a `dense` attribute\\r\\nto the main `md-list` tag.\\r\\n\\r\\n\\r\\n```html\\r\\n<md-list dense>\\r\\n   <md-list-item> Pepper </md-list-item>\\r\\n   <md-list-item> Salt </md-list-item>\\r\\n   <md-list-item> Paprika </md-list-item>\\r\\n</md-list>\\r\\n```\\r\\n\\r\\nOutput:\\r\\n\\r\\n<img src=\\\"https://material.angularjs.org/material2_assets/list/dense-list.png\\\">\\r\\n\\r\\n### Lists with multiple sections\\r\\n\\r\\nYou can add a subheader to a list by annotating a heading tag with an `md-subheader` attribute. To add a divider,\\r\\nuse `<md-divider>` tags.\\r\\n\\r\\n```html\\r\\n<md-list>\\r\\n   <h3 md-subheader>Folders</h3>\\r\\n   <md-list-item *ngFor=\\\"let folder of folders\\\">\\r\\n      <md-icon md-list-avatar>folder</md-icon>\\r\\n      <h4 md-line>{{folder.name}}</h4>\\r\\n      <p md-line class=\\\"demo-2\\\"> {{folder.updated}} </p>\\r\\n   </md-list-item>\\r\\n   <md-divider></md-divider>\\r\\n   <h3 md-subheader>Notes</h3>\\r\\n   <md-list-item *ngFor=\\\"let note of notes\\\">\\r\\n      <md-icon md-list-avatar>note</md-icon>\\r\\n      <h4 md-line>{{note.name}}</h4>\\r\\n      <p md-line class=\\\"demo-2\\\"> {{note.updated}} </p>\\r\\n   </md-list-item>\\r\\n</md-list>\\r\\n```\\r\\n\\r\\nOutput:\\r\\n\\r\\n<img src=\\\"https://material.angularjs.org/material2_assets/list/subheader-list.png\\\">\\r\\n\\r\\n### Navigation lists\\r\\n\\r\\nUse `md-nav-list` tags for navigation lists (i.e. lists that have anchor tags).\\r\\n\\r\\nSimple nav lists can tack an `md-list-item` attribute onto the anchor tag itself:\\r\\n\\r\\n```html\\r\\n<md-nav-list>\\r\\n   <a md-list-item href=\\\"...\\\" *ngFor=\\\"let link of links\\\"> {{ link }} </a>\\r\\n</md-nav-list>\\r\\n```\\r\\n\\r\\nIf you require a more complex nav list (e.g. with more than one target per item), wrap your anchor tag in an `md-list-item` element.\\r\\n\\r\\n```html\\r\\n<md-nav-list>\\r\\n  <md-list-item *ngFor=\\\"let link of links\\\">\\r\\n     <a md-line href=\\\"...\\\">{{ link }}</a>\\r\\n     <button md-icon-button (click)=\\\"showInfo(link)\\\">\\r\\n        <md-icon>info</md-icon>\\r\\n     </button>\\r\\n  </md-list-item>\\r\\n</md-nav-list>\\r\\n```\\r\\n\\r\\n### Lists with secondary text\\r\\nSecondary text styling will be part of a broader typography module to\\r\\n[come later](https://github.com/angular/material2/issues/205), and won’t be implemented as part of this component\\r\\nspecifically. Gray text in the examples above comes from a \\\"demo-2\\\" class added manually by the demo.\\r\\n\"},{\"id\":\"menu\",\"content\":\"# md-menu\\r\\n\\r\\n`md-menu` is a list of options that displays when triggered.  You can read more about menus in the \\r\\n[Material Design spec](https://material.google.com/components/menus.html).\\r\\n\\r\\n### Not yet implemented\\r\\n\\r\\n- `prevent-close` option, to turn off automatic menu close when clicking outside the menu\\r\\n- Custom offset support\\r\\n- Menu groupings (which menus are allowed to open together)\\r\\n\\r\\n## Usage\\r\\n\\r\\n### Setup\\r\\n\\r\\nImport the MdMenu module.\\r\\n\\r\\n*my-app-module.ts*\\r\\n```ts\\r\\nimport {MdMenuModule} from '@angular2-material/menu';\\r\\n\\r\\n@NgModule({\\r\\n  imports: [MdMenuModule.forRoot()],\\r\\n  ...\\r\\n})\\r\\nexport class MyAppModule {}\\r\\n```\\r\\n\\r\\nFor alpha.7, you need to include the overlay styles in your app via a `link` element. This will\\r\\nlook something like\\r\\n```html\\r\\n<link href=\\\"vendor/@angular2-material/core/overlay/overlay.css\\\" rel=\\\"stylesheet\\\">\\r\\n```\\r\\n\\r\\n### Simple menu\\r\\n\\r\\nIn your template, create an `md-menu` element. You can use either `<button>` or `<anchor>` tags for \\r\\nyour menu items, as long as each is tagged with an `md-menu-item` attribute. Note that you can \\r\\ndisable items by adding the `disabled` boolean attribute or binding to it.\\r\\n\\r\\n*my-comp.html*\\r\\n```html\\r\\n<!-- this menu starts as hidden by default -->\\r\\n<md-menu>\\r\\n    <button md-menu-item> Refresh </button>\\r\\n    <button md-menu-item> Settings </button>\\r\\n    <button md-menu-item> Help </button>\\r\\n    <button md-menu-item disabled> Sign Out </button>\\r\\n</md-menu>\\r\\n```\\r\\n\\r\\nMenus are hidden by default, so you'll want to connect up a menu trigger that can open your menu.  \\r\\nYou can do so by adding a button tag with an `md-menu-trigger-for` attribute and passing in the menu \\r\\ninstance.  You can create a local reference to your menu instance by adding `#menu=\\\"mdMenu\\\"` to  \\r\\nyour menu element.\\r\\n\\r\\n*my-comp.html*\\r\\n```html\\r\\n<!-- menu opens when trigger button is clicked -->\\r\\n<button md-icon-button [md-menu-trigger-for]=\\\"menu\\\">\\r\\n   <md-icon>more_vert</md-icon>\\r\\n</button>\\r\\n\\r\\n<md-menu #menu=\\\"mdMenu\\\">\\r\\n    <button md-menu-item> Refresh </button>\\r\\n    <button md-menu-item> Settings </button>\\r\\n    <button md-menu-item> Help </button>\\r\\n    <button md-menu-item disabled> Sign Out </button>\\r\\n</md-menu>\\r\\n```\\r\\n\\r\\nOutput:\\r\\n\\r\\n<img src=\\\"https://material.angularjs.org/material2_assets/menu/default_closed.png\\\">\\r\\n<img src=\\\"https://material.angularjs.org/material2_assets/menu/default_open.png\\\">\\r\\n\\r\\n### Toggling the menu programmatically\\r\\n\\r\\nYou can also use the menu's API to open or close the menu programmatically from your class. Please \\r\\nnote that in this case, an `md-menu-trigger-for` attribute is still necessary to connect \\r\\nthe menu to its trigger element in the DOM.\\r\\n  \\r\\n*my-comp.component.ts*\\r\\n```ts\\r\\nclass MyComp {\\r\\n  @ViewChild(MdMenuTrigger) trigger: MdMenuTrigger;\\r\\n\\r\\n  someMethod() {\\r\\n    this.trigger.openMenu();\\r\\n  }\\r\\n}\\r\\n```\\r\\n\\r\\n*my-comp.html*\\r\\n```html\\r\\n<button md-icon-button [md-menu-trigger-for]=\\\"menu\\\">\\r\\n   <md-icon>more_vert</md-icon>\\r\\n</button>\\r\\n\\r\\n<md-menu #menu=\\\"mdMenu\\\">\\r\\n    <button md-menu-item> Refresh </button>\\r\\n    <button md-menu-item> Settings </button>\\r\\n    <button md-menu-item> Help </button>\\r\\n    <button md-menu-item disabled> Sign Out </button>\\r\\n</md-menu>\\r\\n```\\r\\n\\r\\n### Customizing menu position\\r\\n\\r\\nBy default, the menu will display after and below its trigger.  You can change this display position \\r\\nusing the `x-position` (`before | after`) and `y-position` (`above | below`) attributes.  \\r\\n\\r\\n*my-comp.html*\\r\\n```html\\r\\n<md-menu x-position=\\\"before\\\" #menu=\\\"mdMenu\\\">\\r\\n    <button md-menu-item> Refresh </button>\\r\\n    <button md-menu-item> Settings </button>\\r\\n    <button md-menu-item> Help </button>\\r\\n    <button md-menu-item disabled> Sign Out </button>\\r\\n</md-menu>\\r\\n```\\r\\n\\r\\nOutput:\\r\\n\\r\\n<img src=\\\"https://material.angularjs.org/material2_assets/menu/before_closed.png\\\">\\r\\n<img src=\\\"https://material.angularjs.org/material2_assets/menu/before_open.png\\\">\\r\\n\\r\\n### Accessibility\\r\\n\\r\\nThe menu adds `role=\\\"menu\\\"` to the main menu element and `role=\\\"menuitem\\\"` to each menu item. It \\r\\nalso adds `aria-hasPopup=\\\"true\\\"` to the trigger element.\\r\\n\\r\\n#### Keyboard events:\\r\\n- <kbd>DOWN_ARROW</kbd>: Focus next menu item\\r\\n- <kbd>UP_ARROW</kbd>: Focus previous menu item\\r\\n- <kbd>ENTER</kbd>: Select focused item\\r\\n\\r\\n### Menu attributes\\r\\n\\r\\n| Signature | Values | Description |\\r\\n| --- | --- | --- |\\r\\n| `x-position` | `before | after` | The horizontal position of the menu in relation to the trigger. Defaults to `after`. | \\r\\n| `y-position` | `above | below` | The vertical position of the menu in relation to the trigger. Defaults to `below`. |\\r\\n \\r\\n### Trigger Programmatic API\\r\\n\\r\\n**Properties**\\r\\n\\r\\n| Name | Type | Description |\\r\\n| --- | --- | --- |\\r\\n| `menuOpen` | `Boolean` | Property that is true when the menu is open. It is not settable (use methods below). | \\r\\n| `onMenuOpen` | `Observable<void>` | Observable that emits when the menu opens. | \\r\\n| `onMenuClose` | `Observable<void>` | Observable that emits when the menu closes. | \\r\\n\\r\\n**Methods**\\r\\n\\r\\n| Method | Returns | Description |\\r\\n| --- | --- | --- |\\r\\n| `openMenu()` | `Promise<void>` | Opens the menu. Returns a promise that will resolve when the menu has opened. |\\r\\n| `closeMenu()` | `Promise<void>` | Closes the menu. Returns a promise that will resolve when the menu has closed. |\\r\\n| `toggleMenu()` | `Promise<void>` | Toggles the menu. Returns a promise that will resolve when the menu has completed opening or closing. |  \\r\\n| `destroyMenu()` | `Promise<void>` | Destroys the menu overlay completely. \\r\\n  \\r\\n\\r\\n\"},{\"id\":\"progress-bar\",\"content\":\"# md-progress-bar\\r\\n\\r\\n`md-progress-bar` is a component for indicating progress and activity, matching the spec of \\r\\n[Material Design Progress & Activity](https://www.google.com/design/spec/components/progress-activity.html).\\r\\n\\r\\n### Progress Modes\\r\\n\\r\\nThere are four modes:\\r\\n 1. Determinate - `<md-progress-bar mode=\\\"determinate\\\">`\\r\\n    * Indicates how long an operation will take when the percentage complete is detectable. \\r\\n 2. Indeterminate - `<md-progress-bar mode=\\\"indeterminate\\\">`\\r\\n    * Indicates the user must wait while something finishes when it’s not necessary or possible to indicate how long it will take.\\r\\n 3. Buffer - `<md-progress-bar mode=\\\"buffer\\\">`\\r\\n    * Indicates how long an operation will take when the percentage complete is detectable, also provides a value of the preloading for the operation.\\r\\n 4. Query - `<md-progress-bar mode=\\\"query\\\">`\\r\\n    * Indicates the user must wait while something finishes when it is not yet possible to indicate how long it will take, but will be possible.  Once possible, the progress mode should be moved to buffer or determinate.\\r\\n      \\r\\n\\r\\nExample:\\r\\n\\r\\n ```html\\r\\n<md-progress-bar mode=\\\"determinate\\\" value=\\\"myValue\\\"></md-progress-bar>\\r\\n<md-progress-bar mode=\\\"indeterminate\\\"></md-progress-bar>\\r\\n<md-progress-bar mode=\\\"buffer\\\" value=\\\"myValue\\\" bufferValue=\\\"myBufferValue\\\"></md-progress-bar>\\r\\n<md-progress-bar mode=\\\"query\\\"></md-progress-bar>\\r\\n ```\\r\\n\\r\\n### Theming\\r\\n\\r\\nAll progress indicators can be themed to match your \\\"primary\\\" palette, your \\\"accent\\\" palette, or your \\\"warn\\\" palette using the appropriate class.\\r\\n\\r\\nExample:\\r\\n\\r\\n ```html\\r\\n<md-progress-bar mode=\\\"indeterminate\\\" color=\\\"primary\\\"></md-progress-bar>\\r\\n<md-progress-bar mode=\\\"indeterminate\\\" color=\\\"accent\\\"></md-progress-bar>\\r\\n<md-progress-bar mode=\\\"indeterminate\\\" color=\\\"warn\\\"></md-progress-bar>\\r\\n ```\\r\\n\\r\\n### Accessibility\\r\\n\\r\\n * ARIA attributes are applied to the indicator defining the valuemin, valuemax and valuenow attributes.\\r\\n\\r\\n\\r\\n### API Summary\\r\\n\\r\\nProperties:\\r\\n\\r\\n| Name            | Type                                                     | Description |\\r\\n| ---             | ---                                                      | --- |\\r\\n| `color`         | `\\\"primary\\\" | \\\"accent\\\" | \\\"warn\\\"`                          | The color palette of the progress indicator |\\r\\n| `mode`          | `\\\"determinate\\\" | \\\"indeterminate\\\" | \\\"buffer\\\" | \\\"query\\\"`   | The mode of the progress indicator |\\r\\n| `value`         | number                                                   | The current progress percentage for determinate indicators |\\r\\n| `bufferValue`   | number                                                   | The current progress percentage for buffer secondary indicators |\\r\\n\"},{\"id\":\"progress-circle\",\"content\":\"# md-progress-circle\\r\\n\\r\\n`md-progress-circle` is a component for indicating progress and activity, matching the spec of \\r\\n[Material Design Progress & Activity](https://www.google.com/design/spec/components/progress-activity.html).\\r\\n\\r\\n### Progress Modes\\r\\n\\r\\nThere are two modes:\\r\\n 1. Determinate - `<md-progress-circle mode=\\\"determinate\\\">`\\r\\n    * Indicates how long an operation will take when the percentage complete is detectable. \\r\\n 2. Indeterminate - `<md-progress-circle mode=\\\"indeterminate\\\">` or `<md-spinner>`\\r\\n    * Indicates the user must wait while something finishes when it’s not necessary or possible to indicate how long it\\r\\n      will take.\\r\\n\\r\\nExample:\\r\\n\\r\\n ```html\\r\\n<md-progress-circle mode=\\\"determinate\\\" [value]=\\\"myValue\\\"></md-progress-circle>\\r\\n<md-progress-circle mode=\\\"indeterminate\\\"></md-progress-circle>\\r\\n<md-spinner></md-spinner>\\r\\n ```\\r\\n\\r\\n### Theming\\r\\n\\r\\nAll progress indicators can be themed to match your \\\"primary\\\" palette, your \\\"accent\\\" palette, or your \\\"warn\\\" palette using the appropriate class.\\r\\n\\r\\nExample:\\r\\n\\r\\n ```html\\r\\n<md-progress-circle mode=\\\"indeterminate\\\" color=\\\"primary\\\"></md-progress-circle>\\r\\n<md-progress-circle mode=\\\"indeterminate\\\" color=\\\"accent\\\"></md-progress-circle>\\r\\n<md-progress-circle mode=\\\"indeterminate\\\" color=\\\"warn\\\"></md-progress-circle>\\r\\n ```\\r\\n\\r\\n### Accessibility\\r\\n\\r\\n * ARIA attributes are applied to the indicator defining the valuemin, valuemax and valuenow attributes.\\r\\n\\r\\n### Upcoming work\\r\\n\\r\\n * Adding ARIA attribute for progressbar \\\"for\\\".\\r\\n\\r\\n### API Summary\\r\\n\\r\\nProperties:\\r\\n\\r\\n| Name      | Type                              | Description |\\r\\n| ---       | ---                               | --- |\\r\\n| `color`   | `\\\"primary\\\"|\\\"accent\\\"|\\\"warn\\\"`       | The color palette of the progress indicator |\\r\\n| `mode`    | `\\\"determinate\\\"|\\\"indeterminate\\\"`   | The mode of the progress indicator |\\r\\n| `value`   | number                            | The current progress percentage for determinate indicators |\\r\\n\"},{\"id\":\"radio\",\"content\":\"# MdRadio\\r\\nRadio buttons allow the user to select one option from a set. Use radio buttons for exclusive selection if you think that the user needs to see all available options side-by-side.\\r\\n\\r\\n![Preview](https://material.angularjs.org/material2_assets/radio/radios.png)\\r\\n\\r\\n### Setup\\r\\nImporting the symbols:\\r\\n```ts\\r\\nimport { MdRadioModule } from '@angular2-material/radio';\\r\\n```\\r\\n\\r\\nAdding providers and directives:\\r\\n```ts\\r\\n@NgModule({\\r\\n  imports: [MdRadioModule.forRoot()],\\r\\n  ...\\r\\n})\\r\\nexport class MyAppModule { }\\r\\n```\\r\\n\\r\\n### Examples\\r\\nA basic radio group would have the following markup.\\r\\n```html\\r\\n<md-radio-group>\\r\\n  <md-radio-button value=\\\"option_1\\\">1</md-radio-button>\\r\\n  <md-radio-button value=\\\"option_2\\\">2</md-radio-button>\\r\\n</md-radio-group>\\r\\n```\\r\\n\\r\\nA dynamic example, populated from a `data` variable:\\r\\n```html\\r\\n<md-radio-group [(value)]=\\\"groupValue\\\">\\r\\n  <md-radio-button *ngFor=\\\"let d of data\\\" [value]=\\\"d.value\\\">\\r\\n    {{d.label}}\\r\\n  </md-radio-button>\\r\\n</md-radio-group>\\r\\n```\\r\\n\\r\\nA dynamic example for use inside a form showing support for `[(ngModel)]`:\\r\\n```html\\r\\n<md-radio-group [(ngModel)]=\\\"chosenOption\\\">\\r\\n  <md-radio-button *ngFor=\\\"let o of options\\\" [value]=\\\"o.value\\\">\\r\\n    {{o.label}}\\r\\n  </md-radio-button>\\r\\n</md-radio-group>\\r\\n```\\r\\n\\r\\n## `<md-radio-group>`\\r\\n### Properties\\r\\n\\r\\n| Name | Type | Description |\\r\\n| --- | --- | --- |\\r\\n| `selected` | `MdRadioButton` | The currently selected button. |\\r\\n| `value` | `any` | The current value for this group. |\\r\\n| `disabled` | `boolean` | Whether the group is disabled. |\\r\\n\\r\\nWhen selection is changed, an event is emitted from the `change` EventEmitter property.\\r\\n\\r\\n### Notes\\r\\nThe `md-radio-group` component has no button initially selected.\\r\\n\\r\\n## `<md-radio-button>`\\r\\n### Properties\\r\\n\\r\\n| Name (attribute) | Type | Description |\\r\\n| --- | --- | --- |\\r\\n| `id` | `string` | The unique ID of this radio button. |\\r\\n| `name` | `string` | Group name, defaults to parent radio group if present. |\\r\\n| `value` | `any` | The value of this radio button. |\\r\\n| `checked` | `boolean` | Whether the radio is checked. |\\r\\n| `disabled` | `boolean` | Whether the radio is disabled. |\\r\\n| `aria-label` | `string` | Used to set the `aria-label` attribute of the underlying input element. |\\r\\n| `aria-labelledby` | `string` | Used to set the `aria-labelledby` attribute of the underlying input element.\\r\\n                                 If provided, this attribute takes precedence as the element's text alternative. |\\r\\n\\r\\nWhen checked, an event is emitted from the `change` EventEmitter property.\\r\\n\\r\\n### Notes\\r\\n* The `md-radio-button` component by default uses the accent color from the theme palette.\\r\\n\"},{\"id\":\"sidenav\",\"content\":\"# MdSidenav\\r\\n\\r\\nMdSidenav is the side navigation component for Material 2. It is composed of two components; `<md-sidenav-layout>` and `<md-sidenav>`.\\r\\n\\r\\n## Screenshots\\r\\n\\r\\n<img src=\\\"https://material.angularjs.org/material2_assets/sidenav-example.png\\\">\\r\\n\\r\\n\\r\\n## `<md-sidenav-layout>`\\r\\n\\r\\nThe parent component. Contains the code necessary to coordinate one or two sidenav and the backdrop.\\r\\n\\r\\n### Properties\\r\\n\\r\\n| Name | Description |\\r\\n| --- | --- |\\r\\n| `start` | The start aligned `MdSidenav` instance, or `null` if none is specified. In LTR direction, this is the sidenav shown on the left side. In RTL direction, it will show on the right. There can only be one sidenav on either side. |\\r\\n| `end` | The end aligned `MdSidenav` instance, or `null` if none is specified. This is the sidenav opposing the `start` sidenav. There can only be one sidenav on either side. |\\r\\n\\r\\n## `<md-sidenav>`\\r\\n\\r\\nThe sidenav panel.\\r\\n\\r\\n### Bound Properties\\r\\n\\r\\n| Name | Type | Description |\\r\\n| --- | --- | --- |\\r\\n| `align` | `\\\"start\\\"|\\\"end\\\"` | The alignment of this sidenav. In LTR direction, `\\\"start\\\"` will be shown on the left, `\\\"end\\\"` on the right. In RTL, it is reversed. `\\\"start\\\"` is used by default. An exception will be thrown if there are more than 1 sidenav on either side. |\\r\\n| `mode` | `\\\"over\\\"|\\\"push\\\"|\\\"side\\\"` | The mode or styling of the sidenav, default being `\\\"over\\\"`. With `\\\"over\\\"` the sidenav will appear above the content, and a backdrop will be shown. With `\\\"push\\\"` the sidenav will push the content of the `<md-sidenav-layout>` to the side, and show a backdrop over it. `\\\"side\\\"` will resize the content and keep the sidenav opened. Clicking the backdrop will close sidenavs that do not have `mode=\\\"side\\\"`. |\\r\\n| `opened` | `boolean` | Whether or not the sidenav is opened. Use this binding to open/close the sidenav. |\\r\\n\\r\\n### Events\\r\\n\\r\\n| Name | Description |\\r\\n| --- | --- |\\r\\n| `open-start` | Emitted when the sidenav is starting opening. This should only be used to coordinate animations. |\\r\\n| `close-start` | Emitted when the sidenav is starting closing. This should only be used to coordinate animations. |\\r\\n| `open` | Emitted when the sidenav is done opening. Use this for, e.g., setting focus on controls or updating state. |\\r\\n| `close` | Emitted when the sidenav is done closing. |\\r\\n\\r\\n### Methods\\r\\n\\r\\n| Signature | Description |\\r\\n| --- | --- |\\r\\n| `open(): Promise<void>` | Open the sidenav. Equivalent to `opened = true`. Returns a promise that will resolve when the animation completes, or be rejected if the animation was cancelled. |\\r\\n| `close(): Promise<void>` | Close the sidenav. Equivalent to `opened = false`. Returns a promise that will resolve when the animation completes, or be rejected if the animation was cancelled. |\\r\\n| `toggle(): Promise<void>` | Toggle the sidenav. This is equivalent to `opened = !opened`. Returns a promise that will resolve when the animation completes, or be rejected if the animation was cancelled. |\\r\\n\\r\\n### Notes\\r\\n\\r\\nThe `<md-sidenav>` will resize based on its content. You can also set its width in CSS, like so:\\r\\n\\r\\n```css\\r\\nmd-sidenav {\\r\\n  width: 200px;\\r\\n}\\r\\n```\\r\\n\\r\\nTry to avoid percent based width as `resize` events are not (yet) supported.\\r\\n\\r\\n## Examples\\r\\n\\r\\nHere's a simple example of using the sidenav:\\r\\n\\r\\n```html\\r\\n<app>\\r\\n  <md-sidenav-layout>\\r\\n    <md-sidenav #start (open)=\\\"mybutton.focus()\\\">\\r\\n      Start Sidenav.\\r\\n      <br>\\r\\n      <button md-button #mybutton (click)=\\\"start.close()\\\">Close</button>\\r\\n    </md-sidenav>\\r\\n    <md-sidenav #end align=\\\"end\\\">\\r\\n      End Sidenav.\\r\\n      <button md-button (click)=\\\"end.close()\\\">Close</button>\\r\\n    </md-sidenav>\\r\\n\\r\\n    My regular content. This will be moved into the proper DOM at runtime.\\r\\n  </md-sidenav-layout>\\r\\n</app>\\r\\n```\\r\\n\\r\\n\"},{\"id\":\"slide-toggle\",\"content\":\"# MdSlideToggle\\r\\n`MdSlideToggle` is a two-state control, which can be also called `switch`\\r\\n\\r\\n### Screenshots\\r\\n![image](https://material.angularjs.org/material2_assets/slide-toggle/toggles.png)\\r\\n\\r\\n## `<md-slide-toggle>`\\r\\n### Bound Properties\\r\\n\\r\\n| Name | Type | Description |\\r\\n| --- | --- | --- |\\r\\n| `disabled` | boolean | Disables the `slide-toggle` |\\r\\n| `color` | `\\\"primary\\\" | \\\"accent\\\" | \\\"warn\\\"` | The color palette of the `slide-toggle` |\\r\\n| `checked` | boolean | Sets the value of the `slide-toggle` |\\r\\n\\r\\n### Events\\r\\n| Name | Type | Description |\\r\\n| --- | --- | --- |\\r\\n| `change` | boolean | Event will be emitted on every value change.<br/>It emits the new `checked` value. |\\r\\n\\r\\n### Examples\\r\\nA basic slide-toggle would have the following markup.\\r\\n```html\\r\\n<md-slide-toggle [(ngModel)]=\\\"slideToggleModel\\\">\\r\\n  Default Slide Toggle\\r\\n</md-slide-toggle>\\r\\n```\\r\\n\\r\\nSlide toggle can be also disabled.\\r\\n```html\\r\\n<md-slide-toggle disabled>\\r\\n  Disabled Slide Toggle\\r\\n</md-slide-toggle>\\r\\n```\\r\\n\\r\\nThe `slide-toggle` can be also set to checked without a `ngModel`\\r\\n```html\\r\\n<md-slide-toggle [checked]=\\\"isChecked\\\">\\r\\n  Input Binding\\r\\n</md-slide-toggle>\\r\\n```\\r\\n\\r\\nYou may also want to listen on changes of the `slide-toggle`<br/>\\r\\nThe `slide-toggle` always emits the new value to the event binding `(change)`\\r\\n```html\\r\\n<md-slide-toggle (change)=\\\"printValue($event)\\\">\\r\\n  Prints Value on Change\\r\\n</md-slide-toggle>\\r\\n```\\r\\n\\r\\n## Theming\\r\\nA slide-toggle is default using the `accent` palette for its styling.\\r\\n\\r\\nModifying the color on a `slide-toggle` can be easily done, by using the following markup.\\r\\n```html\\r\\n<md-slide-toggle color=\\\"primary\\\">\\r\\n  Primary Slide Toggle\\r\\n</md-slide-toggle>\\r\\n```\\r\\n\\r\\nThe color can be also set dynamically by using a property binding.\\r\\n```html\\r\\n<md-slide-toggle [color]=\\\"myColor\\\">\\r\\n  Dynamic Color\\r\\n</md-slide-toggle>\\r\\n```\"},{\"id\":\"slider\",\"content\":\"# md-slider\\r\\n\\r\\n`MdSlider` is a component that allows users to select from a range of values by moving the slider\\r\\nthumb.\\r\\nYou can read more about the slider in the\\r\\n[Material Design spec](https://material.google.com/components/sliders.html).\\r\\n\\r\\n## Not Yet Implemented\\r\\n\\r\\n* Thumb Label\\r\\n* Color\\r\\n* Invert\\r\\n* NgModel\\r\\n* Keyboard Movement\\r\\n* Focus Ring\\r\\n* Smaller/grey thumb at minimum value\\r\\n\\r\\n## Usage\\r\\n\\r\\n### Setup\\r\\n\\r\\nImporting the module:\\r\\n```ts\\r\\n @NgModule({\\r\\n    imports: [MdSliderModule.forRoot()],\\r\\n    ...\\r\\n })\\r\\n export class MyAppModule { }\\r\\n```\\r\\n\\r\\n### Basic Usage\\r\\n\\r\\n`md-slider` can be used on its own as a slider with a min of `0`, a max of `100`, and a step of `1`.\\r\\n\\r\\n```html\\r\\n<md-slider></md-slider>\\r\\n```\\r\\n\\r\\n### Slider with Minimum and Maximum Values\\r\\n\\r\\nThe min and max on a `md-slider` can be set to give a different range of values.\\r\\nThese can be set individually and do not need to both be set.\\r\\n\\r\\n```html\\r\\n<md-slider min=\\\"1\\\" max=\\\"5\\\"></md-slider>\\r\\n```\\r\\n\\r\\n### Disabled Slider\\r\\n\\r\\n`md-slider` can be disabled so that the value cannot be changed and the thumb cannot be moved.\\r\\n\\r\\n```html\\r\\n<md-slider disabled></md-slider>\\r\\n```\\r\\n\\r\\n### Slider with Value\\r\\n\\r\\n`md-slider` can have a value defined so that it starts at a specific value on the slider.\\r\\n\\r\\n```html\\r\\n<md-slider value=\\\"24\\\"></md-slider>\\r\\n```\\r\\n\\r\\n### Slider with Step\\r\\n\\r\\n`md-slider` can have the step defined which declares where the thumb can snap to.\\r\\n\\r\\n```html\\r\\n<md-slider step=\\\"5\\\"></md-slider>\\r\\n```\\r\\n\\r\\n### Slider with Tick Interval\\r\\n\\r\\n`md-slider` can have a tick interval set to a number or to `auto`.\\r\\n`auto` will automatically draw tick marks on steps that are at least 30px apart and will always draw\\r\\ntick marks at the beginning and end of the slider.\\r\\nSetting `tick-interval` to a number will draw a tick mark at every `tick-interval` steps. An example\\r\\nof this is a `tick-interval` of `3` with a `step` of `4` will draw tick marks at every `3` steps,\\r\\nwhich is the same as every `12` values.\\r\\n\\r\\n```html\\r\\n<md-slider tick-interval=\\\"auto\\\"></md-slider>\\r\\n<md-slider tick-interval=\\\"3\\\" step=\\\"4\\\"></md-slider>\\r\\n```\\r\\n\\r\\n## `<md-slider>`\\r\\n\\r\\n### Bound Properties\\r\\n\\r\\n| Name | Type | Description |\\r\\n| --- | --- | --- |\\r\\n| `min` | number | Optional, the minimum number for the slider. Default = `0`. |\\r\\n| `max` | number | Optional, the maximum number for the slider. Default = `100`. |\\r\\n| `value` | number | Optional, the value to start the slider at. |\\r\\n| `tick-interval` | `\\\"auto\\\" | number` | Optional, how many steps between tick marks. |\\r\\n| `step` | number | Optional, declares where the thumb will snap to. Default = `1`. |\\r\\n| `disabled` | boolean | Optional, whether or not the slider is disabled. Default = `false`. |\\r\\n\"},{\"id\":\"snack-bar\",\"content\":\"# MdSnackBar\\r\\n`MdSnackBar` is a service, which opens snack bar notifications in the view.\\r\\n\\r\\n### Methods\\r\\n\\r\\n| Name |  Description |\\r\\n| --- | --- |\\r\\n| `open(message: string,<br>  actionLabel: string, config: MdSnackBarConfig): MdSnackBarRef<SimpleSnackBar>` | Creates and opens a simple snack bar noticiation matching material spec. |\\r\\n| `openFromComponent(component: ComponentType<T>, config: MdSnackBarConfig): MdSnackBarRef<T>` | Creates and opens a snack bar noticiation with a custom component as content. |\\r\\n\\r\\n### Config\\r\\n\\r\\n| Key |  Description |\\r\\n| --- | --- |\\r\\n| `viewContainerRef: ViewContainerRef` | The view container ref to attach the snack bar to. |\\r\\n| `role: AriaLivePoliteness = 'assertive'` | The politeness level to announce the snack bar with. |\\r\\n| `announcementMessage: string` | The message to announce with the snack bar. |\\r\\n\\r\\n\\r\\n### Example\\r\\nThe service can be injected in a component.\\r\\n```ts\\r\\n@Component({\\r\\n  selector: 'my-component'\\r\\n  providers: [MdSnackBar]\\r\\n})\\r\\nexport class MyComponent {\\r\\n\\r\\n constructor(snackBar: MdSnackBar\\r\\n             viewContainerRef: ViewContainerRef) {}\\r\\n\\r\\n failedAttempt() {\\r\\n   config = new MdSnackBarConfig(this.viewContainerRef);\\r\\n   this.snackBar.open('It didn\\\\'t quite work!', 'Try Again', config);\\r\\n }\\r\\n\\r\\n}\\r\\n```\"},{\"id\":\"tabs\",\"content\":\"# MdTabGroup\\r\\nTab groups allow the user to organize their content by labels such that only one tab is visible at any given time.\\r\\n\\r\\n## `<md-tab-group>`\\r\\n### Properties\\r\\n\\r\\n| Name | Type | Description |\\r\\n| --- | --- | --- |\\r\\n| `selectedIndex` | `number` | The index of the currently active tab. |\\r\\n\\r\\n### Events\\r\\n\\r\\n| Name | Type | Description |\\r\\n| --- | --- | --- |\\r\\n| `focusChange` | `Event` | Fired when focus changes from one label to another |\\r\\n| `selectChange` | `Event` | Fired when the selected tab changes |\\r\\n\\r\\n### Examples\\r\\nA basic tab group would have the following markup.\\r\\n```html\\r\\n<md-tab-group>\\r\\n  <md-tab>\\r\\n    <template md-tab-label>One</template>\\r\\n    <template md-tab-content>\\r\\n      <h1>Some tab content</h1>\\r\\n      <p>...</p>\\r\\n    </template>\\r\\n  </md-tab>\\r\\n  <md-tab>\\r\\n    <template md-tab-label>Two</template>\\r\\n    <template md-tab-content>\\r\\n      <h1>Some more tab content</h1>\\r\\n      <p>...</p>\\r\\n    </template>\\r\\n  </md-tab>\\r\\n</md-tab-group>\\r\\n```\\r\\n\\r\\nIt is also possible to specifiy the active tab by using the `selectedIndex` property.\\r\\n\\r\\n```html\\r\\n<md-tab-group [selectedIndex]=\\\"1\\\">\\r\\n  ...\\r\\n</md-tab-group>\\r\\n```\\r\\n\\r\\n**Note**: The index always starts counting from `zero`.\\r\\n\"},{\"id\":\"toolbar\",\"content\":\"# MdToolbar\\r\\n`MdToolbar` is a vertical aligned bar, which can hold the application title or actions.\\r\\n\\r\\n### Screenshots\\r\\n![Preview](https://cloud.githubusercontent.com/assets/4987015/13727769/6d952c78-e900-11e5-890a-ccfd46996812.png)\\r\\n\\r\\n## `<md-toolbar>`\\r\\n### Bound Properties\\r\\n\\r\\n| Name | Type | Description |\\r\\n| --- | --- | --- |\\r\\n| `color` | `\\\"primary\\\" | \\\"accent\\\" | \\\"warn\\\"` | The color palette for the toolbar |\\r\\n\\r\\n### Notes\\r\\nThe `md-toolbar` component will use by default the background palette.\\r\\n\\r\\n### Examples\\r\\nA basic toolbar would have the following markup.\\r\\n```html\\r\\n<md-toolbar [color]=\\\"myColor\\\">\\r\\n  <span>My Application Title</span>\\r\\n</md-toolbar>\\r\\n```\\r\\n\\r\\nToolbars can also have multiple rows.<br/>\\r\\nMultiple rows inside of a `md-toolbar` can be added by appending as many as needed `<md-toolbar-row>` elements.\\r\\n\\r\\n```html\\r\\n<md-toolbar [color]=\\\"myColor\\\">\\r\\n  <span>First Row</span>\\r\\n  \\r\\n  <md-toolbar-row>\\r\\n    <span>Second Row</span>\\r\\n  </md-toolbar-row>\\r\\n  \\r\\n  <md-toolbar-row>\\r\\n    <span>Third Row</span>\\r\\n  </md-toolbar-row>\\r\\n</md-toolbar>\\r\\n```\\r\\n\\r\\n### Alignment\\r\\nThe alignment inside of a toolbar row can be easily done by using the flexbox layout.<br/>\\r\\nFor example, the following markup aligns the items on the `right`.\\r\\n\\r\\nCustom HTML\\r\\n```html\\r\\n<md-toolbar color=\\\"primary\\\">\\r\\n  <span>Application Title</span>\\r\\n  \\r\\n  <!-- This fills the remaining space of the current row -->\\r\\n  <span class=\\\"example-fill-remaining-space\\\"></span>\\r\\n  \\r\\n  <span>Right Aligned Text</span>\\r\\n</md-toolbar>\\r\\n```\\r\\n\\r\\nCustom SCSS\\r\\n```scss\\r\\n.example-fill-remaining-space {\\r\\n  // This fills the remaining space, by using flexbox. \\r\\n  // Every toolbar row uses a flexbox row layout.\\r\\n  flex: 1 1 auto;\\r\\n}\\r\\n```\\r\\n\\r\\nOutput\\r\\n![image](https://cloud.githubusercontent.com/assets/4987015/13730760/0864894e-e959-11e5-9312-7f3cb990d80a.png)\\r\\n\"},{\"id\":\"tooltip\",\"content\":\"# MdTooltip\\r\\nTooltip allows the user to specify text to be displayed when the mouse hover over an element.\\r\\n\\r\\n### Setup\\r\\nFor alpha.7, you need to include the overlay styles in your app via a `link` element. This will\\r\\nlook something like\\r\\n```html\\r\\n<link href=\\\"vendor/@angular2-material/core/overlay/overlay.css\\\" rel=\\\"stylesheet\\\">\\r\\n```\\r\\n\\r\\n\\r\\n### Examples\\r\\nA button with a tooltip\\r\\n```html\\r\\n<button md-tooltip=\\\"some message\\\" tooltip-position=\\\"below\\\">Button</button>\\r\\n```\\r\\n\\r\\n## `[md-tooltip]`\\r\\n### Properties\\r\\n\\r\\n| Name | Type | Description |\\r\\n| --- | --- | --- |\\r\\n| `md-tooltip` | `string` | The message to be displayed. |\\r\\n| `tooltip-position` | `\\\"above\\\"|\\\"below\\\"|\\\"before\\\"|\\\"after\\\"` | The position of the tooltip. |\\r\\n\\r\\n### Methods\\r\\n\\r\\n| Name | Description |\\r\\n| --- | --- | --- |\\r\\n| `show` | Displays the tooltip. |\\r\\n| `hide` | Removes the tooltip. |\\r\\n| `toggle` | Displays or hides the tooltip. |\\r\\n\"}])\n\nC:\\jbart5-ng\\node_modules\\@angular\\material\\material.umd.js:\n 1578      OverlayModule = __decorate$5([\n 1579          _angular_core.NgModule({\n 1580:             imports: [PortalModule],\n 1581              exports: [ConnectedOverlayDirective, OverlayOrigin],\n 1582              declarations: [ConnectedOverlayDirective, OverlayOrigin],\n ....\n 2049      MdCoreModule = __decorate([\n 2050          _angular_core.NgModule({\n 2051:             imports: [MdLineModule, RtlModule, MdRippleModule, PortalModule, OverlayModule, A11yModule],\n 2052              exports: [MdLineModule, RtlModule, MdRippleModule, PortalModule, OverlayModule, A11yModule],\n 2053          }), \n ....\n 2479      MdButtonToggleModule = __decorate$16([\n 2480          _angular_core.NgModule({\n 2481:             imports: [_angular_forms.FormsModule],\n 2482              exports: [MdButtonToggleGroup, MdButtonToggleGroupMultiple, MdButtonToggle],\n 2483              declarations: [MdButtonToggleGroup, MdButtonToggleGroupMultiple, MdButtonToggle],\n ....\n 2671      MdButtonModule = __decorate$17([\n 2672          _angular_core.NgModule({\n 2673:             imports: [_angular_common.CommonModule, MdRippleModule],\n 2674              exports: [MdButton, MdAnchor],\n 2675              declarations: [MdButton, MdAnchor],\n ....\n 3503      MdSelectModule = __decorate$20([\n 3504          _angular_core.NgModule({\n 3505:             imports: [],\n 3506              exports: [MdSelect],\n 3507              declarations: [MdSelect],\n ....\n 3813      MdSlideToggleModule = __decorate$22([\n 3814          _angular_core.NgModule({\n 3815:             imports: [_angular_forms.FormsModule],\n 3816              exports: [MdSlideToggle],\n 3817              declarations: [MdSlideToggle],\n ....\n 4238      MdSliderModule = __decorate$23([\n 4239          _angular_core.NgModule({\n 4240:             imports: [_angular_forms.FormsModule],\n 4241              exports: [MdSlider],\n 4242              declarations: [MdSlider],\n ....\n 4716      MdSidenavModule = __decorate$24([\n 4717          _angular_core.NgModule({\n 4718:             imports: [_angular_common.CommonModule],\n 4719              exports: [MdSidenavLayout, MdSidenav],\n 4720              declarations: [MdSidenavLayout, MdSidenav],\n ....\n 4826      MdListModule = __decorate$25([\n 4827          _angular_core.NgModule({\n 4828:             imports: [MdLineModule],\n 4829              exports: [MdList, MdListItem, MdListDivider, MdListAvatar, MdLineModule],\n 4830              declarations: [MdList, MdListItem, MdListDivider, MdListAvatar],\n ....\n 5427      MdGridListModule = __decorate$26([\n 5428          _angular_core.NgModule({\n 5429:             imports: [MdLineModule],\n 5430              exports: [MdGridList, MdGridTile, MdGridTileText, MdLineModule],\n 5431              declarations: [MdGridList, MdGridTile, MdGridTileText],\n ....\n 6220      MdIconModule = __decorate$29([\n 6221          _angular_core.NgModule({\n 6222:             imports: [_angular_http.HttpModule],\n 6223              exports: [MdIcon],\n 6224              declarations: [MdIcon],\n ....\n 6652      MdProgressBarModule = __decorate$32([\n 6653          _angular_core.NgModule({\n 6654:             imports: [_angular_common.CommonModule],\n 6655              exports: [MdProgressBar],\n 6656              declarations: [MdProgressBar],\n ....\n 7118          _angular_core.NgModule({\n 7119              declarations: [MdPlaceholder, MdInput, MdHint],\n 7120:             imports: [_angular_common.CommonModule, _angular_forms.FormsModule],\n 7121              exports: [MdPlaceholder, MdInput, MdHint],\n 7122          }), \n ....\n 7350      MdSnackBarModule = __decorate$34([\n 7351          _angular_core.NgModule({\n 7352:             imports: [OverlayModule, PortalModule, _angular_common.CommonModule],\n 7353              exports: [MdSnackBarContainer],\n 7354              declarations: [MdSnackBarContainer, SimpleSnackBar],\n ....\n 7764      MdTabsModule = __decorate$37([\n 7765          _angular_core.NgModule({\n 7766:             imports: [_angular_common.CommonModule, PortalModule],\n 7767              // Don't export MdInkBar or MdTabLabelWrapper, as they are internal implementatino details.\n 7768              exports: [MdTabGroup, MdTabLabel, MdTabContent, MdTab],\n ....\n 8050      MdTooltipModule = __decorate$43([\n 8051          _angular_core.NgModule({\n 8052:             imports: [OverlayModule],\n 8053              exports: [MdTooltip, TooltipComponent],\n 8054              declarations: [MdTooltip, TooltipComponent],\n ....\n 8507      MdMenuModule = __decorate$44([\n 8508          _angular_core.NgModule({\n 8509:             imports: [OverlayModule, _angular_common.CommonModule],\n 8510              exports: [MdMenu, MdMenuItem, MdMenuTrigger],\n 8511              declarations: [MdMenu, MdMenuItem, MdMenuTrigger],\n ....\n 8774      MdDialogModule = __decorate$48([\n 8775          _angular_core.NgModule({\n 8776:             imports: [OverlayModule, PortalModule, A11yModule],\n 8777              exports: [MdDialogContainer],\n 8778              declarations: [MdDialogContainer],\n ....\n 8826      MaterialRootModule = __decorate$15([\n 8827          _angular_core.NgModule({\n 8828:             imports: [\n 8829                  MdButtonModule.forRoot(),\n 8830                  MdCardModule.forRoot(),\n ....\n 8869      MaterialModule = __decorate$15([\n 8870          _angular_core.NgModule({\n 8871:             imports: MATERIAL_MODULES,\n 8872              exports: MATERIAL_MODULES,\n 8873          }), \n\n45 matches across 10 files\n\n\nSearching 130 files for \"imports:\"\n\nC:\\jbart5-ng\\src\\ui\\jb-ui.ts:\n  103  	hashkey() {\n  104  		return JSON.stringify(jb.extend({},this.annotations,{\n  105: 			imports: '', providers: '',\n  106  			host: jb.extend({},this.annotations.host || {}),\n  107  		}));\n  ...\n  187  		var DynamicModule = Reflect.decorate([\n  188  			NgModule({\n  189: 				imports: [jbCompModule, CommonModule, FormsModule, HttpModule, BrowserModule]\n  190  						.concat(this.annotations.imports || []).filter(x=>x),\n  191  				providers : this.annotations.providers,\n  ...\n  679  \n  680  @NgModule({\n  681:   imports: [],\n  682    declarations: [ jbComp ], // is overriden dynamically\n  683    exports: [ jbComp ],\n  ...\n  686  \n  687  @NgModule({\n  688:   imports:      [ jbCompModule, CommonModule, FormsModule, HttpModule, BrowserModule ],\n  689    declarations: [ jBartWidget ],\n  690    bootstrap:    [ jBartWidget ]\n\nC:\\jbart5-ng\\src\\ui\\styles.js:\n   17  				css: css,\n   18  				atts: atts,\n   19: 				imports: context.profile.imports,\n   20  				featuresOptions: features()\n   21  			},methods);\n\nC:\\jbart5-ng\\src\\ui\\md-styles\\button-md.ts:\n   11    impl :{$: 'customStyle', \n   12        template: '<div><button md-button (click)=\"clicked()\">{{title}}</button></div>',\n   13:       imports: MdButtonModule\n   14    }\n   15  })\n   ..\n   19    impl :{$: 'customStyle', \n   20        template: '<div><button md-raised-button (click)=\"clicked()\">{{title}}</button></div>',\n   21:       imports: MdButtonModule\n   22    }\n   23  })\n   ..\n   35                </button></div>`,\n   36        css: 'button {min-width: 2px; margin-top: -3px; padding: 4px}',\n   37:       imports: MdButtonModule,\n   38        providers: MdIconRegistry,\n   39    }\n   ..\n   59        button { width: %$size%px; height: %$size%px; padding: %$padding%px }\n   60        i { font-size:%$size%px; }`,\n   61:       imports: MdButtonModule,\n   62        providers: MdIconRegistry,\n   63    }\n   ..\n   77        .material-icons { font-size:12px;  }\n   78        `,\n   79:       imports: MdButtonModule,\n   80        providers: MdIconRegistry,\n   81    }\n   ..\n   94                  <i class=\"material-icons md-24\">%$icon%</i>\n   95                </button></div>`,\n   96:       imports: MdButtonModule,\n   97        providers: MdIconRegistry,\n   98    }\n   ..\n  110                  <i class=\"material-icons md-24\">%$icon%</i>\n  111                </button></div>`,\n  112:       imports: MdButtonModule,\n  113        providers: MdIconRegistry,\n  114    }\n\nC:\\jbart5-ng\\src\\ui\\md-styles\\dialog-md.ts:\n   29  		`,\n   30  	  css: `.dialog-buttons { display: flex; justify-content: flex-end; margin: 5px }`,\n   31:       imports: MdButtonModule,\n   32  	}\n   33  })\n\nC:\\jbart5-ng\\src\\ui\\md-styles\\editable-boolean-md.ts:\n   10        features :{$: 'field.databind' },\n   11        template: `<div><md-slide-toggle [ngModel]=\"jbModel()\" (change)=\"jbModel($event.target.value)\">{{text()}}</md-slide-toggle></div>`,\n   12:       imports: MdSlideToggleModule\n   13    }\n   14  })\n   ..\n   28      background-color-old: rgba(0, 150, 136, 0.26); }\n   29        `,\n   30:       imports: MdSlideToggleModule\n   31    }\n   32  })\n\nC:\\jbart5-ng\\src\\ui\\md-styles\\input-md.ts:\n   18        },\n   19        css: 'md-input { {?width: %$width%px?} }',\n   20:     imports: MdInputModule\n   21  	}\n   22  })\n\nC:\\jbart5-ng\\src\\ui\\md-styles\\tabs-md.ts:\n   22         css: '{?!.md-tab-label { min-width: %$tabWidth%px} ?}',\n   23        features :{$: 'tabs.initTabs'},\n   24:       imports: MdTabsModule\n   25      }\n   26  })\n\nC:\\jbart5-ng\\src\\ui\\tree\\tree.ts:\n   81  \n   82  @NgModule({\n   83:   imports: [ CommonModule],\n   84    declarations: [ TreeNode, TreeNodeLine ], // is overriden dynamically\n   85    exports: [ TreeNode, TreeNodeLine ],\n   ..\n  121  		template: '<span><jb_node [tree]=\"tree\" [path]=\"tree.nodeModel.rootPath\" class=\"jb-control-tree treenode\" [ngClass]=\"{selected: tree.selected == tree.nodeModel.rootPath}\"></jb_node></span>',\n  122  //		directives: ['TreeNode', 'TreeNodeLine'],\n  123: 		imports: [jbTreeModule]\n  124  	}\n  125  })\n\nC:\\jbart5-ng\\projects\\material-demo\\all-readmes.js:\n    1: jb_resource('material-demo','readmes',[{\"id\":\"button\",\"content\":\"# md-button\\r\\n\\r\\n`md-button` is an HTML `<button>` or `<a>` tag enhanced with styling and animation to match the\\r\\n[Material Design button spec](https://www.google.com/design/spec/components/buttons.html).\\r\\n\\r\\nUsers should employ a button element (`<button>`) when clicking triggers some action in the current\\r\\nview *without navigating*. An anchor element (`<a>`) should be used when clicking *navigates*\\r\\nthe user to another URL. Depending on which element is used, the component will either be an\\r\\ninstance of `MdButton` or `MdAnchor`. Visually, the two are identical.\\r\\n\\r\\n\\r\\n### Button types\\r\\n\\r\\nThere are five types of buttons:\\r\\n 1. Flat buttons - `md-button`\\r\\n    * Rectangular button\\r\\n    * Defaults to white background\\r\\n    * No box shadow\\r\\n 2. Raised buttons - `md-raised-button`\\r\\n    * Rectangular button\\r\\n    * Defaults to white background\\r\\n    * Box shadow applied\\r\\n 3. Icon buttons - `md-icon-button`\\r\\n    * Circular button\\r\\n    * Transparent background\\r\\n    * 40 by 40 px\\r\\n 4. Floating Action Buttons (FABs) - `md-fab`\\r\\n    * Circular button\\r\\n    * Defaults background to \\\"accent\\\" palette defined in theme\\r\\n    * Box shadow applied\\r\\n    * 56 by 56 px\\r\\n 5. Mini Floating Action Buttons (Mini FABs) - `md-mini-fab`\\r\\n    * Circular button\\r\\n    * Defaults background to \\\"accent\\\" palette defined in theme\\r\\n    * Box shadow applied\\r\\n    * 40 by 40 px\\r\\n\\r\\nEach is an attribute directive that you can add to a `button` or `a` tag.  You can provide custom content to the button by inserting it\\r\\nbetween the tags, as you would with a normal button.\\r\\n\\r\\nExample:\\r\\n\\r\\n ```html\\r\\n<button md-button>FLAT</button>\\r\\n<button md-raised-button>RAISED</button>\\r\\n<button md-icon-button>\\r\\n    <md-icon class=\\\"md-24\\\">favorite</md-icon>\\r\\n</button>\\r\\n<button md-fab>\\r\\n    <md-icon class=\\\"md-24\\\">add</md-icon>\\r\\n</button>\\r\\n<button md-mini-fab>\\r\\n    <md-icon class=\\\"md-24\\\">add</md-icon>\\r\\n</button>\\r\\n ```\\r\\n\\r\\nOutput:\\r\\n\\r\\n<img src=\\\"https://material.angularjs.org/material2_assets/buttons/basic-buttons.png\\\">\\r\\n\\r\\n### Theming\\r\\n\\r\\nAll button types can be themed to match your \\\"primary\\\" palette, your \\\"accent\\\" palette, or your \\\"warn\\\" palette using the `color` attribute.\\r\\nSimply pass in the palette name.\\r\\n\\r\\nIn flat buttons, the palette chosen will affect the text color, while in other buttons, it affects the background.\\r\\n\\r\\nExample:\\r\\n\\r\\n ```html\\r\\n<button md-raised-button color=\\\"primary\\\">PRIMARY</button>\\r\\n<button md-raised-button color=\\\"accent\\\">ACCENT</button>\\r\\n<button md-raised-button color=\\\"warn\\\">WARN</button>\\r\\n ```\\r\\n\\r\\nOutput:\\r\\n\\r\\n<img src=\\\"https://material.angularjs.org/material2_assets/buttons/colored-buttons.png\\\">\\r\\n\\r\\n### Disabling\\r\\n\\r\\nYou can disable any button type through the native `disabled` property.  You can add it directly, or bind it to a property on your\\r\\ncomponent class by adding `[disabled]=\\\"isDisabled\\\"` given that the `isDisabled`\\r\\nproperty exists.\\r\\n\\r\\n```html\\r\\n<button md-button disabled>OFF</button>\\r\\n<button md-raised-button [disabled]=\\\"isDisabled\\\">OFF</button>\\r\\n<button md-mini-fab [disabled]=\\\"isDisabled\\\"><md-icon>check</md-icon></button>\\r\\n```\\r\\n\\r\\nOutput:\\r\\n\\r\\n<img src=\\\"https://material.angularjs.org/material2_assets/buttons/disabled-buttons.png\\\">\\r\\n\\r\\n### Accessibility\\r\\n\\r\\n * In high contrast mode, a strong border is added to the button to make it easier to see.\\r\\n * Button focus events originating from the keyboard will retain focus styles, while button focus events from the mouse will not.\\r\\n * As `md-button` is added to an existing `button` or `a` tag, it enjoys all the accessibility natively built into these elements.\\r\\n\\r\\n\\r\\n### Upcoming work\\r\\n\\r\\nWe will also be adding ink ripples to buttons in an upcoming milestone.\\r\\n\\r\\n### API Summary\\r\\n\\r\\nProperties:\\r\\n\\r\\n| Name | Type | Description |\\r\\n| --- | --- | --- |\\r\\n| `color` | `\\\"primary\\\"|\\\"accent\\\"|\\\"warn\\\"` | The color palette of the button\\r\\n| `disabled` | boolean | Whether or not the button is disabled\\r\\n| `disableRipple` | boolean | Whether the ripple effect when the button is clicked should be disabled\\r\\n\"},{\"id\":\"button-toggle\",\"content\":\"# md-button-toggle\\r\\n\\r\\n`MdButtonToggle` is a group of buttons that can be toggled.\\r\\nThere are two modes, `multiple` and `exclusive`.\\r\\nWhen in 'exclusive' mode, only one button can be selected at a time (like radio buttons).\\r\\nWhen in 'multiple' mode, multiple buttons can be selected at once (like checkboxes).\\r\\nYou can read more about button toggles in the\\r\\n[Material Design spec](https://material.google.com/components/buttons.html#buttons-toggle-buttons).\\r\\n\\r\\n## Usage\\r\\n\\r\\n### Setup\\r\\n\\r\\nImporting the module:\\r\\n```ts\\r\\n @NgModule({\\r\\n    imports: [MdButtonToggleModule.forRoot()],\\r\\n    ...\\r\\n })\\r\\n export class MyAppModule { }\\r\\n```\\r\\n\\r\\n### Basic Usage\\r\\n\\r\\n`md-button-toggle` can be used on its own and acts as a checkbox.\\r\\n\\r\\n```html\\r\\n<md-button-toggle>Bold</md-button-toggle>\\r\\n```\\r\\n\\r\\nOutput:\\r\\n\\r\\n![Basic Toggle Button Example](https://material.angularjs.org/material2_assets/button-toggle/basic-toggle.png)\\r\\n\\r\\n### Exclusive Selection\\r\\n\\r\\n`md-button-toggle` can be used in an exclusive selection group when surrounded by\\r\\n`md-button-toggle-group`. This styles all buttons within the group to appear as a single\\r\\ngroup of button toggles and allows only one button toggle to be selected at a time.\\r\\n\\r\\n```html\\r\\n<md-button-toggle-group name=\\\"alignment\\\">\\r\\n    <md-button-toggle value=\\\"left\\\"><md-icon>format_align_left</md-icon></md-button-toggle>\\r\\n    <md-button-toggle value=\\\"center\\\"><md-icon>format_align_center</md-icon></md-button-toggle>\\r\\n    <md-button-toggle value=\\\"right\\\"><md-icon>format_align_right</md-icon></md-button-toggle>\\r\\n    <md-button-toggle value=\\\"justify\\\"><md-icon>format_align_justify</md-icon></md-button-toggle>\\r\\n</md-button-toggle-group>\\r\\n```\\r\\n\\r\\nOutput:\\r\\n\\r\\n![Exclusive Toggle Button Example](https://material.angularjs.org/material2_assets/button-toggle/exclusive-toggle.png)\\r\\n\\r\\n### Multiple Selection\\r\\n\\r\\n`md-button-toggle` can be used in a multiple selection group when surrounded by\\r\\n`md-button-toggle-group multiple`. This styles all buttons within the group to appear as a single\\r\\ngroup of button toggles.\\r\\n\\r\\n```html\\r\\n<md-button-toggle-group multiple>\\r\\n    <md-button-toggle>Flour</md-button-toggle>\\r\\n    <md-button-toggle>Eggs</md-button-toggle>\\r\\n    <md-button-toggle>Sugar</md-button-toggle>\\r\\n    <md-button-toggle>Milk</md-button-toggle>\\r\\n</md-button-toggle-group>\\r\\n```\\r\\n\\r\\nOutput:\\r\\n\\r\\n![Multiple Toggle Button Example](https://material.angularjs.org/material2_assets/button-toggle/multi-toggle.png)\\r\\n\\r\\n## Dynamic Exclusive Selection\\r\\n\\r\\n`md-button-toggle`s can be used with `ngModel` to dynamically create groups and update the value for\\r\\na group.\\r\\n\\r\\n```html\\r\\n<md-button-toggle-group name=\\\"pies\\\" [(ngModel)]=\\\"favoritePie\\\">\\r\\n    <md-button-toggle *ngFor=\\\"let pie of pieOptions\\\" [value]=\\\"pie\\\">\\r\\n        {{pie}}\\r\\n    </md-button-toggle>\\r\\n</md-button-toggle-group>\\r\\n<p>Your favorite type of pie is: {{favoritePie}}</p>\\r\\n```\\r\\n\\r\\n### Disabled Button Toggle\\r\\n\\r\\n`md-button-toggle-group` and `md-button-toggle` can both be disabled by adding a `disabled`\\r\\nattribute to either one. Adding `disabled` to an exclusive group or a multiple group will disable\\r\\nthe entire group. Adding `disabled` to a single toggle will disable that toggle.\\r\\n\\r\\n```html\\r\\n<md-button-toggle-group disabled>\\r\\n    <md-button-toggle value=\\\"one\\\">One</md-button-toggle>\\r\\n    <md-button-toggle value=\\\"two\\\">Two</md-button-toggle>\\r\\n    <md-button-toggle value=\\\"three\\\">Three</md-button-toggle>\\r\\n</md-button-toggle-group>\\r\\n\\r\\n<md-button-toggle-group>\\r\\n    <md-button-toggle value=\\\"red\\\" disabled>Red</md-button-toggle>\\r\\n    <md-button-toggle value=\\\"blue\\\">Blue</md-button-toggle>\\r\\n</md-button-toggle-group>\\r\\n```\\r\\n\\r\\nOutput:\\r\\n\\r\\n![Disabled Toggle Buttons Example](https://material.angularjs.org/material2_assets/button-toggle/disabled-toggles.png)\\r\\n\\r\\n## `<md-button-toggle>`\\r\\n\\r\\n### Bound Properties\\r\\n\\r\\n| Name | Type | Description |\\r\\n| --- | --- | --- |\\r\\n| `id` | string | The unique ID of the toggle. IDs are generated by default when not specified. |\\r\\n| `name` | string | Optional, defaults to parent group name if one exists for exclusive selection toggles, otherwise null. This is used to differentiate between different groups. |\\r\\n| `value` | any | Value of the toggle. Only used when in a group to determine which are selected. |\\r\\n| `checked` | boolean | Optional, default = `false`. Whether or not the toggle is checked. |\\r\\n| `disabled` | boolean | Optional, default = `false`. Whether or not the toggle is disabled |\\r\\n\\r\\n### Events\\r\\n\\r\\n| Name | Description |\\r\\n| --- | --- |\\r\\n| `change` | Emitted when the `checked` value is changed. |\\r\\n\\r\\n## `<md-button-toggle-group>`\\r\\n\\r\\n### Bound Properties\\r\\n\\r\\n| Name | Type | Description |\\r\\n| --- | --- | --- |\\r\\n| `name` | string | Optional, the name of the group. |\\r\\n| `disabled` | boolean | Optional, default = `false`. |\\r\\n| `value` | any | The current value for the group. Will be set to the value of the selected toggle or a list of values from the selected toggles. |\\r\\n| `selected` | `mdButtonToggle` | The current selected toggle or a list of the selected toggles. |\\r\\n\\r\\n### Attributes\\r\\n\\r\\n| Name | Type | Description |\\r\\n| --- | --- | --- |\\r\\n| `multiple` | boolean | Optional, default = `false`. Whether or not the group allows multiple selection. |\\r\\n\\r\\n### Events\\r\\n\\r\\n| Name | Description |\\r\\n| --- | --- |\\r\\n| `change` | Emitted when the `value` of the group changes. |\\r\\n\"},{\"id\":\"card\",\"content\":\"# md-card\\r\\n\\r\\n`md-card` is a content container component that conforms to the spec of a Material Design card.\\r\\n\\r\\nSee plunker example [here](http://plnkr.co/edit/pkUNGMXPcf8RXKapXNXQ?p=preview).\\r\\n\\r\\n## Usage\\r\\n\\r\\nSimply add your content between `md-card` tags to consume basic card styles like box-shadow and default padding.\\r\\n\\r\\n```html\\r\\n<md-card>\\r\\n   Basic card.\\r\\n</md-card>\\r\\n```\\r\\n\\r\\nOutput:\\r\\n\\r\\n<img src=\\\"https://material.angularjs.org/material2_assets/cards/basic-card-min.png\\\">\\r\\n\\r\\n### Preset sections \\r\\n\\r\\nWe also provide a number of preset sections that you can mix and match within the `md-card` tags. \\r\\n\\r\\n  * `<md-card-title>`: adds styles for a title\\r\\n  * `<md-card-subtitle>`: adds styles for a subtitle\\r\\n  * `<md-card-content>`: main content section, intended for blocks of text\\r\\n  * `<img md-card-image>`: stretches image to container width\\r\\n  * `<md-card-actions>`: wraps and styles buttons\\r\\n  * `<md-card-footer>`: anchors section to bottom of card (e.g progress bar)\\r\\n\\r\\nExample markup for a card with section presets:\\r\\n\\r\\n```html\\r\\n<md-card>\\r\\n   <md-card-subtitle>Subtitle first</md-card-subtitle>\\r\\n   <md-card-title>Card with title</md-card-title>   \\r\\n   <md-card-content>\\r\\n        <p>This is supporting text.</p>\\r\\n        <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do \\r\\n        tempor incididunt ut labore et dolore magna aliqua. Ut enim ad</p>\\r\\n   </md-card-content>\\r\\n   <md-card-actions>\\r\\n        <button md-button>LIKE</button>\\r\\n        <button md-button>SHARE</button>\\r\\n   </md-card-actions>\\r\\n</md-card>\\r\\n```\\r\\n\\r\\nOutput:\\r\\n\\r\\n<img src=\\\"https://material.angularjs.org/material2_assets/cards/sections-card-min.png\\\">\\r\\n\\r\\n#### Preset shortcuts\\r\\n\\r\\n`md-card-actions` has a few layout shortcuts. You can add `align=\\\"end\\\"` to align the buttons at the end of\\r\\nthe main axis (flex-end). The default is `align=\\\"start\\\"` (flex-start).\\r\\n\\r\\n### Preset layouts\\r\\n\\r\\nYou can also leverage preset layouts that format some of the sections together.\\r\\n\\r\\n#### `<md-card-header>`\\r\\n\\r\\nFormats the following sections into a header:\\r\\n\\r\\n  * `<md-card-title>`: title to format within header\\r\\n  * `<md-card-subtitle>`: subtitle to format within header\\r\\n  * `<img md-card-avatar>`: image to use for avatar\\r\\n    \\r\\nExample markup for a card with a header:\\r\\n\\r\\n```html\\r\\n<md-card>\\r\\n   <md-card-header>\\r\\n      <img md-card-avatar src=\\\"path/to/img.png\\\">\\r\\n      <md-card-title>Header title</md-card-title>\\r\\n      <md-card-subtitle>Header subtitle</md-card-subtitle>\\r\\n   </md-card-header>\\r\\n   <img md-card-image src=\\\"path/to/img.png\\\">\\r\\n   <md-card-content>\\r\\n      <p>Here is some more content</p>\\r\\n   </md-card-content>\\r\\n</md-card>\\r\\n```\\r\\n\\r\\nOutput:\\r\\n\\r\\n<img src=\\\"https://material.angularjs.org/material2_assets/cards/header-card-min.png\\\">    \\r\\n    \\r\\n#### `<md-card-title-group>`\\r\\n\\r\\nGroups the following sections together:\\r\\n\\r\\n  * `<md-card-title>`: title to format within group\\r\\n  * `<md-card-subtitle>`: subtitle to format within group\\r\\n  * One of the following image sizes:\\r\\n    * `<img md-card-sm-image>`\\r\\n    * `<img md-card-md-image>`\\r\\n    * `<img md-card-lg-image>`\\r\\n\\r\\nExample markup for a card with title-group layout:\\r\\n\\r\\n```html\\r\\n<md-card>\\r\\n   <md-card-title-group>\\r\\n      <img md-card-sm-image src=\\\"path/to/img.png\\\">\\r\\n      <md-card-title>Card with title</md-card-title>\\r\\n      <md-card-subtitle>Subtitle</md-card-subtitle>\\r\\n   </md-card-title-group>\\r\\n</md-card>\\r\\n```\\r\\n\\r\\nOutput:\\r\\n\\r\\n<img src=\\\"https://material.angularjs.org/material2_assets/cards/title-group-card-min.png\\\">\"},{\"id\":\"checkbox\",\"content\":\"# md-checkbox\\r\\n\\r\\n`md-checkbox` is a Material Design selection control that allows users to make a binary choice for\\r\\na predetermined conditioned. It is modeled after the browser's native checkbox element, and behaves\\r\\nin the same way. Similar to the native checkbox element, it supports an indeterminate state for\\r\\n\\\"mixed\\\" checkboxes.\\r\\n\\r\\nA demo of the checkbox can be found at https://plnkr.co/edit/P7qce8lN9n2flS6kBhDy?p=preview.\\r\\n\\r\\n## Usage\\r\\n\\r\\n### Basic Usage\\r\\n\\r\\n`md-checkbox` can be used anywhere a normal checkbox would be used, and in the same way.\\r\\n\\r\\n```html\\r\\n<ul>\\r\\n  <li *ngFor=\\\"let todo of todos\\\">\\r\\n    <md-checkbox [checked]=\\\"todo.completed\\\"\\r\\n                 (change)=\\\"todo.completed = $event\\\">\\r\\n      {{todo.name}}\\r\\n    </md-checkbox>\\r\\n  </li>\\r\\n</ul>\\r\\n```\\r\\n\\r\\n### Usage within Forms\\r\\n\\r\\nIn addition to supporting native checkbox functionality, `md-checkbox` also supports `[(ngModel)]`\\r\\nfor use within forms.\\r\\n\\r\\n```html\\r\\n<form (submit)=\\\"saveUser()\\\">\\r\\n  <!-- Form fields... -->\\r\\n  <div>\\r\\n    <md-checkbox [(ngModel)]=\\\"user.agreesToTOS\\\">\\r\\n      I have read and agree to the terms of service.\\r\\n    </md-checkbox>\\r\\n  </div>\\r\\n  <button type=\\\"submit\\\" [disabled]=\\\"!user.agreesToTOS\\\">Sign Up</button>\\r\\n</form>\\r\\n```\\r\\n\\r\\n### Indeterminate Checkboxes\\r\\n\\r\\nIndeterminate checkboxes are useful when a checkbox needs to be in a \\\"mixed\\\" state\\r\\n\\r\\n```html\\r\\n<md-checkbox [checked]=\\\"false\\\"\\r\\n             [indeterminate]=\\\"isIndeterminate\\\"\\r\\n             (change)=\\\"isIndeterminate = false\\\">\\r\\n  Click the Button Below to Make Me Indeterminate.\\r\\n</md-checkbox>\\r\\n<button type=\\\"button\\\" (click)=\\\"isIndeterminate = true\\\">\\r\\n  Make Indeterminate\\r\\n</button>\\r\\n```\\r\\n\\r\\n### Alignment\\r\\n\\r\\nNote that checkboxes can be aligned to come at the \\\"start\\\" or the \\\"end\\\" of its corresponding label.\\r\\n\\r\\n```html\\r\\n<md-checkbox [checked]=\\\"true\\\" align=\\\"end\\\">\\r\\n  I come after my label.\\r\\n</md-checkbox>\\r\\n```\\r\\n\\r\\nNote that this alignment is preserved within RTL layouts.\\r\\n\\r\\n### Accessibility\\r\\n\\r\\nBy default, `md-checkbox` provides all the accessibility attributes needed. It also supports\\r\\nkeyboard navigation and toggling via the spacebar. However, you can provide an `aria-label` to the\\r\\ncheckbox if you do not wish to have any label text.\\r\\n\\r\\n```html\\r\\n<md-checkbox [checked]=\\\"false\\\" aria-label=\\\"My standalone checkbox\\\"></md-checkbox>\\r\\n```\\r\\n\"},{\"id\":\"core\",\"content\":\"Core library code for other `@angular2-material` components.\\r\\nThis should be added as a dependency for any project using the components.\\r\\n\"},{\"id\":\"dialog\",\"content\":\"\"},{\"id\":\"grid-list\",\"content\":\"# md-grid-list\\r\\n\\r\\n`md-grid-list` is an alternative list view that arranges cells into grid-based layout. \\r\\nSee Material Design spec [here](https://www.google.com/design/spec/components/grid-lists.html).\\r\\n\\r\\n## Usage\\r\\n\\r\\n### Simple grid list\\r\\n\\r\\nTo use `md-grid-list`, import the MdGridList module into your application's NgModule:\\r\\n\\r\\n*my-app-module.ts*\\r\\n```ts\\r\\nimport {MdGridListModule} from '@angular2-material/grid-list';\\r\\n\\r\\n@NgModule({\\r\\n  imports: [MdGridListModule.forRoot()],\\r\\n  ...\\r\\n})\\r\\nexport class MyAppModule {}\\r\\n```\\r\\n\\r\\nIn your template, create an `md-grid-list` element and specify the number of columns you want for\\r\\nyour grid using the `cols` property (this is the only mandatory attribute). \\r\\n\\r\\nYou can define each tile using an `md-grid-tile` element, passing any tile content between its tags.\\r\\n\\r\\nTiles are greedily placed in the first position of the grid that fits them, so row count depends on \\r\\nhow many tiles can fit in each row, given the col count and the colspan/rowspan of each tile.\\r\\n\\r\\n```html\\r\\n<md-grid-list cols=\\\"4\\\" [style.background]=\\\"'lightblue'\\\">\\r\\n   <md-grid-tile>One</md-grid-tile>\\r\\n   <md-grid-tile>Two</md-grid-tile>\\r\\n   <md-grid-tile>Three</md-grid-tile>\\r\\n   <md-grid-tile>Four</md-grid-tile>\\r\\n</md-grid-list>\\r\\n```\\r\\n\\r\\nOutput:\\r\\n\\r\\n<img src=\\\"https://material.angularjs.org/material2_assets/grid-list/basic-grid-list.png\\\">\\r\\n\\r\\n## Grid list config\\r\\n\\r\\n####`cols`\\r\\n\\r\\nThe `cols` property controls the number of columns displayed in your grid. It must be set or the \\r\\ngrid list will not be able to generate your layout.\\r\\n\\r\\nEx: `<md-grid-list cols=\\\"3\\\">...`\\r\\n\\r\\nDefault: There is no reasonable default value for this, so if it is unspecified, the grid list will \\r\\nthrow an error.\\r\\n\\r\\n####`rowHeight`\\r\\n\\r\\nRow height for the list can be calculated in three ways:\\r\\n\\r\\n1. **Fixed height**: The height can be in `px`, `em`, or `rem`.  If no units are specified, `px` \\r\\nunits are assumed. \\r\\n   \\r\\n   Ex: `<md-grid-list cols=\\\"3\\\" rowHeight=\\\"100px\\\">...`\\r\\n        \\r\\n2. **Ratio**: This ratio is width:height, and must be passed in with a colon, not a decimal.\\r\\n\\r\\n   Ex: `<md-grid-list cols=\\\"3\\\" rowHeight=\\\"4:3\\\">...`.\\r\\n        \\r\\n3. **Fit**:  This mode automatically divides the available height by the number of rows.  Please note\\r\\nthe height of the grid-list or its container must be set.  \\r\\n\\r\\n   Ex: `<md-grid-list cols=\\\"3\\\" rowHeight=\\\"fit\\\">...`\\r\\n\\r\\nDefaults to a 1:1 ratio of width:height. \\r\\n        \\r\\n####`gutterSize`\\r\\n\\r\\nGutter size can be set to any `px`, `em`, or `rem` value with the `gutterSize` property.  If no \\r\\nunits are specified, `px` units are assumed.\\r\\n\\r\\nEx: `<md-grid-list cols=\\\"3\\\" gutterSize=\\\"4px\\\">...`\\r\\n\\r\\nDefaults to `1px`.\\r\\n        \\r\\n## Grid tile config\\r\\n\\r\\nYou can set the rowspan and colspan of each tile individually, using the `rowspan` and `colspan` \\r\\nproperties.  If not set, they both default to `1`.\\r\\n\\r\\n```html\\r\\n<md-grid-list cols=\\\"4\\\" rowHeight=\\\"100px\\\">\\r\\n  <md-grid-tile *ngFor=\\\"let tile of tiles\\\" [colspan]=\\\"tile.cols\\\" [rowspan]=\\\"tile.rows\\\"\\r\\n  [style.background]=\\\"tile.color\\\">\\r\\n    {{tile.text}}\\r\\n  </md-grid-tile>\\r\\n</md-grid-list>\\r\\n```\\r\\n\\r\\n```javascript\\r\\n...\\r\\nexport class MyComp {\\r\\n  tiles: any[] = [\\r\\n    {text: 'One', cols: 3, rows: 1, color: 'lightblue'},\\r\\n    {text: 'Two', cols: 1, rows: 2, color: 'lightgreen'},\\r\\n    {text: 'Three', cols: 1, rows: 1, color: 'lightpink'},\\r\\n    {text: 'Four', cols: 2, rows: 1, color: '#DDBDF1'},\\r\\n  ];\\r\\n}\\r\\n```\\r\\n\\r\\nOutput:\\r\\n\\r\\n<img src=\\\"https://material.angularjs.org/material2_assets/grid-list/fancy-grid-list.png\\\">\\r\\n\\r\\n## TODO\\r\\n\\r\\n- Grid tile headers and footers\\r\\n- Responsive sizing support\\r\\n\"},{\"id\":\"icon\",\"content\":\"# md-icon\\r\\n\\r\\n`md-icon` is a component that displays an icon, which can be a font glyph or an SVG image.\\r\\n\\r\\n## MdIconRegistry\\r\\n\\r\\n`MdIconRegistry` is an injectable service that allows you to associate icon names with SVG URLs and define aliases for CSS font classes. Its methods are discussed below and listed in the API summary.\\r\\n\\r\\n## Font icons\\r\\n\\r\\n### Ligatures\\r\\n\\r\\nSome fonts are designed to show icons by using [ligatures](https://en.wikipedia.org/wiki/Typographic_ligature), for example by rendering the text \\\"home\\\" as a home image. To use a ligature icon, put its text in the content of the `md-icon` component, for example:\\r\\n```html\\r\\n<md-icon>home</md-icon>\\r\\n```\\r\\n\\r\\nBy default the [Material icons font](http://google.github.io/material-design-icons/#icon-font-for-the-web) is used. (You will still need to include the HTML to load the font and its CSS, as described in the link). You can specify a different font by setting the `fontSet` input to either the CSS class to apply to use the desired font, or to an alias previously registered with `MdIconRegistry.registerFontClassAlias`, for example:\\r\\n```javascript\\r\\nmdIconRegistry.registerFontClassAlias('myfont', 'my-icon-font-class');\\r\\n```\\r\\n\\r\\n```html\\r\\n<md-icon fontSet=\\\"myfont\\\">help</md-icon>\\r\\n```\\r\\n\\r\\n### Font icons via CSS\\r\\n\\r\\nFonts can also display icons by defining a CSS class for each icon glyph, which typically uses a :before selector to cause the icon to appear. [FontAwesome](https://fortawesome.github.io/Font-Awesome/examples/) uses this approach to display its icons. To use such a font, set the `fontSet` input to the font's CSS class (either the class itself or an alias registered with `MdIconRegistry.registerFontClassAlias`), and set the `fontIcon` input to the class for the specific icon to show. Example:\\r\\n\\r\\n```html\\r\\n<md-icon fontSet=\\\"fa\\\" fontIcon=\\\"fa-square\\\"></md-icon>\\r\\n```\\r\\n\\r\\nFor both types of font icons, you can specify the default font class to use when `fontSet` is not explicitly set by calling `MdIconRegistry.setDefaultFontSetClass`.\\r\\n\\r\\n## SVG icons\\r\\n\\r\\nWhen an `md-icon` component displays an SVG icon, it does so by directly inlining the SVG content into the page as a child of the component. (Rather than using an <img> tag or a div background image). This makes it easier to apply CSS styles to SVG icons. For example, the default color of the SVG content is the CSS [currentColor](http://www.quirksmode.org/css/color/currentcolor.html) value. This makes SVG icons by default have the same color as surrounding text, and allows you to change the color by setting the \\\"color\\\" style on the `md-icon` element.\\r\\n\\r\\n### Icons from URLs\\r\\n\\r\\nSVG icons can be used either by directly specifying the icon's URL, or by associating an icon name with a URL and then referring to the name. To use a URL directly, set the `svgSrc` input:\\r\\n```html\\r\\n<md-icon svgSrc=\\\"/assets/sun.svg\\\"></md-icon>\\r\\n```\\r\\n\\r\\n### Named icons\\r\\n\\r\\nTo associate a name with an icon URL, use the `addSvgIcon` or `addSvgIconInNamespace` methods of `MdIconRegistry`. After registering an icon, it can be displayed by setting the `svgIcon` input. For an icon in the default namespace, use the name directly. For a non-default namespace, use the format `[namespace]:[name]`. Examples:\\r\\n```javascript\\r\\nmdIconRegistry.addSvgIcon('moon', '/assets/moon.svg');\\r\\nmdIconRegistry.addSvgIconInNamespace('animals', 'cat', '/assets/cat.svg');\\r\\n```\\r\\n\\r\\n```html\\r\\n<md-icon svgIcon=\\\"moon\\\"></md-icon>\\r\\n<md-icon svgIcon=\\\"animals:cat\\\"></md-icon>\\r\\n```\\r\\n\\r\\n### Icon sets\\r\\n\\r\\nIcon sets allow grouping multiple icons into a single SVG file. The content of an icon set file looks like this, where each nested `<svg>` tag defines an individual icon, and is identified with a unique \\\"id\\\" attribute.\\r\\n```\\r\\n<svg>\\r\\n  <defs>\\r\\n    <svg id=\\\"mercury\\\">...</svg>\\r\\n    <svg id=\\\"venus\\\">...</svg>\\r\\n    <svg id=\\\"earth\\\">...</svg>\\r\\n    <svg id=\\\"mars\\\">...</svg>\\r\\n  </defs>\\r\\n</svg>\\r\\n```\\r\\n\\r\\nIcon sets are registered using the `addSvgIconSet` or `addSvgIconSetInNamespace` methods of `MdIconRegistry`. After an icon set is registered, each of its embedded icons can be accessed by their \\\"id\\\" attributes. To display an icon from an icon set, use the `svgIcon` input in the same way as for individually registered icons. Example:\\r\\n```javascript\\r\\nmdIconRegistry.addSvgIconSetInNamespace('planets', '/assets/planets.svg');\\r\\n```\\r\\n\\r\\n```html\\r\\n<md-icon svgIcon=\\\"planets:venus\\\"></md-icon>\\r\\n```\\r\\n\\r\\nMultiple icon sets can be registered in the same namespace. If you request an icon whose id appears in more than one icon set, the icon from the most recently registered set will be used.\\r\\n\\r\\nNote that all SVG icons are fetched via XmlHttpRequest, and due to the same-origin policy their URLs must be on the same domain as the containing page, or their servers must be configured to allow cross-domain access.\\r\\n\\r\\n### Accessibility\\r\\n\\r\\nIf you set an \\\"aria-label\\\" attribute on the md-icon element, its value will be used as-is. If you do not, the md-icon component will attempt to set the aria-label value from one of these sources:\\r\\n* The `alt` attribute\\r\\n* The `fontIcon` input\\r\\n* The name of the icon from the `svgIcon` input (not including any namespace)\\r\\n* The text content of the component (for ligature icons)\\r\\n\\r\\n### API Summary\\r\\n\\r\\nmd-icon Properties:\\r\\n\\r\\n| Name         | Type     | Description |\\r\\n| ---          | ---      | --- |\\r\\n| `svgSrc`     | string   | The URL of the SVG icon to display |\\r\\n| `svgIcon`    | string   | The name (and possibly namespace) of an icon previously registered with `MdIconRegistry.addSvgIcon` or `MdIconRegistry.addSvgIconInNamespace` |\\r\\n| `fontSet`    | string   | The font to use to display an icon glyph. The value can be either a CSS class name, or an alias previously defined with `MdIconRegistry.registerFontClassAlias` |\\r\\n| `fontIcon`   | string   | The CSS class that identifies the specific icon to use from an icon font |\\r\\n\\r\\nMdIconRegistry methods (all methods return `this` for chaining):\\r\\n\\r\\n| Signature   | Description |\\r\\n| ---         | --- |\\r\\n| addSvgIcon(name: string, url: string): MdIconProvider | Associates an icon name with a URL in the default namespace. When an `md-icon` component has its `svgIcon` input set to this name, the icon will be loaded from this URL. |\\r\\n| addSvgIconInNamespace(namespace: string, iconName: string, url: string): MdIconProvider | Associates an icon name with a URL in the specified namespace. |\\r\\n| addSvgIconSet(url: string): MdIconProvider | Makes the icons contained in the icon set from a URL available in the default namespace. |\\r\\n| addSvgIconSetInNamespace(namespace: string, url: string): MdIconProvider | Makes the icons contained in the icon set from a URL available in the specified namespace. |\\r\\n| registerFontClassAlias(alias: string, className: string): MdIconProvider | Associates a font alias with a CSS class. When an `md-icon` component has its `fontSet` input set to the alias, the CSS class will be added to the component's element. It is assumed that the user has defined a corresponding CSS rule to set the desired font. |\\r\\n| setDefaultFontSetClass(className: string): MdIconProvider | Sets the default CSS class to apply to font icons when mdFontSet is not set. |\\r\\n\"},{\"id\":\"input\",\"content\":\"# mdInput\\r\\n\\r\\nInputs are the basic input component of Material 2. The spec can be found [here](https://www.google.com/design/spec/components/text-fields.html).\\r\\n\\r\\n\\r\\n\\r\\n## Notes\\r\\n* The `<md-input>` component fully support two-way binding of `ngModel`, as if it was a normal `<input>`.\\r\\n\\r\\n\\r\\n\\r\\n## Type\\r\\n\\r\\nAt the time of writing this README, the `[type]` attribute is copied to the actual `<input>` element in the `<md-input>`.\\r\\n\\r\\nThe valid `type` attribute values are any supported by your browser, with the exception of `file`, `checkbox` and `radio`. File inputs aren't supported for now, while check boxes and radio buttons have their own components.\\r\\n\\r\\n\\r\\n\\r\\n## Prefix and Suffix\\r\\n\\r\\nYou can include HTML before, and after the input tag, as prefix or suffix. It will be underlined as per the Material specification, and clicking it will focus the input.\\r\\n\\r\\nTo add a prefix, use the `md-prefix` attribute on the element. Similarly, to add a suffix, use the `md-suffix` attribute. For example, in a template:\\r\\n\\r\\n#### Example\\r\\n\\r\\n```html\\r\\n<md-input placeholder=\\\"amount\\\" align=\\\"end\\\">\\r\\n  <span md-prefix>$&nbsp;</span>\\r\\n  <span md-suffix>.00</span>\\r\\n</md-input>\\r\\n```\\r\\n\\r\\nWill result in this:\\r\\n\\r\\n<img src=\\\"https://material.angularjs.org/material2_assets/input/prefix-suffix.png\\\">\\r\\n\\r\\n\\r\\n\\r\\n## Hint Labels\\r\\n\\r\\nHint labels are the labels that shows the underline. You can have up to two hint labels; one on the `start` of the line (left in an LTR language, right in RTL), or one on the `end`.\\r\\n\\r\\nYou specify a hint-label in one of two ways; either using the `hintLabel` attribute, or using an `<md-hint>` directive in the `<md-input>`, which takes an `align` attribute containing the side. The attribute version is assumed to be at the `start`.\\r\\n\\r\\nSpecifying a side twice will result in an exception during initialization.\\r\\n\\r\\n#### Example\\r\\n\\r\\nA simple character counter can be made like the following:\\r\\n\\r\\n```html\\r\\n<md-input placeholder=\\\"Character count (100 max)\\\" maxlength=\\\"100\\\" class=\\\"demo-full-width\\\"\\r\\n          value=\\\"Hello world. How are you?\\\"\\r\\n          #characterCountHintExample>\\r\\n  <md-hint align=\\\"end\\\">{{characterCountHintExample.characterCount}} / 100</md-hint>\\r\\n</md-input>\\r\\n```\\r\\n\\r\\n<img src=\\\"https://material.angularjs.org/material2_assets/input/character-count.png\\\">\\r\\n\\r\\n\\r\\n\\r\\n## Divider Color\\r\\n\\r\\nThe divider (line under the `<md-input>` content) color can be changed by using the `dividerColor` attribute. A value of `primary` is the default and will correspond to your theme primary color. Alternatively, you can specify `accent` or `warn`.\\r\\n\\r\\n#### Example\\r\\n\\r\\n^((please note that this example has been doctored to show the colors; they would normally show only on focus)^)\\r\\n\\r\\n<img src=\\\"https://material.angularjs.org/material2_assets/input/divider-colors.png\\\">\\r\\n\\r\\n\\r\\n\\r\\n## Labelling\\r\\n\\r\\nYou can label the `<md-input>` as you would a regular `<input>`.\\r\\n\\r\\n\\r\\n\\r\\n## Full Forms\\r\\n\\r\\nYou can make a full form using inputs, and it will support autofill natively.\\r\\n\\r\\n#### Example\\r\\n\\r\\n```html\\r\\n<md-card class=\\\"demo-card demo-basic\\\">\\r\\n  <md-toolbar color=\\\"primary\\\">Basic</md-toolbar>\\r\\n  <md-card-content>\\r\\n    <form>\\r\\n      <md-input class=\\\"demo-full-width\\\" placeholder=\\\"Company (disabled)\\\" disabled value=\\\"Google\\\">\\r\\n      </md-input>\\r\\n\\r\\n      <table style=\\\"width: 100%\\\" cellspacing=\\\"0\\\"><tr>\\r\\n        <td><md-input placeholder=\\\"First name\\\" style=\\\"width: 100%\\\"></md-input></td>\\r\\n        <td><md-input placeholder=\\\"Long Last Name That Will Be Truncated\\\" style=\\\"width: 100%\\\"></md-input></td>\\r\\n      </tr></table>\\r\\n      <p>\\r\\n        <md-input class=\\\"demo-full-width\\\" placeholder=\\\"Address\\\" value=\\\"1600 Amphitheatre Pkway\\\"></md-input>\\r\\n        <md-input class=\\\"demo-full-width\\\" placeholder=\\\"Address 2\\\"></md-input>\\r\\n      </p>\\r\\n      <table style=\\\"width: 100%\\\" cellspacing=\\\"0\\\"><tr>\\r\\n        <td><md-input class=\\\"demo-full-width\\\" placeholder=\\\"City\\\"></md-input></td>\\r\\n        <td><md-input class=\\\"demo-full-width\\\" placeholder=\\\"State\\\"></md-input></td>\\r\\n        <td><md-input #postalCode class=\\\"demo-full-width\\\" maxlength=\\\"5\\\"\\r\\n                      placeholder=\\\"Postal Code\\\"\\r\\n                      value=\\\"94043\\\">\\r\\n          <md-hint align=\\\"end\\\">{{postalCode.characterCount}} / 5</md-hint>\\r\\n        </md-input></td>\\r\\n      </tr></table>\\r\\n    </form>\\r\\n  </md-card-content>\\r\\n</md-card>\\r\\n```\\r\\n\\r\\nWill result in this:\\r\\n\\r\\n<img src=\\\"https://material.angularjs.org/material2_assets/input/full-form.png\\\">\\r\\n\"},{\"id\":\"list\",\"content\":\"# md-list\\r\\n\\r\\n`md-list` is a container component that wraps and formats a series of line items. As the base list component,\\r\\n it provides Material Design styling, but no behavior of its own.\\r\\n\\r\\n## Usage\\r\\n\\r\\n### Simple list\\r\\n\\r\\nTo use `md-list`, import the MdList module into your application's NgModule:\\r\\n\\r\\n*my-app-module.ts*\\r\\n```ts\\r\\nimport {MdListModule} from '@angular2-material/list';\\r\\n\\r\\n@NgModule({\\r\\n  imports: [MdListModule.forRoot()],\\r\\n  ...\\r\\n})\\r\\nexport class MyAppModule {}\\r\\n```\\r\\n\\r\\nIn your template, create an `md-list` element and wrap each of your items in an `md-list-item` tag.\\r\\n\\r\\n```html\\r\\n<md-list>\\r\\n   <md-list-item> Pepper </md-list-item>\\r\\n   <md-list-item> Salt </md-list-item>\\r\\n   <md-list-item> Paprika </md-list-item>\\r\\n</md-list>\\r\\n```\\r\\n\\r\\nOutput:\\r\\n\\r\\n<img src=\\\"https://material.angularjs.org/material2_assets/list/basic-list.png\\\">\\r\\n\\r\\n### Multi-line lists\\r\\n\\r\\nIf your list requires multiple lines per list item, annotate each line with an `md-line` attribute.\\r\\nYou can use whichever heading tag is appropriate for your DOM hierarchy (doesn't have to be `h3`),\\r\\nas long as the `md-line` attribute is included.\\r\\n\\r\\n```html\\r\\n<!-- two line list -->\\r\\n<md-list>\\r\\n  <md-list-item *ngFor=\\\"let message of messages\\\">\\r\\n    <h3 md-line> {{message.from}} </h3>\\r\\n    <p md-line>\\r\\n      <span> {{message.subject}} </span>\\r\\n      <span class=\\\"demo-2\\\"> -- {{message.message}} </span>\\r\\n    </p>\\r\\n  </md-list-item>\\r\\n</md-list>\\r\\n\\r\\n<!-- three line list -->\\r\\n<md-list>\\r\\n  <md-list-item *ngFor=\\\"let message of messages\\\">\\r\\n    <h3 md-line> {{message.from}} </h3>\\r\\n    <p md-line> {{message.subject}} </p>\\r\\n    <p md-line class=\\\"demo-2\\\"> {{message.message}} </p>\\r\\n  </md-list-item>\\r\\n</md-list>\\r\\n```\\r\\n\\r\\nTwo line list output:\\r\\n\\r\\n<img src=\\\"https://material.angularjs.org/material2_assets/list/two-line-list.png\\\">\\r\\n\\r\\nThree line list output:\\r\\n\\r\\n<img src=\\\"https://material.angularjs.org/material2_assets/list/three-line-list.png\\\">\\r\\n\\r\\n### Lists with avatars\\r\\n\\r\\nTo include an avatar, add an image tag with an `md-list-avatar` attribute.\\r\\n\\r\\n```html\\r\\n<md-list>\\r\\n  <md-list-item *ngFor=\\\"let message of messages\\\">\\r\\n    <img md-list-avatar src=\\\"...\\\" alt=\\\"...\\\">\\r\\n    <h3 md-line> {{message.from}} </h3>\\r\\n    <p md-line>\\r\\n      <span> {{message.subject}} </span>\\r\\n      <span class=\\\"demo-2\\\"> -- {{message.message}} </span>\\r\\n    </p>\\r\\n  </md-list-item>\\r\\n</md-list>\\r\\n```\\r\\n\\r\\nOutput:\\r\\n\\r\\n<img src=\\\"https://material.angularjs.org/material2_assets/list/list-with-avatar-2.png\\\">\\r\\n\\r\\n### Dense lists\\r\\nLists are also available in \\\"dense layout\\\" mode, which shrinks the font size and height of the list\\r\\nto suit UIs that may need to display more information.  To enable this mode, add a `dense` attribute\\r\\nto the main `md-list` tag.\\r\\n\\r\\n\\r\\n```html\\r\\n<md-list dense>\\r\\n   <md-list-item> Pepper </md-list-item>\\r\\n   <md-list-item> Salt </md-list-item>\\r\\n   <md-list-item> Paprika </md-list-item>\\r\\n</md-list>\\r\\n```\\r\\n\\r\\nOutput:\\r\\n\\r\\n<img src=\\\"https://material.angularjs.org/material2_assets/list/dense-list.png\\\">\\r\\n\\r\\n### Lists with multiple sections\\r\\n\\r\\nYou can add a subheader to a list by annotating a heading tag with an `md-subheader` attribute. To add a divider,\\r\\nuse `<md-divider>` tags.\\r\\n\\r\\n```html\\r\\n<md-list>\\r\\n   <h3 md-subheader>Folders</h3>\\r\\n   <md-list-item *ngFor=\\\"let folder of folders\\\">\\r\\n      <md-icon md-list-avatar>folder</md-icon>\\r\\n      <h4 md-line>{{folder.name}}</h4>\\r\\n      <p md-line class=\\\"demo-2\\\"> {{folder.updated}} </p>\\r\\n   </md-list-item>\\r\\n   <md-divider></md-divider>\\r\\n   <h3 md-subheader>Notes</h3>\\r\\n   <md-list-item *ngFor=\\\"let note of notes\\\">\\r\\n      <md-icon md-list-avatar>note</md-icon>\\r\\n      <h4 md-line>{{note.name}}</h4>\\r\\n      <p md-line class=\\\"demo-2\\\"> {{note.updated}} </p>\\r\\n   </md-list-item>\\r\\n</md-list>\\r\\n```\\r\\n\\r\\nOutput:\\r\\n\\r\\n<img src=\\\"https://material.angularjs.org/material2_assets/list/subheader-list.png\\\">\\r\\n\\r\\n### Navigation lists\\r\\n\\r\\nUse `md-nav-list` tags for navigation lists (i.e. lists that have anchor tags).\\r\\n\\r\\nSimple nav lists can tack an `md-list-item` attribute onto the anchor tag itself:\\r\\n\\r\\n```html\\r\\n<md-nav-list>\\r\\n   <a md-list-item href=\\\"...\\\" *ngFor=\\\"let link of links\\\"> {{ link }} </a>\\r\\n</md-nav-list>\\r\\n```\\r\\n\\r\\nIf you require a more complex nav list (e.g. with more than one target per item), wrap your anchor tag in an `md-list-item` element.\\r\\n\\r\\n```html\\r\\n<md-nav-list>\\r\\n  <md-list-item *ngFor=\\\"let link of links\\\">\\r\\n     <a md-line href=\\\"...\\\">{{ link }}</a>\\r\\n     <button md-icon-button (click)=\\\"showInfo(link)\\\">\\r\\n        <md-icon>info</md-icon>\\r\\n     </button>\\r\\n  </md-list-item>\\r\\n</md-nav-list>\\r\\n```\\r\\n\\r\\n### Lists with secondary text\\r\\nSecondary text styling will be part of a broader typography module to\\r\\n[come later](https://github.com/angular/material2/issues/205), and won’t be implemented as part of this component\\r\\nspecifically. Gray text in the examples above comes from a \\\"demo-2\\\" class added manually by the demo.\\r\\n\"},{\"id\":\"menu\",\"content\":\"# md-menu\\r\\n\\r\\n`md-menu` is a list of options that displays when triggered.  You can read more about menus in the \\r\\n[Material Design spec](https://material.google.com/components/menus.html).\\r\\n\\r\\n### Not yet implemented\\r\\n\\r\\n- `prevent-close` option, to turn off automatic menu close when clicking outside the menu\\r\\n- Custom offset support\\r\\n- Menu groupings (which menus are allowed to open together)\\r\\n\\r\\n## Usage\\r\\n\\r\\n### Setup\\r\\n\\r\\nImport the MdMenu module.\\r\\n\\r\\n*my-app-module.ts*\\r\\n```ts\\r\\nimport {MdMenuModule} from '@angular2-material/menu';\\r\\n\\r\\n@NgModule({\\r\\n  imports: [MdMenuModule.forRoot()],\\r\\n  ...\\r\\n})\\r\\nexport class MyAppModule {}\\r\\n```\\r\\n\\r\\nFor alpha.7, you need to include the overlay styles in your app via a `link` element. This will\\r\\nlook something like\\r\\n```html\\r\\n<link href=\\\"vendor/@angular2-material/core/overlay/overlay.css\\\" rel=\\\"stylesheet\\\">\\r\\n```\\r\\n\\r\\n### Simple menu\\r\\n\\r\\nIn your template, create an `md-menu` element. You can use either `<button>` or `<anchor>` tags for \\r\\nyour menu items, as long as each is tagged with an `md-menu-item` attribute. Note that you can \\r\\ndisable items by adding the `disabled` boolean attribute or binding to it.\\r\\n\\r\\n*my-comp.html*\\r\\n```html\\r\\n<!-- this menu starts as hidden by default -->\\r\\n<md-menu>\\r\\n    <button md-menu-item> Refresh </button>\\r\\n    <button md-menu-item> Settings </button>\\r\\n    <button md-menu-item> Help </button>\\r\\n    <button md-menu-item disabled> Sign Out </button>\\r\\n</md-menu>\\r\\n```\\r\\n\\r\\nMenus are hidden by default, so you'll want to connect up a menu trigger that can open your menu.  \\r\\nYou can do so by adding a button tag with an `md-menu-trigger-for` attribute and passing in the menu \\r\\ninstance.  You can create a local reference to your menu instance by adding `#menu=\\\"mdMenu\\\"` to  \\r\\nyour menu element.\\r\\n\\r\\n*my-comp.html*\\r\\n```html\\r\\n<!-- menu opens when trigger button is clicked -->\\r\\n<button md-icon-button [md-menu-trigger-for]=\\\"menu\\\">\\r\\n   <md-icon>more_vert</md-icon>\\r\\n</button>\\r\\n\\r\\n<md-menu #menu=\\\"mdMenu\\\">\\r\\n    <button md-menu-item> Refresh </button>\\r\\n    <button md-menu-item> Settings </button>\\r\\n    <button md-menu-item> Help </button>\\r\\n    <button md-menu-item disabled> Sign Out </button>\\r\\n</md-menu>\\r\\n```\\r\\n\\r\\nOutput:\\r\\n\\r\\n<img src=\\\"https://material.angularjs.org/material2_assets/menu/default_closed.png\\\">\\r\\n<img src=\\\"https://material.angularjs.org/material2_assets/menu/default_open.png\\\">\\r\\n\\r\\n### Toggling the menu programmatically\\r\\n\\r\\nYou can also use the menu's API to open or close the menu programmatically from your class. Please \\r\\nnote that in this case, an `md-menu-trigger-for` attribute is still necessary to connect \\r\\nthe menu to its trigger element in the DOM.\\r\\n  \\r\\n*my-comp.component.ts*\\r\\n```ts\\r\\nclass MyComp {\\r\\n  @ViewChild(MdMenuTrigger) trigger: MdMenuTrigger;\\r\\n\\r\\n  someMethod() {\\r\\n    this.trigger.openMenu();\\r\\n  }\\r\\n}\\r\\n```\\r\\n\\r\\n*my-comp.html*\\r\\n```html\\r\\n<button md-icon-button [md-menu-trigger-for]=\\\"menu\\\">\\r\\n   <md-icon>more_vert</md-icon>\\r\\n</button>\\r\\n\\r\\n<md-menu #menu=\\\"mdMenu\\\">\\r\\n    <button md-menu-item> Refresh </button>\\r\\n    <button md-menu-item> Settings </button>\\r\\n    <button md-menu-item> Help </button>\\r\\n    <button md-menu-item disabled> Sign Out </button>\\r\\n</md-menu>\\r\\n```\\r\\n\\r\\n### Customizing menu position\\r\\n\\r\\nBy default, the menu will display after and below its trigger.  You can change this display position \\r\\nusing the `x-position` (`before | after`) and `y-position` (`above | below`) attributes.  \\r\\n\\r\\n*my-comp.html*\\r\\n```html\\r\\n<md-menu x-position=\\\"before\\\" #menu=\\\"mdMenu\\\">\\r\\n    <button md-menu-item> Refresh </button>\\r\\n    <button md-menu-item> Settings </button>\\r\\n    <button md-menu-item> Help </button>\\r\\n    <button md-menu-item disabled> Sign Out </button>\\r\\n</md-menu>\\r\\n```\\r\\n\\r\\nOutput:\\r\\n\\r\\n<img src=\\\"https://material.angularjs.org/material2_assets/menu/before_closed.png\\\">\\r\\n<img src=\\\"https://material.angularjs.org/material2_assets/menu/before_open.png\\\">\\r\\n\\r\\n### Accessibility\\r\\n\\r\\nThe menu adds `role=\\\"menu\\\"` to the main menu element and `role=\\\"menuitem\\\"` to each menu item. It \\r\\nalso adds `aria-hasPopup=\\\"true\\\"` to the trigger element.\\r\\n\\r\\n#### Keyboard events:\\r\\n- <kbd>DOWN_ARROW</kbd>: Focus next menu item\\r\\n- <kbd>UP_ARROW</kbd>: Focus previous menu item\\r\\n- <kbd>ENTER</kbd>: Select focused item\\r\\n\\r\\n### Menu attributes\\r\\n\\r\\n| Signature | Values | Description |\\r\\n| --- | --- | --- |\\r\\n| `x-position` | `before | after` | The horizontal position of the menu in relation to the trigger. Defaults to `after`. | \\r\\n| `y-position` | `above | below` | The vertical position of the menu in relation to the trigger. Defaults to `below`. |\\r\\n \\r\\n### Trigger Programmatic API\\r\\n\\r\\n**Properties**\\r\\n\\r\\n| Name | Type | Description |\\r\\n| --- | --- | --- |\\r\\n| `menuOpen` | `Boolean` | Property that is true when the menu is open. It is not settable (use methods below). | \\r\\n| `onMenuOpen` | `Observable<void>` | Observable that emits when the menu opens. | \\r\\n| `onMenuClose` | `Observable<void>` | Observable that emits when the menu closes. | \\r\\n\\r\\n**Methods**\\r\\n\\r\\n| Method | Returns | Description |\\r\\n| --- | --- | --- |\\r\\n| `openMenu()` | `Promise<void>` | Opens the menu. Returns a promise that will resolve when the menu has opened. |\\r\\n| `closeMenu()` | `Promise<void>` | Closes the menu. Returns a promise that will resolve when the menu has closed. |\\r\\n| `toggleMenu()` | `Promise<void>` | Toggles the menu. Returns a promise that will resolve when the menu has completed opening or closing. |  \\r\\n| `destroyMenu()` | `Promise<void>` | Destroys the menu overlay completely. \\r\\n  \\r\\n\\r\\n\"},{\"id\":\"progress-bar\",\"content\":\"# md-progress-bar\\r\\n\\r\\n`md-progress-bar` is a component for indicating progress and activity, matching the spec of \\r\\n[Material Design Progress & Activity](https://www.google.com/design/spec/components/progress-activity.html).\\r\\n\\r\\n### Progress Modes\\r\\n\\r\\nThere are four modes:\\r\\n 1. Determinate - `<md-progress-bar mode=\\\"determinate\\\">`\\r\\n    * Indicates how long an operation will take when the percentage complete is detectable. \\r\\n 2. Indeterminate - `<md-progress-bar mode=\\\"indeterminate\\\">`\\r\\n    * Indicates the user must wait while something finishes when it’s not necessary or possible to indicate how long it will take.\\r\\n 3. Buffer - `<md-progress-bar mode=\\\"buffer\\\">`\\r\\n    * Indicates how long an operation will take when the percentage complete is detectable, also provides a value of the preloading for the operation.\\r\\n 4. Query - `<md-progress-bar mode=\\\"query\\\">`\\r\\n    * Indicates the user must wait while something finishes when it is not yet possible to indicate how long it will take, but will be possible.  Once possible, the progress mode should be moved to buffer or determinate.\\r\\n      \\r\\n\\r\\nExample:\\r\\n\\r\\n ```html\\r\\n<md-progress-bar mode=\\\"determinate\\\" value=\\\"myValue\\\"></md-progress-bar>\\r\\n<md-progress-bar mode=\\\"indeterminate\\\"></md-progress-bar>\\r\\n<md-progress-bar mode=\\\"buffer\\\" value=\\\"myValue\\\" bufferValue=\\\"myBufferValue\\\"></md-progress-bar>\\r\\n<md-progress-bar mode=\\\"query\\\"></md-progress-bar>\\r\\n ```\\r\\n\\r\\n### Theming\\r\\n\\r\\nAll progress indicators can be themed to match your \\\"primary\\\" palette, your \\\"accent\\\" palette, or your \\\"warn\\\" palette using the appropriate class.\\r\\n\\r\\nExample:\\r\\n\\r\\n ```html\\r\\n<md-progress-bar mode=\\\"indeterminate\\\" color=\\\"primary\\\"></md-progress-bar>\\r\\n<md-progress-bar mode=\\\"indeterminate\\\" color=\\\"accent\\\"></md-progress-bar>\\r\\n<md-progress-bar mode=\\\"indeterminate\\\" color=\\\"warn\\\"></md-progress-bar>\\r\\n ```\\r\\n\\r\\n### Accessibility\\r\\n\\r\\n * ARIA attributes are applied to the indicator defining the valuemin, valuemax and valuenow attributes.\\r\\n\\r\\n\\r\\n### API Summary\\r\\n\\r\\nProperties:\\r\\n\\r\\n| Name            | Type                                                     | Description |\\r\\n| ---             | ---                                                      | --- |\\r\\n| `color`         | `\\\"primary\\\" | \\\"accent\\\" | \\\"warn\\\"`                          | The color palette of the progress indicator |\\r\\n| `mode`          | `\\\"determinate\\\" | \\\"indeterminate\\\" | \\\"buffer\\\" | \\\"query\\\"`   | The mode of the progress indicator |\\r\\n| `value`         | number                                                   | The current progress percentage for determinate indicators |\\r\\n| `bufferValue`   | number                                                   | The current progress percentage for buffer secondary indicators |\\r\\n\"},{\"id\":\"progress-circle\",\"content\":\"# md-progress-circle\\r\\n\\r\\n`md-progress-circle` is a component for indicating progress and activity, matching the spec of \\r\\n[Material Design Progress & Activity](https://www.google.com/design/spec/components/progress-activity.html).\\r\\n\\r\\n### Progress Modes\\r\\n\\r\\nThere are two modes:\\r\\n 1. Determinate - `<md-progress-circle mode=\\\"determinate\\\">`\\r\\n    * Indicates how long an operation will take when the percentage complete is detectable. \\r\\n 2. Indeterminate - `<md-progress-circle mode=\\\"indeterminate\\\">` or `<md-spinner>`\\r\\n    * Indicates the user must wait while something finishes when it’s not necessary or possible to indicate how long it\\r\\n      will take.\\r\\n\\r\\nExample:\\r\\n\\r\\n ```html\\r\\n<md-progress-circle mode=\\\"determinate\\\" [value]=\\\"myValue\\\"></md-progress-circle>\\r\\n<md-progress-circle mode=\\\"indeterminate\\\"></md-progress-circle>\\r\\n<md-spinner></md-spinner>\\r\\n ```\\r\\n\\r\\n### Theming\\r\\n\\r\\nAll progress indicators can be themed to match your \\\"primary\\\" palette, your \\\"accent\\\" palette, or your \\\"warn\\\" palette using the appropriate class.\\r\\n\\r\\nExample:\\r\\n\\r\\n ```html\\r\\n<md-progress-circle mode=\\\"indeterminate\\\" color=\\\"primary\\\"></md-progress-circle>\\r\\n<md-progress-circle mode=\\\"indeterminate\\\" color=\\\"accent\\\"></md-progress-circle>\\r\\n<md-progress-circle mode=\\\"indeterminate\\\" color=\\\"warn\\\"></md-progress-circle>\\r\\n ```\\r\\n\\r\\n### Accessibility\\r\\n\\r\\n * ARIA attributes are applied to the indicator defining the valuemin, valuemax and valuenow attributes.\\r\\n\\r\\n### Upcoming work\\r\\n\\r\\n * Adding ARIA attribute for progressbar \\\"for\\\".\\r\\n\\r\\n### API Summary\\r\\n\\r\\nProperties:\\r\\n\\r\\n| Name      | Type                              | Description |\\r\\n| ---       | ---                               | --- |\\r\\n| `color`   | `\\\"primary\\\"|\\\"accent\\\"|\\\"warn\\\"`       | The color palette of the progress indicator |\\r\\n| `mode`    | `\\\"determinate\\\"|\\\"indeterminate\\\"`   | The mode of the progress indicator |\\r\\n| `value`   | number                            | The current progress percentage for determinate indicators |\\r\\n\"},{\"id\":\"radio\",\"content\":\"# MdRadio\\r\\nRadio buttons allow the user to select one option from a set. Use radio buttons for exclusive selection if you think that the user needs to see all available options side-by-side.\\r\\n\\r\\n![Preview](https://material.angularjs.org/material2_assets/radio/radios.png)\\r\\n\\r\\n### Setup\\r\\nImporting the symbols:\\r\\n```ts\\r\\nimport { MdRadioModule } from '@angular2-material/radio';\\r\\n```\\r\\n\\r\\nAdding providers and directives:\\r\\n```ts\\r\\n@NgModule({\\r\\n  imports: [MdRadioModule.forRoot()],\\r\\n  ...\\r\\n})\\r\\nexport class MyAppModule { }\\r\\n```\\r\\n\\r\\n### Examples\\r\\nA basic radio group would have the following markup.\\r\\n```html\\r\\n<md-radio-group>\\r\\n  <md-radio-button value=\\\"option_1\\\">1</md-radio-button>\\r\\n  <md-radio-button value=\\\"option_2\\\">2</md-radio-button>\\r\\n</md-radio-group>\\r\\n```\\r\\n\\r\\nA dynamic example, populated from a `data` variable:\\r\\n```html\\r\\n<md-radio-group [(value)]=\\\"groupValue\\\">\\r\\n  <md-radio-button *ngFor=\\\"let d of data\\\" [value]=\\\"d.value\\\">\\r\\n    {{d.label}}\\r\\n  </md-radio-button>\\r\\n</md-radio-group>\\r\\n```\\r\\n\\r\\nA dynamic example for use inside a form showing support for `[(ngModel)]`:\\r\\n```html\\r\\n<md-radio-group [(ngModel)]=\\\"chosenOption\\\">\\r\\n  <md-radio-button *ngFor=\\\"let o of options\\\" [value]=\\\"o.value\\\">\\r\\n    {{o.label}}\\r\\n  </md-radio-button>\\r\\n</md-radio-group>\\r\\n```\\r\\n\\r\\n## `<md-radio-group>`\\r\\n### Properties\\r\\n\\r\\n| Name | Type | Description |\\r\\n| --- | --- | --- |\\r\\n| `selected` | `MdRadioButton` | The currently selected button. |\\r\\n| `value` | `any` | The current value for this group. |\\r\\n| `disabled` | `boolean` | Whether the group is disabled. |\\r\\n\\r\\nWhen selection is changed, an event is emitted from the `change` EventEmitter property.\\r\\n\\r\\n### Notes\\r\\nThe `md-radio-group` component has no button initially selected.\\r\\n\\r\\n## `<md-radio-button>`\\r\\n### Properties\\r\\n\\r\\n| Name (attribute) | Type | Description |\\r\\n| --- | --- | --- |\\r\\n| `id` | `string` | The unique ID of this radio button. |\\r\\n| `name` | `string` | Group name, defaults to parent radio group if present. |\\r\\n| `value` | `any` | The value of this radio button. |\\r\\n| `checked` | `boolean` | Whether the radio is checked. |\\r\\n| `disabled` | `boolean` | Whether the radio is disabled. |\\r\\n| `aria-label` | `string` | Used to set the `aria-label` attribute of the underlying input element. |\\r\\n| `aria-labelledby` | `string` | Used to set the `aria-labelledby` attribute of the underlying input element.\\r\\n                                 If provided, this attribute takes precedence as the element's text alternative. |\\r\\n\\r\\nWhen checked, an event is emitted from the `change` EventEmitter property.\\r\\n\\r\\n### Notes\\r\\n* The `md-radio-button` component by default uses the accent color from the theme palette.\\r\\n\"},{\"id\":\"sidenav\",\"content\":\"# MdSidenav\\r\\n\\r\\nMdSidenav is the side navigation component for Material 2. It is composed of two components; `<md-sidenav-layout>` and `<md-sidenav>`.\\r\\n\\r\\n## Screenshots\\r\\n\\r\\n<img src=\\\"https://material.angularjs.org/material2_assets/sidenav-example.png\\\">\\r\\n\\r\\n\\r\\n## `<md-sidenav-layout>`\\r\\n\\r\\nThe parent component. Contains the code necessary to coordinate one or two sidenav and the backdrop.\\r\\n\\r\\n### Properties\\r\\n\\r\\n| Name | Description |\\r\\n| --- | --- |\\r\\n| `start` | The start aligned `MdSidenav` instance, or `null` if none is specified. In LTR direction, this is the sidenav shown on the left side. In RTL direction, it will show on the right. There can only be one sidenav on either side. |\\r\\n| `end` | The end aligned `MdSidenav` instance, or `null` if none is specified. This is the sidenav opposing the `start` sidenav. There can only be one sidenav on either side. |\\r\\n\\r\\n## `<md-sidenav>`\\r\\n\\r\\nThe sidenav panel.\\r\\n\\r\\n### Bound Properties\\r\\n\\r\\n| Name | Type | Description |\\r\\n| --- | --- | --- |\\r\\n| `align` | `\\\"start\\\"|\\\"end\\\"` | The alignment of this sidenav. In LTR direction, `\\\"start\\\"` will be shown on the left, `\\\"end\\\"` on the right. In RTL, it is reversed. `\\\"start\\\"` is used by default. An exception will be thrown if there are more than 1 sidenav on either side. |\\r\\n| `mode` | `\\\"over\\\"|\\\"push\\\"|\\\"side\\\"` | The mode or styling of the sidenav, default being `\\\"over\\\"`. With `\\\"over\\\"` the sidenav will appear above the content, and a backdrop will be shown. With `\\\"push\\\"` the sidenav will push the content of the `<md-sidenav-layout>` to the side, and show a backdrop over it. `\\\"side\\\"` will resize the content and keep the sidenav opened. Clicking the backdrop will close sidenavs that do not have `mode=\\\"side\\\"`. |\\r\\n| `opened` | `boolean` | Whether or not the sidenav is opened. Use this binding to open/close the sidenav. |\\r\\n\\r\\n### Events\\r\\n\\r\\n| Name | Description |\\r\\n| --- | --- |\\r\\n| `open-start` | Emitted when the sidenav is starting opening. This should only be used to coordinate animations. |\\r\\n| `close-start` | Emitted when the sidenav is starting closing. This should only be used to coordinate animations. |\\r\\n| `open` | Emitted when the sidenav is done opening. Use this for, e.g., setting focus on controls or updating state. |\\r\\n| `close` | Emitted when the sidenav is done closing. |\\r\\n\\r\\n### Methods\\r\\n\\r\\n| Signature | Description |\\r\\n| --- | --- |\\r\\n| `open(): Promise<void>` | Open the sidenav. Equivalent to `opened = true`. Returns a promise that will resolve when the animation completes, or be rejected if the animation was cancelled. |\\r\\n| `close(): Promise<void>` | Close the sidenav. Equivalent to `opened = false`. Returns a promise that will resolve when the animation completes, or be rejected if the animation was cancelled. |\\r\\n| `toggle(): Promise<void>` | Toggle the sidenav. This is equivalent to `opened = !opened`. Returns a promise that will resolve when the animation completes, or be rejected if the animation was cancelled. |\\r\\n\\r\\n### Notes\\r\\n\\r\\nThe `<md-sidenav>` will resize based on its content. You can also set its width in CSS, like so:\\r\\n\\r\\n```css\\r\\nmd-sidenav {\\r\\n  width: 200px;\\r\\n}\\r\\n```\\r\\n\\r\\nTry to avoid percent based width as `resize` events are not (yet) supported.\\r\\n\\r\\n## Examples\\r\\n\\r\\nHere's a simple example of using the sidenav:\\r\\n\\r\\n```html\\r\\n<app>\\r\\n  <md-sidenav-layout>\\r\\n    <md-sidenav #start (open)=\\\"mybutton.focus()\\\">\\r\\n      Start Sidenav.\\r\\n      <br>\\r\\n      <button md-button #mybutton (click)=\\\"start.close()\\\">Close</button>\\r\\n    </md-sidenav>\\r\\n    <md-sidenav #end align=\\\"end\\\">\\r\\n      End Sidenav.\\r\\n      <button md-button (click)=\\\"end.close()\\\">Close</button>\\r\\n    </md-sidenav>\\r\\n\\r\\n    My regular content. This will be moved into the proper DOM at runtime.\\r\\n  </md-sidenav-layout>\\r\\n</app>\\r\\n```\\r\\n\\r\\n\"},{\"id\":\"slide-toggle\",\"content\":\"# MdSlideToggle\\r\\n`MdSlideToggle` is a two-state control, which can be also called `switch`\\r\\n\\r\\n### Screenshots\\r\\n![image](https://material.angularjs.org/material2_assets/slide-toggle/toggles.png)\\r\\n\\r\\n## `<md-slide-toggle>`\\r\\n### Bound Properties\\r\\n\\r\\n| Name | Type | Description |\\r\\n| --- | --- | --- |\\r\\n| `disabled` | boolean | Disables the `slide-toggle` |\\r\\n| `color` | `\\\"primary\\\" | \\\"accent\\\" | \\\"warn\\\"` | The color palette of the `slide-toggle` |\\r\\n| `checked` | boolean | Sets the value of the `slide-toggle` |\\r\\n\\r\\n### Events\\r\\n| Name | Type | Description |\\r\\n| --- | --- | --- |\\r\\n| `change` | boolean | Event will be emitted on every value change.<br/>It emits the new `checked` value. |\\r\\n\\r\\n### Examples\\r\\nA basic slide-toggle would have the following markup.\\r\\n```html\\r\\n<md-slide-toggle [(ngModel)]=\\\"slideToggleModel\\\">\\r\\n  Default Slide Toggle\\r\\n</md-slide-toggle>\\r\\n```\\r\\n\\r\\nSlide toggle can be also disabled.\\r\\n```html\\r\\n<md-slide-toggle disabled>\\r\\n  Disabled Slide Toggle\\r\\n</md-slide-toggle>\\r\\n```\\r\\n\\r\\nThe `slide-toggle` can be also set to checked without a `ngModel`\\r\\n```html\\r\\n<md-slide-toggle [checked]=\\\"isChecked\\\">\\r\\n  Input Binding\\r\\n</md-slide-toggle>\\r\\n```\\r\\n\\r\\nYou may also want to listen on changes of the `slide-toggle`<br/>\\r\\nThe `slide-toggle` always emits the new value to the event binding `(change)`\\r\\n```html\\r\\n<md-slide-toggle (change)=\\\"printValue($event)\\\">\\r\\n  Prints Value on Change\\r\\n</md-slide-toggle>\\r\\n```\\r\\n\\r\\n## Theming\\r\\nA slide-toggle is default using the `accent` palette for its styling.\\r\\n\\r\\nModifying the color on a `slide-toggle` can be easily done, by using the following markup.\\r\\n```html\\r\\n<md-slide-toggle color=\\\"primary\\\">\\r\\n  Primary Slide Toggle\\r\\n</md-slide-toggle>\\r\\n```\\r\\n\\r\\nThe color can be also set dynamically by using a property binding.\\r\\n```html\\r\\n<md-slide-toggle [color]=\\\"myColor\\\">\\r\\n  Dynamic Color\\r\\n</md-slide-toggle>\\r\\n```\"},{\"id\":\"slider\",\"content\":\"# md-slider\\r\\n\\r\\n`MdSlider` is a component that allows users to select from a range of values by moving the slider\\r\\nthumb.\\r\\nYou can read more about the slider in the\\r\\n[Material Design spec](https://material.google.com/components/sliders.html).\\r\\n\\r\\n## Not Yet Implemented\\r\\n\\r\\n* Thumb Label\\r\\n* Color\\r\\n* Invert\\r\\n* NgModel\\r\\n* Keyboard Movement\\r\\n* Focus Ring\\r\\n* Smaller/grey thumb at minimum value\\r\\n\\r\\n## Usage\\r\\n\\r\\n### Setup\\r\\n\\r\\nImporting the module:\\r\\n```ts\\r\\n @NgModule({\\r\\n    imports: [MdSliderModule.forRoot()],\\r\\n    ...\\r\\n })\\r\\n export class MyAppModule { }\\r\\n```\\r\\n\\r\\n### Basic Usage\\r\\n\\r\\n`md-slider` can be used on its own as a slider with a min of `0`, a max of `100`, and a step of `1`.\\r\\n\\r\\n```html\\r\\n<md-slider></md-slider>\\r\\n```\\r\\n\\r\\n### Slider with Minimum and Maximum Values\\r\\n\\r\\nThe min and max on a `md-slider` can be set to give a different range of values.\\r\\nThese can be set individually and do not need to both be set.\\r\\n\\r\\n```html\\r\\n<md-slider min=\\\"1\\\" max=\\\"5\\\"></md-slider>\\r\\n```\\r\\n\\r\\n### Disabled Slider\\r\\n\\r\\n`md-slider` can be disabled so that the value cannot be changed and the thumb cannot be moved.\\r\\n\\r\\n```html\\r\\n<md-slider disabled></md-slider>\\r\\n```\\r\\n\\r\\n### Slider with Value\\r\\n\\r\\n`md-slider` can have a value defined so that it starts at a specific value on the slider.\\r\\n\\r\\n```html\\r\\n<md-slider value=\\\"24\\\"></md-slider>\\r\\n```\\r\\n\\r\\n### Slider with Step\\r\\n\\r\\n`md-slider` can have the step defined which declares where the thumb can snap to.\\r\\n\\r\\n```html\\r\\n<md-slider step=\\\"5\\\"></md-slider>\\r\\n```\\r\\n\\r\\n### Slider with Tick Interval\\r\\n\\r\\n`md-slider` can have a tick interval set to a number or to `auto`.\\r\\n`auto` will automatically draw tick marks on steps that are at least 30px apart and will always draw\\r\\ntick marks at the beginning and end of the slider.\\r\\nSetting `tick-interval` to a number will draw a tick mark at every `tick-interval` steps. An example\\r\\nof this is a `tick-interval` of `3` with a `step` of `4` will draw tick marks at every `3` steps,\\r\\nwhich is the same as every `12` values.\\r\\n\\r\\n```html\\r\\n<md-slider tick-interval=\\\"auto\\\"></md-slider>\\r\\n<md-slider tick-interval=\\\"3\\\" step=\\\"4\\\"></md-slider>\\r\\n```\\r\\n\\r\\n## `<md-slider>`\\r\\n\\r\\n### Bound Properties\\r\\n\\r\\n| Name | Type | Description |\\r\\n| --- | --- | --- |\\r\\n| `min` | number | Optional, the minimum number for the slider. Default = `0`. |\\r\\n| `max` | number | Optional, the maximum number for the slider. Default = `100`. |\\r\\n| `value` | number | Optional, the value to start the slider at. |\\r\\n| `tick-interval` | `\\\"auto\\\" | number` | Optional, how many steps between tick marks. |\\r\\n| `step` | number | Optional, declares where the thumb will snap to. Default = `1`. |\\r\\n| `disabled` | boolean | Optional, whether or not the slider is disabled. Default = `false`. |\\r\\n\"},{\"id\":\"snack-bar\",\"content\":\"# MdSnackBar\\r\\n`MdSnackBar` is a service, which opens snack bar notifications in the view.\\r\\n\\r\\n### Methods\\r\\n\\r\\n| Name |  Description |\\r\\n| --- | --- |\\r\\n| `open(message: string,<br>  actionLabel: string, config: MdSnackBarConfig): MdSnackBarRef<SimpleSnackBar>` | Creates and opens a simple snack bar noticiation matching material spec. |\\r\\n| `openFromComponent(component: ComponentType<T>, config: MdSnackBarConfig): MdSnackBarRef<T>` | Creates and opens a snack bar noticiation with a custom component as content. |\\r\\n\\r\\n### Config\\r\\n\\r\\n| Key |  Description |\\r\\n| --- | --- |\\r\\n| `viewContainerRef: ViewContainerRef` | The view container ref to attach the snack bar to. |\\r\\n| `role: AriaLivePoliteness = 'assertive'` | The politeness level to announce the snack bar with. |\\r\\n| `announcementMessage: string` | The message to announce with the snack bar. |\\r\\n\\r\\n\\r\\n### Example\\r\\nThe service can be injected in a component.\\r\\n```ts\\r\\n@Component({\\r\\n  selector: 'my-component'\\r\\n  providers: [MdSnackBar]\\r\\n})\\r\\nexport class MyComponent {\\r\\n\\r\\n constructor(snackBar: MdSnackBar\\r\\n             viewContainerRef: ViewContainerRef) {}\\r\\n\\r\\n failedAttempt() {\\r\\n   config = new MdSnackBarConfig(this.viewContainerRef);\\r\\n   this.snackBar.open('It didn\\\\'t quite work!', 'Try Again', config);\\r\\n }\\r\\n\\r\\n}\\r\\n```\"},{\"id\":\"tabs\",\"content\":\"# MdTabGroup\\r\\nTab groups allow the user to organize their content by labels such that only one tab is visible at any given time.\\r\\n\\r\\n## `<md-tab-group>`\\r\\n### Properties\\r\\n\\r\\n| Name | Type | Description |\\r\\n| --- | --- | --- |\\r\\n| `selectedIndex` | `number` | The index of the currently active tab. |\\r\\n\\r\\n### Events\\r\\n\\r\\n| Name | Type | Description |\\r\\n| --- | --- | --- |\\r\\n| `focusChange` | `Event` | Fired when focus changes from one label to another |\\r\\n| `selectChange` | `Event` | Fired when the selected tab changes |\\r\\n\\r\\n### Examples\\r\\nA basic tab group would have the following markup.\\r\\n```html\\r\\n<md-tab-group>\\r\\n  <md-tab>\\r\\n    <template md-tab-label>One</template>\\r\\n    <template md-tab-content>\\r\\n      <h1>Some tab content</h1>\\r\\n      <p>...</p>\\r\\n    </template>\\r\\n  </md-tab>\\r\\n  <md-tab>\\r\\n    <template md-tab-label>Two</template>\\r\\n    <template md-tab-content>\\r\\n      <h1>Some more tab content</h1>\\r\\n      <p>...</p>\\r\\n    </template>\\r\\n  </md-tab>\\r\\n</md-tab-group>\\r\\n```\\r\\n\\r\\nIt is also possible to specifiy the active tab by using the `selectedIndex` property.\\r\\n\\r\\n```html\\r\\n<md-tab-group [selectedIndex]=\\\"1\\\">\\r\\n  ...\\r\\n</md-tab-group>\\r\\n```\\r\\n\\r\\n**Note**: The index always starts counting from `zero`.\\r\\n\"},{\"id\":\"toolbar\",\"content\":\"# MdToolbar\\r\\n`MdToolbar` is a vertical aligned bar, which can hold the application title or actions.\\r\\n\\r\\n### Screenshots\\r\\n![Preview](https://cloud.githubusercontent.com/assets/4987015/13727769/6d952c78-e900-11e5-890a-ccfd46996812.png)\\r\\n\\r\\n## `<md-toolbar>`\\r\\n### Bound Properties\\r\\n\\r\\n| Name | Type | Description |\\r\\n| --- | --- | --- |\\r\\n| `color` | `\\\"primary\\\" | \\\"accent\\\" | \\\"warn\\\"` | The color palette for the toolbar |\\r\\n\\r\\n### Notes\\r\\nThe `md-toolbar` component will use by default the background palette.\\r\\n\\r\\n### Examples\\r\\nA basic toolbar would have the following markup.\\r\\n```html\\r\\n<md-toolbar [color]=\\\"myColor\\\">\\r\\n  <span>My Application Title</span>\\r\\n</md-toolbar>\\r\\n```\\r\\n\\r\\nToolbars can also have multiple rows.<br/>\\r\\nMultiple rows inside of a `md-toolbar` can be added by appending as many as needed `<md-toolbar-row>` elements.\\r\\n\\r\\n```html\\r\\n<md-toolbar [color]=\\\"myColor\\\">\\r\\n  <span>First Row</span>\\r\\n  \\r\\n  <md-toolbar-row>\\r\\n    <span>Second Row</span>\\r\\n  </md-toolbar-row>\\r\\n  \\r\\n  <md-toolbar-row>\\r\\n    <span>Third Row</span>\\r\\n  </md-toolbar-row>\\r\\n</md-toolbar>\\r\\n```\\r\\n\\r\\n### Alignment\\r\\nThe alignment inside of a toolbar row can be easily done by using the flexbox layout.<br/>\\r\\nFor example, the following markup aligns the items on the `right`.\\r\\n\\r\\nCustom HTML\\r\\n```html\\r\\n<md-toolbar color=\\\"primary\\\">\\r\\n  <span>Application Title</span>\\r\\n  \\r\\n  <!-- This fills the remaining space of the current row -->\\r\\n  <span class=\\\"example-fill-remaining-space\\\"></span>\\r\\n  \\r\\n  <span>Right Aligned Text</span>\\r\\n</md-toolbar>\\r\\n```\\r\\n\\r\\nCustom SCSS\\r\\n```scss\\r\\n.example-fill-remaining-space {\\r\\n  // This fills the remaining space, by using flexbox. \\r\\n  // Every toolbar row uses a flexbox row layout.\\r\\n  flex: 1 1 auto;\\r\\n}\\r\\n```\\r\\n\\r\\nOutput\\r\\n![image](https://cloud.githubusercontent.com/assets/4987015/13730760/0864894e-e959-11e5-9312-7f3cb990d80a.png)\\r\\n\"},{\"id\":\"tooltip\",\"content\":\"# MdTooltip\\r\\nTooltip allows the user to specify text to be displayed when the mouse hover over an element.\\r\\n\\r\\n### Setup\\r\\nFor alpha.7, you need to include the overlay styles in your app via a `link` element. This will\\r\\nlook something like\\r\\n```html\\r\\n<link href=\\\"vendor/@angular2-material/core/overlay/overlay.css\\\" rel=\\\"stylesheet\\\">\\r\\n```\\r\\n\\r\\n\\r\\n### Examples\\r\\nA button with a tooltip\\r\\n```html\\r\\n<button md-tooltip=\\\"some message\\\" tooltip-position=\\\"below\\\">Button</button>\\r\\n```\\r\\n\\r\\n## `[md-tooltip]`\\r\\n### Properties\\r\\n\\r\\n| Name | Type | Description |\\r\\n| --- | --- | --- |\\r\\n| `md-tooltip` | `string` | The message to be displayed. |\\r\\n| `tooltip-position` | `\\\"above\\\"|\\\"below\\\"|\\\"before\\\"|\\\"after\\\"` | The position of the tooltip. |\\r\\n\\r\\n### Methods\\r\\n\\r\\n| Name | Description |\\r\\n| --- | --- | --- |\\r\\n| `show` | Displays the tooltip. |\\r\\n| `hide` | Removes the tooltip. |\\r\\n| `toggle` | Displays or hides the tooltip. |\\r\\n\"}])\n\nC:\\jbart5-ng\\node_modules\\@angular\\material\\material.umd.js:\n 1578      OverlayModule = __decorate$5([\n 1579          _angular_core.NgModule({\n 1580:             imports: [PortalModule],\n 1581              exports: [ConnectedOverlayDirective, OverlayOrigin],\n 1582              declarations: [ConnectedOverlayDirective, OverlayOrigin],\n ....\n 2049      MdCoreModule = __decorate([\n 2050          _angular_core.NgModule({\n 2051:             imports: [MdLineModule, RtlModule, MdRippleModule, PortalModule, OverlayModule, A11yModule],\n 2052              exports: [MdLineModule, RtlModule, MdRippleModule, PortalModule, OverlayModule, A11yModule],\n 2053          }), \n ....\n 2479      MdButtonToggleModule = __decorate$16([\n 2480          _angular_core.NgModule({\n 2481:             imports: [_angular_forms.FormsModule],\n 2482              exports: [MdButtonToggleGroup, MdButtonToggleGroupMultiple, MdButtonToggle],\n 2483              declarations: [MdButtonToggleGroup, MdButtonToggleGroupMultiple, MdButtonToggle],\n ....\n 2671      MdButtonModule = __decorate$17([\n 2672          _angular_core.NgModule({\n 2673:             imports: [_angular_common.CommonModule, MdRippleModule],\n 2674              exports: [MdButton, MdAnchor],\n 2675              declarations: [MdButton, MdAnchor],\n ....\n 3503      MdSelectModule = __decorate$20([\n 3504          _angular_core.NgModule({\n 3505:             imports: [],\n 3506              exports: [MdSelect],\n 3507              declarations: [MdSelect],\n ....\n 3813      MdSlideToggleModule = __decorate$22([\n 3814          _angular_core.NgModule({\n 3815:             imports: [_angular_forms.FormsModule],\n 3816              exports: [MdSlideToggle],\n 3817              declarations: [MdSlideToggle],\n ....\n 4238      MdSliderModule = __decorate$23([\n 4239          _angular_core.NgModule({\n 4240:             imports: [_angular_forms.FormsModule],\n 4241              exports: [MdSlider],\n 4242              declarations: [MdSlider],\n ....\n 4716      MdSidenavModule = __decorate$24([\n 4717          _angular_core.NgModule({\n 4718:             imports: [_angular_common.CommonModule],\n 4719              exports: [MdSidenavLayout, MdSidenav],\n 4720              declarations: [MdSidenavLayout, MdSidenav],\n ....\n 4826      MdListModule = __decorate$25([\n 4827          _angular_core.NgModule({\n 4828:             imports: [MdLineModule],\n 4829              exports: [MdList, MdListItem, MdListDivider, MdListAvatar, MdLineModule],\n 4830              declarations: [MdList, MdListItem, MdListDivider, MdListAvatar],\n ....\n 5427      MdGridListModule = __decorate$26([\n 5428          _angular_core.NgModule({\n 5429:             imports: [MdLineModule],\n 5430              exports: [MdGridList, MdGridTile, MdGridTileText, MdLineModule],\n 5431              declarations: [MdGridList, MdGridTile, MdGridTileText],\n ....\n 6220      MdIconModule = __decorate$29([\n 6221          _angular_core.NgModule({\n 6222:             imports: [_angular_http.HttpModule],\n 6223              exports: [MdIcon],\n 6224              declarations: [MdIcon],\n ....\n 6652      MdProgressBarModule = __decorate$32([\n 6653          _angular_core.NgModule({\n 6654:             imports: [_angular_common.CommonModule],\n 6655              exports: [MdProgressBar],\n 6656              declarations: [MdProgressBar],\n ....\n 7118          _angular_core.NgModule({\n 7119              declarations: [MdPlaceholder, MdInput, MdHint],\n 7120:             imports: [_angular_common.CommonModule, _angular_forms.FormsModule],\n 7121              exports: [MdPlaceholder, MdInput, MdHint],\n 7122          }), \n ....\n 7350      MdSnackBarModule = __decorate$34([\n 7351          _angular_core.NgModule({\n 7352:             imports: [OverlayModule, PortalModule, _angular_common.CommonModule],\n 7353              exports: [MdSnackBarContainer],\n 7354              declarations: [MdSnackBarContainer, SimpleSnackBar],\n ....\n 7764      MdTabsModule = __decorate$37([\n 7765          _angular_core.NgModule({\n 7766:             imports: [_angular_common.CommonModule, PortalModule],\n 7767              // Don't export MdInkBar or MdTabLabelWrapper, as they are internal implementatino details.\n 7768              exports: [MdTabGroup, MdTabLabel, MdTabContent, MdTab],\n ....\n 8050      MdTooltipModule = __decorate$43([\n 8051          _angular_core.NgModule({\n 8052:             imports: [OverlayModule],\n 8053              exports: [MdTooltip, TooltipComponent],\n 8054              declarations: [MdTooltip, TooltipComponent],\n ....\n 8507      MdMenuModule = __decorate$44([\n 8508          _angular_core.NgModule({\n 8509:             imports: [OverlayModule, _angular_common.CommonModule],\n 8510              exports: [MdMenu, MdMenuItem, MdMenuTrigger],\n 8511              declarations: [MdMenu, MdMenuItem, MdMenuTrigger],\n ....\n 8774      MdDialogModule = __decorate$48([\n 8775          _angular_core.NgModule({\n 8776:             imports: [OverlayModule, PortalModule, A11yModule],\n 8777              exports: [MdDialogContainer],\n 8778              declarations: [MdDialogContainer],\n ....\n 8826      MaterialRootModule = __decorate$15([\n 8827          _angular_core.NgModule({\n 8828:             imports: [\n 8829                  MdButtonModule.forRoot(),\n 8830                  MdCardModule.forRoot(),\n ....\n 8869      MaterialModule = __decorate$15([\n 8870          _angular_core.NgModule({\n 8871:             imports: MATERIAL_MODULES,\n 8872              exports: MATERIAL_MODULES,\n 8873          }), \n\n45 matches across 10 files\n\n\nSearching 130 files for \"md-tabs\"\n\nC:\\jbart5-ng\\src\\ui\\md-styles\\tabs-md.ts:\n    6  //jb_ui.registerDirectives({MD_TABS_DIRECTIVES: MD_TABS_DIRECTIVES, MdToolbar:MdToolbar,TABS_INTERNAL_DIRECTIVES: TABS_INTERNAL_DIRECTIVES});\n    7  \n    8: jb.component('tabs.md-tabs', {\n    9    params: [\n   10      { id: 'tabWidth', as: 'number' }\n\nC:\\jbart5-ng\\projects\\material-demo\\docs.css:\n  732    overflow: hidden;\n  733  }\n  734: .demo-source-tabs md-tabs-wrapper {\n  735    background-color: #2C80D2 !important;\n  736  }\n  737  \n  738: md-tabs.demo-source-tabs md-tab,\n  739: md-tabs.demo-source-tabs .md-header {\n  740    background-color: #444444 !important;\n  741  }\n  742  \n  743  \n  744: md-tabs.demo-source-tabs md-tab-label {\n  745    color: #ccc !important;\n  746  }\n  747  \n  748: md-tabs.demo-source-tabs .active md-tab-label {\n  749    color: #fff !important;\n  750  }\n  ...\n  990    border: none;\n  991  }\n  992: .demo-container > md-tabs {\n  993    border-radius: 0;\n  994  }\n\nC:\\jbart5-ng\\projects\\studio\\studio-popups.ts:\n  172          \n  173        }, \n  174:       style :{$: 'tabs.md-tabs' }\n  175      }, \n  176      title: 'responsive'\n\nC:\\jbart5-ng\\projects\\ui-tests\\md-tests.ts:\n   99  //})\n  100  \n  101: jb.component('md-test.md-tabs', {\n  102    type: 'test',\n  103    impl :{$: 'ng2-ui-test', \n  104    control :{$: 'tabs',\n  105:       style :{$: 'tabs.md-tabs' },\n  106        tabs:[\n  107          {$: 'group', title: 'tab1', controls :{$: 'label', title: 'in tab1' }},\n\nC:\\jbart5-ng\\projects\\ui-tests\\ui-tests-old.js:\n  140    // },\n  141    \n  142: 'md-tabs' :{$: 'ng2-ui-test', \n  143    control :{$: 'tabs',\n  144:       style :{$: 'tabs.md-tabs' },\n  145        tabs:[\n  146          {$: 'group', title: 'tab1', controls :{$: 'label', title: 'in tab1' }},\n\n12 matches across 5 files\n\n\nSearching 130 files for \"ui-test.markdown\"\n\nC:\\jbart5-ng\\projects\\ui-tests\\ui-tests.ts:\n  750  })\n  751  \n  752: jb.component('ui-test.markdown', {\n  753    impl :{$: 'ng2-ui-test',  \n  754      control :{$: 'markdown', markdown: `| Day     | Meal    | Price |\n\n1 match in 1 file\n",
			"settings":
			{
				"buffer_size": 456295,
				"line_ending": "Windows",
				"name": "Find Results",
				"scratch": true
			}
		},
		{
			"file": "/C/jbart5-ng/node_modules/@angular/material/material.umd.js",
			"settings":
			{
				"buffer_size": 440135,
				"line_ending": "Unix"
			}
		},
		{
			"file": "/C/jbart5-ng/src/ui/styles.js",
			"settings":
			{
				"buffer_size": 1612,
				"line_ending": "Windows"
			}
		},
		{
			"file": "/C/jbart5-ng/src/testing/ui-testers.ts",
			"settings":
			{
				"buffer_size": 2315,
				"line_ending": "Windows"
			}
		},
		{
			"file": "/C/jbart5-ng/src/ui/ui-common.js",
			"settings":
			{
				"buffer_size": 2522,
				"line_ending": "Windows"
			}
		},
		{
			"file": "/C/jbart5-ng/src/ui/tree/tree.ts",
			"settings":
			{
				"buffer_size": 11211,
				"line_ending": "Windows"
			}
		},
		{
			"file": "/C/jbart5-ng/src/ui/md-styles/input-md.ts",
			"settings":
			{
				"buffer_size": 706,
				"line_ending": "Windows"
			}
		},
		{
			"file": "/C/jbart5-ng/src/ui/md-styles/layout-md.ts",
			"settings":
			{
				"buffer_size": 4473,
				"line_ending": "Windows"
			}
		},
		{
			"file": "/C/jbart5-ng/src/ui/md-styles/sidenav-md.ts",
			"settings":
			{
				"buffer_size": 840,
				"line_ending": "Windows"
			}
		},
		{
			"file": "/C/jbart5-ng/src/ui/md-styles/tabs-md.ts",
			"settings":
			{
				"buffer_size": 782,
				"line_ending": "Windows"
			}
		},
		{
			"file": "/C/jbart5-ng/projects/ui-tests/ui-tests.ts",
			"settings":
			{
				"buffer_size": 22351,
				"line_ending": "Windows"
			}
		},
		{
			"file": "/C/jbart5-ng/src/ui/md-styles/button-md.ts",
			"settings":
			{
				"buffer_size": 3902,
				"line_ending": "Windows"
			}
		},
		{
			"contents": "import {jb} from 'jb-core';\nimport * as jb_ui from 'jb-ui';\n\njb.component('layout.vertical', {\n  type: 'group.style',\n  params: [\n    { id: 'spacing', as: 'number', defaultValue: 3 }\n  ],\n  impl :{$: 'customStyle',\n    template: `<div class=\"jb-group\">\n        <jb_comp *ngFor=\"let ctrl of ctrls\" [comp]=\"ctrl.comp\" [flatten]=\"true\" class=\"group-item\"></jb_comp>\n      </div>`,\n      css: `.group-item { margin-bottom: %$spacing%px; display: block }\n        .group-item:last-child { margin-bottom:0 }`,\n    features :{$: 'group.initGroup'}\n  }\n})\n\njb.component('layout.horizontal', {\n  type: 'group.style',\n  params: [\n    { id: 'spacing', as: 'number', defaultValue: 3 }\n  ],\n  impl :{$: 'customStyle',\n    template: `<div class=\"jb-group\">\n        <jb_comp *ngFor=\"let ctrl of ctrls\" [comp]=\"ctrl.comp\" [flatten]=\"true\" class=\"group-item\"></jb_comp>\n      </div>`,\n    css: `{display: flex}\n        .group-item { margin-right: %$spacing%px }\n        .group-item:last-child { margin-right:0 }`,\n    features :{$: 'group.initGroup'}\n  }\n})\n\njb.component('layout.flex', {\n  type: 'group.style',\n  params: [\n      { id: 'align', as: 'string', options: ',flex-start,flex-end,center,space-between,space-around' },\n      { id: 'direction', as: 'string', options: ',row,row-reverse,column,column-reverse' },\n      { id: 'wrap', as: 'string', options:',wrap' },\n  ],\n  impl :{$: 'customStyle',\n    template: `<div class=\"jb-group\">\n        <jb_comp *ngFor=\"let ctrl of ctrls\" [comp]=\"ctrl.comp\" [flatten]=\"true\" class=\"group-item\"></jb_comp>\n      </div>`,\n//    css: '{ %$flexProps% }',\n    css: '{ display: flex; {?justify-content:%$align%;?} {?flex-direction:%$direction%;?} {?flex-wrap:%$wrap%;?} }',\n    features :{$: 'group.initGroup'}\n  }\n})\n\njb.component('flex-layout-container.align-main-axis', {\n    type: 'feature',\n    params: [\n      { id: 'align', as: 'string', options: 'flex-start,flex-end,center,space-between,space-around', defaultValue: 'flex-start' }\n    ],\n    impl : (ctx,factor) => ({\n      css: `{ justify-content: ${align} }`\n    })\n})\n\n\njb.component('flex-layout-item.grow', {\n    type: 'feature',\n    params: [\n      { id: 'factor', as: 'number', defaultValue: '1' }\n    ],\n    impl : (ctx,factor) => ({\n      css: `{ flex-grow: ${factor} }`\n    })\n})\n\njb.component('flex-layout-item.basis', {\n    type: 'feature',\n    params: [\n      { id: 'factor', as: 'number', defaultValue: '1' }\n    ],\n    impl : (ctx,factor) => ({\n      css: `{ flex-basis: ${factor} }`\n    })\n})\n\njb.component('flex-layout-item.align-self', {\n    type: 'feature',\n    params: [\n      { id: 'align', as: 'string', options: 'auto,flex-start,flex-end,center,baseline,stretch', defaultValue: 'auto' }\n    ],\n    impl : (ctx,align) => ({\n      css: `{ align-self: ${align} }`\n    })\n})\n\njb.component('flex-filler', {\n    type: 'control',\n    params: [\n        { id: 'title', as: 'string', defaultValue: 'flex filler' },\n        { id: 'basis', as: 'number', defaultValue: '1' },\n        { id: 'grow', as: 'number', defaultValue: '1' },\n        { id: 'shrink', as: 'number', defaultValue: '0' },\n    ],\n    impl: (ctx,title,basis,grow,shrink) => {\n      var css = [\n        `flex-basis: ${basis}`, \n        `flex-grow: ${grow}`, \n        `flex-shrink: ${shrink}`, \n      ].join('; ');\n\n      return jb_ui.Comp({ jbTemplate: `<div style=\"${css}\"></div>`},ctx)\n    }\n})\n\n\njb.component('responsive.only-for-phone', {\n    type: 'feature',\n    impl : () => ({\n      cssClass: 'only-for-phone'\n    })\n})\n\njb.component('responsive.not-for-phone', {\n    type: 'feature',\n    impl : () => ({\n      cssClass: 'not-for-phone'\n    })\n})",
			"file": "/C/jbart5-ng/src/ui/styles/layout-styles.ts",
			"file_size": 4214,
			"file_write_time": 131173778758200308,
			"settings":
			{
				"buffer_size": 3612,
				"line_ending": "Windows"
			}
		},
		{
			"contents": "jbLoadModules(['jb-core','jb-ui','jb-ui/jb-rx']).then(loadedModules => { var jb = loadedModules['jb-core'].jb, jb_ui = loadedModules['jb-ui'], jb_rx = loadedModules['jb-ui/jb-rx'];\n\njb.type('group.style');\n\njb.component('group',{\n  type: 'control',\n  params: [\n    { id: 'title', as: 'string' , dynamic: true },\n    { id: 'style', type: 'group.style', defaultValue: { $: 'group.section' }, essential: true , dynamic: true },\n    { id: 'controls', type: 'control[]', essential: true, flattenArray: true, dynamic: true },\n    { id: 'features', type: 'feature[]', dynamic: true },\n  ],\n  impl: function(context) { \n    return jb_ui.ctrl(context).jbExtend({\n      beforeInit: cmp => {\n        cmp.ctrls = [];\n        cmp.jbToExtend = cmp.jbToExtend || {};\n        cmp.extendChild = function(index,options) {\n          if (options)\n            cmp.jbToExtend[index] = options;\n        }\n\n        cmp.initGroup = function() {\n          cmp.title = context.params.title(context);\n          (cmp.jbGroupChildrenEm || jb_rx.Observable.of(context.params.controls(cmp.ctx)))\n              .merge(cmp.jbWatchGroupChildrenEm || jb_rx.Observable.of())\n              .takeUntil( cmp.jbEmitter.filter(x=>x =='destroy') )\n              .subscribe(comps=> {\n                  cmp.ctrls = [];\n                  cmp.jb_disposable && cmp.jb_disposable.forEach(d=>d());\n                  jb.logPerformance('group-change');\n                  comps.forEach((comp,i)=>{\n                    if (!comp || comp.invisible)\n                      return;\n                    if (cmp.jbToExtend[i])\n                       comp.jbExtend(cmp.jbToExtend[i]);\n                    if (!comp.jb_title)\n                      debugger;\n                    cmp.ctrls.push({ title: comp.jb_title ? comp.jb_title() : '' , comp: comp } );\n                  })\n                })\n            }\n      },\n      observable: () => {} // to create jbEmitter\n    })\n  }\n})\n\njb.component('group.dynamic-sub-titles', {\n  type: 'feature',\n  impl: ctx => ({\n    doCheck: cmp => \n      (cmp.ctrls || []).forEach(ctrl=>\n        ctrl.title = ctrl.comp.jb_title ? ctrl.comp.jb_title() : '')\n  })\n})\n\njb.component('dynamic-controls', {\n  type: 'control',\n  params: [\n    { id: 'controlItems', type: 'data', as: 'array', essential: true, dynamic: true },\n    { id: 'genericControl', type: 'control', essential: true, dynamic: true },\n    { id: 'itemVariable', as: 'string', defaultValue: 'controlItem'}\n  ],\n  impl: function(context,controlItems,genericControl,itemVariable) {\n    return controlItems()\n      .map(controlItem => jb_tosingle(genericControl(\n        jb.ctx(context,{data: controlItem, vars: jb.obj(itemVariable,controlItem)})))\n      )\n  }\n})\n\njb.component('group.initGroup', {\n  type: 'feature',\n  impl: ctx => ({\n    init: cmp => cmp.initGroup()\n  })\n})\n\n// ** sample style \n\njb.component('group.section', {\n  type: 'group.style',\n  impl :{$: 'customStyle',\n    template: '<section class=\"jb-group\"><jb_comp *ngFor=\"let ctrl of ctrls\" [comp]=\"ctrl.comp\" [flatten]=\"true\"></jb_comp></section>',\n    features :{$: 'group.initGroup'}\n  }\n})\n\njb.component('wait', {\n  type: 'control',\n  params: [\n    { id: 'title', as: 'string' , dynamic: true },\n    { id: 'for', essential: true },\n    { id: 'resource', as: 'string' },\n    { id: 'dataVariable', as: 'string' },\n    { id: 'mapToResource', dynamic: true, defaultValue: '%%' },\n    { id: 'control', type: 'control' , dynamic: true },\n    { id: 'loadingControl', type: 'control', defaultValue: { $:'label', title: 'loading ...'} , dynamic: true },\n    { id: 'errorControl', type: 'control', defaultValue: { $:'label', title: 'error: %$error%', css: '{color: red; font-weight: bold}'} , dynamic: true },\n  ],\n  impl :{$: 'group', \n      controls :{$: 'group',\n          controls :{$call: 'control' },\n          features :{$: 'var', name: '%$dataVariable%', value: '%%'}\n      },\n      features :{$: 'group.wait', \n        for :{$call: 'for' }, \n        resource: '%$resource%', \n        mapToResource :{$call: 'mapToResource' }, \n        loadingControl :{$call: 'loadingControl' }, \n        error :{$call: 'errorControl' }, \n      }\n  }\n})\n\n})",
			"file": "/C/jbart5-ng/src/ui/group.js",
			"file_size": 4261,
			"file_write_time": 131212762571108558,
			"settings":
			{
				"buffer_size": 4143,
				"line_ending": "Windows"
			}
		},
		{
			"file": "/C/jbart5-ng/src/ui/jb-ui.ts",
			"settings":
			{
				"buffer_size": 24129,
				"line_ending": "Windows"
			}
		},
		{
			"file": "/C/jbart5-ng/src/testing/ui-testers-ctrls.ts",
			"settings":
			{
				"buffer_size": 4817,
				"line_ending": "Windows"
			}
		},
		{
			"file": "/C/jbart5-ng/src/ui/markdown.js",
			"settings":
			{
				"buffer_size": 1251,
				"line_ending": "Windows"
			}
		},
		{
			"file": "/C/jbart5-ng/projects/studio/studio-main.ts",
			"settings":
			{
				"buffer_size": 9662,
				"line_ending": "Windows"
			}
		},
		{
			"file": "/C/jbart5-ng/src/ui/jb-rx.ts",
			"settings":
			{
				"buffer_size": 9121,
				"line_ending": "Windows"
			}
		},
		{
			"file": "/C/jbart5-ng/package.json",
			"settings":
			{
				"buffer_size": 1874,
				"line_ending": "Unix"
			}
		},
		{
			"file": "/C/jbart5-ng/src/loader/load-jbart.js",
			"settings":
			{
				"buffer_size": 7778,
				"line_ending": "Windows"
			}
		},
		{
			"file": "/C/jbart5-ng/node_modules/@angular/forms/bundles/forms.umd.js",
			"settings":
			{
				"buffer_size": 193935,
				"line_ending": "Unix"
			}
		},
		{
			"file": "/C/jbart5-ng/projects/ui-tests/ui-tests.html",
			"settings":
			{
				"buffer_size": 598,
				"line_ending": "Windows"
			}
		},
		{
			"contents": "/**\n  @license\n                                 Apache License\n                         Version 2.0, January 2004\n                      http://www.apache.org/licenses/\n\n TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n 1. Definitions.\n\n    \"License\" shall mean the terms and conditions for use, reproduction,\n    and distribution as defined by Sections 1 through 9 of this document.\n\n    \"Licensor\" shall mean the copyright owner or entity authorized by\n    the copyright owner that is granting the License.\n\n    \"Legal Entity\" shall mean the union of the acting entity and all\n    other entities that control, are controlled by, or are under common\n    control with that entity. For the purposes of this definition,\n    \"control\" means (i) the power, direct or indirect, to cause the\n    direction or management of such entity, whether by contract or\n    otherwise, or (ii) ownership of fifty percent (50%) or more of the\n    outstanding shares, or (iii) beneficial ownership of such entity.\n\n    \"You\" (or \"Your\") shall mean an individual or Legal Entity\n    exercising permissions granted by this License.\n\n    \"Source\" form shall mean the preferred form for making modifications,\n    including but not limited to software source code, documentation\n    source, and configuration files.\n\n    \"Object\" form shall mean any form resulting from mechanical\n    transformation or translation of a Source form, including but\n    not limited to compiled object code, generated documentation,\n    and conversions to other media types.\n\n    \"Work\" shall mean the work of authorship, whether in Source or\n    Object form, made available under the License, as indicated by a\n    copyright notice that is included in or attached to the work\n    (an example is provided in the Appendix below).\n\n    \"Derivative Works\" shall mean any work, whether in Source or Object\n    form, that is based on (or derived from) the Work and for which the\n    editorial revisions, annotations, elaborations, or other modifications\n    represent, as a whole, an original work of authorship. For the purposes\n    of this License, Derivative Works shall not include works that remain\n    separable from, or merely link (or bind by name) to the interfaces of,\n    the Work and Derivative Works thereof.\n\n    \"Contribution\" shall mean any work of authorship, including\n    the original version of the Work and any modifications or additions\n    to that Work or Derivative Works thereof, that is intentionally\n    submitted to Licensor for inclusion in the Work by the copyright owner\n    or by an individual or Legal Entity authorized to submit on behalf of\n    the copyright owner. For the purposes of this definition, \"submitted\"\n    means any form of electronic, verbal, or written communication sent\n    to the Licensor or its representatives, including but not limited to\n    communication on electronic mailing lists, source code control systems,\n    and issue tracking systems that are managed by, or on behalf of, the\n    Licensor for the purpose of discussing and improving the Work, but\n    excluding communication that is conspicuously marked or otherwise\n    designated in writing by the copyright owner as \"Not a Contribution.\"\n\n    \"Contributor\" shall mean Licensor and any individual or Legal Entity\n    on behalf of whom a Contribution has been received by Licensor and\n    subsequently incorporated within the Work.\n\n 2. Grant of Copyright License. Subject to the terms and conditions of\n    this License, each Contributor hereby grants to You a perpetual,\n    worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n    copyright license to reproduce, prepare Derivative Works of,\n    publicly display, publicly perform, sublicense, and distribute the\n    Work and such Derivative Works in Source or Object form.\n\n 3. Grant of Patent License. Subject to the terms and conditions of\n    this License, each Contributor hereby grants to You a perpetual,\n    worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n    (except as stated in this section) patent license to make, have made,\n    use, offer to sell, sell, import, and otherwise transfer the Work,\n    where such license applies only to those patent claims licensable\n    by such Contributor that are necessarily infringed by their\n    Contribution(s) alone or by combination of their Contribution(s)\n    with the Work to which such Contribution(s) was submitted. If You\n    institute patent litigation against any entity (including a\n    cross-claim or counterclaim in a lawsuit) alleging that the Work\n    or a Contribution incorporated within the Work constitutes direct\n    or contributory patent infringement, then any patent licenses\n    granted to You under this License for that Work shall terminate\n    as of the date such litigation is filed.\n\n 4. Redistribution. You may reproduce and distribute copies of the\n    Work or Derivative Works thereof in any medium, with or without\n    modifications, and in Source or Object form, provided that You\n    meet the following conditions:\n\n    (a) You must give any other recipients of the Work or\n        Derivative Works a copy of this License; and\n\n    (b) You must cause any modified files to carry prominent notices\n        stating that You changed the files; and\n\n    (c) You must retain, in the Source form of any Derivative Works\n        that You distribute, all copyright, patent, trademark, and\n        attribution notices from the Source form of the Work,\n        excluding those notices that do not pertain to any part of\n        the Derivative Works; and\n\n    (d) If the Work includes a \"NOTICE\" text file as part of its\n        distribution, then any Derivative Works that You distribute must\n        include a readable copy of the attribution notices contained\n        within such NOTICE file, excluding those notices that do not\n        pertain to any part of the Derivative Works, in at least one\n        of the following places: within a NOTICE text file distributed\n        as part of the Derivative Works; within the Source form or\n        documentation, if provided along with the Derivative Works; or,\n        within a display generated by the Derivative Works, if and\n        wherever such third-party notices normally appear. The contents\n        of the NOTICE file are for informational purposes only and\n        do not modify the License. You may add Your own attribution\n        notices within Derivative Works that You distribute, alongside\n        or as an addendum to the NOTICE text from the Work, provided\n        that such additional attribution notices cannot be construed\n        as modifying the License.\n\n    You may add Your own copyright statement to Your modifications and\n    may provide additional or different license terms and conditions\n    for use, reproduction, or distribution of Your modifications, or\n    for any such Derivative Works as a whole, provided Your use,\n    reproduction, and distribution of the Work otherwise complies with\n    the conditions stated in this License.\n\n 5. Submission of Contributions. Unless You explicitly state otherwise,\n    any Contribution intentionally submitted for inclusion in the Work\n    by You to the Licensor shall be under the terms and conditions of\n    this License, without any additional terms or conditions.\n    Notwithstanding the above, nothing herein shall supersede or modify\n    the terms of any separate license agreement you may have executed\n    with Licensor regarding such Contributions.\n\n 6. Trademarks. This License does not grant permission to use the trade\n    names, trademarks, service marks, or product names of the Licensor,\n    except as required for reasonable and customary use in describing the\n    origin of the Work and reproducing the content of the NOTICE file.\n\n 7. Disclaimer of Warranty. Unless required by applicable law or\n    agreed to in writing, Licensor provides the Work (and each\n    Contributor provides its Contributions) on an \"AS IS\" BASIS,\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n    implied, including, without limitation, any warranties or conditions\n    of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n    PARTICULAR PURPOSE. You are solely responsible for determining the\n    appropriateness of using or redistributing the Work and assume any\n    risks associated with Your exercise of permissions under this License.\n\n 8. Limitation of Liability. In no event and under no legal theory,\n    whether in tort (including negligence), contract, or otherwise,\n    unless required by applicable law (such as deliberate and grossly\n    negligent acts) or agreed to in writing, shall any Contributor be\n    liable to You for damages, including any direct, indirect, special,\n    incidental, or consequential damages of any character arising as a\n    result of this License or out of the use or inability to use the\n    Work (including but not limited to damages for loss of goodwill,\n    work stoppage, computer failure or malfunction, or any and all\n    other commercial damages or losses), even if such Contributor\n    has been advised of the possibility of such damages.\n\n 9. Accepting Warranty or Additional Liability. While redistributing\n    the Work or Derivative Works thereof, You may choose to offer,\n    and charge a fee for, acceptance of support, warranty, indemnity,\n    or other liability obligations and/or rights consistent with this\n    License. However, in accepting such obligations, You may act only\n    on Your own behalf and on Your sole responsibility, not on behalf\n    of any other Contributor, and only if You agree to indemnify,\n    defend, and hold each Contributor harmless for any liability\n    incurred by, or claims asserted against, such Contributor by reason\n    of your accepting any such warranty or additional liability.\n\n END OF TERMS AND CONDITIONS\n\n APPENDIX: How to apply the Apache License to your work.\n\n    To apply the Apache License to your work, attach the following\n    boilerplate notice, with the fields enclosed by brackets \"[]\"\n    replaced with your own identifying information. (Don't include\n    the brackets!)  The text should be enclosed in the appropriate\n    comment syntax for the file format. We also recommend that a\n    file or class name and description of purpose be included on the\n    same \"printed page\" as the copyright notice for easier\n    identification within third-party archives.\n\n Copyright 2015-2016 Netflix, Inc., Microsoft Corp. and contributors\n\n Licensed under the Apache License, Version 2.0 (the \"License\");\n you may not use this file except in compliance with the License.\n You may obtain a copy of the License at\n\n     http://www.apache.org/licenses/LICENSE-2.0\n\n Unless required by applicable law or agreed to in writing, software\n distributed under the License is distributed on an \"AS IS\" BASIS,\n WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n See the License for the specific language governing permissions and\n limitations under the License.\n\n **/\n(function(f){if(typeof exports===\"object\"&&typeof module!==\"undefined\"){module.exports=f()}else if(typeof define===\"function\"&&define.amd){define([],f)}else{var g;if(typeof window!==\"undefined\"){g=window}else if(typeof global!==\"undefined\"){g=global}else if(typeof self!==\"undefined\"){g=self}else{g=this}g.Rx = f()}})(function(){var define,module,exports;return (function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[\n    function(require,module,exports){\n\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Subject_1 = require('./Subject');\nvar Subscription_1 = require('./Subscription');\n/**\n * @class AsyncSubject<T>\n */\nvar AsyncSubject = (function (_super) {\n    __extends(AsyncSubject, _super);\n    function AsyncSubject() {\n        _super.apply(this, arguments);\n        this.value = null;\n        this.hasNext = false;\n        this.hasCompleted = false;\n    }\n    AsyncSubject.prototype._subscribe = function (subscriber) {\n        if (this.hasCompleted && this.hasNext) {\n            subscriber.next(this.value);\n            subscriber.complete();\n            return Subscription_1.Subscription.EMPTY;\n        }\n        else if (this.hasError) {\n            subscriber.error(this.thrownError);\n            return Subscription_1.Subscription.EMPTY;\n        }\n        return _super.prototype._subscribe.call(this, subscriber);\n    };\n    AsyncSubject.prototype.next = function (value) {\n        if (!this.hasCompleted) {\n            this.value = value;\n            this.hasNext = true;\n        }\n    };\n    AsyncSubject.prototype.complete = function () {\n        this.hasCompleted = true;\n        if (this.hasNext) {\n            _super.prototype.next.call(this, this.value);\n        }\n        _super.prototype.complete.call(this);\n    };\n    return AsyncSubject;\n}(Subject_1.Subject));\nexports.AsyncSubject = AsyncSubject;\n\n},{\"./Subject\":11,\"./Subscription\":14}],2:[function(require,module,exports){\n\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Subject_1 = require('./Subject');\nvar ObjectUnsubscribedError_1 = require('./util/ObjectUnsubscribedError');\n/**\n * @class BehaviorSubject<T>\n */\nvar BehaviorSubject = (function (_super) {\n    __extends(BehaviorSubject, _super);\n    function BehaviorSubject(_value) {\n        _super.call(this);\n        this._value = _value;\n    }\n    Object.defineProperty(BehaviorSubject.prototype, \"value\", {\n        get: function () {\n            return this.getValue();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    BehaviorSubject.prototype._subscribe = function (subscriber) {\n        var subscription = _super.prototype._subscribe.call(this, subscriber);\n        if (subscription && !subscription.closed) {\n            subscriber.next(this._value);\n        }\n        return subscription;\n    };\n    BehaviorSubject.prototype.getValue = function () {\n        if (this.hasError) {\n            throw this.thrownError;\n        }\n        else if (this.closed) {\n            throw new ObjectUnsubscribedError_1.ObjectUnsubscribedError();\n        }\n        else {\n            return this._value;\n        }\n    };\n    BehaviorSubject.prototype.next = function (value) {\n        _super.prototype.next.call(this, this._value = value);\n    };\n    return BehaviorSubject;\n}(Subject_1.Subject));\nexports.BehaviorSubject = BehaviorSubject;\n\n},{\"./Subject\":11,\"./util/ObjectUnsubscribedError\":326}],3:[function(require,module,exports){\n\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Subscriber_1 = require('./Subscriber');\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar InnerSubscriber = (function (_super) {\n    __extends(InnerSubscriber, _super);\n    function InnerSubscriber(parent, outerValue, outerIndex) {\n        _super.call(this);\n        this.parent = parent;\n        this.outerValue = outerValue;\n        this.outerIndex = outerIndex;\n        this.index = 0;\n    }\n    InnerSubscriber.prototype._next = function (value) {\n        this.parent.notifyNext(this.outerValue, value, this.outerIndex, this.index++, this);\n    };\n    InnerSubscriber.prototype._error = function (error) {\n        this.parent.notifyError(error, this);\n        this.unsubscribe();\n    };\n    InnerSubscriber.prototype._complete = function () {\n        this.parent.notifyComplete(this);\n        this.unsubscribe();\n    };\n    return InnerSubscriber;\n}(Subscriber_1.Subscriber));\nexports.InnerSubscriber = InnerSubscriber;\n\n},{\"./Subscriber\":13}],4:[function(require,module,exports){\n\"use strict\";\nvar Observable_1 = require('./Observable');\n/**\n * Represents a push-based event or value that an {@link Observable} can emit.\n * This class is particularly useful for operators that manage notifications,\n * like {@link materialize}, {@link dematerialize}, {@link observeOn}, and\n * others. Besides wrapping the actual delivered value, it also annotates it\n * with metadata of, for instance, what type of push message it is (`next`,\n * `error`, or `complete`).\n *\n * @see {@link materialize}\n * @see {@link dematerialize}\n * @see {@link observeOn}\n *\n * @class Notification<T>\n */\nvar Notification = (function () {\n    function Notification(kind, value, exception) {\n        this.kind = kind;\n        this.value = value;\n        this.exception = exception;\n        this.hasValue = kind === 'N';\n    }\n    /**\n     * Delivers to the given `observer` the value wrapped by this Notification.\n     * @param {Observer} observer\n     * @return\n     */\n    Notification.prototype.observe = function (observer) {\n        switch (this.kind) {\n            case 'N':\n                return observer.next && observer.next(this.value);\n            case 'E':\n                return observer.error && observer.error(this.exception);\n            case 'C':\n                return observer.complete && observer.complete();\n        }\n    };\n    /**\n     * Given some {@link Observer} callbacks, deliver the value represented by the\n     * current Notification to the correctly corresponding callback.\n     * @param {function(value: T): void} next An Observer `next` callback.\n     * @param {function(err: any): void} [error] An Observer `error` callback.\n     * @param {function(): void} [complete] An Observer `complete` callback.\n     * @return {any}\n     */\n    Notification.prototype.do = function (next, error, complete) {\n        var kind = this.kind;\n        switch (kind) {\n            case 'N':\n                return next && next(this.value);\n            case 'E':\n                return error && error(this.exception);\n            case 'C':\n                return complete && complete();\n        }\n    };\n    /**\n     * Takes an Observer or its individual callback functions, and calls `observe`\n     * or `do` methods accordingly.\n     * @param {Observer|function(value: T): void} nextOrObserver An Observer or\n     * the `next` callback.\n     * @param {function(err: any): void} [error] An Observer `error` callback.\n     * @param {function(): void} [complete] An Observer `complete` callback.\n     * @return {any}\n     */\n    Notification.prototype.accept = function (nextOrObserver, error, complete) {\n        if (nextOrObserver && typeof nextOrObserver.next === 'function') {\n            return this.observe(nextOrObserver);\n        }\n        else {\n            return this.do(nextOrObserver, error, complete);\n        }\n    };\n    /**\n     * Returns a simple Observable that just delivers the notification represented\n     * by this Notification instance.\n     * @return {any}\n     */\n    Notification.prototype.toObservable = function () {\n        var kind = this.kind;\n        switch (kind) {\n            case 'N':\n                return Observable_1.Observable.of(this.value);\n            case 'E':\n                return Observable_1.Observable.throw(this.exception);\n            case 'C':\n                return Observable_1.Observable.empty();\n        }\n        throw new Error('unexpected notification kind value');\n    };\n    /**\n     * A shortcut to create a Notification instance of the type `next` from a\n     * given value.\n     * @param {T} value The `next` value.\n     * @return {Notification<T>} The \"next\" Notification representing the\n     * argument.\n     */\n    Notification.createNext = function (value) {\n        if (typeof value !== 'undefined') {\n            return new Notification('N', value);\n        }\n        return this.undefinedValueNotification;\n    };\n    /**\n     * A shortcut to create a Notification instance of the type `error` from a\n     * given error.\n     * @param {any} [err] The `error` exception.\n     * @return {Notification<T>} The \"error\" Notification representing the\n     * argument.\n     */\n    Notification.createError = function (err) {\n        return new Notification('E', undefined, err);\n    };\n    /**\n     * A shortcut to create a Notification instance of the type `complete`.\n     * @return {Notification<any>} The valueless \"complete\" Notification.\n     */\n    Notification.createComplete = function () {\n        return this.completeNotification;\n    };\n    Notification.completeNotification = new Notification('C');\n    Notification.undefinedValueNotification = new Notification('N', undefined);\n    return Notification;\n}());\nexports.Notification = Notification;\n\n},{\"./Observable\":5}],5:[function(require,module,exports){\n\"use strict\";\nvar root_1 = require('./util/root');\nvar toSubscriber_1 = require('./util/toSubscriber');\nvar observable_1 = require('./symbol/observable');\n/**\n * A representation of any set of values over any amount of time. This the most basic building block\n * of RxJS.\n *\n * @class Observable<T>\n */\nvar Observable = (function () {\n    /**\n     * @constructor\n     * @param {Function} subscribe the function that is  called when the Observable is\n     * initially subscribed to. This function is given a Subscriber, to which new values\n     * can be `next`ed, or an `error` method can be called to raise an error, or\n     * `complete` can be called to notify of a successful completion.\n     */\n    function Observable(subscribe) {\n        this._isScalar = false;\n        if (subscribe) {\n            this._subscribe = subscribe;\n        }\n    }\n    /**\n     * Creates a new Observable, with this Observable as the source, and the passed\n     * operator defined as the new observable's operator.\n     * @method lift\n     * @param {Operator} operator the operator defining the operation to take on the observable\n     * @return {Observable} a new observable with the Operator applied\n     */\n    Observable.prototype.lift = function (operator) {\n        var observable = new Observable();\n        observable.source = this;\n        observable.operator = operator;\n        return observable;\n    };\n    /**\n     * Registers handlers for handling emitted values, error and completions from the observable, and\n     *  executes the observable's subscriber function, which will take action to set up the underlying data stream\n     * @method subscribe\n     * @param {PartialObserver|Function} observerOrNext (optional) either an observer defining all functions to be called,\n     *  or the first of three possible handlers, which is the handler for each value emitted from the observable.\n     * @param {Function} error (optional) a handler for a terminal event resulting from an error. If no error handler is provided,\n     *  the error will be thrown as unhandled\n     * @param {Function} complete (optional) a handler for a terminal event resulting from successful completion.\n     * @return {ISubscription} a subscription reference to the registered handlers\n     */\n    Observable.prototype.subscribe = function (observerOrNext, error, complete) {\n        var operator = this.operator;\n        var sink = toSubscriber_1.toSubscriber(observerOrNext, error, complete);\n        if (operator) {\n            operator.call(sink, this);\n        }\n        else {\n            sink.add(this._subscribe(sink));\n        }\n        if (sink.syncErrorThrowable) {\n            sink.syncErrorThrowable = false;\n            if (sink.syncErrorThrown) {\n                throw sink.syncErrorValue;\n            }\n        }\n        return sink;\n    };\n    /**\n     * @method forEach\n     * @param {Function} next a handler for each value emitted by the observable\n     * @param {PromiseConstructor} [PromiseCtor] a constructor function used to instantiate the Promise\n     * @return {Promise} a promise that either resolves on observable completion or\n     *  rejects with the handled error\n     */\n    Observable.prototype.forEach = function (next, PromiseCtor) {\n        var _this = this;\n        if (!PromiseCtor) {\n            if (root_1.root.Rx && root_1.root.Rx.config && root_1.root.Rx.config.Promise) {\n                PromiseCtor = root_1.root.Rx.config.Promise;\n            }\n            else if (root_1.root.Promise) {\n                PromiseCtor = root_1.root.Promise;\n            }\n        }\n        if (!PromiseCtor) {\n            throw new Error('no Promise impl found');\n        }\n        return new PromiseCtor(function (resolve, reject) {\n            var subscription = _this.subscribe(function (value) {\n                if (subscription) {\n                    // if there is a subscription, then we can surmise\n                    // the next handling is asynchronous. Any errors thrown\n                    // need to be rejected explicitly and unsubscribe must be\n                    // called manually\n                    try {\n                        next(value);\n                    }\n                    catch (err) {\n                        reject(err);\n                        subscription.unsubscribe();\n                    }\n                }\n                else {\n                    // if there is NO subscription, then we're getting a nexted\n                    // value synchronously during subscription. We can just call it.\n                    // If it errors, Observable's `subscribe` will ensure the\n                    // unsubscription logic is called, then synchronously rethrow the error.\n                    // After that, Promise will trap the error and send it\n                    // down the rejection path.\n                    next(value);\n                }\n            }, reject, resolve);\n        });\n    };\n    Observable.prototype._subscribe = function (subscriber) {\n        return this.source.subscribe(subscriber);\n    };\n    /**\n     * An interop point defined by the es7-observable spec https://github.com/zenparsing/es-observable\n     * @method Symbol.observable\n     * @return {Observable} this instance of the observable\n     */\n    Observable.prototype[observable_1.$$observable] = function () {\n        return this;\n    };\n    // HACK: Since TypeScript inherits static properties too, we have to\n    // fight against TypeScript here so Subject can have a different static create signature\n    /**\n     * Creates a new cold Observable by calling the Observable constructor\n     * @static true\n     * @owner Observable\n     * @method create\n     * @param {Function} subscribe? the subscriber function to be passed to the Observable constructor\n     * @return {Observable} a new cold observable\n     */\n    Observable.create = function (subscribe) {\n        return new Observable(subscribe);\n    };\n    return Observable;\n}());\nexports.Observable = Observable;\n\n},{\"./symbol/observable\":312,\"./util/root\":340,\"./util/toSubscriber\":342}],6:[function(require,module,exports){\n\"use strict\";\nexports.empty = {\n    closed: true,\n    next: function (value) { },\n    error: function (err) { throw err; },\n    complete: function () { }\n};\n\n},{}],7:[function(require,module,exports){\n\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Subscriber_1 = require('./Subscriber');\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar OuterSubscriber = (function (_super) {\n    __extends(OuterSubscriber, _super);\n    function OuterSubscriber() {\n        _super.apply(this, arguments);\n    }\n    OuterSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n        this.destination.next(innerValue);\n    };\n    OuterSubscriber.prototype.notifyError = function (error, innerSub) {\n        this.destination.error(error);\n    };\n    OuterSubscriber.prototype.notifyComplete = function (innerSub) {\n        this.destination.complete();\n    };\n    return OuterSubscriber;\n}(Subscriber_1.Subscriber));\nexports.OuterSubscriber = OuterSubscriber;\n\n},{\"./Subscriber\":13}],8:[function(require,module,exports){\n\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Subject_1 = require('./Subject');\nvar queue_1 = require('./scheduler/queue');\nvar observeOn_1 = require('./operator/observeOn');\n/**\n * @class ReplaySubject<T>\n */\nvar ReplaySubject = (function (_super) {\n    __extends(ReplaySubject, _super);\n    function ReplaySubject(bufferSize, windowTime, scheduler) {\n        if (bufferSize === void 0) { bufferSize = Number.POSITIVE_INFINITY; }\n        if (windowTime === void 0) { windowTime = Number.POSITIVE_INFINITY; }\n        _super.call(this);\n        this.scheduler = scheduler;\n        this._events = [];\n        this._bufferSize = bufferSize < 1 ? 1 : bufferSize;\n        this._windowTime = windowTime < 1 ? 1 : windowTime;\n    }\n    ReplaySubject.prototype.next = function (value) {\n        var now = this._getNow();\n        this._events.push(new ReplayEvent(now, value));\n        this._trimBufferThenGetEvents();\n        _super.prototype.next.call(this, value);\n    };\n    ReplaySubject.prototype._subscribe = function (subscriber) {\n        var _events = this._trimBufferThenGetEvents();\n        var scheduler = this.scheduler;\n        if (scheduler) {\n            subscriber.add(subscriber = new observeOn_1.ObserveOnSubscriber(subscriber, scheduler));\n        }\n        var len = _events.length;\n        for (var i = 0; i < len && !subscriber.closed; i++) {\n            subscriber.next(_events[i].value);\n        }\n        return _super.prototype._subscribe.call(this, subscriber);\n    };\n    ReplaySubject.prototype._getNow = function () {\n        return (this.scheduler || queue_1.queue).now();\n    };\n    ReplaySubject.prototype._trimBufferThenGetEvents = function () {\n        var now = this._getNow();\n        var _bufferSize = this._bufferSize;\n        var _windowTime = this._windowTime;\n        var _events = this._events;\n        var eventsCount = _events.length;\n        var spliceCount = 0;\n        // Trim events that fall out of the time window.\n        // Start at the front of the list. Break early once\n        // we encounter an event that falls within the window.\n        while (spliceCount < eventsCount) {\n            if ((now - _events[spliceCount].time) < _windowTime) {\n                break;\n            }\n            spliceCount++;\n        }\n        if (eventsCount > _bufferSize) {\n            spliceCount = Math.max(spliceCount, eventsCount - _bufferSize);\n        }\n        if (spliceCount > 0) {\n            _events.splice(0, spliceCount);\n        }\n        return _events;\n    };\n    return ReplaySubject;\n}(Subject_1.Subject));\nexports.ReplaySubject = ReplaySubject;\nvar ReplayEvent = (function () {\n    function ReplayEvent(time, value) {\n        this.time = time;\n        this.value = value;\n    }\n    return ReplayEvent;\n}());\n\n},{\"./Subject\":11,\"./operator/observeOn\":248,\"./scheduler/queue\":310}],9:[function(require,module,exports){\n\"use strict\";\n/* tslint:disable:no-unused-variable */\n// Subject imported before Observable to bypass circular dependency issue since\n// Subject extends Observable and Observable references Subject in it's\n// definition\nvar Subject_1 = require('./Subject');\nexports.Subject = Subject_1.Subject;\n/* tslint:enable:no-unused-variable */\nvar Observable_1 = require('./Observable');\nexports.Observable = Observable_1.Observable;\n// statics\n/* tslint:disable:no-use-before-declare */\nrequire('./add/observable/bindCallback');\nrequire('./add/observable/bindNodeCallback');\nrequire('./add/observable/combineLatest');\nrequire('./add/observable/concat');\nrequire('./add/observable/defer');\nrequire('./add/observable/empty');\nrequire('./add/observable/forkJoin');\nrequire('./add/observable/from');\nrequire('./add/observable/fromEvent');\nrequire('./add/observable/fromEventPattern');\nrequire('./add/observable/fromPromise');\nrequire('./add/observable/generate');\nrequire('./add/observable/if');\nrequire('./add/observable/interval');\nrequire('./add/observable/merge');\nrequire('./add/observable/race');\nrequire('./add/observable/never');\nrequire('./add/observable/of');\nrequire('./add/observable/onErrorResumeNext');\nrequire('./add/observable/pairs');\nrequire('./add/observable/range');\nrequire('./add/observable/using');\nrequire('./add/observable/throw');\nrequire('./add/observable/timer');\nrequire('./add/observable/zip');\n//dom\nrequire('./add/observable/dom/ajax');\nrequire('./add/observable/dom/webSocket');\n//operators\nrequire('./add/operator/buffer');\nrequire('./add/operator/bufferCount');\nrequire('./add/operator/bufferTime');\nrequire('./add/operator/bufferToggle');\nrequire('./add/operator/bufferWhen');\nrequire('./add/operator/cache');\nrequire('./add/operator/catch');\nrequire('./add/operator/combineAll');\nrequire('./add/operator/combineLatest');\nrequire('./add/operator/concat');\nrequire('./add/operator/concatAll');\nrequire('./add/operator/concatMap');\nrequire('./add/operator/concatMapTo');\nrequire('./add/operator/count');\nrequire('./add/operator/dematerialize');\nrequire('./add/operator/debounce');\nrequire('./add/operator/debounceTime');\nrequire('./add/operator/defaultIfEmpty');\nrequire('./add/operator/delay');\nrequire('./add/operator/delayWhen');\nrequire('./add/operator/distinct');\nrequire('./add/operator/distinctKey');\nrequire('./add/operator/distinctUntilChanged');\nrequire('./add/operator/distinctUntilKeyChanged');\nrequire('./add/operator/do');\nrequire('./add/operator/exhaust');\nrequire('./add/operator/exhaustMap');\nrequire('./add/operator/expand');\nrequire('./add/operator/elementAt');\nrequire('./add/operator/filter');\nrequire('./add/operator/finally');\nrequire('./add/operator/find');\nrequire('./add/operator/findIndex');\nrequire('./add/operator/first');\nrequire('./add/operator/groupBy');\nrequire('./add/operator/ignoreElements');\nrequire('./add/operator/isEmpty');\nrequire('./add/operator/audit');\nrequire('./add/operator/auditTime');\nrequire('./add/operator/last');\nrequire('./add/operator/let');\nrequire('./add/operator/every');\nrequire('./add/operator/map');\nrequire('./add/operator/mapTo');\nrequire('./add/operator/materialize');\nrequire('./add/operator/max');\nrequire('./add/operator/merge');\nrequire('./add/operator/mergeAll');\nrequire('./add/operator/mergeMap');\nrequire('./add/operator/mergeMapTo');\nrequire('./add/operator/mergeScan');\nrequire('./add/operator/min');\nrequire('./add/operator/multicast');\nrequire('./add/operator/observeOn');\nrequire('./add/operator/onErrorResumeNext');\nrequire('./add/operator/pairwise');\nrequire('./add/operator/partition');\nrequire('./add/operator/pluck');\nrequire('./add/operator/publish');\nrequire('./add/operator/publishBehavior');\nrequire('./add/operator/publishReplay');\nrequire('./add/operator/publishLast');\nrequire('./add/operator/race');\nrequire('./add/operator/reduce');\nrequire('./add/operator/repeat');\nrequire('./add/operator/repeatWhen');\nrequire('./add/operator/retry');\nrequire('./add/operator/retryWhen');\nrequire('./add/operator/sample');\nrequire('./add/operator/sampleTime');\nrequire('./add/operator/scan');\nrequire('./add/operator/sequenceEqual');\nrequire('./add/operator/share');\nrequire('./add/operator/single');\nrequire('./add/operator/skip');\nrequire('./add/operator/skipUntil');\nrequire('./add/operator/skipWhile');\nrequire('./add/operator/startWith');\nrequire('./add/operator/subscribeOn');\nrequire('./add/operator/switch');\nrequire('./add/operator/switchMap');\nrequire('./add/operator/switchMapTo');\nrequire('./add/operator/take');\nrequire('./add/operator/takeLast');\nrequire('./add/operator/takeUntil');\nrequire('./add/operator/takeWhile');\nrequire('./add/operator/throttle');\nrequire('./add/operator/throttleTime');\nrequire('./add/operator/timeInterval');\nrequire('./add/operator/timeout');\nrequire('./add/operator/timeoutWith');\nrequire('./add/operator/timestamp');\nrequire('./add/operator/toArray');\nrequire('./add/operator/toPromise');\nrequire('./add/operator/window');\nrequire('./add/operator/windowCount');\nrequire('./add/operator/windowTime');\nrequire('./add/operator/windowToggle');\nrequire('./add/operator/windowWhen');\nrequire('./add/operator/withLatestFrom');\nrequire('./add/operator/zip');\nrequire('./add/operator/zipAll');\n/* tslint:disable:no-unused-variable */\nvar Subscription_1 = require('./Subscription');\nexports.Subscription = Subscription_1.Subscription;\nvar Subscriber_1 = require('./Subscriber');\nexports.Subscriber = Subscriber_1.Subscriber;\nvar AsyncSubject_1 = require('./AsyncSubject');\nexports.AsyncSubject = AsyncSubject_1.AsyncSubject;\nvar ReplaySubject_1 = require('./ReplaySubject');\nexports.ReplaySubject = ReplaySubject_1.ReplaySubject;\nvar BehaviorSubject_1 = require('./BehaviorSubject');\nexports.BehaviorSubject = BehaviorSubject_1.BehaviorSubject;\nvar MulticastObservable_1 = require('./observable/MulticastObservable');\nexports.MulticastObservable = MulticastObservable_1.MulticastObservable;\nvar ConnectableObservable_1 = require('./observable/ConnectableObservable');\nexports.ConnectableObservable = ConnectableObservable_1.ConnectableObservable;\nvar Notification_1 = require('./Notification');\nexports.Notification = Notification_1.Notification;\nvar EmptyError_1 = require('./util/EmptyError');\nexports.EmptyError = EmptyError_1.EmptyError;\nvar ArgumentOutOfRangeError_1 = require('./util/ArgumentOutOfRangeError');\nexports.ArgumentOutOfRangeError = ArgumentOutOfRangeError_1.ArgumentOutOfRangeError;\nvar ObjectUnsubscribedError_1 = require('./util/ObjectUnsubscribedError');\nexports.ObjectUnsubscribedError = ObjectUnsubscribedError_1.ObjectUnsubscribedError;\nvar UnsubscriptionError_1 = require('./util/UnsubscriptionError');\nexports.UnsubscriptionError = UnsubscriptionError_1.UnsubscriptionError;\nvar timeInterval_1 = require('./operator/timeInterval');\nexports.TimeInterval = timeInterval_1.TimeInterval;\nvar timestamp_1 = require('./operator/timestamp');\nexports.Timestamp = timestamp_1.Timestamp;\nvar TestScheduler_1 = require('./testing/TestScheduler');\nexports.TestScheduler = TestScheduler_1.TestScheduler;\nvar VirtualTimeScheduler_1 = require('./scheduler/VirtualTimeScheduler');\nexports.VirtualTimeScheduler = VirtualTimeScheduler_1.VirtualTimeScheduler;\nvar AjaxObservable_1 = require('./observable/dom/AjaxObservable');\nexports.AjaxResponse = AjaxObservable_1.AjaxResponse;\nexports.AjaxError = AjaxObservable_1.AjaxError;\nexports.AjaxTimeoutError = AjaxObservable_1.AjaxTimeoutError;\nvar asap_1 = require('./scheduler/asap');\nvar async_1 = require('./scheduler/async');\nvar queue_1 = require('./scheduler/queue');\nvar animationFrame_1 = require('./scheduler/animationFrame');\nvar rxSubscriber_1 = require('./symbol/rxSubscriber');\nvar iterator_1 = require('./symbol/iterator');\nvar observable_1 = require('./symbol/observable');\n/* tslint:enable:no-unused-variable */\n/**\n * @typedef {Object} Rx.Scheduler\n * @property {Scheduler} queue Schedules on a queue in the current event frame\n * (trampoline scheduler). Use this for iteration operations.\n * @property {Scheduler} asap Schedules on the micro task queue, which uses the\n * fastest transport mechanism available, either Node.js' `process.nextTick()`\n * or Web Worker MessageChannel or setTimeout or others. Use this for\n * asynchronous conversions.\n * @property {Scheduler} async Schedules work with `setInterval`. Use this for\n * time-based operations.\n * @property {Scheduler} animationFrame Schedules work with `requestAnimationFrame`.\n * Use this for synchronizing with the platform's painting\n */\nvar Scheduler = {\n    asap: asap_1.asap,\n    queue: queue_1.queue,\n    animationFrame: animationFrame_1.animationFrame,\n    async: async_1.async\n};\nexports.Scheduler = Scheduler;\n/**\n * @typedef {Object} Rx.Symbol\n * @property {Symbol|string} rxSubscriber A symbol to use as a property name to\n * retrieve an \"Rx safe\" Observer from an object. \"Rx safety\" can be defined as\n * an object that has all of the traits of an Rx Subscriber, including the\n * ability to add and remove subscriptions to the subscription chain and\n * guarantees involving event triggering (can't \"next\" after unsubscription,\n * etc).\n * @property {Symbol|string} observable A symbol to use as a property name to\n * retrieve an Observable as defined by the [ECMAScript \"Observable\" spec](https://github.com/zenparsing/es-observable).\n * @property {Symbol|string} iterator The ES6 symbol to use as a property name\n * to retrieve an iterator from an object.\n */\nvar Symbol = {\n    rxSubscriber: rxSubscriber_1.$$rxSubscriber,\n    observable: observable_1.$$observable,\n    iterator: iterator_1.$$iterator\n};\nexports.Symbol = Symbol;\n\n},{\"./AsyncSubject\":1,\"./BehaviorSubject\":2,\"./Notification\":4,\"./Observable\":5,\"./ReplaySubject\":8,\"./Subject\":11,\"./Subscriber\":13,\"./Subscription\":14,\"./add/observable/bindCallback\":15,\"./add/observable/bindNodeCallback\":16,\"./add/observable/combineLatest\":17,\"./add/observable/concat\":18,\"./add/observable/defer\":19,\"./add/observable/dom/ajax\":20,\"./add/observable/dom/webSocket\":21,\"./add/observable/empty\":22,\"./add/observable/forkJoin\":23,\"./add/observable/from\":24,\"./add/observable/fromEvent\":25,\"./add/observable/fromEventPattern\":26,\"./add/observable/fromPromise\":27,\"./add/observable/generate\":28,\"./add/observable/if\":29,\"./add/observable/interval\":30,\"./add/observable/merge\":31,\"./add/observable/never\":32,\"./add/observable/of\":33,\"./add/observable/onErrorResumeNext\":34,\"./add/observable/pairs\":35,\"./add/observable/race\":36,\"./add/observable/range\":37,\"./add/observable/throw\":38,\"./add/observable/timer\":39,\"./add/observable/using\":40,\"./add/observable/zip\":41,\"./add/operator/audit\":42,\"./add/operator/auditTime\":43,\"./add/operator/buffer\":44,\"./add/operator/bufferCount\":45,\"./add/operator/bufferTime\":46,\"./add/operator/bufferToggle\":47,\"./add/operator/bufferWhen\":48,\"./add/operator/cache\":49,\"./add/operator/catch\":50,\"./add/operator/combineAll\":51,\"./add/operator/combineLatest\":52,\"./add/operator/concat\":53,\"./add/operator/concatAll\":54,\"./add/operator/concatMap\":55,\"./add/operator/concatMapTo\":56,\"./add/operator/count\":57,\"./add/operator/debounce\":58,\"./add/operator/debounceTime\":59,\"./add/operator/defaultIfEmpty\":60,\"./add/operator/delay\":61,\"./add/operator/delayWhen\":62,\"./add/operator/dematerialize\":63,\"./add/operator/distinct\":64,\"./add/operator/distinctKey\":65,\"./add/operator/distinctUntilChanged\":66,\"./add/operator/distinctUntilKeyChanged\":67,\"./add/operator/do\":68,\"./add/operator/elementAt\":69,\"./add/operator/every\":70,\"./add/operator/exhaust\":71,\"./add/operator/exhaustMap\":72,\"./add/operator/expand\":73,\"./add/operator/filter\":74,\"./add/operator/finally\":75,\"./add/operator/find\":76,\"./add/operator/findIndex\":77,\"./add/operator/first\":78,\"./add/operator/groupBy\":79,\"./add/operator/ignoreElements\":80,\"./add/operator/isEmpty\":81,\"./add/operator/last\":82,\"./add/operator/let\":83,\"./add/operator/map\":84,\"./add/operator/mapTo\":85,\"./add/operator/materialize\":86,\"./add/operator/max\":87,\"./add/operator/merge\":88,\"./add/operator/mergeAll\":89,\"./add/operator/mergeMap\":90,\"./add/operator/mergeMapTo\":91,\"./add/operator/mergeScan\":92,\"./add/operator/min\":93,\"./add/operator/multicast\":94,\"./add/operator/observeOn\":95,\"./add/operator/onErrorResumeNext\":96,\"./add/operator/pairwise\":97,\"./add/operator/partition\":98,\"./add/operator/pluck\":99,\"./add/operator/publish\":100,\"./add/operator/publishBehavior\":101,\"./add/operator/publishLast\":102,\"./add/operator/publishReplay\":103,\"./add/operator/race\":104,\"./add/operator/reduce\":105,\"./add/operator/repeat\":106,\"./add/operator/repeatWhen\":107,\"./add/operator/retry\":108,\"./add/operator/retryWhen\":109,\"./add/operator/sample\":110,\"./add/operator/sampleTime\":111,\"./add/operator/scan\":112,\"./add/operator/sequenceEqual\":113,\"./add/operator/share\":114,\"./add/operator/single\":115,\"./add/operator/skip\":116,\"./add/operator/skipUntil\":117,\"./add/operator/skipWhile\":118,\"./add/operator/startWith\":119,\"./add/operator/subscribeOn\":120,\"./add/operator/switch\":121,\"./add/operator/switchMap\":122,\"./add/operator/switchMapTo\":123,\"./add/operator/take\":124,\"./add/operator/takeLast\":125,\"./add/operator/takeUntil\":126,\"./add/operator/takeWhile\":127,\"./add/operator/throttle\":128,\"./add/operator/throttleTime\":129,\"./add/operator/timeInterval\":130,\"./add/operator/timeout\":131,\"./add/operator/timeoutWith\":132,\"./add/operator/timestamp\":133,\"./add/operator/toArray\":134,\"./add/operator/toPromise\":135,\"./add/operator/window\":136,\"./add/operator/windowCount\":137,\"./add/operator/windowTime\":138,\"./add/operator/windowToggle\":139,\"./add/operator/windowWhen\":140,\"./add/operator/withLatestFrom\":141,\"./add/operator/zip\":142,\"./add/operator/zipAll\":143,\"./observable/ConnectableObservable\":148,\"./observable/MulticastObservable\":160,\"./observable/dom/AjaxObservable\":174,\"./operator/timeInterval\":283,\"./operator/timestamp\":286,\"./scheduler/VirtualTimeScheduler\":306,\"./scheduler/animationFrame\":307,\"./scheduler/asap\":308,\"./scheduler/async\":309,\"./scheduler/queue\":310,\"./symbol/iterator\":311,\"./symbol/observable\":312,\"./symbol/rxSubscriber\":313,\"./testing/TestScheduler\":318,\"./util/ArgumentOutOfRangeError\":320,\"./util/EmptyError\":321,\"./util/ObjectUnsubscribedError\":326,\"./util/UnsubscriptionError\":327}],10:[function(require,module,exports){\n\"use strict\";\n/**\n * An execution context and a data structure to order tasks and schedule their\n * execution. Provides a notion of (potentially virtual) time, through the\n * `now()` getter method.\n *\n * Each unit of work in a Scheduler is called an {@link Action}.\n *\n * ```ts\n * class Scheduler {\n *   now(): number;\n *   schedule(work, delay?, state?): Subscription;\n * }\n * ```\n *\n * @class Scheduler\n */\nvar Scheduler = (function () {\n    function Scheduler(SchedulerAction, now) {\n        if (now === void 0) { now = Scheduler.now; }\n        this.SchedulerAction = SchedulerAction;\n        this.now = now;\n    }\n    /**\n     * Schedules a function, `work`, for execution. May happen at some point in\n     * the future, according to the `delay` parameter, if specified. May be passed\n     * some context object, `state`, which will be passed to the `work` function.\n     *\n     * The given arguments will be processed an stored as an Action object in a\n     * queue of actions.\n     *\n     * @param {function(state: ?T): ?Subscription} work A function representing a\n     * task, or some unit of work to be executed by the Scheduler.\n     * @param {number} [delay] Time to wait before executing the work, where the\n     * time unit is implicit and defined by the Scheduler itself.\n     * @param {T} [state] Some contextual data that the `work` function uses when\n     * called by the Scheduler.\n     * @return {Subscription} A subscription in order to be able to unsubscribe\n     * the scheduled work.\n     */\n    Scheduler.prototype.schedule = function (work, delay, state) {\n        if (delay === void 0) { delay = 0; }\n        return new this.SchedulerAction(this, work).schedule(state, delay);\n    };\n    Scheduler.now = Date.now ? Date.now : function () { return +new Date(); };\n    return Scheduler;\n}());\nexports.Scheduler = Scheduler;\n\n},{}],11:[function(require,module,exports){\n\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Observable_1 = require('./Observable');\nvar Subscriber_1 = require('./Subscriber');\nvar Subscription_1 = require('./Subscription');\nvar ObjectUnsubscribedError_1 = require('./util/ObjectUnsubscribedError');\nvar SubjectSubscription_1 = require('./SubjectSubscription');\nvar rxSubscriber_1 = require('./symbol/rxSubscriber');\n/**\n * @class SubjectSubscriber<T>\n */\nvar SubjectSubscriber = (function (_super) {\n    __extends(SubjectSubscriber, _super);\n    function SubjectSubscriber(destination) {\n        _super.call(this, destination);\n        this.destination = destination;\n    }\n    return SubjectSubscriber;\n}(Subscriber_1.Subscriber));\nexports.SubjectSubscriber = SubjectSubscriber;\n/**\n * @class Subject<T>\n */\nvar Subject = (function (_super) {\n    __extends(Subject, _super);\n    function Subject() {\n        _super.call(this);\n        this.observers = [];\n        this.closed = false;\n        this.isStopped = false;\n        this.hasError = false;\n        this.thrownError = null;\n    }\n    Subject.prototype[rxSubscriber_1.$$rxSubscriber] = function () {\n        return new SubjectSubscriber(this);\n    };\n    Subject.prototype.lift = function (operator) {\n        var subject = new AnonymousSubject(this, this);\n        subject.operator = operator;\n        return subject;\n    };\n    Subject.prototype.next = function (value) {\n        if (this.closed) {\n            throw new ObjectUnsubscribedError_1.ObjectUnsubscribedError();\n        }\n        if (!this.isStopped) {\n            var observers = this.observers;\n            var len = observers.length;\n            var copy = observers.slice();\n            for (var i = 0; i < len; i++) {\n                copy[i].next(value);\n            }\n        }\n    };\n    Subject.prototype.error = function (err) {\n        if (this.closed) {\n            throw new ObjectUnsubscribedError_1.ObjectUnsubscribedError();\n        }\n        this.hasError = true;\n        this.thrownError = err;\n        this.isStopped = true;\n        var observers = this.observers;\n        var len = observers.length;\n        var copy = observers.slice();\n        for (var i = 0; i < len; i++) {\n            copy[i].error(err);\n        }\n        this.observers.length = 0;\n    };\n    Subject.prototype.complete = function () {\n        if (this.closed) {\n            throw new ObjectUnsubscribedError_1.ObjectUnsubscribedError();\n        }\n        this.isStopped = true;\n        var observers = this.observers;\n        var len = observers.length;\n        var copy = observers.slice();\n        for (var i = 0; i < len; i++) {\n            copy[i].complete();\n        }\n        this.observers.length = 0;\n    };\n    Subject.prototype.unsubscribe = function () {\n        this.isStopped = true;\n        this.closed = true;\n        this.observers = null;\n    };\n    Subject.prototype._subscribe = function (subscriber) {\n        if (this.closed) {\n            throw new ObjectUnsubscribedError_1.ObjectUnsubscribedError();\n        }\n        else if (this.hasError) {\n            subscriber.error(this.thrownError);\n            return Subscription_1.Subscription.EMPTY;\n        }\n        else if (this.isStopped) {\n            subscriber.complete();\n            return Subscription_1.Subscription.EMPTY;\n        }\n        else {\n            this.observers.push(subscriber);\n            return new SubjectSubscription_1.SubjectSubscription(this, subscriber);\n        }\n    };\n    Subject.prototype.asObservable = function () {\n        var observable = new Observable_1.Observable();\n        observable.source = this;\n        return observable;\n    };\n    Subject.create = function (destination, source) {\n        return new AnonymousSubject(destination, source);\n    };\n    return Subject;\n}(Observable_1.Observable));\nexports.Subject = Subject;\n/**\n * @class AnonymousSubject<T>\n */\nvar AnonymousSubject = (function (_super) {\n    __extends(AnonymousSubject, _super);\n    function AnonymousSubject(destination, source) {\n        _super.call(this);\n        this.destination = destination;\n        this.source = source;\n    }\n    AnonymousSubject.prototype.next = function (value) {\n        var destination = this.destination;\n        if (destination && destination.next) {\n            destination.next(value);\n        }\n    };\n    AnonymousSubject.prototype.error = function (err) {\n        var destination = this.destination;\n        if (destination && destination.error) {\n            this.destination.error(err);\n        }\n    };\n    AnonymousSubject.prototype.complete = function () {\n        var destination = this.destination;\n        if (destination && destination.complete) {\n            this.destination.complete();\n        }\n    };\n    AnonymousSubject.prototype._subscribe = function (subscriber) {\n        var source = this.source;\n        if (source) {\n            return this.source.subscribe(subscriber);\n        }\n        else {\n            return Subscription_1.Subscription.EMPTY;\n        }\n    };\n    return AnonymousSubject;\n}(Subject));\nexports.AnonymousSubject = AnonymousSubject;\n\n},{\"./Observable\":5,\"./SubjectSubscription\":12,\"./Subscriber\":13,\"./Subscription\":14,\"./symbol/rxSubscriber\":313,\"./util/ObjectUnsubscribedError\":326}],12:[function(require,module,exports){\n\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Subscription_1 = require('./Subscription');\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar SubjectSubscription = (function (_super) {\n    __extends(SubjectSubscription, _super);\n    function SubjectSubscription(subject, subscriber) {\n        _super.call(this);\n        this.subject = subject;\n        this.subscriber = subscriber;\n        this.closed = false;\n    }\n    SubjectSubscription.prototype.unsubscribe = function () {\n        if (this.closed) {\n            return;\n        }\n        this.closed = true;\n        var subject = this.subject;\n        var observers = subject.observers;\n        this.subject = null;\n        if (!observers || observers.length === 0 || subject.isStopped || subject.closed) {\n            return;\n        }\n        var subscriberIndex = observers.indexOf(this.subscriber);\n        if (subscriberIndex !== -1) {\n            observers.splice(subscriberIndex, 1);\n        }\n    };\n    return SubjectSubscription;\n}(Subscription_1.Subscription));\nexports.SubjectSubscription = SubjectSubscription;\n\n},{\"./Subscription\":14}],13:[function(require,module,exports){\n\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar isFunction_1 = require('./util/isFunction');\nvar Subscription_1 = require('./Subscription');\nvar Observer_1 = require('./Observer');\nvar rxSubscriber_1 = require('./symbol/rxSubscriber');\n/**\n * Implements the {@link Observer} interface and extends the\n * {@link Subscription} class. While the {@link Observer} is the public API for\n * consuming the values of an {@link Observable}, all Observers get converted to\n * a Subscriber, in order to provide Subscription-like capabilities such as\n * `unsubscribe`. Subscriber is a common type in RxJS, and crucial for\n * implementing operators, but it is rarely used as a public API.\n *\n * @class Subscriber<T>\n */\nvar Subscriber = (function (_super) {\n    __extends(Subscriber, _super);\n    /**\n     * @param {Observer|function(value: T): void} [destinationOrNext] A partially\n     * defined Observer or a `next` callback function.\n     * @param {function(e: ?any): void} [error] The `error` callback of an\n     * Observer.\n     * @param {function(): void} [complete] The `complete` callback of an\n     * Observer.\n     */\n    function Subscriber(destinationOrNext, error, complete) {\n        _super.call(this);\n        this.syncErrorValue = null;\n        this.syncErrorThrown = false;\n        this.syncErrorThrowable = false;\n        this.isStopped = false;\n        switch (arguments.length) {\n            case 0:\n                this.destination = Observer_1.empty;\n                break;\n            case 1:\n                if (!destinationOrNext) {\n                    this.destination = Observer_1.empty;\n                    break;\n                }\n                if (typeof destinationOrNext === 'object') {\n                    if (destinationOrNext instanceof Subscriber) {\n                        this.destination = destinationOrNext;\n                        this.destination.add(this);\n                    }\n                    else {\n                        this.syncErrorThrowable = true;\n                        this.destination = new SafeSubscriber(this, destinationOrNext);\n                    }\n                    break;\n                }\n            default:\n                this.syncErrorThrowable = true;\n                this.destination = new SafeSubscriber(this, destinationOrNext, error, complete);\n                break;\n        }\n    }\n    Subscriber.prototype[rxSubscriber_1.$$rxSubscriber] = function () { return this; };\n    /**\n     * A static factory for a Subscriber, given a (potentially partial) definition\n     * of an Observer.\n     * @param {function(x: ?T): void} [next] The `next` callback of an Observer.\n     * @param {function(e: ?any): void} [error] The `error` callback of an\n     * Observer.\n     * @param {function(): void} [complete] The `complete` callback of an\n     * Observer.\n     * @return {Subscriber<T>} A Subscriber wrapping the (partially defined)\n     * Observer represented by the given arguments.\n     */\n    Subscriber.create = function (next, error, complete) {\n        var subscriber = new Subscriber(next, error, complete);\n        subscriber.syncErrorThrowable = false;\n        return subscriber;\n    };\n    /**\n     * The {@link Observer} callback to receive notifications of type `next` from\n     * the Observable, with a value. The Observable may call this method 0 or more\n     * times.\n     * @param {T} [value] The `next` value.\n     * @return {void}\n     */\n    Subscriber.prototype.next = function (value) {\n        if (!this.isStopped) {\n            this._next(value);\n        }\n    };\n    /**\n     * The {@link Observer} callback to receive notifications of type `error` from\n     * the Observable, with an attached {@link Error}. Notifies the Observer that\n     * the Observable has experienced an error condition.\n     * @param {any} [err] The `error` exception.\n     * @return {void}\n     */\n    Subscriber.prototype.error = function (err) {\n        if (!this.isStopped) {\n            this.isStopped = true;\n            this._error(err);\n        }\n    };\n    /**\n     * The {@link Observer} callback to receive a valueless notification of type\n     * `complete` from the Observable. Notifies the Observer that the Observable\n     * has finished sending push-based notifications.\n     * @return {void}\n     */\n    Subscriber.prototype.complete = function () {\n        if (!this.isStopped) {\n            this.isStopped = true;\n            this._complete();\n        }\n    };\n    Subscriber.prototype.unsubscribe = function () {\n        if (this.closed) {\n            return;\n        }\n        this.isStopped = true;\n        _super.prototype.unsubscribe.call(this);\n    };\n    Subscriber.prototype._next = function (value) {\n        this.destination.next(value);\n    };\n    Subscriber.prototype._error = function (err) {\n        this.destination.error(err);\n        this.unsubscribe();\n    };\n    Subscriber.prototype._complete = function () {\n        this.destination.complete();\n        this.unsubscribe();\n    };\n    return Subscriber;\n}(Subscription_1.Subscription));\nexports.Subscriber = Subscriber;\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar SafeSubscriber = (function (_super) {\n    __extends(SafeSubscriber, _super);\n    function SafeSubscriber(_parent, observerOrNext, error, complete) {\n        _super.call(this);\n        this._parent = _parent;\n        var next;\n        var context = this;\n        if (isFunction_1.isFunction(observerOrNext)) {\n            next = observerOrNext;\n        }\n        else if (observerOrNext) {\n            context = observerOrNext;\n            next = observerOrNext.next;\n            error = observerOrNext.error;\n            complete = observerOrNext.complete;\n            if (isFunction_1.isFunction(context.unsubscribe)) {\n                this.add(context.unsubscribe.bind(context));\n            }\n            context.unsubscribe = this.unsubscribe.bind(this);\n        }\n        this._context = context;\n        this._next = next;\n        this._error = error;\n        this._complete = complete;\n    }\n    SafeSubscriber.prototype.next = function (value) {\n        if (!this.isStopped && this._next) {\n            var _parent = this._parent;\n            if (!_parent.syncErrorThrowable) {\n                this.__tryOrUnsub(this._next, value);\n            }\n            else if (this.__tryOrSetError(_parent, this._next, value)) {\n                this.unsubscribe();\n            }\n        }\n    };\n    SafeSubscriber.prototype.error = function (err) {\n        if (!this.isStopped) {\n            var _parent = this._parent;\n            if (this._error) {\n                if (!_parent.syncErrorThrowable) {\n                    this.__tryOrUnsub(this._error, err);\n                    this.unsubscribe();\n                }\n                else {\n                    this.__tryOrSetError(_parent, this._error, err);\n                    this.unsubscribe();\n                }\n            }\n            else if (!_parent.syncErrorThrowable) {\n                this.unsubscribe();\n                throw err;\n            }\n            else {\n                _parent.syncErrorValue = err;\n                _parent.syncErrorThrown = true;\n                this.unsubscribe();\n            }\n        }\n    };\n    SafeSubscriber.prototype.complete = function () {\n        if (!this.isStopped) {\n            var _parent = this._parent;\n            if (this._complete) {\n                if (!_parent.syncErrorThrowable) {\n                    this.__tryOrUnsub(this._complete);\n                    this.unsubscribe();\n                }\n                else {\n                    this.__tryOrSetError(_parent, this._complete);\n                    this.unsubscribe();\n                }\n            }\n            else {\n                this.unsubscribe();\n            }\n        }\n    };\n    SafeSubscriber.prototype.__tryOrUnsub = function (fn, value) {\n        try {\n            fn.call(this._context, value);\n        }\n        catch (err) {\n            this.unsubscribe();\n            throw err;\n        }\n    };\n    SafeSubscriber.prototype.__tryOrSetError = function (parent, fn, value) {\n        try {\n            fn.call(this._context, value);\n        }\n        catch (err) {\n            parent.syncErrorValue = err;\n            parent.syncErrorThrown = true;\n            return true;\n        }\n        return false;\n    };\n    SafeSubscriber.prototype._unsubscribe = function () {\n        var _parent = this._parent;\n        this._context = null;\n        this._parent = null;\n        _parent.unsubscribe();\n    };\n    return SafeSubscriber;\n}(Subscriber));\n\n},{\"./Observer\":6,\"./Subscription\":14,\"./symbol/rxSubscriber\":313,\"./util/isFunction\":333}],14:[function(require,module,exports){\n\"use strict\";\nvar isArray_1 = require('./util/isArray');\nvar isObject_1 = require('./util/isObject');\nvar isFunction_1 = require('./util/isFunction');\nvar tryCatch_1 = require('./util/tryCatch');\nvar errorObject_1 = require('./util/errorObject');\nvar UnsubscriptionError_1 = require('./util/UnsubscriptionError');\n/**\n * Represents a disposable resource, such as the execution of an Observable. A\n * Subscription has one important method, `unsubscribe`, that takes no argument\n * and just disposes the resource held by the subscription.\n *\n * Additionally, subscriptions may be grouped together through the `add()`\n * method, which will attach a child Subscription to the current Subscription.\n * When a Subscription is unsubscribed, all its children (and its grandchildren)\n * will be unsubscribed as well.\n *\n * @class Subscription\n */\nvar Subscription = (function () {\n    /**\n     * @param {function(): void} [unsubscribe] A function describing how to\n     * perform the disposal of resources when the `unsubscribe` method is called.\n     */\n    function Subscription(unsubscribe) {\n        /**\n         * A flag to indicate whether this Subscription has already been unsubscribed.\n         * @type {boolean}\n         */\n        this.closed = false;\n        if (unsubscribe) {\n            this._unsubscribe = unsubscribe;\n        }\n    }\n    /**\n     * Disposes the resources held by the subscription. May, for instance, cancel\n     * an ongoing Observable execution or cancel any other type of work that\n     * started when the Subscription was created.\n     * @return {void}\n     */\n    Subscription.prototype.unsubscribe = function () {\n        var hasErrors = false;\n        var errors;\n        if (this.closed) {\n            return;\n        }\n        this.closed = true;\n        var _a = this, _unsubscribe = _a._unsubscribe, _subscriptions = _a._subscriptions;\n        this._subscriptions = null;\n        if (isFunction_1.isFunction(_unsubscribe)) {\n            var trial = tryCatch_1.tryCatch(_unsubscribe).call(this);\n            if (trial === errorObject_1.errorObject) {\n                hasErrors = true;\n                (errors = errors || []).push(errorObject_1.errorObject.e);\n            }\n        }\n        if (isArray_1.isArray(_subscriptions)) {\n            var index = -1;\n            var len = _subscriptions.length;\n            while (++index < len) {\n                var sub = _subscriptions[index];\n                if (isObject_1.isObject(sub)) {\n                    var trial = tryCatch_1.tryCatch(sub.unsubscribe).call(sub);\n                    if (trial === errorObject_1.errorObject) {\n                        hasErrors = true;\n                        errors = errors || [];\n                        var err = errorObject_1.errorObject.e;\n                        if (err instanceof UnsubscriptionError_1.UnsubscriptionError) {\n                            errors = errors.concat(err.errors);\n                        }\n                        else {\n                            errors.push(err);\n                        }\n                    }\n                }\n            }\n        }\n        if (hasErrors) {\n            throw new UnsubscriptionError_1.UnsubscriptionError(errors);\n        }\n    };\n    /**\n     * Adds a tear down to be called during the unsubscribe() of this\n     * Subscription.\n     *\n     * If the tear down being added is a subscription that is already\n     * unsubscribed, is the same reference `add` is being called on, or is\n     * `Subscription.EMPTY`, it will not be added.\n     *\n     * If this subscription is already in an `closed` state, the passed\n     * tear down logic will be executed immediately.\n     *\n     * @param {TeardownLogic} teardown The additional logic to execute on\n     * teardown.\n     * @return {Subscription} Returns the Subscription used or created to be\n     * added to the inner subscriptions list. This Subscription can be used with\n     * `remove()` to remove the passed teardown logic from the inner subscriptions\n     * list.\n     */\n    Subscription.prototype.add = function (teardown) {\n        if (!teardown || (teardown === Subscription.EMPTY)) {\n            return Subscription.EMPTY;\n        }\n        if (teardown === this) {\n            return this;\n        }\n        var sub = teardown;\n        switch (typeof teardown) {\n            case 'function':\n                sub = new Subscription(teardown);\n            case 'object':\n                if (sub.closed || typeof sub.unsubscribe !== 'function') {\n                    break;\n                }\n                else if (this.closed) {\n                    sub.unsubscribe();\n                }\n                else {\n                    (this._subscriptions || (this._subscriptions = [])).push(sub);\n                }\n                break;\n            default:\n                throw new Error('unrecognized teardown ' + teardown + ' added to Subscription.');\n        }\n        return sub;\n    };\n    /**\n     * Removes a Subscription from the internal list of subscriptions that will\n     * unsubscribe during the unsubscribe process of this Subscription.\n     * @param {Subscription} subscription The subscription to remove.\n     * @return {void}\n     */\n    Subscription.prototype.remove = function (subscription) {\n        // HACK: This might be redundant because of the logic in `add()`\n        if (subscription == null || (subscription === this) || (subscription === Subscription.EMPTY)) {\n            return;\n        }\n        var subscriptions = this._subscriptions;\n        if (subscriptions) {\n            var subscriptionIndex = subscriptions.indexOf(subscription);\n            if (subscriptionIndex !== -1) {\n                subscriptions.splice(subscriptionIndex, 1);\n            }\n        }\n    };\n    Subscription.EMPTY = (function (empty) {\n        empty.closed = true;\n        return empty;\n    }(new Subscription()));\n    return Subscription;\n}());\nexports.Subscription = Subscription;\n\n},{\"./util/UnsubscriptionError\":327,\"./util/errorObject\":330,\"./util/isArray\":331,\"./util/isFunction\":333,\"./util/isObject\":335,\"./util/tryCatch\":343}],15:[function(require,module,exports){\n\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar bindCallback_1 = require('../../observable/bindCallback');\nObservable_1.Observable.bindCallback = bindCallback_1.bindCallback;\n\n},{\"../../Observable\":5,\"../../observable/bindCallback\":169}],16:[function(require,module,exports){\n\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar bindNodeCallback_1 = require('../../observable/bindNodeCallback');\nObservable_1.Observable.bindNodeCallback = bindNodeCallback_1.bindNodeCallback;\n\n},{\"../../Observable\":5,\"../../observable/bindNodeCallback\":170}],17:[function(require,module,exports){\n\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar combineLatest_1 = require('../../observable/combineLatest');\nObservable_1.Observable.combineLatest = combineLatest_1.combineLatest;\n\n},{\"../../Observable\":5,\"../../observable/combineLatest\":171}],18:[function(require,module,exports){\n\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar concat_1 = require('../../observable/concat');\nObservable_1.Observable.concat = concat_1.concat;\n\n},{\"../../Observable\":5,\"../../observable/concat\":172}],19:[function(require,module,exports){\n\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar defer_1 = require('../../observable/defer');\nObservable_1.Observable.defer = defer_1.defer;\n\n},{\"../../Observable\":5,\"../../observable/defer\":173}],20:[function(require,module,exports){\n\"use strict\";\nvar Observable_1 = require('../../../Observable');\nvar ajax_1 = require('../../../observable/dom/ajax');\nObservable_1.Observable.ajax = ajax_1.ajax;\n\n},{\"../../../Observable\":5,\"../../../observable/dom/ajax\":176}],21:[function(require,module,exports){\n\"use strict\";\nvar Observable_1 = require('../../../Observable');\nvar webSocket_1 = require('../../../observable/dom/webSocket');\nObservable_1.Observable.webSocket = webSocket_1.webSocket;\n\n},{\"../../../Observable\":5,\"../../../observable/dom/webSocket\":177}],22:[function(require,module,exports){\n\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar empty_1 = require('../../observable/empty');\nObservable_1.Observable.empty = empty_1.empty;\n\n},{\"../../Observable\":5,\"../../observable/empty\":178}],23:[function(require,module,exports){\n\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar forkJoin_1 = require('../../observable/forkJoin');\nObservable_1.Observable.forkJoin = forkJoin_1.forkJoin;\n\n},{\"../../Observable\":5,\"../../observable/forkJoin\":179}],24:[function(require,module,exports){\n\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar from_1 = require('../../observable/from');\nObservable_1.Observable.from = from_1.from;\n\n},{\"../../Observable\":5,\"../../observable/from\":180}],25:[function(require,module,exports){\n\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar fromEvent_1 = require('../../observable/fromEvent');\nObservable_1.Observable.fromEvent = fromEvent_1.fromEvent;\n\n},{\"../../Observable\":5,\"../../observable/fromEvent\":181}],26:[function(require,module,exports){\n\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar fromEventPattern_1 = require('../../observable/fromEventPattern');\nObservable_1.Observable.fromEventPattern = fromEventPattern_1.fromEventPattern;\n\n},{\"../../Observable\":5,\"../../observable/fromEventPattern\":182}],27:[function(require,module,exports){\n\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar fromPromise_1 = require('../../observable/fromPromise');\nObservable_1.Observable.fromPromise = fromPromise_1.fromPromise;\n\n},{\"../../Observable\":5,\"../../observable/fromPromise\":183}],28:[function(require,module,exports){\n\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar GenerateObservable_1 = require('../../observable/GenerateObservable');\nObservable_1.Observable.generate = GenerateObservable_1.GenerateObservable.create;\n\n},{\"../../Observable\":5,\"../../observable/GenerateObservable\":156}],29:[function(require,module,exports){\n\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar if_1 = require('../../observable/if');\nObservable_1.Observable.if = if_1._if;\n\n},{\"../../Observable\":5,\"../../observable/if\":184}],30:[function(require,module,exports){\n\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar interval_1 = require('../../observable/interval');\nObservable_1.Observable.interval = interval_1.interval;\n\n},{\"../../Observable\":5,\"../../observable/interval\":185}],31:[function(require,module,exports){\n\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar merge_1 = require('../../observable/merge');\nObservable_1.Observable.merge = merge_1.merge;\n\n},{\"../../Observable\":5,\"../../observable/merge\":186}],32:[function(require,module,exports){\n\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar never_1 = require('../../observable/never');\nObservable_1.Observable.never = never_1.never;\n\n},{\"../../Observable\":5,\"../../observable/never\":187}],33:[function(require,module,exports){\n\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar of_1 = require('../../observable/of');\nObservable_1.Observable.of = of_1.of;\n\n},{\"../../Observable\":5,\"../../observable/of\":188}],34:[function(require,module,exports){\n\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar onErrorResumeNext_1 = require('../../operator/onErrorResumeNext');\nObservable_1.Observable.onErrorResumeNext = onErrorResumeNext_1.onErrorResumeNextStatic;\n\n},{\"../../Observable\":5,\"../../operator/onErrorResumeNext\":249}],35:[function(require,module,exports){\n\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar pairs_1 = require('../../observable/pairs');\nObservable_1.Observable.pairs = pairs_1.pairs;\n\n},{\"../../Observable\":5,\"../../observable/pairs\":189}],36:[function(require,module,exports){\n\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar race_1 = require('../../operator/race');\nObservable_1.Observable.race = race_1.raceStatic;\n\n},{\"../../Observable\":5,\"../../operator/race\":257}],37:[function(require,module,exports){\n\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar range_1 = require('../../observable/range');\nObservable_1.Observable.range = range_1.range;\n\n},{\"../../Observable\":5,\"../../observable/range\":190}],38:[function(require,module,exports){\n\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar throw_1 = require('../../observable/throw');\nObservable_1.Observable.throw = throw_1._throw;\n\n},{\"../../Observable\":5,\"../../observable/throw\":191}],39:[function(require,module,exports){\n\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar timer_1 = require('../../observable/timer');\nObservable_1.Observable.timer = timer_1.timer;\n\n},{\"../../Observable\":5,\"../../observable/timer\":192}],40:[function(require,module,exports){\n\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar using_1 = require('../../observable/using');\nObservable_1.Observable.using = using_1.using;\n\n},{\"../../Observable\":5,\"../../observable/using\":193}],41:[function(require,module,exports){\n\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar zip_1 = require('../../observable/zip');\nObservable_1.Observable.zip = zip_1.zip;\n\n},{\"../../Observable\":5,\"../../observable/zip\":194}],42:[function(require,module,exports){\n\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar audit_1 = require('../../operator/audit');\nObservable_1.Observable.prototype.audit = audit_1.audit;\n\n},{\"../../Observable\":5,\"../../operator/audit\":195}],43:[function(require,module,exports){\n\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar auditTime_1 = require('../../operator/auditTime');\nObservable_1.Observable.prototype.auditTime = auditTime_1.auditTime;\n\n},{\"../../Observable\":5,\"../../operator/auditTime\":196}],44:[function(require,module,exports){\n\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar buffer_1 = require('../../operator/buffer');\nObservable_1.Observable.prototype.buffer = buffer_1.buffer;\n\n},{\"../../Observable\":5,\"../../operator/buffer\":197}],45:[function(require,module,exports){\n\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar bufferCount_1 = require('../../operator/bufferCount');\nObservable_1.Observable.prototype.bufferCount = bufferCount_1.bufferCount;\n\n},{\"../../Observable\":5,\"../../operator/bufferCount\":198}],46:[function(require,module,exports){\n\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar bufferTime_1 = require('../../operator/bufferTime');\nObservable_1.Observable.prototype.bufferTime = bufferTime_1.bufferTime;\n\n},{\"../../Observable\":5,\"../../operator/bufferTime\":199}],47:[function(require,module,exports){\n\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar bufferToggle_1 = require('../../operator/bufferToggle');\nObservable_1.Observable.prototype.bufferToggle = bufferToggle_1.bufferToggle;\n\n},{\"../../Observable\":5,\"../../operator/bufferToggle\":200}],48:[function(require,module,exports){\n\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar bufferWhen_1 = require('../../operator/bufferWhen');\nObservable_1.Observable.prototype.bufferWhen = bufferWhen_1.bufferWhen;\n\n},{\"../../Observable\":5,\"../../operator/bufferWhen\":201}],49:[function(require,module,exports){\n\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar cache_1 = require('../../operator/cache');\nObservable_1.Observable.prototype.cache = cache_1.cache;\n\n},{\"../../Observable\":5,\"../../operator/cache\":202}],50:[function(require,module,exports){\n\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar catch_1 = require('../../operator/catch');\nObservable_1.Observable.prototype.catch = catch_1._catch;\nObservable_1.Observable.prototype._catch = catch_1._catch;\n\n},{\"../../Observable\":5,\"../../operator/catch\":203}],51:[function(require,module,exports){\n\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar combineAll_1 = require('../../operator/combineAll');\nObservable_1.Observable.prototype.combineAll = combineAll_1.combineAll;\n\n},{\"../../Observable\":5,\"../../operator/combineAll\":204}],52:[function(require,module,exports){\n\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar combineLatest_1 = require('../../operator/combineLatest');\nObservable_1.Observable.prototype.combineLatest = combineLatest_1.combineLatest;\n\n},{\"../../Observable\":5,\"../../operator/combineLatest\":205}],53:[function(require,module,exports){\n\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar concat_1 = require('../../operator/concat');\nObservable_1.Observable.prototype.concat = concat_1.concat;\n\n},{\"../../Observable\":5,\"../../operator/concat\":206}],54:[function(require,module,exports){\n\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar concatAll_1 = require('../../operator/concatAll');\nObservable_1.Observable.prototype.concatAll = concatAll_1.concatAll;\n\n},{\"../../Observable\":5,\"../../operator/concatAll\":207}],55:[function(require,module,exports){\n\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar concatMap_1 = require('../../operator/concatMap');\nObservable_1.Observable.prototype.concatMap = concatMap_1.concatMap;\n\n},{\"../../Observable\":5,\"../../operator/concatMap\":208}],56:[function(require,module,exports){\n\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar concatMapTo_1 = require('../../operator/concatMapTo');\nObservable_1.Observable.prototype.concatMapTo = concatMapTo_1.concatMapTo;\n\n},{\"../../Observable\":5,\"../../operator/concatMapTo\":209}],57:[function(require,module,exports){\n\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar count_1 = require('../../operator/count');\nObservable_1.Observable.prototype.count = count_1.count;\n\n},{\"../../Observable\":5,\"../../operator/count\":210}],58:[function(require,module,exports){\n\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar debounce_1 = require('../../operator/debounce');\nObservable_1.Observable.prototype.debounce = debounce_1.debounce;\n\n},{\"../../Observable\":5,\"../../operator/debounce\":211}],59:[function(require,module,exports){\n\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar debounceTime_1 = require('../../operator/debounceTime');\nObservable_1.Observable.prototype.debounceTime = debounceTime_1.debounceTime;\n\n},{\"../../Observable\":5,\"../../operator/debounceTime\":212}],60:[function(require,module,exports){\n\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar defaultIfEmpty_1 = require('../../operator/defaultIfEmpty');\nObservable_1.Observable.prototype.defaultIfEmpty = defaultIfEmpty_1.defaultIfEmpty;\n\n},{\"../../Observable\":5,\"../../operator/defaultIfEmpty\":213}],61:[function(require,module,exports){\n\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar delay_1 = require('../../operator/delay');\nObservable_1.Observable.prototype.delay = delay_1.delay;\n\n},{\"../../Observable\":5,\"../../operator/delay\":214}],62:[function(require,module,exports){\n\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar delayWhen_1 = require('../../operator/delayWhen');\nObservable_1.Observable.prototype.delayWhen = delayWhen_1.delayWhen;\n\n},{\"../../Observable\":5,\"../../operator/delayWhen\":215}],63:[function(require,module,exports){\n\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar dematerialize_1 = require('../../operator/dematerialize');\nObservable_1.Observable.prototype.dematerialize = dematerialize_1.dematerialize;\n\n},{\"../../Observable\":5,\"../../operator/dematerialize\":216}],64:[function(require,module,exports){\n\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar distinct_1 = require('../../operator/distinct');\nObservable_1.Observable.prototype.distinct = distinct_1.distinct;\n\n},{\"../../Observable\":5,\"../../operator/distinct\":217}],65:[function(require,module,exports){\n\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar distinctKey_1 = require('../../operator/distinctKey');\nObservable_1.Observable.prototype.distinctKey = distinctKey_1.distinctKey;\n\n},{\"../../Observable\":5,\"../../operator/distinctKey\":218}],66:[function(require,module,exports){\n\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar distinctUntilChanged_1 = require('../../operator/distinctUntilChanged');\nObservable_1.Observable.prototype.distinctUntilChanged = distinctUntilChanged_1.distinctUntilChanged;\n\n},{\"../../Observable\":5,\"../../operator/distinctUntilChanged\":219}],67:[function(require,module,exports){\n\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar distinctUntilKeyChanged_1 = require('../../operator/distinctUntilKeyChanged');\nObservable_1.Observable.prototype.distinctUntilKeyChanged = distinctUntilKeyChanged_1.distinctUntilKeyChanged;\n\n},{\"../../Observable\":5,\"../../operator/distinctUntilKeyChanged\":220}],68:[function(require,module,exports){\n\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar do_1 = require('../../operator/do');\nObservable_1.Observable.prototype.do = do_1._do;\nObservable_1.Observable.prototype._do = do_1._do;\n\n},{\"../../Observable\":5,\"../../operator/do\":221}],69:[function(require,module,exports){\n\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar elementAt_1 = require('../../operator/elementAt');\nObservable_1.Observable.prototype.elementAt = elementAt_1.elementAt;\n\n},{\"../../Observable\":5,\"../../operator/elementAt\":222}],70:[function(require,module,exports){\n\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar every_1 = require('../../operator/every');\nObservable_1.Observable.prototype.every = every_1.every;\n\n},{\"../../Observable\":5,\"../../operator/every\":223}],71:[function(require,module,exports){\n\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar exhaust_1 = require('../../operator/exhaust');\nObservable_1.Observable.prototype.exhaust = exhaust_1.exhaust;\n\n},{\"../../Observable\":5,\"../../operator/exhaust\":224}],72:[function(require,module,exports){\n\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar exhaustMap_1 = require('../../operator/exhaustMap');\nObservable_1.Observable.prototype.exhaustMap = exhaustMap_1.exhaustMap;\n\n},{\"../../Observable\":5,\"../../operator/exhaustMap\":225}],73:[function(require,module,exports){\n\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar expand_1 = require('../../operator/expand');\nObservable_1.Observable.prototype.expand = expand_1.expand;\n\n},{\"../../Observable\":5,\"../../operator/expand\":226}],74:[function(require,module,exports){\n\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar filter_1 = require('../../operator/filter');\nObservable_1.Observable.prototype.filter = filter_1.filter;\n\n},{\"../../Observable\":5,\"../../operator/filter\":227}],75:[function(require,module,exports){\n\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar finally_1 = require('../../operator/finally');\nObservable_1.Observable.prototype.finally = finally_1._finally;\nObservable_1.Observable.prototype._finally = finally_1._finally;\n\n},{\"../../Observable\":5,\"../../operator/finally\":228}],76:[function(require,module,exports){\n\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar find_1 = require('../../operator/find');\nObservable_1.Observable.prototype.find = find_1.find;\n\n},{\"../../Observable\":5,\"../../operator/find\":229}],77:[function(require,module,exports){\n\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar findIndex_1 = require('../../operator/findIndex');\nObservable_1.Observable.prototype.findIndex = findIndex_1.findIndex;\n\n},{\"../../Observable\":5,\"../../operator/findIndex\":230}],78:[function(require,module,exports){\n\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar first_1 = require('../../operator/first');\nObservable_1.Observable.prototype.first = first_1.first;\n\n},{\"../../Observable\":5,\"../../operator/first\":231}],79:[function(require,module,exports){\n\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar groupBy_1 = require('../../operator/groupBy');\nObservable_1.Observable.prototype.groupBy = groupBy_1.groupBy;\n\n},{\"../../Observable\":5,\"../../operator/groupBy\":232}],80:[function(require,module,exports){\n\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar ignoreElements_1 = require('../../operator/ignoreElements');\nObservable_1.Observable.prototype.ignoreElements = ignoreElements_1.ignoreElements;\n\n},{\"../../Observable\":5,\"../../operator/ignoreElements\":233}],81:[function(require,module,exports){\n\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar isEmpty_1 = require('../../operator/isEmpty');\nObservable_1.Observable.prototype.isEmpty = isEmpty_1.isEmpty;\n\n},{\"../../Observable\":5,\"../../operator/isEmpty\":234}],82:[function(require,module,exports){\n\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar last_1 = require('../../operator/last');\nObservable_1.Observable.prototype.last = last_1.last;\n\n},{\"../../Observable\":5,\"../../operator/last\":235}],83:[function(require,module,exports){\n\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar let_1 = require('../../operator/let');\nObservable_1.Observable.prototype.let = let_1.letProto;\nObservable_1.Observable.prototype.letBind = let_1.letProto;\n\n},{\"../../Observable\":5,\"../../operator/let\":236}],84:[function(require,module,exports){\n\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar map_1 = require('../../operator/map');\nObservable_1.Observable.prototype.map = map_1.map;\n\n},{\"../../Observable\":5,\"../../operator/map\":237}],85:[function(require,module,exports){\n\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar mapTo_1 = require('../../operator/mapTo');\nObservable_1.Observable.prototype.mapTo = mapTo_1.mapTo;\n\n},{\"../../Observable\":5,\"../../operator/mapTo\":238}],86:[function(require,module,exports){\n\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar materialize_1 = require('../../operator/materialize');\nObservable_1.Observable.prototype.materialize = materialize_1.materialize;\n\n},{\"../../Observable\":5,\"../../operator/materialize\":239}],87:[function(require,module,exports){\n\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar max_1 = require('../../operator/max');\nObservable_1.Observable.prototype.max = max_1.max;\n\n},{\"../../Observable\":5,\"../../operator/max\":240}],88:[function(require,module,exports){\n\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar merge_1 = require('../../operator/merge');\nObservable_1.Observable.prototype.merge = merge_1.merge;\n\n},{\"../../Observable\":5,\"../../operator/merge\":241}],89:[function(require,module,exports){\n\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar mergeAll_1 = require('../../operator/mergeAll');\nObservable_1.Observable.prototype.mergeAll = mergeAll_1.mergeAll;\n\n},{\"../../Observable\":5,\"../../operator/mergeAll\":242}],90:[function(require,module,exports){\n\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar mergeMap_1 = require('../../operator/mergeMap');\nObservable_1.Observable.prototype.mergeMap = mergeMap_1.mergeMap;\nObservable_1.Observable.prototype.flatMap = mergeMap_1.mergeMap;\n\n},{\"../../Observable\":5,\"../../operator/mergeMap\":243}],91:[function(require,module,exports){\n\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar mergeMapTo_1 = require('../../operator/mergeMapTo');\nObservable_1.Observable.prototype.flatMapTo = mergeMapTo_1.mergeMapTo;\nObservable_1.Observable.prototype.mergeMapTo = mergeMapTo_1.mergeMapTo;\n\n},{\"../../Observable\":5,\"../../operator/mergeMapTo\":244}],92:[function(require,module,exports){\n\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar mergeScan_1 = require('../../operator/mergeScan');\nObservable_1.Observable.prototype.mergeScan = mergeScan_1.mergeScan;\n\n},{\"../../Observable\":5,\"../../operator/mergeScan\":245}],93:[function(require,module,exports){\n\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar min_1 = require('../../operator/min');\nObservable_1.Observable.prototype.min = min_1.min;\n\n},{\"../../Observable\":5,\"../../operator/min\":246}],94:[function(require,module,exports){\n\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar multicast_1 = require('../../operator/multicast');\nObservable_1.Observable.prototype.multicast = multicast_1.multicast;\n\n},{\"../../Observable\":5,\"../../operator/multicast\":247}],95:[function(require,module,exports){\n\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar observeOn_1 = require('../../operator/observeOn');\nObservable_1.Observable.prototype.observeOn = observeOn_1.observeOn;\n\n},{\"../../Observable\":5,\"../../operator/observeOn\":248}],96:[function(require,module,exports){\n\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar onErrorResumeNext_1 = require('../../operator/onErrorResumeNext');\nObservable_1.Observable.prototype.onErrorResumeNext = onErrorResumeNext_1.onErrorResumeNext;\n\n},{\"../../Observable\":5,\"../../operator/onErrorResumeNext\":249}],97:[function(require,module,exports){\n\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar pairwise_1 = require('../../operator/pairwise');\nObservable_1.Observable.prototype.pairwise = pairwise_1.pairwise;\n\n},{\"../../Observable\":5,\"../../operator/pairwise\":250}],98:[function(require,module,exports){\n\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar partition_1 = require('../../operator/partition');\nObservable_1.Observable.prototype.partition = partition_1.partition;\n\n},{\"../../Observable\":5,\"../../operator/partition\":251}],99:[function(require,module,exports){\n\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar pluck_1 = require('../../operator/pluck');\nObservable_1.Observable.prototype.pluck = pluck_1.pluck;\n\n},{\"../../Observable\":5,\"../../operator/pluck\":252}],100:[function(require,module,exports){\n\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar publish_1 = require('../../operator/publish');\nObservable_1.Observable.prototype.publish = publish_1.publish;\n\n},{\"../../Observable\":5,\"../../operator/publish\":253}],101:[function(require,module,exports){\n\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar publishBehavior_1 = require('../../operator/publishBehavior');\nObservable_1.Observable.prototype.publishBehavior = publishBehavior_1.publishBehavior;\n\n},{\"../../Observable\":5,\"../../operator/publishBehavior\":254}],102:[function(require,module,exports){\n\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar publishLast_1 = require('../../operator/publishLast');\nObservable_1.Observable.prototype.publishLast = publishLast_1.publishLast;\n\n},{\"../../Observable\":5,\"../../operator/publishLast\":255}],103:[function(require,module,exports){\n\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar publishReplay_1 = require('../../operator/publishReplay');\nObservable_1.Observable.prototype.publishReplay = publishReplay_1.publishReplay;\n\n},{\"../../Observable\":5,\"../../operator/publishReplay\":256}],104:[function(require,module,exports){\n\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar race_1 = require('../../operator/race');\nObservable_1.Observable.prototype.race = race_1.race;\n\n},{\"../../Observable\":5,\"../../operator/race\":257}],105:[function(require,module,exports){\n\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar reduce_1 = require('../../operator/reduce');\nObservable_1.Observable.prototype.reduce = reduce_1.reduce;\n\n},{\"../../Observable\":5,\"../../operator/reduce\":258}],106:[function(require,module,exports){\n\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar repeat_1 = require('../../operator/repeat');\nObservable_1.Observable.prototype.repeat = repeat_1.repeat;\n\n},{\"../../Observable\":5,\"../../operator/repeat\":259}],107:[function(require,module,exports){\n\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar repeatWhen_1 = require('../../operator/repeatWhen');\nObservable_1.Observable.prototype.repeatWhen = repeatWhen_1.repeatWhen;\n\n},{\"../../Observable\":5,\"../../operator/repeatWhen\":260}],108:[function(require,module,exports){\n\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar retry_1 = require('../../operator/retry');\nObservable_1.Observable.prototype.retry = retry_1.retry;\n\n},{\"../../Observable\":5,\"../../operator/retry\":261}],109:[function(require,module,exports){\n\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar retryWhen_1 = require('../../operator/retryWhen');\nObservable_1.Observable.prototype.retryWhen = retryWhen_1.retryWhen;\n\n},{\"../../Observable\":5,\"../../operator/retryWhen\":262}],110:[function(require,module,exports){\n\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar sample_1 = require('../../operator/sample');\nObservable_1.Observable.prototype.sample = sample_1.sample;\n\n},{\"../../Observable\":5,\"../../operator/sample\":263}],111:[function(require,module,exports){\n\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar sampleTime_1 = require('../../operator/sampleTime');\nObservable_1.Observable.prototype.sampleTime = sampleTime_1.sampleTime;\n\n},{\"../../Observable\":5,\"../../operator/sampleTime\":264}],112:[function(require,module,exports){\n\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar scan_1 = require('../../operator/scan');\nObservable_1.Observable.prototype.scan = scan_1.scan;\n\n},{\"../../Observable\":5,\"../../operator/scan\":265}],113:[function(require,module,exports){\n\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar sequenceEqual_1 = require('../../operator/sequenceEqual');\nObservable_1.Observable.prototype.sequenceEqual = sequenceEqual_1.sequenceEqual;\n\n},{\"../../Observable\":5,\"../../operator/sequenceEqual\":266}],114:[function(require,module,exports){\n\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar share_1 = require('../../operator/share');\nObservable_1.Observable.prototype.share = share_1.share;\n\n},{\"../../Observable\":5,\"../../operator/share\":267}],115:[function(require,module,exports){\n\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar single_1 = require('../../operator/single');\nObservable_1.Observable.prototype.single = single_1.single;\n\n},{\"../../Observable\":5,\"../../operator/single\":268}],116:[function(require,module,exports){\n\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar skip_1 = require('../../operator/skip');\nObservable_1.Observable.prototype.skip = skip_1.skip;\n\n},{\"../../Observable\":5,\"../../operator/skip\":269}],117:[function(require,module,exports){\n\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar skipUntil_1 = require('../../operator/skipUntil');\nObservable_1.Observable.prototype.skipUntil = skipUntil_1.skipUntil;\n\n},{\"../../Observable\":5,\"../../operator/skipUntil\":270}],118:[function(require,module,exports){\n\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar skipWhile_1 = require('../../operator/skipWhile');\nObservable_1.Observable.prototype.skipWhile = skipWhile_1.skipWhile;\n\n},{\"../../Observable\":5,\"../../operator/skipWhile\":271}],119:[function(require,module,exports){\n\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar startWith_1 = require('../../operator/startWith');\nObservable_1.Observable.prototype.startWith = startWith_1.startWith;\n\n},{\"../../Observable\":5,\"../../operator/startWith\":272}],120:[function(require,module,exports){\n\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar subscribeOn_1 = require('../../operator/subscribeOn');\nObservable_1.Observable.prototype.subscribeOn = subscribeOn_1.subscribeOn;\n\n},{\"../../Observable\":5,\"../../operator/subscribeOn\":273}],121:[function(require,module,exports){\n\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar switch_1 = require('../../operator/switch');\nObservable_1.Observable.prototype.switch = switch_1._switch;\nObservable_1.Observable.prototype._switch = switch_1._switch;\n\n},{\"../../Observable\":5,\"../../operator/switch\":274}],122:[function(require,module,exports){\n\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar switchMap_1 = require('../../operator/switchMap');\nObservable_1.Observable.prototype.switchMap = switchMap_1.switchMap;\n\n},{\"../../Observable\":5,\"../../operator/switchMap\":275}],123:[function(require,module,exports){\n\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar switchMapTo_1 = require('../../operator/switchMapTo');\nObservable_1.Observable.prototype.switchMapTo = switchMapTo_1.switchMapTo;\n\n},{\"../../Observable\":5,\"../../operator/switchMapTo\":276}],124:[function(require,module,exports){\n\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar take_1 = require('../../operator/take');\nObservable_1.Observable.prototype.take = take_1.take;\n\n},{\"../../Observable\":5,\"../../operator/take\":277}],125:[function(require,module,exports){\n\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar takeLast_1 = require('../../operator/takeLast');\nObservable_1.Observable.prototype.takeLast = takeLast_1.takeLast;\n\n},{\"../../Observable\":5,\"../../operator/takeLast\":278}],126:[function(require,module,exports){\n\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar takeUntil_1 = require('../../operator/takeUntil');\nObservable_1.Observable.prototype.takeUntil = takeUntil_1.takeUntil;\n\n},{\"../../Observable\":5,\"../../operator/takeUntil\":279}],127:[function(require,module,exports){\n\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar takeWhile_1 = require('../../operator/takeWhile');\nObservable_1.Observable.prototype.takeWhile = takeWhile_1.takeWhile;\n\n},{\"../../Observable\":5,\"../../operator/takeWhile\":280}],128:[function(require,module,exports){\n\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar throttle_1 = require('../../operator/throttle');\nObservable_1.Observable.prototype.throttle = throttle_1.throttle;\n\n},{\"../../Observable\":5,\"../../operator/throttle\":281}],129:[function(require,module,exports){\n\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar throttleTime_1 = require('../../operator/throttleTime');\nObservable_1.Observable.prototype.throttleTime = throttleTime_1.throttleTime;\n\n},{\"../../Observable\":5,\"../../operator/throttleTime\":282}],130:[function(require,module,exports){\n\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar timeInterval_1 = require('../../operator/timeInterval');\nObservable_1.Observable.prototype.timeInterval = timeInterval_1.timeInterval;\n\n},{\"../../Observable\":5,\"../../operator/timeInterval\":283}],131:[function(require,module,exports){\n\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar timeout_1 = require('../../operator/timeout');\nObservable_1.Observable.prototype.timeout = timeout_1.timeout;\n\n},{\"../../Observable\":5,\"../../operator/timeout\":284}],132:[function(require,module,exports){\n\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar timeoutWith_1 = require('../../operator/timeoutWith');\nObservable_1.Observable.prototype.timeoutWith = timeoutWith_1.timeoutWith;\n\n},{\"../../Observable\":5,\"../../operator/timeoutWith\":285}],133:[function(require,module,exports){\n\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar timestamp_1 = require('../../operator/timestamp');\nObservable_1.Observable.prototype.timestamp = timestamp_1.timestamp;\n\n},{\"../../Observable\":5,\"../../operator/timestamp\":286}],134:[function(require,module,exports){\n\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar toArray_1 = require('../../operator/toArray');\nObservable_1.Observable.prototype.toArray = toArray_1.toArray;\n\n},{\"../../Observable\":5,\"../../operator/toArray\":287}],135:[function(require,module,exports){\n\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar toPromise_1 = require('../../operator/toPromise');\nObservable_1.Observable.prototype.toPromise = toPromise_1.toPromise;\n\n},{\"../../Observable\":5,\"../../operator/toPromise\":288}],136:[function(require,module,exports){\n\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar window_1 = require('../../operator/window');\nObservable_1.Observable.prototype.window = window_1.window;\n\n},{\"../../Observable\":5,\"../../operator/window\":289}],137:[function(require,module,exports){\n\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar windowCount_1 = require('../../operator/windowCount');\nObservable_1.Observable.prototype.windowCount = windowCount_1.windowCount;\n\n},{\"../../Observable\":5,\"../../operator/windowCount\":290}],138:[function(require,module,exports){\n\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar windowTime_1 = require('../../operator/windowTime');\nObservable_1.Observable.prototype.windowTime = windowTime_1.windowTime;\n\n},{\"../../Observable\":5,\"../../operator/windowTime\":291}],139:[function(require,module,exports){\n\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar windowToggle_1 = require('../../operator/windowToggle');\nObservable_1.Observable.prototype.windowToggle = windowToggle_1.windowToggle;\n\n},{\"../../Observable\":5,\"../../operator/windowToggle\":292}],140:[function(require,module,exports){\n\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar windowWhen_1 = require('../../operator/windowWhen');\nObservable_1.Observable.prototype.windowWhen = windowWhen_1.windowWhen;\n\n},{\"../../Observable\":5,\"../../operator/windowWhen\":293}],141:[function(require,module,exports){\n\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar withLatestFrom_1 = require('../../operator/withLatestFrom');\nObservable_1.Observable.prototype.withLatestFrom = withLatestFrom_1.withLatestFrom;\n\n},{\"../../Observable\":5,\"../../operator/withLatestFrom\":294}],142:[function(require,module,exports){\n\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar zip_1 = require('../../operator/zip');\nObservable_1.Observable.prototype.zip = zip_1.zipProto;\n\n},{\"../../Observable\":5,\"../../operator/zip\":295}],143:[function(require,module,exports){\n\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar zipAll_1 = require('../../operator/zipAll');\nObservable_1.Observable.prototype.zipAll = zipAll_1.zipAll;\n\n},{\"../../Observable\":5,\"../../operator/zipAll\":296}],144:[function(require,module,exports){\n\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Observable_1 = require('../Observable');\nvar ScalarObservable_1 = require('./ScalarObservable');\nvar EmptyObservable_1 = require('./EmptyObservable');\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nvar ArrayLikeObservable = (function (_super) {\n    __extends(ArrayLikeObservable, _super);\n    function ArrayLikeObservable(arrayLike, scheduler) {\n        _super.call(this);\n        this.arrayLike = arrayLike;\n        this.scheduler = scheduler;\n        if (!scheduler && arrayLike.length === 1) {\n            this._isScalar = true;\n            this.value = arrayLike[0];\n        }\n    }\n    ArrayLikeObservable.create = function (arrayLike, scheduler) {\n        var length = arrayLike.length;\n        if (length === 0) {\n            return new EmptyObservable_1.EmptyObservable();\n        }\n        else if (length === 1) {\n            return new ScalarObservable_1.ScalarObservable(arrayLike[0], scheduler);\n        }\n        else {\n            return new ArrayLikeObservable(arrayLike, scheduler);\n        }\n    };\n    ArrayLikeObservable.dispatch = function (state) {\n        var arrayLike = state.arrayLike, index = state.index, length = state.length, subscriber = state.subscriber;\n        if (subscriber.closed) {\n            return;\n        }\n        if (index >= length) {\n            subscriber.complete();\n            return;\n        }\n        subscriber.next(arrayLike[index]);\n        state.index = index + 1;\n        this.schedule(state);\n    };\n    ArrayLikeObservable.prototype._subscribe = function (subscriber) {\n        var index = 0;\n        var _a = this, arrayLike = _a.arrayLike, scheduler = _a.scheduler;\n        var length = arrayLike.length;\n        if (scheduler) {\n            return scheduler.schedule(ArrayLikeObservable.dispatch, 0, {\n                arrayLike: arrayLike, index: index, length: length, subscriber: subscriber\n            });\n        }\n        else {\n            for (var i = 0; i < length && !subscriber.closed; i++) {\n                subscriber.next(arrayLike[i]);\n            }\n            subscriber.complete();\n        }\n    };\n    return ArrayLikeObservable;\n}(Observable_1.Observable));\nexports.ArrayLikeObservable = ArrayLikeObservable;\n\n},{\"../Observable\":5,\"./EmptyObservable\":150,\"./ScalarObservable\":165}],145:[function(require,module,exports){\n\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Observable_1 = require('../Observable');\nvar ScalarObservable_1 = require('./ScalarObservable');\nvar EmptyObservable_1 = require('./EmptyObservable');\nvar isScheduler_1 = require('../util/isScheduler');\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nvar ArrayObservable = (function (_super) {\n    __extends(ArrayObservable, _super);\n    function ArrayObservable(array, scheduler) {\n        _super.call(this);\n        this.array = array;\n        this.scheduler = scheduler;\n        if (!scheduler && array.length === 1) {\n            this._isScalar = true;\n            this.value = array[0];\n        }\n    }\n    ArrayObservable.create = function (array, scheduler) {\n        return new ArrayObservable(array, scheduler);\n    };\n    /**\n     * Creates an Observable that emits some values you specify as arguments,\n     * immediately one after the other, and then emits a complete notification.\n     *\n     * <span class=\"informal\">Emits the arguments you provide, then completes.\n     * </span>\n     *\n     * <img src=\"./img/of.png\" width=\"100%\">\n     *\n     * This static operator is useful for creating a simple Observable that only\n     * emits the arguments given, and the complete notification thereafter. It can\n     * be used for composing with other Observables, such as with {@link concat}.\n     * By default, it uses a `null` Scheduler, which means the `next`\n     * notifications are sent synchronously, although with a different Scheduler\n     * it is possible to determine when those notifications will be delivered.\n     *\n     * @example <caption>Emit 10, 20, 30, then 'a', 'b', 'c', then start ticking every second.</caption>\n     * var numbers = Rx.Observable.of(10, 20, 30);\n     * var letters = Rx.Observable.of('a', 'b', 'c');\n     * var interval = Rx.Observable.interval(1000);\n     * var result = numbers.concat(letters).concat(interval);\n     * result.subscribe(x => console.log(x));\n     *\n     * @see {@link create}\n     * @see {@link empty}\n     * @see {@link never}\n     * @see {@link throw}\n     *\n     * @param {...T} values Arguments that represent `next` values to be emitted.\n     * @param {Scheduler} [scheduler] A {@link Scheduler} to use for scheduling\n     * the emissions of the `next` notifications.\n     * @return {Observable<T>} An Observable that emits each given input value.\n     * @static true\n     * @name of\n     * @owner Observable\n     */\n    ArrayObservable.of = function () {\n        var array = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            array[_i - 0] = arguments[_i];\n        }\n        var scheduler = array[array.length - 1];\n        if (isScheduler_1.isScheduler(scheduler)) {\n            array.pop();\n        }\n        else {\n            scheduler = null;\n        }\n        var len = array.length;\n        if (len > 1) {\n            return new ArrayObservable(array, scheduler);\n        }\n        else if (len === 1) {\n            return new ScalarObservable_1.ScalarObservable(array[0], scheduler);\n        }\n        else {\n            return new EmptyObservable_1.EmptyObservable(scheduler);\n        }\n    };\n    ArrayObservable.dispatch = function (state) {\n        var array = state.array, index = state.index, count = state.count, subscriber = state.subscriber;\n        if (index >= count) {\n            subscriber.complete();\n            return;\n        }\n        subscriber.next(array[index]);\n        if (subscriber.closed) {\n            return;\n        }\n        state.index = index + 1;\n        this.schedule(state);\n    };\n    ArrayObservable.prototype._subscribe = function (subscriber) {\n        var index = 0;\n        var array = this.array;\n        var count = array.length;\n        var scheduler = this.scheduler;\n        if (scheduler) {\n            return scheduler.schedule(ArrayObservable.dispatch, 0, {\n                array: array, index: index, count: count, subscriber: subscriber\n            });\n        }\n        else {\n            for (var i = 0; i < count && !subscriber.closed; i++) {\n                subscriber.next(array[i]);\n            }\n            subscriber.complete();\n        }\n    };\n    return ArrayObservable;\n}(Observable_1.Observable));\nexports.ArrayObservable = ArrayObservable;\n\n},{\"../Observable\":5,\"../util/isScheduler\":337,\"./EmptyObservable\":150,\"./ScalarObservable\":165}],146:[function(require,module,exports){\n\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Observable_1 = require('../Observable');\nvar tryCatch_1 = require('../util/tryCatch');\nvar errorObject_1 = require('../util/errorObject');\nvar AsyncSubject_1 = require('../AsyncSubject');\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nvar BoundCallbackObservable = (function (_super) {\n    __extends(BoundCallbackObservable, _super);\n    function BoundCallbackObservable(callbackFunc, selector, args, scheduler) {\n        _super.call(this);\n        this.callbackFunc = callbackFunc;\n        this.selector = selector;\n        this.args = args;\n        this.scheduler = scheduler;\n    }\n    /* tslint:enable:max-line-length */\n    /**\n     * Converts a callback API to a function that returns an Observable.\n     *\n     * <span class=\"informal\">Give it a function `f` of type `f(x, callback)` and\n     * it will return a function `g` that when called as `g(x)` will output an\n     * Observable.</span>\n     *\n     * `bindCallback` is not an operator because its input and output are not\n     * Observables. The input is a function `func` with some parameters, but the\n     * last parameter must be a callback function that `func` calls when it is\n     * done. The output of `bindCallback` is a function that takes the same\n     * parameters as `func`, except the last one (the callback). When the output\n     * function is called with arguments, it will return an Observable where the\n     * results will be delivered to.\n     *\n     * @example <caption>Convert jQuery's getJSON to an Observable API</caption>\n     * // Suppose we have jQuery.getJSON('/my/url', callback)\n     * var getJSONAsObservable = Rx.Observable.bindCallback(jQuery.getJSON);\n     * var result = getJSONAsObservable('/my/url');\n     * result.subscribe(x => console.log(x), e => console.error(e));\n     *\n     * @see {@link bindNodeCallback}\n     * @see {@link from}\n     * @see {@link fromPromise}\n     *\n     * @param {function} func Function with a callback as the last parameter.\n     * @param {function} selector A function which takes the arguments from the\n     * callback and maps those a value to emit on the output Observable.\n     * @param {Scheduler} [scheduler] The scheduler on which to schedule the\n     * callbacks.\n     * @return {function(...params: *): Observable} A function which returns the\n     * Observable that delivers the same values the callback would deliver.\n     * @static true\n     * @name bindCallback\n     * @owner Observable\n     */\n    BoundCallbackObservable.create = function (func, selector, scheduler) {\n        if (selector === void 0) { selector = undefined; }\n        return function () {\n            var args = [];\n            for (var _i = 0; _i < arguments.length; _i++) {\n                args[_i - 0] = arguments[_i];\n            }\n            return new BoundCallbackObservable(func, selector, args, scheduler);\n        };\n    };\n    BoundCallbackObservable.prototype._subscribe = function (subscriber) {\n        var callbackFunc = this.callbackFunc;\n        var args = this.args;\n        var scheduler = this.scheduler;\n        var subject = this.subject;\n        if (!scheduler) {\n            if (!subject) {\n                subject = this.subject = new AsyncSubject_1.AsyncSubject();\n                var handler = function handlerFn() {\n                    var innerArgs = [];\n                    for (var _i = 0; _i < arguments.length; _i++) {\n                        innerArgs[_i - 0] = arguments[_i];\n                    }\n                    var source = handlerFn.source;\n                    var selector = source.selector, subject = source.subject;\n                    if (selector) {\n                        var result_1 = tryCatch_1.tryCatch(selector).apply(this, innerArgs);\n                        if (result_1 === errorObject_1.errorObject) {\n                            subject.error(errorObject_1.errorObject.e);\n                        }\n                        else {\n                            subject.next(result_1);\n                            subject.complete();\n                        }\n                    }\n                    else {\n                        subject.next(innerArgs.length === 1 ? innerArgs[0] : innerArgs);\n                        subject.complete();\n                    }\n                };\n                // use named function instance to avoid closure.\n                handler.source = this;\n                var result = tryCatch_1.tryCatch(callbackFunc).apply(this, args.concat(handler));\n                if (result === errorObject_1.errorObject) {\n                    subject.error(errorObject_1.errorObject.e);\n                }\n            }\n            return subject.subscribe(subscriber);\n        }\n        else {\n            return scheduler.schedule(BoundCallbackObservable.dispatch, 0, { source: this, subscriber: subscriber });\n        }\n    };\n    BoundCallbackObservable.dispatch = function (state) {\n        var self = this;\n        var source = state.source, subscriber = state.subscriber;\n        var callbackFunc = source.callbackFunc, args = source.args, scheduler = source.scheduler;\n        var subject = source.subject;\n        if (!subject) {\n            subject = source.subject = new AsyncSubject_1.AsyncSubject();\n            var handler = function handlerFn() {\n                var innerArgs = [];\n                for (var _i = 0; _i < arguments.length; _i++) {\n                    innerArgs[_i - 0] = arguments[_i];\n                }\n                var source = handlerFn.source;\n                var selector = source.selector, subject = source.subject;\n                if (selector) {\n                    var result_2 = tryCatch_1.tryCatch(selector).apply(this, innerArgs);\n                    if (result_2 === errorObject_1.errorObject) {\n                        self.add(scheduler.schedule(dispatchError, 0, { err: errorObject_1.errorObject.e, subject: subject }));\n                    }\n                    else {\n                        self.add(scheduler.schedule(dispatchNext, 0, { value: result_2, subject: subject }));\n                    }\n                }\n                else {\n                    var value = innerArgs.length === 1 ? innerArgs[0] : innerArgs;\n                    self.add(scheduler.schedule(dispatchNext, 0, { value: value, subject: subject }));\n                }\n            };\n            // use named function to pass values in without closure\n            handler.source = source;\n            var result = tryCatch_1.tryCatch(callbackFunc).apply(this, args.concat(handler));\n            if (result === errorObject_1.errorObject) {\n                subject.error(errorObject_1.errorObject.e);\n            }\n        }\n        self.add(subject.subscribe(subscriber));\n    };\n    return BoundCallbackObservable;\n}(Observable_1.Observable));\nexports.BoundCallbackObservable = BoundCallbackObservable;\nfunction dispatchNext(arg) {\n    var value = arg.value, subject = arg.subject;\n    subject.next(value);\n    subject.complete();\n}\nfunction dispatchError(arg) {\n    var err = arg.err, subject = arg.subject;\n    subject.error(err);\n}\n\n},{\"../AsyncSubject\":1,\"../Observable\":5,\"../util/errorObject\":330,\"../util/tryCatch\":343}],147:[function(require,module,exports){\n\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Observable_1 = require('../Observable');\nvar tryCatch_1 = require('../util/tryCatch');\nvar errorObject_1 = require('../util/errorObject');\nvar AsyncSubject_1 = require('../AsyncSubject');\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nvar BoundNodeCallbackObservable = (function (_super) {\n    __extends(BoundNodeCallbackObservable, _super);\n    function BoundNodeCallbackObservable(callbackFunc, selector, args, scheduler) {\n        _super.call(this);\n        this.callbackFunc = callbackFunc;\n        this.selector = selector;\n        this.args = args;\n        this.scheduler = scheduler;\n    }\n    /* tslint:enable:max-line-length */\n    /**\n     * Converts a Node.js-style callback API to a function that returns an\n     * Observable.\n     *\n     * <span class=\"informal\">It's just like {@link bindCallback}, but the\n     * callback is expected to be of type `callback(error, result)`.</span>\n     *\n     * `bindNodeCallback` is not an operator because its input and output are not\n     * Observables. The input is a function `func` with some parameters, but the\n     * last parameter must be a callback function that `func` calls when it is\n     * done. The callback function is expected to follow Node.js conventions,\n     * where the first argument to the callback is an error, while remaining\n     * arguments are the callback result. The output of `bindNodeCallback` is a\n     * function that takes the same parameters as `func`, except the last one (the\n     * callback). When the output function is called with arguments, it will\n     * return an Observable where the results will be delivered to.\n     *\n     * @example <caption>Read a file from the filesystem and get the data as an Observable</caption>\n     * import * as fs from 'fs';\n     * var readFileAsObservable = Rx.Observable.bindNodeCallback(fs.readFile);\n     * var result = readFileAsObservable('./roadNames.txt', 'utf8');\n     * result.subscribe(x => console.log(x), e => console.error(e));\n     *\n     * @see {@link bindCallback}\n     * @see {@link from}\n     * @see {@link fromPromise}\n     *\n     * @param {function} func Function with a callback as the last parameter.\n     * @param {function} selector A function which takes the arguments from the\n     * callback and maps those a value to emit on the output Observable.\n     * @param {Scheduler} [scheduler] The scheduler on which to schedule the\n     * callbacks.\n     * @return {function(...params: *): Observable} A function which returns the\n     * Observable that delivers the same values the Node.js callback would\n     * deliver.\n     * @static true\n     * @name bindNodeCallback\n     * @owner Observable\n     */\n    BoundNodeCallbackObservable.create = function (func, selector, scheduler) {\n        if (selector === void 0) { selector = undefined; }\n        return function () {\n            var args = [];\n            for (var _i = 0; _i < arguments.length; _i++) {\n                args[_i - 0] = arguments[_i];\n            }\n            return new BoundNodeCallbackObservable(func, selector, args, scheduler);\n        };\n    };\n    BoundNodeCallbackObservable.prototype._subscribe = function (subscriber) {\n        var callbackFunc = this.callbackFunc;\n        var args = this.args;\n        var scheduler = this.scheduler;\n        var subject = this.subject;\n        if (!scheduler) {\n            if (!subject) {\n                subject = this.subject = new AsyncSubject_1.AsyncSubject();\n                var handler = function handlerFn() {\n                    var innerArgs = [];\n                    for (var _i = 0; _i < arguments.length; _i++) {\n                        innerArgs[_i - 0] = arguments[_i];\n                    }\n                    var source = handlerFn.source;\n                    var selector = source.selector, subject = source.subject;\n                    var err = innerArgs.shift();\n                    if (err) {\n                        subject.error(err);\n                    }\n                    else if (selector) {\n                        var result_1 = tryCatch_1.tryCatch(selector).apply(this, innerArgs);\n                        if (result_1 === errorObject_1.errorObject) {\n                            subject.error(errorObject_1.errorObject.e);\n                        }\n                        else {\n                            subject.next(result_1);\n                            subject.complete();\n                        }\n                    }\n                    else {\n                        subject.next(innerArgs.length === 1 ? innerArgs[0] : innerArgs);\n                        subject.complete();\n                    }\n                };\n                // use named function instance to avoid closure.\n                handler.source = this;\n                var result = tryCatch_1.tryCatch(callbackFunc).apply(this, args.concat(handler));\n                if (result === errorObject_1.errorObject) {\n                    subject.error(errorObject_1.errorObject.e);\n                }\n            }\n            return subject.subscribe(subscriber);\n        }\n        else {\n            return scheduler.schedule(dispatch, 0, { source: this, subscriber: subscriber });\n        }\n    };\n    return BoundNodeCallbackObservable;\n}(Observable_1.Observable));\nexports.BoundNodeCallbackObservable = BoundNodeCallbackObservable;\nfunction dispatch(state) {\n    var self = this;\n    var source = state.source, subscriber = state.subscriber;\n    // XXX: cast to `any` to access to the private field in `source`.\n    var _a = source, callbackFunc = _a.callbackFunc, args = _a.args, scheduler = _a.scheduler;\n    var subject = source.subject;\n    if (!subject) {\n        subject = source.subject = new AsyncSubject_1.AsyncSubject();\n        var handler = function handlerFn() {\n            var innerArgs = [];\n            for (var _i = 0; _i < arguments.length; _i++) {\n                innerArgs[_i - 0] = arguments[_i];\n            }\n            var source = handlerFn.source;\n            var selector = source.selector, subject = source.subject;\n            var err = innerArgs.shift();\n            if (err) {\n                subject.error(err);\n            }\n            else if (selector) {\n                var result_2 = tryCatch_1.tryCatch(selector).apply(this, innerArgs);\n                if (result_2 === errorObject_1.errorObject) {\n                    self.add(scheduler.schedule(dispatchError, 0, { err: errorObject_1.errorObject.e, subject: subject }));\n                }\n                else {\n                    self.add(scheduler.schedule(dispatchNext, 0, { value: result_2, subject: subject }));\n                }\n            }\n            else {\n                var value = innerArgs.length === 1 ? innerArgs[0] : innerArgs;\n                self.add(scheduler.schedule(dispatchNext, 0, { value: value, subject: subject }));\n            }\n        };\n        // use named function to pass values in without closure\n        handler.source = source;\n        var result = tryCatch_1.tryCatch(callbackFunc).apply(this, args.concat(handler));\n        if (result === errorObject_1.errorObject) {\n            subject.error(errorObject_1.errorObject.e);\n        }\n    }\n    self.add(subject.subscribe(subscriber));\n}\nfunction dispatchNext(arg) {\n    var value = arg.value, subject = arg.subject;\n    subject.next(value);\n    subject.complete();\n}\nfunction dispatchError(arg) {\n    var err = arg.err, subject = arg.subject;\n    subject.error(err);\n}\n\n},{\"../AsyncSubject\":1,\"../Observable\":5,\"../util/errorObject\":330,\"../util/tryCatch\":343}],148:[function(require,module,exports){\n\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Subject_1 = require('../Subject');\nvar Observable_1 = require('../Observable');\nvar Subscriber_1 = require('../Subscriber');\nvar Subscription_1 = require('../Subscription');\n/**\n * @class ConnectableObservable<T>\n */\nvar ConnectableObservable = (function (_super) {\n    __extends(ConnectableObservable, _super);\n    function ConnectableObservable(source, subjectFactory) {\n        _super.call(this);\n        this.source = source;\n        this.subjectFactory = subjectFactory;\n        this._refCount = 0;\n    }\n    ConnectableObservable.prototype._subscribe = function (subscriber) {\n        return this.getSubject().subscribe(subscriber);\n    };\n    ConnectableObservable.prototype.getSubject = function () {\n        var subject = this._subject;\n        if (!subject || subject.isStopped) {\n            this._subject = this.subjectFactory();\n        }\n        return this._subject;\n    };\n    ConnectableObservable.prototype.connect = function () {\n        var connection = this._connection;\n        if (!connection) {\n            connection = this._connection = new Subscription_1.Subscription();\n            connection.add(this.source\n                .subscribe(new ConnectableSubscriber(this.getSubject(), this)));\n            if (connection.closed) {\n                this._connection = null;\n                connection = Subscription_1.Subscription.EMPTY;\n            }\n            else {\n                this._connection = connection;\n            }\n        }\n        return connection;\n    };\n    ConnectableObservable.prototype.refCount = function () {\n        return this.lift(new RefCountOperator(this));\n    };\n    return ConnectableObservable;\n}(Observable_1.Observable));\nexports.ConnectableObservable = ConnectableObservable;\nvar ConnectableSubscriber = (function (_super) {\n    __extends(ConnectableSubscriber, _super);\n    function ConnectableSubscriber(destination, connectable) {\n        _super.call(this, destination);\n        this.connectable = connectable;\n    }\n    ConnectableSubscriber.prototype._error = function (err) {\n        this._unsubscribe();\n        _super.prototype._error.call(this, err);\n    };\n    ConnectableSubscriber.prototype._complete = function () {\n        this._unsubscribe();\n        _super.prototype._complete.call(this);\n    };\n    ConnectableSubscriber.prototype._unsubscribe = function () {\n        var connectable = this.connectable;\n        if (connectable) {\n            this.connectable = null;\n            var connection = connectable._connection;\n            connectable._refCount = 0;\n            connectable._subject = null;\n            connectable._connection = null;\n            if (connection) {\n                connection.unsubscribe();\n            }\n        }\n    };\n    return ConnectableSubscriber;\n}(Subject_1.SubjectSubscriber));\nvar RefCountOperator = (function () {\n    function RefCountOperator(connectable) {\n        this.connectable = connectable;\n    }\n    RefCountOperator.prototype.call = function (subscriber, source) {\n        var connectable = this.connectable;\n        connectable._refCount++;\n        var refCounter = new RefCountSubscriber(subscriber, connectable);\n        var subscription = source._subscribe(refCounter);\n        if (!refCounter.closed) {\n            refCounter.connection = connectable.connect();\n        }\n        return subscription;\n    };\n    return RefCountOperator;\n}());\nvar RefCountSubscriber = (function (_super) {\n    __extends(RefCountSubscriber, _super);\n    function RefCountSubscriber(destination, connectable) {\n        _super.call(this, destination);\n        this.connectable = connectable;\n    }\n    RefCountSubscriber.prototype._unsubscribe = function () {\n        var connectable = this.connectable;\n        if (!connectable) {\n            this.connection = null;\n            return;\n        }\n        this.connectable = null;\n        var refCount = connectable._refCount;\n        if (refCount <= 0) {\n            this.connection = null;\n            return;\n        }\n        connectable._refCount = refCount - 1;\n        if (refCount > 1) {\n            this.connection = null;\n            return;\n        }\n        ///\n        // Compare the local RefCountSubscriber's connection Subscription to the\n        // connection Subscription on the shared ConnectableObservable. In cases\n        // where the ConnectableObservable source synchronously emits values, and\n        // the RefCountSubscriber's dowstream Observers synchronously unsubscribe,\n        // execution continues to here before the RefCountOperator has a chance to\n        // supply the RefCountSubscriber with the shared connection Subscription.\n        // For example:\n        // ```\n        // Observable.range(0, 10)\n        //   .publish()\n        //   .refCount()\n        //   .take(5)\n        //   .subscribe();\n        // ```\n        // In order to account for this case, RefCountSubscriber should only dispose\n        // the ConnectableObservable's shared connection Subscription if the\n        // connection Subscription exists, *and* either:\n        //   a. RefCountSubscriber doesn't have a reference to the shared connection\n        //      Subscription yet, or,\n        //   b. RefCountSubscriber's connection Subscription reference is identical\n        //      to the shared connection Subscription\n        ///\n        var connection = this.connection;\n        var sharedConnection = connectable._connection;\n        this.connection = null;\n        if (sharedConnection && (!connection || sharedConnection === connection)) {\n            sharedConnection.unsubscribe();\n        }\n    };\n    return RefCountSubscriber;\n}(Subscriber_1.Subscriber));\n\n},{\"../Observable\":5,\"../Subject\":11,\"../Subscriber\":13,\"../Subscription\":14}],149:[function(require,module,exports){\n\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Observable_1 = require('../Observable');\nvar subscribeToResult_1 = require('../util/subscribeToResult');\nvar OuterSubscriber_1 = require('../OuterSubscriber');\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nvar DeferObservable = (function (_super) {\n    __extends(DeferObservable, _super);\n    function DeferObservable(observableFactory) {\n        _super.call(this);\n        this.observableFactory = observableFactory;\n    }\n    /**\n     * Creates an Observable that, on subscribe, calls an Observable factory to\n     * make an Observable for each new Observer.\n     *\n     * <span class=\"informal\">Creates the Observable lazily, that is, only when it\n     * is subscribed.\n     * </span>\n     *\n     * <img src=\"./img/defer.png\" width=\"100%\">\n     *\n     * `defer` allows you to create the Observable only when the Observer\n     * subscribes, and create a fresh Observable for each Observer. It waits until\n     * an Observer subscribes to it, and then it generates an Observable,\n     * typically with an Observable factory function. It does this afresh for each\n     * subscriber, so although each subscriber may think it is subscribing to the\n     * same Observable, in fact each subscriber gets its own individual\n     * Observable.\n     *\n     * @example <caption>Subscribe to either an Observable of clicks or an Observable of interval, at random</caption>\n     * var clicksOrInterval = Rx.Observable.defer(function () {\n     *   if (Math.random() > 0.5) {\n     *     return Rx.Observable.fromEvent(document, 'click');\n     *   } else {\n     *     return Rx.Observable.interval(1000);\n     *   }\n     * });\n     * clicksOrInterval.subscribe(x => console.log(x));\n     *\n     * @see {@link create}\n     *\n     * @param {function(): Observable|Promise} observableFactory The Observable\n     * factory function to invoke for each Observer that subscribes to the output\n     * Observable. May also return a Promise, which will be converted on the fly\n     * to an Observable.\n     * @return {Observable} An Observable whose Observers' subscriptions trigger\n     * an invocation of the given Observable factory function.\n     * @static true\n     * @name defer\n     * @owner Observable\n     */\n    DeferObservable.create = function (observableFactory) {\n        return new DeferObservable(observableFactory);\n    };\n    DeferObservable.prototype._subscribe = function (subscriber) {\n        return new DeferSubscriber(subscriber, this.observableFactory);\n    };\n    return DeferObservable;\n}(Observable_1.Observable));\nexports.DeferObservable = DeferObservable;\nvar DeferSubscriber = (function (_super) {\n    __extends(DeferSubscriber, _super);\n    function DeferSubscriber(destination, factory) {\n        _super.call(this, destination);\n        this.factory = factory;\n        this.tryDefer();\n    }\n    DeferSubscriber.prototype.tryDefer = function () {\n        try {\n            this._callFactory();\n        }\n        catch (err) {\n            this._error(err);\n        }\n    };\n    DeferSubscriber.prototype._callFactory = function () {\n        var result = this.factory();\n        if (result) {\n            this.add(subscribeToResult_1.subscribeToResult(this, result));\n        }\n    };\n    return DeferSubscriber;\n}(OuterSubscriber_1.OuterSubscriber));\n\n},{\"../Observable\":5,\"../OuterSubscriber\":7,\"../util/subscribeToResult\":341}],150:[function(require,module,exports){\n\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Observable_1 = require('../Observable');\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nvar EmptyObservable = (function (_super) {\n    __extends(EmptyObservable, _super);\n    function EmptyObservable(scheduler) {\n        _super.call(this);\n        this.scheduler = scheduler;\n    }\n    /**\n     * Creates an Observable that emits no items to the Observer and immediately\n     * emits a complete notification.\n     *\n     * <span class=\"informal\">Just emits 'complete', and nothing else.\n     * </span>\n     *\n     * <img src=\"./img/empty.png\" width=\"100%\">\n     *\n     * This static operator is useful for creating a simple Observable that only\n     * emits the complete notification. It can be used for composing with other\n     * Observables, such as in a {@link mergeMap}.\n     *\n     * @example <caption>Emit the number 7, then complete.</caption>\n     * var result = Rx.Observable.empty().startWith(7);\n     * result.subscribe(x => console.log(x));\n     *\n     * @example <caption>Map and flatten only odd numbers to the sequence 'a', 'b', 'c'</caption>\n     * var interval = Rx.Observable.interval(1000);\n     * var result = interval.mergeMap(x =>\n     *   x % 2 === 1 ? Rx.Observable.of('a', 'b', 'c') : Rx.Observable.empty()\n     * );\n     * result.subscribe(x => console.log(x));\n     *\n     * @see {@link create}\n     * @see {@link never}\n     * @see {@link of}\n     * @see {@link throw}\n     *\n     * @param {Scheduler} [scheduler] A {@link Scheduler} to use for scheduling\n     * the emission of the complete notification.\n     * @return {Observable} An \"empty\" Observable: emits only the complete\n     * notification.\n     * @static true\n     * @name empty\n     * @owner Observable\n     */\n    EmptyObservable.create = function (scheduler) {\n        return new EmptyObservable(scheduler);\n    };\n    EmptyObservable.dispatch = function (arg) {\n        var subscriber = arg.subscriber;\n        subscriber.complete();\n    };\n    EmptyObservable.prototype._subscribe = function (subscriber) {\n        var scheduler = this.scheduler;\n        if (scheduler) {\n            return scheduler.schedule(EmptyObservable.dispatch, 0, { subscriber: subscriber });\n        }\n        else {\n            subscriber.complete();\n        }\n    };\n    return EmptyObservable;\n}(Observable_1.Observable));\nexports.EmptyObservable = EmptyObservable;\n\n},{\"../Observable\":5}],151:[function(require,module,exports){\n\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Observable_1 = require('../Observable');\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nvar ErrorObservable = (function (_super) {\n    __extends(ErrorObservable, _super);\n    function ErrorObservable(error, scheduler) {\n        _super.call(this);\n        this.error = error;\n        this.scheduler = scheduler;\n    }\n    /**\n     * Creates an Observable that emits no items to the Observer and immediately\n     * emits an error notification.\n     *\n     * <span class=\"informal\">Just emits 'error', and nothing else.\n     * </span>\n     *\n     * <img src=\"./img/throw.png\" width=\"100%\">\n     *\n     * This static operator is useful for creating a simple Observable that only\n     * emits the error notification. It can be used for composing with other\n     * Observables, such as in a {@link mergeMap}.\n     *\n     * @example <caption>Emit the number 7, then emit an error.</caption>\n     * var result = Rx.Observable.throw(new Error('oops!')).startWith(7);\n     * result.subscribe(x => console.log(x), e => console.error(e));\n     *\n     * @example <caption>Map and flattens numbers to the sequence 'a', 'b', 'c', but throw an error for 13</caption>\n     * var interval = Rx.Observable.interval(1000);\n     * var result = interval.mergeMap(x =>\n     *   x === 13 ?\n     *     Rx.Observable.throw('Thirteens are bad') :\n     *     Rx.Observable.of('a', 'b', 'c')\n     * );\n     * result.subscribe(x => console.log(x), e => console.error(e));\n     *\n     * @see {@link create}\n     * @see {@link empty}\n     * @see {@link never}\n     * @see {@link of}\n     *\n     * @param {any} error The particular Error to pass to the error notification.\n     * @param {Scheduler} [scheduler] A {@link Scheduler} to use for scheduling\n     * the emission of the error notification.\n     * @return {Observable} An error Observable: emits only the error notification\n     * using the given error argument.\n     * @static true\n     * @name throw\n     * @owner Observable\n     */\n    ErrorObservable.create = function (error, scheduler) {\n        return new ErrorObservable(error, scheduler);\n    };\n    ErrorObservable.dispatch = function (arg) {\n        var error = arg.error, subscriber = arg.subscriber;\n        subscriber.error(error);\n    };\n    ErrorObservable.prototype._subscribe = function (subscriber) {\n        var error = this.error;\n        var scheduler = this.scheduler;\n        if (scheduler) {\n            return scheduler.schedule(ErrorObservable.dispatch, 0, {\n                error: error, subscriber: subscriber\n            });\n        }\n        else {\n            subscriber.error(error);\n        }\n    };\n    return ErrorObservable;\n}(Observable_1.Observable));\nexports.ErrorObservable = ErrorObservable;\n\n},{\"../Observable\":5}],152:[function(require,module,exports){\n\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Observable_1 = require('../Observable');\nvar EmptyObservable_1 = require('./EmptyObservable');\nvar isArray_1 = require('../util/isArray');\nvar subscribeToResult_1 = require('../util/subscribeToResult');\nvar OuterSubscriber_1 = require('../OuterSubscriber');\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nvar ForkJoinObservable = (function (_super) {\n    __extends(ForkJoinObservable, _super);\n    function ForkJoinObservable(sources, resultSelector) {\n        _super.call(this);\n        this.sources = sources;\n        this.resultSelector = resultSelector;\n    }\n    /* tslint:enable:max-line-length */\n    /**\n     * @param sources\n     * @return {any}\n     * @static true\n     * @name forkJoin\n     * @owner Observable\n     */\n    ForkJoinObservable.create = function () {\n        var sources = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            sources[_i - 0] = arguments[_i];\n        }\n        if (sources === null || arguments.length === 0) {\n            return new EmptyObservable_1.EmptyObservable();\n        }\n        var resultSelector = null;\n        if (typeof sources[sources.length - 1] === 'function') {\n            resultSelector = sources.pop();\n        }\n        // if the first and only other argument besides the resultSelector is an array\n        // assume it's been called with `forkJoin([obs1, obs2, obs3], resultSelector)`\n        if (sources.length === 1 && isArray_1.isArray(sources[0])) {\n            sources = sources[0];\n        }\n        if (sources.length === 0) {\n            return new EmptyObservable_1.EmptyObservable();\n        }\n        return new ForkJoinObservable(sources, resultSelector);\n    };\n    ForkJoinObservable.prototype._subscribe = function (subscriber) {\n        return new ForkJoinSubscriber(subscriber, this.sources, this.resultSelector);\n    };\n    return ForkJoinObservable;\n}(Observable_1.Observable));\nexports.ForkJoinObservable = ForkJoinObservable;\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar ForkJoinSubscriber = (function (_super) {\n    __extends(ForkJoinSubscriber, _super);\n    function ForkJoinSubscriber(destination, sources, resultSelector) {\n        _super.call(this, destination);\n        this.sources = sources;\n        this.resultSelector = resultSelector;\n        this.completed = 0;\n        this.haveValues = 0;\n        var len = sources.length;\n        this.total = len;\n        this.values = new Array(len);\n        for (var i = 0; i < len; i++) {\n            var source = sources[i];\n            var innerSubscription = subscribeToResult_1.subscribeToResult(this, source, null, i);\n            if (innerSubscription) {\n                innerSubscription.outerIndex = i;\n                this.add(innerSubscription);\n            }\n        }\n    }\n    ForkJoinSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n        this.values[outerIndex] = innerValue;\n        if (!innerSub._hasValue) {\n            innerSub._hasValue = true;\n            this.haveValues++;\n        }\n    };\n    ForkJoinSubscriber.prototype.notifyComplete = function (innerSub) {\n        var destination = this.destination;\n        var _a = this, haveValues = _a.haveValues, resultSelector = _a.resultSelector, values = _a.values;\n        var len = values.length;\n        if (!innerSub._hasValue) {\n            destination.complete();\n            return;\n        }\n        this.completed++;\n        if (this.completed !== len) {\n            return;\n        }\n        if (haveValues === len) {\n            var value = resultSelector ? resultSelector.apply(this, values) : values;\n            destination.next(value);\n        }\n        destination.complete();\n    };\n    return ForkJoinSubscriber;\n}(OuterSubscriber_1.OuterSubscriber));\n\n},{\"../Observable\":5,\"../OuterSubscriber\":7,\"../util/isArray\":331,\"../util/subscribeToResult\":341,\"./EmptyObservable\":150}],153:[function(require,module,exports){\n\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Observable_1 = require('../Observable');\nvar tryCatch_1 = require('../util/tryCatch');\nvar isFunction_1 = require('../util/isFunction');\nvar errorObject_1 = require('../util/errorObject');\nvar Subscription_1 = require('../Subscription');\nfunction isNodeStyleEventEmmitter(sourceObj) {\n    return !!sourceObj && typeof sourceObj.addListener === 'function' && typeof sourceObj.removeListener === 'function';\n}\nfunction isJQueryStyleEventEmitter(sourceObj) {\n    return !!sourceObj && typeof sourceObj.on === 'function' && typeof sourceObj.off === 'function';\n}\nfunction isNodeList(sourceObj) {\n    return !!sourceObj && sourceObj.toString() === '[object NodeList]';\n}\nfunction isHTMLCollection(sourceObj) {\n    return !!sourceObj && sourceObj.toString() === '[object HTMLCollection]';\n}\nfunction isEventTarget(sourceObj) {\n    return !!sourceObj && typeof sourceObj.addEventListener === 'function' && typeof sourceObj.removeEventListener === 'function';\n}\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nvar FromEventObservable = (function (_super) {\n    __extends(FromEventObservable, _super);\n    function FromEventObservable(sourceObj, eventName, selector, options) {\n        _super.call(this);\n        this.sourceObj = sourceObj;\n        this.eventName = eventName;\n        this.selector = selector;\n        this.options = options;\n    }\n    /* tslint:enable:max-line-length */\n    /**\n     * Creates an Observable that emits events of a specific type coming from the\n     * given event target.\n     *\n     * <span class=\"informal\">Creates an Observable from DOM events, or Node\n     * EventEmitter events or others.</span>\n     *\n     * <img src=\"./img/fromEvent.png\" width=\"100%\">\n     *\n     * Creates an Observable by attaching an event listener to an \"event target\",\n     * which may be an object with `addEventListener` and `removeEventListener`,\n     * a Node.js EventEmitter, a jQuery style EventEmitter, a NodeList from the\n     * DOM, or an HTMLCollection from the DOM. The event handler is attached when\n     * the output Observable is subscribed, and removed when the Subscription is\n     * unsubscribed.\n     *\n     * @example <caption>Emits clicks happening on the DOM document</caption>\n     * var clicks = Rx.Observable.fromEvent(document, 'click');\n     * clicks.subscribe(x => console.log(x));\n     *\n     * @see {@link from}\n     * @see {@link fromEventPattern}\n     *\n     * @param {EventTargetLike} target The DOMElement, event target, Node.js\n     * EventEmitter, NodeList or HTMLCollection to attach the event handler to.\n     * @param {string} eventName The event name of interest, being emitted by the\n     * `target`.\n     * @parm {EventListenerOptions} [options] Options to pass through to addEventListener\n     * @param {SelectorMethodSignature<T>} [selector] An optional function to\n     * post-process results. It takes the arguments from the event handler and\n     * should return a single value.\n     * @return {Observable<T>}\n     * @static true\n     * @name fromEvent\n     * @owner Observable\n     */\n    FromEventObservable.create = function (target, eventName, options, selector) {\n        if (isFunction_1.isFunction(options)) {\n            selector = options;\n            options = undefined;\n        }\n        return new FromEventObservable(target, eventName, selector, options);\n    };\n    FromEventObservable.setupSubscription = function (sourceObj, eventName, handler, subscriber, options) {\n        var unsubscribe;\n        if (isNodeList(sourceObj) || isHTMLCollection(sourceObj)) {\n            for (var i = 0, len = sourceObj.length; i < len; i++) {\n                FromEventObservable.setupSubscription(sourceObj[i], eventName, handler, subscriber, options);\n            }\n        }\n        else if (isEventTarget(sourceObj)) {\n            var source_1 = sourceObj;\n            sourceObj.addEventListener(eventName, handler, options);\n            unsubscribe = function () { return source_1.removeEventListener(eventName, handler); };\n        }\n        else if (isJQueryStyleEventEmitter(sourceObj)) {\n            var source_2 = sourceObj;\n            sourceObj.on(eventName, handler);\n            unsubscribe = function () { return source_2.off(eventName, handler); };\n        }\n        else if (isNodeStyleEventEmmitter(sourceObj)) {\n            var source_3 = sourceObj;\n            sourceObj.addListener(eventName, handler);\n            unsubscribe = function () { return source_3.removeListener(eventName, handler); };\n        }\n        subscriber.add(new Subscription_1.Subscription(unsubscribe));\n    };\n    FromEventObservable.prototype._subscribe = function (subscriber) {\n        var sourceObj = this.sourceObj;\n        var eventName = this.eventName;\n        var options = this.options;\n        var selector = this.selector;\n        var handler = selector ? function () {\n            var args = [];\n            for (var _i = 0; _i < arguments.length; _i++) {\n                args[_i - 0] = arguments[_i];\n            }\n            var result = tryCatch_1.tryCatch(selector).apply(void 0, args);\n            if (result === errorObject_1.errorObject) {\n                subscriber.error(errorObject_1.errorObject.e);\n            }\n            else {\n                subscriber.next(result);\n            }\n        } : function (e) { return subscriber.next(e); };\n        FromEventObservable.setupSubscription(sourceObj, eventName, handler, subscriber, options);\n    };\n    return FromEventObservable;\n}(Observable_1.Observable));\nexports.FromEventObservable = FromEventObservable;\n\n},{\"../Observable\":5,\"../Subscription\":14,\"../util/errorObject\":330,\"../util/isFunction\":333,\"../util/tryCatch\":343}],154:[function(require,module,exports){\n\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Observable_1 = require('../Observable');\nvar Subscription_1 = require('../Subscription');\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nvar FromEventPatternObservable = (function (_super) {\n    __extends(FromEventPatternObservable, _super);\n    function FromEventPatternObservable(addHandler, removeHandler, selector) {\n        _super.call(this);\n        this.addHandler = addHandler;\n        this.removeHandler = removeHandler;\n        this.selector = selector;\n    }\n    /**\n     * Creates an Observable from an API based on addHandler/removeHandler\n     * functions.\n     *\n     * <span class=\"informal\">Converts any addHandler/removeHandler API to an\n     * Observable.</span>\n     *\n     * <img src=\"./img/fromEventPattern.png\" width=\"100%\">\n     *\n     * Creates an Observable by using the `addHandler` and `removeHandler`\n     * functions to add and remove the handlers, with an optional selector\n     * function to project the event arguments to a result. The `addHandler` is\n     * called when the output Observable is subscribed, and `removeHandler` is\n     * called when the Subscription is unsubscribed.\n     *\n     * @example <caption>Emits clicks happening on the DOM document</caption>\n     * function addClickHandler(handler) {\n     *   document.addEventListener('click', handler);\n     * }\n     *\n     * function removeClickHandler(handler) {\n     *   document.removeEventListener('click', handler);\n     * }\n     *\n     * var clicks = Rx.Observable.fromEventPattern(\n     *   addClickHandler,\n     *   removeClickHandler\n     * );\n     * clicks.subscribe(x => console.log(x));\n     *\n     * @see {@link from}\n     * @see {@link fromEvent}\n     *\n     * @param {function(handler: Function): any} addHandler A function that takes\n     * a `handler` function as argument and attaches it somehow to the actual\n     * source of events.\n     * @param {function(handler: Function): void} removeHandler A function that\n     * takes a `handler` function as argument and removes it in case it was\n     * previously attached using `addHandler`.\n     * @param {function(...args: any): T} [selector] An optional function to\n     * post-process results. It takes the arguments from the event handler and\n     * should return a single value.\n     * @return {Observable<T>}\n     * @static true\n     * @name fromEventPattern\n     * @owner Observable\n     */\n    FromEventPatternObservable.create = function (addHandler, removeHandler, selector) {\n        return new FromEventPatternObservable(addHandler, removeHandler, selector);\n    };\n    FromEventPatternObservable.prototype._subscribe = function (subscriber) {\n        var _this = this;\n        var removeHandler = this.removeHandler;\n        var handler = !!this.selector ? function () {\n            var args = [];\n            for (var _i = 0; _i < arguments.length; _i++) {\n                args[_i - 0] = arguments[_i];\n            }\n            _this._callSelector(subscriber, args);\n        } : function (e) { subscriber.next(e); };\n        this._callAddHandler(handler, subscriber);\n        subscriber.add(new Subscription_1.Subscription(function () {\n            //TODO: determine whether or not to forward to error handler\n            removeHandler(handler);\n        }));\n    };\n    FromEventPatternObservable.prototype._callSelector = function (subscriber, args) {\n        try {\n            var result = this.selector.apply(this, args);\n            subscriber.next(result);\n        }\n        catch (e) {\n            subscriber.error(e);\n        }\n    };\n    FromEventPatternObservable.prototype._callAddHandler = function (handler, errorSubscriber) {\n        try {\n            this.addHandler(handler);\n        }\n        catch (e) {\n            errorSubscriber.error(e);\n        }\n    };\n    return FromEventPatternObservable;\n}(Observable_1.Observable));\nexports.FromEventPatternObservable = FromEventPatternObservable;\n\n},{\"../Observable\":5,\"../Subscription\":14}],155:[function(require,module,exports){\n\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar isArray_1 = require('../util/isArray');\nvar isPromise_1 = require('../util/isPromise');\nvar PromiseObservable_1 = require('./PromiseObservable');\nvar IteratorObservable_1 = require('./IteratorObservable');\nvar ArrayObservable_1 = require('./ArrayObservable');\nvar ArrayLikeObservable_1 = require('./ArrayLikeObservable');\nvar iterator_1 = require('../symbol/iterator');\nvar Observable_1 = require('../Observable');\nvar observeOn_1 = require('../operator/observeOn');\nvar observable_1 = require('../symbol/observable');\nvar isArrayLike = (function (x) { return x && typeof x.length === 'number'; });\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nvar FromObservable = (function (_super) {\n    __extends(FromObservable, _super);\n    function FromObservable(ish, scheduler) {\n        _super.call(this, null);\n        this.ish = ish;\n        this.scheduler = scheduler;\n    }\n    /**\n     * Creates an Observable from an Array, an array-like object, a Promise, an\n     * iterable object, or an Observable-like object.\n     *\n     * <span class=\"informal\">Converts almost anything to an Observable.</span>\n     *\n     * <img src=\"./img/from.png\" width=\"100%\">\n     *\n     * Convert various other objects and data types into Observables. `from`\n     * converts a Promise or an array-like or an\n     * [iterable](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols#iterable)\n     * object into an Observable that emits the items in that promise or array or\n     * iterable. A String, in this context, is treated as an array of characters.\n     * Observable-like objects (contains a function named with the ES2015 Symbol\n     * for Observable) can also be converted through this operator.\n     *\n     * @example <caption>Converts an array to an Observable</caption>\n     * var array = [10, 20, 30];\n     * var result = Rx.Observable.from(array);\n     * result.subscribe(x => console.log(x));\n     *\n     * @example <caption>Convert an infinite iterable (from a generator) to an Observable</caption>\n     * function* generateDoubles(seed) {\n     *   var i = seed;\n     *   while (true) {\n     *     yield i;\n     *     i = 2 * i; // double it\n     *   }\n     * }\n     *\n     * var iterator = generateDoubles(3);\n     * var result = Rx.Observable.from(iterator).take(10);\n     * result.subscribe(x => console.log(x));\n     *\n     * @see {@link create}\n     * @see {@link fromEvent}\n     * @see {@link fromEventPattern}\n     * @see {@link fromPromise}\n     *\n     * @param {ObservableInput<T>} ish A subscribable object, a Promise, an\n     * Observable-like, an Array, an iterable or an array-like object to be\n     * converted.\n     * @param {Scheduler} [scheduler] The scheduler on which to schedule the\n     * emissions of values.\n     * @return {Observable<T>} The Observable whose values are originally from the\n     * input object that was converted.\n     * @static true\n     * @name from\n     * @owner Observable\n     */\n    FromObservable.create = function (ish, scheduler) {\n        if (ish != null) {\n            if (typeof ish[observable_1.$$observable] === 'function') {\n                if (ish instanceof Observable_1.Observable && !scheduler) {\n                    return ish;\n                }\n                return new FromObservable(ish, scheduler);\n            }\n            else if (isArray_1.isArray(ish)) {\n                return new ArrayObservable_1.ArrayObservable(ish, scheduler);\n            }\n            else if (isPromise_1.isPromise(ish)) {\n                return new PromiseObservable_1.PromiseObservable(ish, scheduler);\n            }\n            else if (typeof ish[iterator_1.$$iterator] === 'function' || typeof ish === 'string') {\n                return new IteratorObservable_1.IteratorObservable(ish, scheduler);\n            }\n            else if (isArrayLike(ish)) {\n                return new ArrayLikeObservable_1.ArrayLikeObservable(ish, scheduler);\n            }\n        }\n        throw new TypeError((ish !== null && typeof ish || ish) + ' is not observable');\n    };\n    FromObservable.prototype._subscribe = function (subscriber) {\n        var ish = this.ish;\n        var scheduler = this.scheduler;\n        if (scheduler == null) {\n            return ish[observable_1.$$observable]().subscribe(subscriber);\n        }\n        else {\n            return ish[observable_1.$$observable]().subscribe(new observeOn_1.ObserveOnSubscriber(subscriber, scheduler, 0));\n        }\n    };\n    return FromObservable;\n}(Observable_1.Observable));\nexports.FromObservable = FromObservable;\n\n},{\"../Observable\":5,\"../operator/observeOn\":248,\"../symbol/iterator\":311,\"../symbol/observable\":312,\"../util/isArray\":331,\"../util/isPromise\":336,\"./ArrayLikeObservable\":144,\"./ArrayObservable\":145,\"./IteratorObservable\":159,\"./PromiseObservable\":163}],156:[function(require,module,exports){\n\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Observable_1 = require('../Observable');\nvar isScheduler_1 = require('../util/isScheduler');\nvar selfSelector = function (value) { return value; };\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nvar GenerateObservable = (function (_super) {\n    __extends(GenerateObservable, _super);\n    function GenerateObservable(initialState, condition, iterate, resultSelector, scheduler) {\n        _super.call(this);\n        this.initialState = initialState;\n        this.condition = condition;\n        this.iterate = iterate;\n        this.resultSelector = resultSelector;\n        this.scheduler = scheduler;\n    }\n    GenerateObservable.create = function (initialStateOrOptions, condition, iterate, resultSelectorOrObservable, scheduler) {\n        if (arguments.length == 1) {\n            return new GenerateObservable(initialStateOrOptions.initialState, initialStateOrOptions.condition, initialStateOrOptions.iterate, initialStateOrOptions.resultSelector || selfSelector, initialStateOrOptions.scheduler);\n        }\n        if (resultSelectorOrObservable === undefined || isScheduler_1.isScheduler(resultSelectorOrObservable)) {\n            return new GenerateObservable(initialStateOrOptions, condition, iterate, selfSelector, resultSelectorOrObservable);\n        }\n        return new GenerateObservable(initialStateOrOptions, condition, iterate, resultSelectorOrObservable, scheduler);\n    };\n    GenerateObservable.prototype._subscribe = function (subscriber) {\n        var state = this.initialState;\n        if (this.scheduler) {\n            return this.scheduler.schedule(GenerateObservable.dispatch, 0, {\n                subscriber: subscriber,\n                iterate: this.iterate,\n                condition: this.condition,\n                resultSelector: this.resultSelector,\n                state: state });\n        }\n        var _a = this, condition = _a.condition, resultSelector = _a.resultSelector, iterate = _a.iterate;\n        do {\n            if (condition) {\n                var conditionResult = void 0;\n                try {\n                    conditionResult = condition(state);\n                }\n                catch (err) {\n                    subscriber.error(err);\n                    return;\n                }\n                if (!conditionResult) {\n                    subscriber.complete();\n                    break;\n                }\n            }\n            var value = void 0;\n            try {\n                value = resultSelector(state);\n            }\n            catch (err) {\n                subscriber.error(err);\n                return;\n            }\n            subscriber.next(value);\n            if (subscriber.closed) {\n                break;\n            }\n            try {\n                state = iterate(state);\n            }\n            catch (err) {\n                subscriber.error(err);\n                return;\n            }\n        } while (true);\n    };\n    GenerateObservable.dispatch = function (state) {\n        var subscriber = state.subscriber, condition = state.condition;\n        if (subscriber.closed) {\n            return;\n        }\n        if (state.needIterate) {\n            try {\n                state.state = state.iterate(state.state);\n            }\n            catch (err) {\n                subscriber.error(err);\n                return;\n            }\n        }\n        else {\n            state.needIterate = true;\n        }\n        if (condition) {\n            var conditionResult = void 0;\n            try {\n                conditionResult = condition(state.state);\n            }\n            catch (err) {\n                subscriber.error(err);\n                return;\n            }\n            if (!conditionResult) {\n                subscriber.complete();\n                return;\n            }\n            if (subscriber.closed) {\n                return;\n            }\n        }\n        var value;\n        try {\n            value = state.resultSelector(state.state);\n        }\n        catch (err) {\n            subscriber.error(err);\n            return;\n        }\n        if (subscriber.closed) {\n            return;\n        }\n        subscriber.next(value);\n        if (subscriber.closed) {\n            return;\n        }\n        return this.schedule(state);\n    };\n    return GenerateObservable;\n}(Observable_1.Observable));\nexports.GenerateObservable = GenerateObservable;\n\n},{\"../Observable\":5,\"../util/isScheduler\":337}],157:[function(require,module,exports){\n\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Observable_1 = require('../Observable');\nvar subscribeToResult_1 = require('../util/subscribeToResult');\nvar OuterSubscriber_1 = require('../OuterSubscriber');\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nvar IfObservable = (function (_super) {\n    __extends(IfObservable, _super);\n    function IfObservable(condition, thenSource, elseSource) {\n        _super.call(this);\n        this.condition = condition;\n        this.thenSource = thenSource;\n        this.elseSource = elseSource;\n    }\n    IfObservable.create = function (condition, thenSource, elseSource) {\n        return new IfObservable(condition, thenSource, elseSource);\n    };\n    IfObservable.prototype._subscribe = function (subscriber) {\n        var _a = this, condition = _a.condition, thenSource = _a.thenSource, elseSource = _a.elseSource;\n        return new IfSubscriber(subscriber, condition, thenSource, elseSource);\n    };\n    return IfObservable;\n}(Observable_1.Observable));\nexports.IfObservable = IfObservable;\nvar IfSubscriber = (function (_super) {\n    __extends(IfSubscriber, _super);\n    function IfSubscriber(destination, condition, thenSource, elseSource) {\n        _super.call(this, destination);\n        this.condition = condition;\n        this.thenSource = thenSource;\n        this.elseSource = elseSource;\n        this.tryIf();\n    }\n    IfSubscriber.prototype.tryIf = function () {\n        var _a = this, condition = _a.condition, thenSource = _a.thenSource, elseSource = _a.elseSource;\n        var result;\n        try {\n            result = condition();\n            var source = result ? thenSource : elseSource;\n            if (source) {\n                this.add(subscribeToResult_1.subscribeToResult(this, source));\n            }\n            else {\n                this._complete();\n            }\n        }\n        catch (err) {\n            this._error(err);\n        }\n    };\n    return IfSubscriber;\n}(OuterSubscriber_1.OuterSubscriber));\n\n},{\"../Observable\":5,\"../OuterSubscriber\":7,\"../util/subscribeToResult\":341}],158:[function(require,module,exports){\n\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar isNumeric_1 = require('../util/isNumeric');\nvar Observable_1 = require('../Observable');\nvar async_1 = require('../scheduler/async');\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nvar IntervalObservable = (function (_super) {\n    __extends(IntervalObservable, _super);\n    function IntervalObservable(period, scheduler) {\n        if (period === void 0) { period = 0; }\n        if (scheduler === void 0) { scheduler = async_1.async; }\n        _super.call(this);\n        this.period = period;\n        this.scheduler = scheduler;\n        if (!isNumeric_1.isNumeric(period) || period < 0) {\n            this.period = 0;\n        }\n        if (!scheduler || typeof scheduler.schedule !== 'function') {\n            this.scheduler = async_1.async;\n        }\n    }\n    /**\n     * Creates an Observable that emits sequential numbers every specified\n     * interval of time, on a specified Scheduler.\n     *\n     * <span class=\"informal\">Emits incremental numbers periodically in time.\n     * </span>\n     *\n     * <img src=\"./img/interval.png\" width=\"100%\">\n     *\n     * `interval` returns an Observable that emits an infinite sequence of\n     * ascending integers, with a constant interval of time of your choosing\n     * between those emissions. The first emission is not sent immediately, but\n     * only after the first period has passed. By default, this operator uses the\n     * `async` Scheduler to provide a notion of time, but you may pass any\n     * Scheduler to it.\n     *\n     * @example <caption>Emits ascending numbers, one every second (1000ms)</caption>\n     * var numbers = Rx.Observable.interval(1000);\n     * numbers.subscribe(x => console.log(x));\n     *\n     * @see {@link timer}\n     * @see {@link delay}\n     *\n     * @param {number} [period=0] The interval size in milliseconds (by default)\n     * or the time unit determined by the scheduler's clock.\n     * @param {Scheduler} [scheduler=async] The Scheduler to use for scheduling\n     * the emission of values, and providing a notion of \"time\".\n     * @return {Observable} An Observable that emits a sequential number each time\n     * interval.\n     * @static true\n     * @name interval\n     * @owner Observable\n     */\n    IntervalObservable.create = function (period, scheduler) {\n        if (period === void 0) { period = 0; }\n        if (scheduler === void 0) { scheduler = async_1.async; }\n        return new IntervalObservable(period, scheduler);\n    };\n    IntervalObservable.dispatch = function (state) {\n        var index = state.index, subscriber = state.subscriber, period = state.period;\n        subscriber.next(index);\n        if (subscriber.closed) {\n            return;\n        }\n        state.index += 1;\n        this.schedule(state, period);\n    };\n    IntervalObservable.prototype._subscribe = function (subscriber) {\n        var index = 0;\n        var period = this.period;\n        var scheduler = this.scheduler;\n        subscriber.add(scheduler.schedule(IntervalObservable.dispatch, period, {\n            index: index, subscriber: subscriber, period: period\n        }));\n    };\n    return IntervalObservable;\n}(Observable_1.Observable));\nexports.IntervalObservable = IntervalObservable;\n\n},{\"../Observable\":5,\"../scheduler/async\":309,\"../util/isNumeric\":334}],159:[function(require,module,exports){\n\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar root_1 = require('../util/root');\nvar Observable_1 = require('../Observable');\nvar iterator_1 = require('../symbol/iterator');\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nvar IteratorObservable = (function (_super) {\n    __extends(IteratorObservable, _super);\n    function IteratorObservable(iterator, scheduler) {\n        _super.call(this);\n        this.scheduler = scheduler;\n        if (iterator == null) {\n            throw new Error('iterator cannot be null.');\n        }\n        this.iterator = getIterator(iterator);\n    }\n    IteratorObservable.create = function (iterator, scheduler) {\n        return new IteratorObservable(iterator, scheduler);\n    };\n    IteratorObservable.dispatch = function (state) {\n        var index = state.index, hasError = state.hasError, iterator = state.iterator, subscriber = state.subscriber;\n        if (hasError) {\n            subscriber.error(state.error);\n            return;\n        }\n        var result = iterator.next();\n        if (result.done) {\n            subscriber.complete();\n            return;\n        }\n        subscriber.next(result.value);\n        state.index = index + 1;\n        if (subscriber.closed) {\n            return;\n        }\n        this.schedule(state);\n    };\n    IteratorObservable.prototype._subscribe = function (subscriber) {\n        var index = 0;\n        var _a = this, iterator = _a.iterator, scheduler = _a.scheduler;\n        if (scheduler) {\n            return scheduler.schedule(IteratorObservable.dispatch, 0, {\n                index: index, iterator: iterator, subscriber: subscriber\n            });\n        }\n        else {\n            do {\n                var result = iterator.next();\n                if (result.done) {\n                    subscriber.complete();\n                    break;\n                }\n                else {\n                    subscriber.next(result.value);\n                }\n                if (subscriber.closed) {\n                    break;\n                }\n            } while (true);\n        }\n    };\n    return IteratorObservable;\n}(Observable_1.Observable));\nexports.IteratorObservable = IteratorObservable;\nvar StringIterator = (function () {\n    function StringIterator(str, idx, len) {\n        if (idx === void 0) { idx = 0; }\n        if (len === void 0) { len = str.length; }\n        this.str = str;\n        this.idx = idx;\n        this.len = len;\n    }\n    StringIterator.prototype[iterator_1.$$iterator] = function () { return (this); };\n    StringIterator.prototype.next = function () {\n        return this.idx < this.len ? {\n            done: false,\n            value: this.str.charAt(this.idx++)\n        } : {\n            done: true,\n            value: undefined\n        };\n    };\n    return StringIterator;\n}());\nvar ArrayIterator = (function () {\n    function ArrayIterator(arr, idx, len) {\n        if (idx === void 0) { idx = 0; }\n        if (len === void 0) { len = toLength(arr); }\n        this.arr = arr;\n        this.idx = idx;\n        this.len = len;\n    }\n    ArrayIterator.prototype[iterator_1.$$iterator] = function () { return this; };\n    ArrayIterator.prototype.next = function () {\n        return this.idx < this.len ? {\n            done: false,\n            value: this.arr[this.idx++]\n        } : {\n            done: true,\n            value: undefined\n        };\n    };\n    return ArrayIterator;\n}());\nfunction getIterator(obj) {\n    var i = obj[iterator_1.$$iterator];\n    if (!i && typeof obj === 'string') {\n        return new StringIterator(obj);\n    }\n    if (!i && obj.length !== undefined) {\n        return new ArrayIterator(obj);\n    }\n    if (!i) {\n        throw new TypeError('object is not iterable');\n    }\n    return obj[iterator_1.$$iterator]();\n}\nvar maxSafeInteger = Math.pow(2, 53) - 1;\nfunction toLength(o) {\n    var len = +o.length;\n    if (isNaN(len)) {\n        return 0;\n    }\n    if (len === 0 || !numberIsFinite(len)) {\n        return len;\n    }\n    len = sign(len) * Math.floor(Math.abs(len));\n    if (len <= 0) {\n        return 0;\n    }\n    if (len > maxSafeInteger) {\n        return maxSafeInteger;\n    }\n    return len;\n}\nfunction numberIsFinite(value) {\n    return typeof value === 'number' && root_1.root.isFinite(value);\n}\nfunction sign(value) {\n    var valueAsNumber = +value;\n    if (valueAsNumber === 0) {\n        return valueAsNumber;\n    }\n    if (isNaN(valueAsNumber)) {\n        return valueAsNumber;\n    }\n    return valueAsNumber < 0 ? -1 : 1;\n}\n\n},{\"../Observable\":5,\"../symbol/iterator\":311,\"../util/root\":340}],160:[function(require,module,exports){\n\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Observable_1 = require('../Observable');\nvar ConnectableObservable_1 = require('../observable/ConnectableObservable');\nvar MulticastObservable = (function (_super) {\n    __extends(MulticastObservable, _super);\n    function MulticastObservable(source, subjectFactory, selector) {\n        _super.call(this);\n        this.source = source;\n        this.subjectFactory = subjectFactory;\n        this.selector = selector;\n    }\n    MulticastObservable.prototype._subscribe = function (subscriber) {\n        var _a = this, selector = _a.selector, source = _a.source;\n        var connectable = new ConnectableObservable_1.ConnectableObservable(source, this.subjectFactory);\n        var subscription = selector(connectable).subscribe(subscriber);\n        subscription.add(connectable.connect());\n        return subscription;\n    };\n    return MulticastObservable;\n}(Observable_1.Observable));\nexports.MulticastObservable = MulticastObservable;\n\n},{\"../Observable\":5,\"../observable/ConnectableObservable\":148}],161:[function(require,module,exports){\n\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Observable_1 = require('../Observable');\nvar noop_1 = require('../util/noop');\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nvar NeverObservable = (function (_super) {\n    __extends(NeverObservable, _super);\n    function NeverObservable() {\n        _super.call(this);\n    }\n    /**\n     * Creates an Observable that emits no items to the Observer.\n     *\n     * <span class=\"informal\">An Observable that never emits anything.</span>\n     *\n     * <img src=\"./img/never.png\" width=\"100%\">\n     *\n     * This static operator is useful for creating a simple Observable that emits\n     * neither values nor errors nor the completion notification. It can be used\n     * for testing purposes or for composing with other Observables. Please not\n     * that by never emitting a complete notification, this Observable keeps the\n     * subscription from being disposed automatically. Subscriptions need to be\n     * manually disposed.\n     *\n     * @example <caption>Emit the number 7, then never emit anything else (not even complete).</caption>\n     * function info() {\n     *   console.log('Will not be called');\n     * }\n     * var result = Rx.Observable.never().startWith(7);\n     * result.subscribe(x => console.log(x), info, info);\n     *\n     * @see {@link create}\n     * @see {@link empty}\n     * @see {@link of}\n     * @see {@link throw}\n     *\n     * @return {Observable} A \"never\" Observable: never emits anything.\n     * @static true\n     * @name never\n     * @owner Observable\n     */\n    NeverObservable.create = function () {\n        return new NeverObservable();\n    };\n    NeverObservable.prototype._subscribe = function (subscriber) {\n        noop_1.noop();\n    };\n    return NeverObservable;\n}(Observable_1.Observable));\nexports.NeverObservable = NeverObservable;\n\n},{\"../Observable\":5,\"../util/noop\":338}],162:[function(require,module,exports){\n\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Observable_1 = require('../Observable');\nfunction dispatch(state) {\n    var obj = state.obj, keys = state.keys, length = state.length, index = state.index, subscriber = state.subscriber;\n    if (index === length) {\n        subscriber.complete();\n        return;\n    }\n    var key = keys[index];\n    subscriber.next([key, obj[key]]);\n    state.index = index + 1;\n    this.schedule(state);\n}\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nvar PairsObservable = (function (_super) {\n    __extends(PairsObservable, _super);\n    function PairsObservable(obj, scheduler) {\n        _super.call(this);\n        this.obj = obj;\n        this.scheduler = scheduler;\n        this.keys = Object.keys(obj);\n    }\n    /**\n     * Convert an object into an observable sequence of [key, value] pairs\n     * using an optional Scheduler to enumerate the object.\n     *\n     * @example <caption>Converts a javascript object to an Observable</caption>\n     * var obj = {\n     *   foo: 42,\n     *   bar: 56,\n     *   baz: 78\n     * };\n     *\n     * var source = Rx.Observable.pairs(obj);\n     *\n     * var subscription = source.subscribe(\n     *   function (x) {\n     *     console.log('Next: %s', x);\n     *   },\n     *   function (err) {\n     *     console.log('Error: %s', err);\n     *   },\n     *   function () {\n     *     console.log('Completed');\n     *   });\n     *\n     * @param {Object} obj The object to inspect and turn into an\n     * Observable sequence.\n     * @param {Scheduler} [scheduler] An optional Scheduler to run the\n     * enumeration of the input sequence on.\n     * @returns {(Observable<Array<string | T>>)} An observable sequence of\n     * [key, value] pairs from the object.\n     */\n    PairsObservable.create = function (obj, scheduler) {\n        return new PairsObservable(obj, scheduler);\n    };\n    PairsObservable.prototype._subscribe = function (subscriber) {\n        var _a = this, keys = _a.keys, scheduler = _a.scheduler;\n        var length = keys.length;\n        if (scheduler) {\n            return scheduler.schedule(dispatch, 0, {\n                obj: this.obj, keys: keys, length: length, index: 0, subscriber: subscriber\n            });\n        }\n        else {\n            for (var idx = 0; idx < length; idx++) {\n                var key = keys[idx];\n                subscriber.next([key, this.obj[key]]);\n            }\n            subscriber.complete();\n        }\n    };\n    return PairsObservable;\n}(Observable_1.Observable));\nexports.PairsObservable = PairsObservable;\n\n},{\"../Observable\":5}],163:[function(require,module,exports){\n\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar root_1 = require('../util/root');\nvar Observable_1 = require('../Observable');\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nvar PromiseObservable = (function (_super) {\n    __extends(PromiseObservable, _super);\n    function PromiseObservable(promise, scheduler) {\n        _super.call(this);\n        this.promise = promise;\n        this.scheduler = scheduler;\n    }\n    /**\n     * Converts a Promise to an Observable.\n     *\n     * <span class=\"informal\">Returns an Observable that just emits the Promise's\n     * resolved value, then completes.</span>\n     *\n     * Converts an ES2015 Promise or a Promises/A+ spec compliant Promise to an\n     * Observable. If the Promise resolves with a value, the output Observable\n     * emits that resolved value as a `next`, and then completes. If the Promise\n     * is rejected, then the output Observable emits the corresponding Error.\n     *\n     * @example <caption>Convert the Promise returned by Fetch to an Observable</caption>\n     * var result = Rx.Observable.fromPromise(fetch('http://myserver.com/'));\n     * result.subscribe(x => console.log(x), e => console.error(e));\n     *\n     * @see {@link bindCallback}\n     * @see {@link from}\n     *\n     * @param {Promise<T>} promise The promise to be converted.\n     * @param {Scheduler} [scheduler] An optional Scheduler to use for scheduling\n     * the delivery of the resolved value (or the rejection).\n     * @return {Observable<T>} An Observable which wraps the Promise.\n     * @static true\n     * @name fromPromise\n     * @owner Observable\n     */\n    PromiseObservable.create = function (promise, scheduler) {\n        return new PromiseObservable(promise, scheduler);\n    };\n    PromiseObservable.prototype._subscribe = function (subscriber) {\n        var _this = this;\n        var promise = this.promise;\n        var scheduler = this.scheduler;\n        if (scheduler == null) {\n            if (this._isScalar) {\n                if (!subscriber.closed) {\n                    subscriber.next(this.value);\n                    subscriber.complete();\n                }\n            }\n            else {\n                promise.then(function (value) {\n                    _this.value = value;\n                    _this._isScalar = true;\n                    if (!subscriber.closed) {\n                        subscriber.next(value);\n                        subscriber.complete();\n                    }\n                }, function (err) {\n                    if (!subscriber.closed) {\n                        subscriber.error(err);\n                    }\n                })\n                    .then(null, function (err) {\n                    // escape the promise trap, throw unhandled errors\n                    root_1.root.setTimeout(function () { throw err; });\n                });\n            }\n        }\n        else {\n            if (this._isScalar) {\n                if (!subscriber.closed) {\n                    return scheduler.schedule(dispatchNext, 0, { value: this.value, subscriber: subscriber });\n                }\n            }\n            else {\n                promise.then(function (value) {\n                    _this.value = value;\n                    _this._isScalar = true;\n                    if (!subscriber.closed) {\n                        subscriber.add(scheduler.schedule(dispatchNext, 0, { value: value, subscriber: subscriber }));\n                    }\n                }, function (err) {\n                    if (!subscriber.closed) {\n                        subscriber.add(scheduler.schedule(dispatchError, 0, { err: err, subscriber: subscriber }));\n                    }\n                })\n                    .then(null, function (err) {\n                    // escape the promise trap, throw unhandled errors\n                    root_1.root.setTimeout(function () { throw err; });\n                });\n            }\n        }\n    };\n    return PromiseObservable;\n}(Observable_1.Observable));\nexports.PromiseObservable = PromiseObservable;\nfunction dispatchNext(arg) {\n    var value = arg.value, subscriber = arg.subscriber;\n    if (!subscriber.closed) {\n        subscriber.next(value);\n        subscriber.complete();\n    }\n}\nfunction dispatchError(arg) {\n    var err = arg.err, subscriber = arg.subscriber;\n    if (!subscriber.closed) {\n        subscriber.error(err);\n    }\n}\n\n},{\"../Observable\":5,\"../util/root\":340}],164:[function(require,module,exports){\n\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Observable_1 = require('../Observable');\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nvar RangeObservable = (function (_super) {\n    __extends(RangeObservable, _super);\n    function RangeObservable(start, count, scheduler) {\n        _super.call(this);\n        this.start = start;\n        this._count = count;\n        this.scheduler = scheduler;\n    }\n    /**\n     * Creates an Observable that emits a sequence of numbers within a specified\n     * range.\n     *\n     * <span class=\"informal\">Emits a sequence of numbers in a range.</span>\n     *\n     * <img src=\"./img/range.png\" width=\"100%\">\n     *\n     * `range` operator emits a range of sequential integers, in order, where you\n     * select the `start` of the range and its `length`. By default, uses no\n     * Scheduler and just delivers the notifications synchronously, but may use\n     * an optional Scheduler to regulate those deliveries.\n     *\n     * @example <caption>Emits the numbers 1 to 10</caption>\n     * var numbers = Rx.Observable.range(1, 10);\n     * numbers.subscribe(x => console.log(x));\n     *\n     * @see {@link timer}\n     * @see {@link interval}\n     *\n     * @param {number} [start=0] The value of the first integer in the sequence.\n     * @param {number} [count=0] The number of sequential integers to generate.\n     * @param {Scheduler} [scheduler] A {@link Scheduler} to use for scheduling\n     * the emissions of the notifications.\n     * @return {Observable} An Observable of numbers that emits a finite range of\n     * sequential integers.\n     * @static true\n     * @name range\n     * @owner Observable\n     */\n    RangeObservable.create = function (start, count, scheduler) {\n        if (start === void 0) { start = 0; }\n        if (count === void 0) { count = 0; }\n        return new RangeObservable(start, count, scheduler);\n    };\n    RangeObservable.dispatch = function (state) {\n        var start = state.start, index = state.index, count = state.count, subscriber = state.subscriber;\n        if (index >= count) {\n            subscriber.complete();\n            return;\n        }\n        subscriber.next(start);\n        if (subscriber.closed) {\n            return;\n        }\n        state.index = index + 1;\n        state.start = start + 1;\n        this.schedule(state);\n    };\n    RangeObservable.prototype._subscribe = function (subscriber) {\n        var index = 0;\n        var start = this.start;\n        var count = this._count;\n        var scheduler = this.scheduler;\n        if (scheduler) {\n            return scheduler.schedule(RangeObservable.dispatch, 0, {\n                index: index, count: count, start: start, subscriber: subscriber\n            });\n        }\n        else {\n            do {\n                if (index++ >= count) {\n                    subscriber.complete();\n                    break;\n                }\n                subscriber.next(start++);\n                if (subscriber.closed) {\n                    break;\n                }\n            } while (true);\n        }\n    };\n    return RangeObservable;\n}(Observable_1.Observable));\nexports.RangeObservable = RangeObservable;\n\n},{\"../Observable\":5}],165:[function(require,module,exports){\n\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Observable_1 = require('../Observable');\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nvar ScalarObservable = (function (_super) {\n    __extends(ScalarObservable, _super);\n    function ScalarObservable(value, scheduler) {\n        _super.call(this);\n        this.value = value;\n        this.scheduler = scheduler;\n        this._isScalar = true;\n        if (scheduler) {\n            this._isScalar = false;\n        }\n    }\n    ScalarObservable.create = function (value, scheduler) {\n        return new ScalarObservable(value, scheduler);\n    };\n    ScalarObservable.dispatch = function (state) {\n        var done = state.done, value = state.value, subscriber = state.subscriber;\n        if (done) {\n            subscriber.complete();\n            return;\n        }\n        subscriber.next(value);\n        if (subscriber.closed) {\n            return;\n        }\n        state.done = true;\n        this.schedule(state);\n    };\n    ScalarObservable.prototype._subscribe = function (subscriber) {\n        var value = this.value;\n        var scheduler = this.scheduler;\n        if (scheduler) {\n            return scheduler.schedule(ScalarObservable.dispatch, 0, {\n                done: false, value: value, subscriber: subscriber\n            });\n        }\n        else {\n            subscriber.next(value);\n            if (!subscriber.closed) {\n                subscriber.complete();\n            }\n        }\n    };\n    return ScalarObservable;\n}(Observable_1.Observable));\nexports.ScalarObservable = ScalarObservable;\n\n},{\"../Observable\":5}],166:[function(require,module,exports){\n\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Observable_1 = require('../Observable');\nvar asap_1 = require('../scheduler/asap');\nvar isNumeric_1 = require('../util/isNumeric');\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nvar SubscribeOnObservable = (function (_super) {\n    __extends(SubscribeOnObservable, _super);\n    function SubscribeOnObservable(source, delayTime, scheduler) {\n        if (delayTime === void 0) { delayTime = 0; }\n        if (scheduler === void 0) { scheduler = asap_1.asap; }\n        _super.call(this);\n        this.source = source;\n        this.delayTime = delayTime;\n        this.scheduler = scheduler;\n        if (!isNumeric_1.isNumeric(delayTime) || delayTime < 0) {\n            this.delayTime = 0;\n        }\n        if (!scheduler || typeof scheduler.schedule !== 'function') {\n            this.scheduler = asap_1.asap;\n        }\n    }\n    SubscribeOnObservable.create = function (source, delay, scheduler) {\n        if (delay === void 0) { delay = 0; }\n        if (scheduler === void 0) { scheduler = asap_1.asap; }\n        return new SubscribeOnObservable(source, delay, scheduler);\n    };\n    SubscribeOnObservable.dispatch = function (arg) {\n        var source = arg.source, subscriber = arg.subscriber;\n        return source.subscribe(subscriber);\n    };\n    SubscribeOnObservable.prototype._subscribe = function (subscriber) {\n        var delay = this.delayTime;\n        var source = this.source;\n        var scheduler = this.scheduler;\n        return scheduler.schedule(SubscribeOnObservable.dispatch, delay, {\n            source: source, subscriber: subscriber\n        });\n    };\n    return SubscribeOnObservable;\n}(Observable_1.Observable));\nexports.SubscribeOnObservable = SubscribeOnObservable;\n\n},{\"../Observable\":5,\"../scheduler/asap\":308,\"../util/isNumeric\":334}],167:[function(require,module,exports){\n\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar isNumeric_1 = require('../util/isNumeric');\nvar Observable_1 = require('../Observable');\nvar async_1 = require('../scheduler/async');\nvar isScheduler_1 = require('../util/isScheduler');\nvar isDate_1 = require('../util/isDate');\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nvar TimerObservable = (function (_super) {\n    __extends(TimerObservable, _super);\n    function TimerObservable(dueTime, period, scheduler) {\n        if (dueTime === void 0) { dueTime = 0; }\n        _super.call(this);\n        this.period = -1;\n        this.dueTime = 0;\n        if (isNumeric_1.isNumeric(period)) {\n            this.period = Number(period) < 1 && 1 || Number(period);\n        }\n        else if (isScheduler_1.isScheduler(period)) {\n            scheduler = period;\n        }\n        if (!isScheduler_1.isScheduler(scheduler)) {\n            scheduler = async_1.async;\n        }\n        this.scheduler = scheduler;\n        this.dueTime = isDate_1.isDate(dueTime) ?\n            (+dueTime - this.scheduler.now()) :\n            dueTime;\n    }\n    /**\n     * Creates an Observable that starts emitting after an `initialDelay` and\n     * emits ever increasing numbers after each `period` of time thereafter.\n     *\n     * <span class=\"informal\">Its like {@link interval}, but you can specify when\n     * should the emissions start.</span>\n     *\n     * <img src=\"./img/timer.png\" width=\"100%\">\n     *\n     * `timer` returns an Observable that emits an infinite sequence of ascending\n     * integers, with a constant interval of time, `period` of your choosing\n     * between those emissions. The first emission happens after the specified\n     * `initialDelay`. The initial delay may be a {@link Date}. By default, this\n     * operator uses the `async` Scheduler to provide a notion of time, but you\n     * may pass any Scheduler to it. If `period` is not specified, the output\n     * Observable emits only one value, `0`. Otherwise, it emits an infinite\n     * sequence.\n     *\n     * @example <caption>Emits ascending numbers, one every second (1000ms), starting after 3 seconds</caption>\n     * var numbers = Rx.Observable.timer(3000, 1000);\n     * numbers.subscribe(x => console.log(x));\n     *\n     * @example <caption>Emits one number after five seconds</caption>\n     * var numbers = Rx.Observable.timer(5000);\n     * numbers.subscribe(x => console.log(x));\n     *\n     * @see {@link interval}\n     * @see {@link delay}\n     *\n     * @param {number|Date} initialDelay The initial delay time to wait before\n     * emitting the first value of `0`.\n     * @param {number} [period] The period of time between emissions of the\n     * subsequent numbers.\n     * @param {Scheduler} [scheduler=async] The Scheduler to use for scheduling\n     * the emission of values, and providing a notion of \"time\".\n     * @return {Observable} An Observable that emits a `0` after the\n     * `initialDelay` and ever increasing numbers after each `period` of time\n     * thereafter.\n     * @static true\n     * @name timer\n     * @owner Observable\n     */\n    TimerObservable.create = function (initialDelay, period, scheduler) {\n        if (initialDelay === void 0) { initialDelay = 0; }\n        return new TimerObservable(initialDelay, period, scheduler);\n    };\n    TimerObservable.dispatch = function (state) {\n        var index = state.index, period = state.period, subscriber = state.subscriber;\n        var action = this;\n        subscriber.next(index);\n        if (subscriber.closed) {\n            return;\n        }\n        else if (period === -1) {\n            return subscriber.complete();\n        }\n        state.index = index + 1;\n        action.schedule(state, period);\n    };\n    TimerObservable.prototype._subscribe = function (subscriber) {\n        var index = 0;\n        var _a = this, period = _a.period, dueTime = _a.dueTime, scheduler = _a.scheduler;\n        return scheduler.schedule(TimerObservable.dispatch, dueTime, {\n            index: index, period: period, subscriber: subscriber\n        });\n    };\n    return TimerObservable;\n}(Observable_1.Observable));\nexports.TimerObservable = TimerObservable;\n\n},{\"../Observable\":5,\"../scheduler/async\":309,\"../util/isDate\":332,\"../util/isNumeric\":334,\"../util/isScheduler\":337}],168:[function(require,module,exports){\n\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Observable_1 = require('../Observable');\nvar subscribeToResult_1 = require('../util/subscribeToResult');\nvar OuterSubscriber_1 = require('../OuterSubscriber');\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nvar UsingObservable = (function (_super) {\n    __extends(UsingObservable, _super);\n    function UsingObservable(resourceFactory, observableFactory) {\n        _super.call(this);\n        this.resourceFactory = resourceFactory;\n        this.observableFactory = observableFactory;\n    }\n    UsingObservable.create = function (resourceFactory, observableFactory) {\n        return new UsingObservable(resourceFactory, observableFactory);\n    };\n    UsingObservable.prototype._subscribe = function (subscriber) {\n        var _a = this, resourceFactory = _a.resourceFactory, observableFactory = _a.observableFactory;\n        var resource;\n        try {\n            resource = resourceFactory();\n            return new UsingSubscriber(subscriber, resource, observableFactory);\n        }\n        catch (err) {\n            subscriber.error(err);\n        }\n    };\n    return UsingObservable;\n}(Observable_1.Observable));\nexports.UsingObservable = UsingObservable;\nvar UsingSubscriber = (function (_super) {\n    __extends(UsingSubscriber, _super);\n    function UsingSubscriber(destination, resource, observableFactory) {\n        _super.call(this, destination);\n        this.resource = resource;\n        this.observableFactory = observableFactory;\n        destination.add(resource);\n        this.tryUse();\n    }\n    UsingSubscriber.prototype.tryUse = function () {\n        try {\n            var source = this.observableFactory.call(this, this.resource);\n            if (source) {\n                this.add(subscribeToResult_1.subscribeToResult(this, source));\n            }\n        }\n        catch (err) {\n            this._error(err);\n        }\n    };\n    return UsingSubscriber;\n}(OuterSubscriber_1.OuterSubscriber));\n\n},{\"../Observable\":5,\"../OuterSubscriber\":7,\"../util/subscribeToResult\":341}],169:[function(require,module,exports){\n\"use strict\";\nvar BoundCallbackObservable_1 = require('./BoundCallbackObservable');\nexports.bindCallback = BoundCallbackObservable_1.BoundCallbackObservable.create;\n\n},{\"./BoundCallbackObservable\":146}],170:[function(require,module,exports){\n\"use strict\";\nvar BoundNodeCallbackObservable_1 = require('./BoundNodeCallbackObservable');\nexports.bindNodeCallback = BoundNodeCallbackObservable_1.BoundNodeCallbackObservable.create;\n\n},{\"./BoundNodeCallbackObservable\":147}],171:[function(require,module,exports){\n\"use strict\";\nvar isScheduler_1 = require('../util/isScheduler');\nvar isArray_1 = require('../util/isArray');\nvar ArrayObservable_1 = require('./ArrayObservable');\nvar combineLatest_1 = require('../operator/combineLatest');\n/* tslint:enable:max-line-length */\n/**\n * Combines multiple Observables to create an Observable whose values are\n * calculated from the latest values of each of its input Observables.\n *\n * <span class=\"informal\">Whenever any input Observable emits a value, it\n * computes a formula using the latest values from all the inputs, then emits\n * the output of that formula.</span>\n *\n * <img src=\"./img/combineLatest.png\" width=\"100%\">\n *\n * `combineLatest` combines the values from all the Observables passed as\n * arguments. This is done by subscribing to each Observable, in order, and\n * collecting an array of each of the most recent values any time any of the\n * input Observables emits, then either taking that array and passing it as\n * arguments to an optional `project` function and emitting the return value of\n * that, or just emitting the array of recent values directly if there is no\n * `project` function.\n *\n * @example <caption>Dynamically calculate the Body-Mass Index from an Observable of weight and one for height</caption>\n * var weight = Rx.Observable.of(70, 72, 76, 79, 75);\n * var height = Rx.Observable.of(1.76, 1.77, 1.78);\n * var bmi = Rx.Observable.combineLatest(weight, height, (w, h) => w / (h * h));\n * bmi.subscribe(x => console.log('BMI is ' + x));\n *\n * @see {@link combineAll}\n * @see {@link merge}\n * @see {@link withLatestFrom}\n *\n * @param {Observable} observable1 An input Observable to combine with the\n * source Observable.\n * @param {Observable} observable2 An input Observable to combine with the\n * source Observable. More than one input Observables may be given as argument.\n * @param {function} [project] An optional function to project the values from\n * the combined latest values into a new value on the output Observable.\n * @param {Scheduler} [scheduler=null] The Scheduler to use for subscribing to\n * each input Observable.\n * @return {Observable} An Observable of projected values from the most recent\n * values from each input Observable, or an array of the most recent values from\n * each input Observable.\n * @static true\n * @name combineLatest\n * @owner Observable\n */\nfunction combineLatest() {\n    var observables = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        observables[_i - 0] = arguments[_i];\n    }\n    var project = null;\n    var scheduler = null;\n    if (isScheduler_1.isScheduler(observables[observables.length - 1])) {\n        scheduler = observables.pop();\n    }\n    if (typeof observables[observables.length - 1] === 'function') {\n        project = observables.pop();\n    }\n    // if the first and only other argument besides the resultSelector is an array\n    // assume it's been called with `combineLatest([obs1, obs2, obs3], project)`\n    if (observables.length === 1 && isArray_1.isArray(observables[0])) {\n        observables = observables[0];\n    }\n    return new ArrayObservable_1.ArrayObservable(observables, scheduler).lift(new combineLatest_1.CombineLatestOperator(project));\n}\nexports.combineLatest = combineLatest;\n\n},{\"../operator/combineLatest\":205,\"../util/isArray\":331,\"../util/isScheduler\":337,\"./ArrayObservable\":145}],172:[function(require,module,exports){\n\"use strict\";\nvar concat_1 = require('../operator/concat');\nexports.concat = concat_1.concatStatic;\n\n},{\"../operator/concat\":206}],173:[function(require,module,exports){\n\"use strict\";\nvar DeferObservable_1 = require('./DeferObservable');\nexports.defer = DeferObservable_1.DeferObservable.create;\n\n},{\"./DeferObservable\":149}],174:[function(require,module,exports){\n\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar root_1 = require('../../util/root');\nvar tryCatch_1 = require('../../util/tryCatch');\nvar errorObject_1 = require('../../util/errorObject');\nvar Observable_1 = require('../../Observable');\nvar Subscriber_1 = require('../../Subscriber');\nvar map_1 = require('../../operator/map');\nfunction getCORSRequest() {\n    if (root_1.root.XMLHttpRequest) {\n        var xhr = new root_1.root.XMLHttpRequest();\n        if ('withCredentials' in xhr) {\n            xhr.withCredentials = !!this.withCredentials;\n        }\n        return xhr;\n    }\n    else if (!!root_1.root.XDomainRequest) {\n        return new root_1.root.XDomainRequest();\n    }\n    else {\n        throw new Error('CORS is not supported by your browser');\n    }\n}\nfunction getXMLHttpRequest() {\n    if (root_1.root.XMLHttpRequest) {\n        return new root_1.root.XMLHttpRequest();\n    }\n    else {\n        var progId = void 0;\n        try {\n            var progIds = ['Msxml2.XMLHTTP', 'Microsoft.XMLHTTP', 'Msxml2.XMLHTTP.4.0'];\n            for (var i = 0; i < 3; i++) {\n                try {\n                    progId = progIds[i];\n                    if (new root_1.root.ActiveXObject(progId)) {\n                        break;\n                    }\n                }\n                catch (e) {\n                }\n            }\n            return new root_1.root.ActiveXObject(progId);\n        }\n        catch (e) {\n            throw new Error('XMLHttpRequest is not supported by your browser');\n        }\n    }\n}\nfunction ajaxGet(url, headers) {\n    if (headers === void 0) { headers = null; }\n    return new AjaxObservable({ method: 'GET', url: url, headers: headers });\n}\nexports.ajaxGet = ajaxGet;\n;\nfunction ajaxPost(url, body, headers) {\n    return new AjaxObservable({ method: 'POST', url: url, body: body, headers: headers });\n}\nexports.ajaxPost = ajaxPost;\n;\nfunction ajaxDelete(url, headers) {\n    return new AjaxObservable({ method: 'DELETE', url: url, headers: headers });\n}\nexports.ajaxDelete = ajaxDelete;\n;\nfunction ajaxPut(url, body, headers) {\n    return new AjaxObservable({ method: 'PUT', url: url, body: body, headers: headers });\n}\nexports.ajaxPut = ajaxPut;\n;\nfunction ajaxGetJSON(url, headers) {\n    return new AjaxObservable({ method: 'GET', url: url, responseType: 'json', headers: headers })\n        .lift(new map_1.MapOperator(function (x, index) { return x.response; }, null));\n}\nexports.ajaxGetJSON = ajaxGetJSON;\n;\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nvar AjaxObservable = (function (_super) {\n    __extends(AjaxObservable, _super);\n    function AjaxObservable(urlOrRequest) {\n        _super.call(this);\n        var request = {\n            async: true,\n            createXHR: function () {\n                return this.crossDomain ? getCORSRequest.call(this) : getXMLHttpRequest();\n            },\n            crossDomain: false,\n            withCredentials: false,\n            headers: {},\n            method: 'GET',\n            responseType: 'json',\n            timeout: 0\n        };\n        if (typeof urlOrRequest === 'string') {\n            request.url = urlOrRequest;\n        }\n        else {\n            for (var prop in urlOrRequest) {\n                if (urlOrRequest.hasOwnProperty(prop)) {\n                    request[prop] = urlOrRequest[prop];\n                }\n            }\n        }\n        this.request = request;\n    }\n    AjaxObservable.prototype._subscribe = function (subscriber) {\n        return new AjaxSubscriber(subscriber, this.request);\n    };\n    /**\n     * Creates an observable for an Ajax request with either a request object with\n     * url, headers, etc or a string for a URL.\n     *\n     * @example\n     * source = Rx.Observable.ajax('/products');\n     * source = Rx.Observable.ajax({ url: 'products', method: 'GET' });\n     *\n     * @param {string|Object} request Can be one of the following:\n     *   A string of the URL to make the Ajax call.\n     *   An object with the following properties\n     *   - url: URL of the request\n     *   - body: The body of the request\n     *   - method: Method of the request, such as GET, POST, PUT, PATCH, DELETE\n     *   - async: Whether the request is async\n     *   - headers: Optional headers\n     *   - crossDomain: true if a cross domain request, else false\n     *   - createXHR: a function to override if you need to use an alternate\n     *   XMLHttpRequest implementation.\n     *   - resultSelector: a function to use to alter the output value type of\n     *   the Observable. Gets {@link AjaxResponse} as an argument.\n     * @return {Observable} An observable sequence containing the XMLHttpRequest.\n     * @static true\n     * @name ajax\n     * @owner Observable\n    */\n    AjaxObservable.create = (function () {\n        var create = function (urlOrRequest) {\n            return new AjaxObservable(urlOrRequest);\n        };\n        create.get = ajaxGet;\n        create.post = ajaxPost;\n        create.delete = ajaxDelete;\n        create.put = ajaxPut;\n        create.getJSON = ajaxGetJSON;\n        return create;\n    })();\n    return AjaxObservable;\n}(Observable_1.Observable));\nexports.AjaxObservable = AjaxObservable;\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar AjaxSubscriber = (function (_super) {\n    __extends(AjaxSubscriber, _super);\n    function AjaxSubscriber(destination, request) {\n        _super.call(this, destination);\n        this.request = request;\n        this.done = false;\n        var headers = request.headers = request.headers || {};\n        // force CORS if requested\n        if (!request.crossDomain && !headers['X-Requested-With']) {\n            headers['X-Requested-With'] = 'XMLHttpRequest';\n        }\n        // ensure content type is set\n        if (!('Content-Type' in headers) && !(root_1.root.FormData && request.body instanceof root_1.root.FormData) && typeof request.body !== 'undefined') {\n            headers['Content-Type'] = 'application/x-www-form-urlencoded; charset=UTF-8';\n        }\n        // properly serialize body\n        request.body = this.serializeBody(request.body, request.headers['Content-Type']);\n        this.send();\n    }\n    AjaxSubscriber.prototype.next = function (e) {\n        this.done = true;\n        var _a = this, xhr = _a.xhr, request = _a.request, destination = _a.destination;\n        var response = new AjaxResponse(e, xhr, request);\n        destination.next(response);\n    };\n    AjaxSubscriber.prototype.send = function () {\n        var _a = this, request = _a.request, _b = _a.request, user = _b.user, method = _b.method, url = _b.url, async = _b.async, password = _b.password, headers = _b.headers, body = _b.body;\n        var createXHR = request.createXHR;\n        var xhr = tryCatch_1.tryCatch(createXHR).call(request);\n        if (xhr === errorObject_1.errorObject) {\n            this.error(errorObject_1.errorObject.e);\n        }\n        else {\n            this.xhr = xhr;\n            // open XHR first\n            var result = void 0;\n            if (user) {\n                result = tryCatch_1.tryCatch(xhr.open).call(xhr, method, url, async, user, password);\n            }\n            else {\n                result = tryCatch_1.tryCatch(xhr.open).call(xhr, method, url, async);\n            }\n            if (result === errorObject_1.errorObject) {\n                this.error(errorObject_1.errorObject.e);\n                return null;\n            }\n            // timeout and responseType can be set once the XHR is open\n            xhr.timeout = request.timeout;\n            xhr.responseType = request.responseType;\n            // set headers\n            this.setHeaders(xhr, headers);\n            // now set up the events\n            this.setupEvents(xhr, request);\n            // finally send the request\n            if (body) {\n                xhr.send(body);\n            }\n            else {\n                xhr.send();\n            }\n        }\n        return xhr;\n    };\n    AjaxSubscriber.prototype.serializeBody = function (body, contentType) {\n        if (!body || typeof body === 'string') {\n            return body;\n        }\n        else if (root_1.root.FormData && body instanceof root_1.root.FormData) {\n            return body;\n        }\n        if (contentType) {\n            var splitIndex = contentType.indexOf(';');\n            if (splitIndex !== -1) {\n                contentType = contentType.substring(0, splitIndex);\n            }\n        }\n        switch (contentType) {\n            case 'application/x-www-form-urlencoded':\n                return Object.keys(body).map(function (key) { return (encodeURI(key) + \"=\" + encodeURI(body[key])); }).join('&');\n            case 'application/json':\n                return JSON.stringify(body);\n            default:\n                return body;\n        }\n    };\n    AjaxSubscriber.prototype.setHeaders = function (xhr, headers) {\n        for (var key in headers) {\n            if (headers.hasOwnProperty(key)) {\n                xhr.setRequestHeader(key, headers[key]);\n            }\n        }\n    };\n    AjaxSubscriber.prototype.setupEvents = function (xhr, request) {\n        var progressSubscriber = request.progressSubscriber;\n        xhr.ontimeout = function xhrTimeout(e) {\n            var _a = xhrTimeout, subscriber = _a.subscriber, progressSubscriber = _a.progressSubscriber, request = _a.request;\n            if (progressSubscriber) {\n                progressSubscriber.error(e);\n            }\n            subscriber.error(new AjaxTimeoutError(this, request)); //TODO: Make betterer.\n        };\n        xhr.ontimeout.request = request;\n        xhr.ontimeout.subscriber = this;\n        xhr.ontimeout.progressSubscriber = progressSubscriber;\n        if (xhr.upload && 'withCredentials' in xhr && root_1.root.XDomainRequest) {\n            if (progressSubscriber) {\n                xhr.onprogress = function xhrProgress(e) {\n                    var progressSubscriber = xhrProgress.progressSubscriber;\n                    progressSubscriber.next(e);\n                };\n                xhr.onprogress.progressSubscriber = progressSubscriber;\n            }\n            xhr.onerror = function xhrError(e) {\n                var _a = xhrError, progressSubscriber = _a.progressSubscriber, subscriber = _a.subscriber, request = _a.request;\n                if (progressSubscriber) {\n                    progressSubscriber.error(e);\n                }\n                subscriber.error(new AjaxError('ajax error', this, request));\n            };\n            xhr.onerror.request = request;\n            xhr.onerror.subscriber = this;\n            xhr.onerror.progressSubscriber = progressSubscriber;\n        }\n        xhr.onreadystatechange = function xhrReadyStateChange(e) {\n            var _a = xhrReadyStateChange, subscriber = _a.subscriber, progressSubscriber = _a.progressSubscriber, request = _a.request;\n            if (this.readyState === 4) {\n                // normalize IE9 bug (http://bugs.jquery.com/ticket/1450)\n                var status_1 = this.status === 1223 ? 204 : this.status;\n                var response = (this.responseType === 'text' ? (this.response || this.responseText) : this.response);\n                // fix status code when it is 0 (0 status is undocumented).\n                // Occurs when accessing file resources or on Android 4.1 stock browser\n                // while retrieving files from application cache.\n                if (status_1 === 0) {\n                    status_1 = response ? 200 : 0;\n                }\n                if (200 <= status_1 && status_1 < 300) {\n                    if (progressSubscriber) {\n                        progressSubscriber.complete();\n                    }\n                    subscriber.next(e);\n                    subscriber.complete();\n                }\n                else {\n                    if (progressSubscriber) {\n                        progressSubscriber.error(e);\n                    }\n                    subscriber.error(new AjaxError('ajax error ' + status_1, this, request));\n                }\n            }\n        };\n        xhr.onreadystatechange.subscriber = this;\n        xhr.onreadystatechange.progressSubscriber = progressSubscriber;\n        xhr.onreadystatechange.request = request;\n    };\n    AjaxSubscriber.prototype.unsubscribe = function () {\n        var _a = this, done = _a.done, xhr = _a.xhr;\n        if (!done && xhr && xhr.readyState !== 4) {\n            xhr.abort();\n        }\n        _super.prototype.unsubscribe.call(this);\n    };\n    return AjaxSubscriber;\n}(Subscriber_1.Subscriber));\nexports.AjaxSubscriber = AjaxSubscriber;\n/**\n * A normalized AJAX response.\n *\n * @see {@link ajax}\n *\n * @class AjaxResponse\n */\nvar AjaxResponse = (function () {\n    function AjaxResponse(originalEvent, xhr, request) {\n        this.originalEvent = originalEvent;\n        this.xhr = xhr;\n        this.request = request;\n        this.status = xhr.status;\n        this.responseType = xhr.responseType || request.responseType;\n        switch (this.responseType) {\n            case 'json':\n                if ('response' in xhr) {\n                    //IE does not support json as responseType, parse it internally\n                    this.response = xhr.responseType ? xhr.response : JSON.parse(xhr.response || xhr.responseText || 'null');\n                }\n                else {\n                    this.response = JSON.parse(xhr.responseText || 'null');\n                }\n                break;\n            case 'xml':\n                this.response = xhr.responseXML;\n                break;\n            case 'text':\n            default:\n                this.response = ('response' in xhr) ? xhr.response : xhr.responseText;\n                break;\n        }\n    }\n    return AjaxResponse;\n}());\nexports.AjaxResponse = AjaxResponse;\n/**\n * A normalized AJAX error.\n *\n * @see {@link ajax}\n *\n * @class AjaxError\n */\nvar AjaxError = (function (_super) {\n    __extends(AjaxError, _super);\n    function AjaxError(message, xhr, request) {\n        _super.call(this, message);\n        this.message = message;\n        this.xhr = xhr;\n        this.request = request;\n        this.status = xhr.status;\n    }\n    return AjaxError;\n}(Error));\nexports.AjaxError = AjaxError;\n/**\n * @see {@link ajax}\n *\n * @class AjaxTimeoutError\n */\nvar AjaxTimeoutError = (function (_super) {\n    __extends(AjaxTimeoutError, _super);\n    function AjaxTimeoutError(xhr, request) {\n        _super.call(this, 'ajax timeout', xhr, request);\n    }\n    return AjaxTimeoutError;\n}(AjaxError));\nexports.AjaxTimeoutError = AjaxTimeoutError;\n\n},{\"../../Observable\":5,\"../../Subscriber\":13,\"../../operator/map\":237,\"../../util/errorObject\":330,\"../../util/root\":340,\"../../util/tryCatch\":343}],175:[function(require,module,exports){\n\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Subject_1 = require('../../Subject');\nvar Subscriber_1 = require('../../Subscriber');\nvar Observable_1 = require('../../Observable');\nvar Subscription_1 = require('../../Subscription');\nvar root_1 = require('../../util/root');\nvar ReplaySubject_1 = require('../../ReplaySubject');\nvar tryCatch_1 = require('../../util/tryCatch');\nvar errorObject_1 = require('../../util/errorObject');\nvar assign_1 = require('../../util/assign');\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nvar WebSocketSubject = (function (_super) {\n    __extends(WebSocketSubject, _super);\n    function WebSocketSubject(urlConfigOrSource, destination) {\n        if (urlConfigOrSource instanceof Observable_1.Observable) {\n            _super.call(this, destination, urlConfigOrSource);\n        }\n        else {\n            _super.call(this);\n            this.WebSocketCtor = root_1.root.WebSocket;\n            this._output = new Subject_1.Subject();\n            if (typeof urlConfigOrSource === 'string') {\n                this.url = urlConfigOrSource;\n            }\n            else {\n                // WARNING: config object could override important members here.\n                assign_1.assign(this, urlConfigOrSource);\n            }\n            if (!this.WebSocketCtor) {\n                throw new Error('no WebSocket constructor can be found');\n            }\n            this.destination = new ReplaySubject_1.ReplaySubject();\n        }\n    }\n    WebSocketSubject.prototype.resultSelector = function (e) {\n        return JSON.parse(e.data);\n    };\n    /**\n     * @param urlConfigOrSource\n     * @return {WebSocketSubject}\n     * @static true\n     * @name webSocket\n     * @owner Observable\n     */\n    WebSocketSubject.create = function (urlConfigOrSource) {\n        return new WebSocketSubject(urlConfigOrSource);\n    };\n    WebSocketSubject.prototype.lift = function (operator) {\n        var sock = new WebSocketSubject(this, this.destination);\n        sock.operator = operator;\n        return sock;\n    };\n    // TODO: factor this out to be a proper Operator/Subscriber implementation and eliminate closures\n    WebSocketSubject.prototype.multiplex = function (subMsg, unsubMsg, messageFilter) {\n        var self = this;\n        return new Observable_1.Observable(function (observer) {\n            var result = tryCatch_1.tryCatch(subMsg)();\n            if (result === errorObject_1.errorObject) {\n                observer.error(errorObject_1.errorObject.e);\n            }\n            else {\n                self.next(result);\n            }\n            var subscription = self.subscribe(function (x) {\n                var result = tryCatch_1.tryCatch(messageFilter)(x);\n                if (result === errorObject_1.errorObject) {\n                    observer.error(errorObject_1.errorObject.e);\n                }\n                else if (result) {\n                    observer.next(x);\n                }\n            }, function (err) { return observer.error(err); }, function () { return observer.complete(); });\n            return function () {\n                var result = tryCatch_1.tryCatch(unsubMsg)();\n                if (result === errorObject_1.errorObject) {\n                    observer.error(errorObject_1.errorObject.e);\n                }\n                else {\n                    self.next(result);\n                }\n                subscription.unsubscribe();\n            };\n        });\n    };\n    WebSocketSubject.prototype._connectSocket = function () {\n        var _this = this;\n        var WebSocketCtor = this.WebSocketCtor;\n        var observer = this._output;\n        var socket = null;\n        try {\n            socket = this.protocol ?\n                new WebSocketCtor(this.url, this.protocol) :\n                new WebSocketCtor(this.url);\n            this.socket = socket;\n        }\n        catch (e) {\n            observer.error(e);\n            return;\n        }\n        var subscription = new Subscription_1.Subscription(function () {\n            _this.socket = null;\n            if (socket && socket.readyState === 1) {\n                socket.close();\n            }\n        });\n        socket.onopen = function (e) {\n            var openObserver = _this.openObserver;\n            if (openObserver) {\n                openObserver.next(e);\n            }\n            var queue = _this.destination;\n            _this.destination = Subscriber_1.Subscriber.create(function (x) { return socket.readyState === 1 && socket.send(x); }, function (e) {\n                var closingObserver = _this.closingObserver;\n                if (closingObserver) {\n                    closingObserver.next(undefined);\n                }\n                if (e && e.code) {\n                    socket.close(e.code, e.reason);\n                }\n                else {\n                    observer.error(new TypeError('WebSocketSubject.error must be called with an object with an error code, ' +\n                        'and an optional reason: { code: number, reason: string }'));\n                }\n                _this.destination = new ReplaySubject_1.ReplaySubject();\n                _this.socket = null;\n            }, function () {\n                var closingObserver = _this.closingObserver;\n                if (closingObserver) {\n                    closingObserver.next(undefined);\n                }\n                socket.close();\n                _this.destination = new ReplaySubject_1.ReplaySubject();\n                _this.socket = null;\n            });\n            if (queue && queue instanceof ReplaySubject_1.ReplaySubject) {\n                subscription.add(queue.subscribe(_this.destination));\n            }\n        };\n        socket.onerror = function (e) { return observer.error(e); };\n        socket.onclose = function (e) {\n            var closeObserver = _this.closeObserver;\n            if (closeObserver) {\n                closeObserver.next(e);\n            }\n            if (e.wasClean) {\n                observer.complete();\n            }\n            else {\n                observer.error(e);\n            }\n        };\n        socket.onmessage = function (e) {\n            var result = tryCatch_1.tryCatch(_this.resultSelector)(e);\n            if (result === errorObject_1.errorObject) {\n                observer.error(errorObject_1.errorObject.e);\n            }\n            else {\n                observer.next(result);\n            }\n        };\n    };\n    WebSocketSubject.prototype._subscribe = function (subscriber) {\n        var _this = this;\n        var source = this.source;\n        if (source) {\n            return source.subscribe(subscriber);\n        }\n        if (!this.socket) {\n            this._connectSocket();\n        }\n        var subscription = new Subscription_1.Subscription();\n        subscription.add(this._output.subscribe(subscriber));\n        subscription.add(function () {\n            var socket = _this.socket;\n            if (_this._output.observers.length === 0 && socket && socket.readyState === 1) {\n                socket.close();\n                _this.socket = null;\n            }\n        });\n        return subscription;\n    };\n    WebSocketSubject.prototype.unsubscribe = function () {\n        var _a = this, source = _a.source, socket = _a.socket;\n        if (socket && socket.readyState === 1) {\n            socket.close();\n            this.socket = null;\n        }\n        _super.prototype.unsubscribe.call(this);\n        if (!source) {\n            this.destination = new ReplaySubject_1.ReplaySubject();\n        }\n    };\n    return WebSocketSubject;\n}(Subject_1.AnonymousSubject));\nexports.WebSocketSubject = WebSocketSubject;\n\n},{\"../../Observable\":5,\"../../ReplaySubject\":8,\"../../Subject\":11,\"../../Subscriber\":13,\"../../Subscription\":14,\"../../util/assign\":329,\"../../util/errorObject\":330,\"../../util/root\":340,\"../../util/tryCatch\":343}],176:[function(require,module,exports){\n\"use strict\";\nvar AjaxObservable_1 = require('./AjaxObservable');\nexports.ajax = AjaxObservable_1.AjaxObservable.create;\n\n},{\"./AjaxObservable\":174}],177:[function(require,module,exports){\n\"use strict\";\nvar WebSocketSubject_1 = require('./WebSocketSubject');\nexports.webSocket = WebSocketSubject_1.WebSocketSubject.create;\n\n},{\"./WebSocketSubject\":175}],178:[function(require,module,exports){\n\"use strict\";\nvar EmptyObservable_1 = require('./EmptyObservable');\nexports.empty = EmptyObservable_1.EmptyObservable.create;\n\n},{\"./EmptyObservable\":150}],179:[function(require,module,exports){\n\"use strict\";\nvar ForkJoinObservable_1 = require('./ForkJoinObservable');\nexports.forkJoin = ForkJoinObservable_1.ForkJoinObservable.create;\n\n},{\"./ForkJoinObservable\":152}],180:[function(require,module,exports){\n\"use strict\";\nvar FromObservable_1 = require('./FromObservable');\nexports.from = FromObservable_1.FromObservable.create;\n\n},{\"./FromObservable\":155}],181:[function(require,module,exports){\n\"use strict\";\nvar FromEventObservable_1 = require('./FromEventObservable');\nexports.fromEvent = FromEventObservable_1.FromEventObservable.create;\n\n},{\"./FromEventObservable\":153}],182:[function(require,module,exports){\n\"use strict\";\nvar FromEventPatternObservable_1 = require('./FromEventPatternObservable');\nexports.fromEventPattern = FromEventPatternObservable_1.FromEventPatternObservable.create;\n\n},{\"./FromEventPatternObservable\":154}],183:[function(require,module,exports){\n\"use strict\";\nvar PromiseObservable_1 = require('./PromiseObservable');\nexports.fromPromise = PromiseObservable_1.PromiseObservable.create;\n\n},{\"./PromiseObservable\":163}],184:[function(require,module,exports){\n\"use strict\";\nvar IfObservable_1 = require('./IfObservable');\nexports._if = IfObservable_1.IfObservable.create;\n\n},{\"./IfObservable\":157}],185:[function(require,module,exports){\n\"use strict\";\nvar IntervalObservable_1 = require('./IntervalObservable');\nexports.interval = IntervalObservable_1.IntervalObservable.create;\n\n},{\"./IntervalObservable\":158}],186:[function(require,module,exports){\n\"use strict\";\nvar merge_1 = require('../operator/merge');\nexports.merge = merge_1.mergeStatic;\n\n},{\"../operator/merge\":241}],187:[function(require,module,exports){\n\"use strict\";\nvar NeverObservable_1 = require('./NeverObservable');\nexports.never = NeverObservable_1.NeverObservable.create;\n\n},{\"./NeverObservable\":161}],188:[function(require,module,exports){\n\"use strict\";\nvar ArrayObservable_1 = require('./ArrayObservable');\nexports.of = ArrayObservable_1.ArrayObservable.of;\n\n},{\"./ArrayObservable\":145}],189:[function(require,module,exports){\n\"use strict\";\nvar PairsObservable_1 = require('./PairsObservable');\nexports.pairs = PairsObservable_1.PairsObservable.create;\n\n},{\"./PairsObservable\":162}],190:[function(require,module,exports){\n\"use strict\";\nvar RangeObservable_1 = require('./RangeObservable');\nexports.range = RangeObservable_1.RangeObservable.create;\n\n},{\"./RangeObservable\":164}],191:[function(require,module,exports){\n\"use strict\";\nvar ErrorObservable_1 = require('./ErrorObservable');\nexports._throw = ErrorObservable_1.ErrorObservable.create;\n\n},{\"./ErrorObservable\":151}],192:[function(require,module,exports){\n\"use strict\";\nvar TimerObservable_1 = require('./TimerObservable');\nexports.timer = TimerObservable_1.TimerObservable.create;\n\n},{\"./TimerObservable\":167}],193:[function(require,module,exports){\n\"use strict\";\nvar UsingObservable_1 = require('./UsingObservable');\nexports.using = UsingObservable_1.UsingObservable.create;\n\n},{\"./UsingObservable\":168}],194:[function(require,module,exports){\n\"use strict\";\nvar zip_1 = require('../operator/zip');\nexports.zip = zip_1.zipStatic;\n\n},{\"../operator/zip\":295}],195:[function(require,module,exports){\n\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar tryCatch_1 = require('../util/tryCatch');\nvar errorObject_1 = require('../util/errorObject');\nvar OuterSubscriber_1 = require('../OuterSubscriber');\nvar subscribeToResult_1 = require('../util/subscribeToResult');\n/**\n * Ignores source values for a duration determined by another Observable, then\n * emits the most recent value from the source Observable, then repeats this\n * process.\n *\n * <span class=\"informal\">It's like {@link auditTime}, but the silencing\n * duration is determined by a second Observable.</span>\n *\n * <img src=\"./img/audit.png\" width=\"100%\">\n *\n * `audit` is similar to `throttle`, but emits the last value from the silenced\n * time window, instead of the first value. `audit` emits the most recent value\n * from the source Observable on the output Observable as soon as its internal\n * timer becomes disabled, and ignores source values while the timer is enabled.\n * Initially, the timer is disabled. As soon as the first source value arrives,\n * the timer is enabled by calling the `durationSelector` function with the\n * source value, which returns the \"duration\" Observable. When the duration\n * Observable emits a value or completes, the timer is disabled, then the most\n * recent source value is emitted on the output Observable, and this process\n * repeats for the next source value.\n *\n * @example <caption>Emit clicks at a rate of at most one click per second</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.audit(ev => Rx.Observable.interval(1000));\n * result.subscribe(x => console.log(x));\n *\n * @see {@link auditTime}\n * @see {@link debounce}\n * @see {@link delayWhen}\n * @see {@link sample}\n * @see {@link throttle}\n *\n * @param {function(value: T): Observable|Promise} durationSelector A function\n * that receives a value from the source Observable, for computing the silencing\n * duration, returned as an Observable or a Promise.\n * @return {Observable<T>} An Observable that performs rate-limiting of\n * emissions from the source Observable.\n * @method audit\n * @owner Observable\n */\nfunction audit(durationSelector) {\n    return this.lift(new AuditOperator(durationSelector));\n}\nexports.audit = audit;\nvar AuditOperator = (function () {\n    function AuditOperator(durationSelector) {\n        this.durationSelector = durationSelector;\n    }\n    AuditOperator.prototype.call = function (subscriber, source) {\n        return source._subscribe(new AuditSubscriber(subscriber, this.durationSelector));\n    };\n    return AuditOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar AuditSubscriber = (function (_super) {\n    __extends(AuditSubscriber, _super);\n    function AuditSubscriber(destination, durationSelector) {\n        _super.call(this, destination);\n        this.durationSelector = durationSelector;\n        this.hasValue = false;\n    }\n    AuditSubscriber.prototype._next = function (value) {\n        this.value = value;\n        this.hasValue = true;\n        if (!this.throttled) {\n            var duration = tryCatch_1.tryCatch(this.durationSelector)(value);\n            if (duration === errorObject_1.errorObject) {\n                this.destination.error(errorObject_1.errorObject.e);\n            }\n            else {\n                this.add(this.throttled = subscribeToResult_1.subscribeToResult(this, duration));\n            }\n        }\n    };\n    AuditSubscriber.prototype.clearThrottle = function () {\n        var _a = this, value = _a.value, hasValue = _a.hasValue, throttled = _a.throttled;\n        if (throttled) {\n            this.remove(throttled);\n            this.throttled = null;\n            throttled.unsubscribe();\n        }\n        if (hasValue) {\n            this.value = null;\n            this.hasValue = false;\n            this.destination.next(value);\n        }\n    };\n    AuditSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex) {\n        this.clearThrottle();\n    };\n    AuditSubscriber.prototype.notifyComplete = function () {\n        this.clearThrottle();\n    };\n    return AuditSubscriber;\n}(OuterSubscriber_1.OuterSubscriber));\n\n},{\"../OuterSubscriber\":7,\"../util/errorObject\":330,\"../util/subscribeToResult\":341,\"../util/tryCatch\":343}],196:[function(require,module,exports){\n\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar async_1 = require('../scheduler/async');\nvar Subscriber_1 = require('../Subscriber');\n/**\n * Ignores source values for `duration` milliseconds, then emits the most recent\n * value from the source Observable, then repeats this process.\n *\n * <span class=\"informal\">When it sees a source values, it ignores that plus\n * the next ones for `duration` milliseconds, and then it emits the most recent\n * value from the source.</span>\n *\n * <img src=\"./img/auditTime.png\" width=\"100%\">\n *\n * `auditTime` is similar to `throttleTime`, but emits the last value from the\n * silenced time window, instead of the first value. `auditTime` emits the most\n * recent value from the source Observable on the output Observable as soon as\n * its internal timer becomes disabled, and ignores source values while the\n * timer is enabled. Initially, the timer is disabled. As soon as the first\n * source value arrives, the timer is enabled. After `duration` milliseconds (or\n * the time unit determined internally by the optional `scheduler`) has passed,\n * the timer is disabled, then the most recent source value is emitted on the\n * output Observable, and this process repeats for the next source value.\n * Optionally takes a {@link Scheduler} for managing timers.\n *\n * @example <caption>Emit clicks at a rate of at most one click per second</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.auditTime(1000);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link audit}\n * @see {@link debounceTime}\n * @see {@link delay}\n * @see {@link sampleTime}\n * @see {@link throttleTime}\n *\n * @param {number} duration Time to wait before emitting the most recent source\n * value, measured in milliseconds or the time unit determined internally\n * by the optional `scheduler`.\n * @param {Scheduler} [scheduler=async] The {@link Scheduler} to use for\n * managing the timers that handle the rate-limiting behavior.\n * @return {Observable<T>} An Observable that performs rate-limiting of\n * emissions from the source Observable.\n * @method auditTime\n * @owner Observable\n */\nfunction auditTime(duration, scheduler) {\n    if (scheduler === void 0) { scheduler = async_1.async; }\n    return this.lift(new AuditTimeOperator(duration, scheduler));\n}\nexports.auditTime = auditTime;\nvar AuditTimeOperator = (function () {\n    function AuditTimeOperator(duration, scheduler) {\n        this.duration = duration;\n        this.scheduler = scheduler;\n    }\n    AuditTimeOperator.prototype.call = function (subscriber, source) {\n        return source._subscribe(new AuditTimeSubscriber(subscriber, this.duration, this.scheduler));\n    };\n    return AuditTimeOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar AuditTimeSubscriber = (function (_super) {\n    __extends(AuditTimeSubscriber, _super);\n    function AuditTimeSubscriber(destination, duration, scheduler) {\n        _super.call(this, destination);\n        this.duration = duration;\n        this.scheduler = scheduler;\n        this.hasValue = false;\n    }\n    AuditTimeSubscriber.prototype._next = function (value) {\n        this.value = value;\n        this.hasValue = true;\n        if (!this.throttled) {\n            this.add(this.throttled = this.scheduler.schedule(dispatchNext, this.duration, this));\n        }\n    };\n    AuditTimeSubscriber.prototype.clearThrottle = function () {\n        var _a = this, value = _a.value, hasValue = _a.hasValue, throttled = _a.throttled;\n        if (throttled) {\n            this.remove(throttled);\n            this.throttled = null;\n            throttled.unsubscribe();\n        }\n        if (hasValue) {\n            this.value = null;\n            this.hasValue = false;\n            this.destination.next(value);\n        }\n    };\n    return AuditTimeSubscriber;\n}(Subscriber_1.Subscriber));\nfunction dispatchNext(subscriber) {\n    subscriber.clearThrottle();\n}\n\n},{\"../Subscriber\":13,\"../scheduler/async\":309}],197:[function(require,module,exports){\n\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar OuterSubscriber_1 = require('../OuterSubscriber');\nvar subscribeToResult_1 = require('../util/subscribeToResult');\n/**\n * Buffers the source Observable values until `closingNotifier` emits.\n *\n * <span class=\"informal\">Collects values from the past as an array, and emits\n * that array only when another Observable emits.</span>\n *\n * <img src=\"./img/buffer.png\" width=\"100%\">\n *\n * Buffers the incoming Observable values until the given `closingNotifier`\n * Observable emits a value, at which point it emits the buffer on the output\n * Observable and starts a new buffer internally, awaiting the next time\n * `closingNotifier` emits.\n *\n * @example <caption>On every click, emit array of most recent interval events</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var interval = Rx.Observable.interval(1000);\n * var buffered = interval.buffer(clicks);\n * buffered.subscribe(x => console.log(x));\n *\n * @see {@link bufferCount}\n * @see {@link bufferTime}\n * @see {@link bufferToggle}\n * @see {@link bufferWhen}\n * @see {@link window}\n *\n * @param {Observable<any>} closingNotifier An Observable that signals the\n * buffer to be emitted on the output Observable.\n * @return {Observable<T[]>} An Observable of buffers, which are arrays of\n * values.\n * @method buffer\n * @owner Observable\n */\nfunction buffer(closingNotifier) {\n    return this.lift(new BufferOperator(closingNotifier));\n}\nexports.buffer = buffer;\nvar BufferOperator = (function () {\n    function BufferOperator(closingNotifier) {\n        this.closingNotifier = closingNotifier;\n    }\n    BufferOperator.prototype.call = function (subscriber, source) {\n        return source._subscribe(new BufferSubscriber(subscriber, this.closingNotifier));\n    };\n    return BufferOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar BufferSubscriber = (function (_super) {\n    __extends(BufferSubscriber, _super);\n    function BufferSubscriber(destination, closingNotifier) {\n        _super.call(this, destination);\n        this.buffer = [];\n        this.add(subscribeToResult_1.subscribeToResult(this, closingNotifier));\n    }\n    BufferSubscriber.prototype._next = function (value) {\n        this.buffer.push(value);\n    };\n    BufferSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n        var buffer = this.buffer;\n        this.buffer = [];\n        this.destination.next(buffer);\n    };\n    return BufferSubscriber;\n}(OuterSubscriber_1.OuterSubscriber));\n\n},{\"../OuterSubscriber\":7,\"../util/subscribeToResult\":341}],198:[function(require,module,exports){\n\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Subscriber_1 = require('../Subscriber');\n/**\n * Buffers the source Observable values until the size hits the maximum\n * `bufferSize` given.\n *\n * <span class=\"informal\">Collects values from the past as an array, and emits\n * that array only when its size reaches `bufferSize`.</span>\n *\n * <img src=\"./img/bufferCount.png\" width=\"100%\">\n *\n * Buffers a number of values from the source Observable by `bufferSize` then\n * emits the buffer and clears it, and starts a new buffer each\n * `startBufferEvery` values. If `startBufferEvery` is not provided or is\n * `null`, then new buffers are started immediately at the start of the source\n * and when each buffer closes and is emitted.\n *\n * @example <caption>Emit the last two click events as an array</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var buffered = clicks.bufferCount(2);\n * buffered.subscribe(x => console.log(x));\n *\n * @example <caption>On every click, emit the last two click events as an array</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var buffered = clicks.bufferCount(2, 1);\n * buffered.subscribe(x => console.log(x));\n *\n * @see {@link buffer}\n * @see {@link bufferTime}\n * @see {@link bufferToggle}\n * @see {@link bufferWhen}\n * @see {@link pairwise}\n * @see {@link windowCount}\n *\n * @param {number} bufferSize The maximum size of the buffer emitted.\n * @param {number} [startBufferEvery] Interval at which to start a new buffer.\n * For example if `startBufferEvery` is `2`, then a new buffer will be started\n * on every other value from the source. A new buffer is started at the\n * beginning of the source by default.\n * @return {Observable<T[]>} An Observable of arrays of buffered values.\n * @method bufferCount\n * @owner Observable\n */\nfunction bufferCount(bufferSize, startBufferEvery) {\n    if (startBufferEvery === void 0) { startBufferEvery = null; }\n    return this.lift(new BufferCountOperator(bufferSize, startBufferEvery));\n}\nexports.bufferCount = bufferCount;\nvar BufferCountOperator = (function () {\n    function BufferCountOperator(bufferSize, startBufferEvery) {\n        this.bufferSize = bufferSize;\n        this.startBufferEvery = startBufferEvery;\n    }\n    BufferCountOperator.prototype.call = function (subscriber, source) {\n        return source._subscribe(new BufferCountSubscriber(subscriber, this.bufferSize, this.startBufferEvery));\n    };\n    return BufferCountOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar BufferCountSubscriber = (function (_super) {\n    __extends(BufferCountSubscriber, _super);\n    function BufferCountSubscriber(destination, bufferSize, startBufferEvery) {\n        _super.call(this, destination);\n        this.bufferSize = bufferSize;\n        this.startBufferEvery = startBufferEvery;\n        this.buffers = [[]];\n        this.count = 0;\n    }\n    BufferCountSubscriber.prototype._next = function (value) {\n        var count = (this.count += 1);\n        var destination = this.destination;\n        var bufferSize = this.bufferSize;\n        var startBufferEvery = (this.startBufferEvery == null) ? bufferSize : this.startBufferEvery;\n        var buffers = this.buffers;\n        var len = buffers.length;\n        var remove = -1;\n        if (count % startBufferEvery === 0) {\n            buffers.push([]);\n        }\n        for (var i = 0; i < len; i++) {\n            var buffer = buffers[i];\n            buffer.push(value);\n            if (buffer.length === bufferSize) {\n                remove = i;\n                destination.next(buffer);\n            }\n        }\n        if (remove !== -1) {\n            buffers.splice(remove, 1);\n        }\n    };\n    BufferCountSubscriber.prototype._complete = function () {\n        var destination = this.destination;\n        var buffers = this.buffers;\n        while (buffers.length > 0) {\n            var buffer = buffers.shift();\n            if (buffer.length > 0) {\n                destination.next(buffer);\n            }\n        }\n        _super.prototype._complete.call(this);\n    };\n    return BufferCountSubscriber;\n}(Subscriber_1.Subscriber));\n\n},{\"../Subscriber\":13}],199:[function(require,module,exports){\n\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar async_1 = require('../scheduler/async');\nvar Subscriber_1 = require('../Subscriber');\nvar isScheduler_1 = require('../util/isScheduler');\n/**\n * Buffers the source Observable values for a specific time period.\n *\n * <span class=\"informal\">Collects values from the past as an array, and emits\n * those arrays periodically in time.</span>\n *\n * <img src=\"./img/bufferTime.png\" width=\"100%\">\n *\n * Buffers values from the source for a specific time duration `bufferTimeSpan`.\n * Unless the optional argument `bufferCreationInterval` is given, it emits and\n * resets the buffer every `bufferTimeSpan` milliseconds. If\n * `bufferCreationInterval` is given, this operator opens the buffer every\n * `bufferCreationInterval` milliseconds and closes (emits and resets) the\n * buffer every `bufferTimeSpan` milliseconds. When the optional argument\n * `maxBufferSize` is specified, the buffer will be closed either after\n * `bufferTimeSpan` milliseconds or when it contains `maxBufferSize` elements.\n *\n * @example <caption>Every second, emit an array of the recent click events</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var buffered = clicks.bufferTime(1000);\n * buffered.subscribe(x => console.log(x));\n *\n * @example <caption>Every 5 seconds, emit the click events from the next 2 seconds</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var buffered = clicks.bufferTime(2000, 5000);\n * buffered.subscribe(x => console.log(x));\n *\n * @see {@link buffer}\n * @see {@link bufferCount}\n * @see {@link bufferToggle}\n * @see {@link bufferWhen}\n * @see {@link windowTime}\n *\n * @param {number} bufferTimeSpan The amount of time to fill each buffer array.\n * @param {number} [bufferCreationInterval] The interval at which to start new\n * buffers.\n * @param {number} [maxBufferSize] The maximum buffer size.\n * @param {Scheduler} [scheduler=async] The scheduler on which to schedule the\n * intervals that determine buffer boundaries.\n * @return {Observable<T[]>} An observable of arrays of buffered values.\n * @method bufferTime\n * @owner Observable\n */\nfunction bufferTime(bufferTimeSpan) {\n    var length = arguments.length;\n    var scheduler = async_1.async;\n    if (isScheduler_1.isScheduler(arguments[arguments.length - 1])) {\n        scheduler = arguments[arguments.length - 1];\n        length--;\n    }\n    var bufferCreationInterval = null;\n    if (length >= 2) {\n        bufferCreationInterval = arguments[1];\n    }\n    var maxBufferSize = Number.POSITIVE_INFINITY;\n    if (length >= 3) {\n        maxBufferSize = arguments[2];\n    }\n    return this.lift(new BufferTimeOperator(bufferTimeSpan, bufferCreationInterval, maxBufferSize, scheduler));\n}\nexports.bufferTime = bufferTime;\nvar BufferTimeOperator = (function () {\n    function BufferTimeOperator(bufferTimeSpan, bufferCreationInterval, maxBufferSize, scheduler) {\n        this.bufferTimeSpan = bufferTimeSpan;\n        this.bufferCreationInterval = bufferCreationInterval;\n        this.maxBufferSize = maxBufferSize;\n        this.scheduler = scheduler;\n    }\n    BufferTimeOperator.prototype.call = function (subscriber, source) {\n        return source._subscribe(new BufferTimeSubscriber(subscriber, this.bufferTimeSpan, this.bufferCreationInterval, this.maxBufferSize, this.scheduler));\n    };\n    return BufferTimeOperator;\n}());\nvar Context = (function () {\n    function Context() {\n        this.buffer = [];\n    }\n    return Context;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar BufferTimeSubscriber = (function (_super) {\n    __extends(BufferTimeSubscriber, _super);\n    function BufferTimeSubscriber(destination, bufferTimeSpan, bufferCreationInterval, maxBufferSize, scheduler) {\n        _super.call(this, destination);\n        this.bufferTimeSpan = bufferTimeSpan;\n        this.bufferCreationInterval = bufferCreationInterval;\n        this.maxBufferSize = maxBufferSize;\n        this.scheduler = scheduler;\n        this.contexts = [];\n        var context = this.openContext();\n        this.timespanOnly = bufferCreationInterval == null || bufferCreationInterval < 0;\n        if (this.timespanOnly) {\n            var timeSpanOnlyState = { subscriber: this, context: context, bufferTimeSpan: bufferTimeSpan };\n            this.add(context.closeAction = scheduler.schedule(dispatchBufferTimeSpanOnly, bufferTimeSpan, timeSpanOnlyState));\n        }\n        else {\n            var closeState = { subscriber: this, context: context };\n            var creationState = { bufferTimeSpan: bufferTimeSpan, bufferCreationInterval: bufferCreationInterval, subscriber: this, scheduler: scheduler };\n            this.add(context.closeAction = scheduler.schedule(dispatchBufferClose, bufferTimeSpan, closeState));\n            this.add(scheduler.schedule(dispatchBufferCreation, bufferCreationInterval, creationState));\n        }\n    }\n    BufferTimeSubscriber.prototype._next = function (value) {\n        var contexts = this.contexts;\n        var len = contexts.length;\n        var filledBufferContext;\n        for (var i = 0; i < len; i++) {\n            var context = contexts[i];\n            var buffer = context.buffer;\n            buffer.push(value);\n            if (buffer.length == this.maxBufferSize) {\n                filledBufferContext = context;\n            }\n        }\n        if (filledBufferContext) {\n            this.onBufferFull(filledBufferContext);\n        }\n    };\n    BufferTimeSubscriber.prototype._error = function (err) {\n        this.contexts.length = 0;\n        _super.prototype._error.call(this, err);\n    };\n    BufferTimeSubscriber.prototype._complete = function () {\n        var _a = this, contexts = _a.contexts, destination = _a.destination;\n        while (contexts.length > 0) {\n            var context = contexts.shift();\n            destination.next(context.buffer);\n        }\n        _super.prototype._complete.call(this);\n    };\n    BufferTimeSubscriber.prototype._unsubscribe = function () {\n        this.contexts = null;\n    };\n    BufferTimeSubscriber.prototype.onBufferFull = function (context) {\n        this.closeContext(context);\n        var closeAction = context.closeAction;\n        closeAction.unsubscribe();\n        this.remove(closeAction);\n        if (this.timespanOnly) {\n            context = this.openContext();\n            var bufferTimeSpan = this.bufferTimeSpan;\n            var timeSpanOnlyState = { subscriber: this, context: context, bufferTimeSpan: bufferTimeSpan };\n            this.add(context.closeAction = this.scheduler.schedule(dispatchBufferTimeSpanOnly, bufferTimeSpan, timeSpanOnlyState));\n        }\n    };\n    BufferTimeSubscriber.prototype.openContext = function () {\n        var context = new Context();\n        this.contexts.push(context);\n        return context;\n    };\n    BufferTimeSubscriber.prototype.closeContext = function (context) {\n        this.destination.next(context.buffer);\n        var contexts = this.contexts;\n        var spliceIndex = contexts ? contexts.indexOf(context) : -1;\n        if (spliceIndex >= 0) {\n            contexts.splice(contexts.indexOf(context), 1);\n        }\n    };\n    return BufferTimeSubscriber;\n}(Subscriber_1.Subscriber));\nfunction dispatchBufferTimeSpanOnly(state) {\n    var subscriber = state.subscriber;\n    var prevContext = state.context;\n    if (prevContext) {\n        subscriber.closeContext(prevContext);\n    }\n    if (!subscriber.closed) {\n        state.context = subscriber.openContext();\n        state.context.closeAction = this.schedule(state, state.bufferTimeSpan);\n    }\n}\nfunction dispatchBufferCreation(state) {\n    var bufferCreationInterval = state.bufferCreationInterval, bufferTimeSpan = state.bufferTimeSpan, subscriber = state.subscriber, scheduler = state.scheduler;\n    var context = subscriber.openContext();\n    var action = this;\n    if (!subscriber.closed) {\n        subscriber.add(context.closeAction = scheduler.schedule(dispatchBufferClose, bufferTimeSpan, { subscriber: subscriber, context: context }));\n        action.schedule(state, bufferCreationInterval);\n    }\n}\nfunction dispatchBufferClose(arg) {\n    var subscriber = arg.subscriber, context = arg.context;\n    subscriber.closeContext(context);\n}\n\n},{\"../Subscriber\":13,\"../scheduler/async\":309,\"../util/isScheduler\":337}],200:[function(require,module,exports){\n\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Subscription_1 = require('../Subscription');\nvar subscribeToResult_1 = require('../util/subscribeToResult');\nvar OuterSubscriber_1 = require('../OuterSubscriber');\n/**\n * Buffers the source Observable values starting from an emission from\n * `openings` and ending when the output of `closingSelector` emits.\n *\n * <span class=\"informal\">Collects values from the past as an array. Starts\n * collecting only when `opening` emits, and calls the `closingSelector`\n * function to get an Observable that tells when to close the buffer.</span>\n *\n * <img src=\"./img/bufferToggle.png\" width=\"100%\">\n *\n * Buffers values from the source by opening the buffer via signals from an\n * Observable provided to `openings`, and closing and sending the buffers when\n * a Subscribable or Promise returned by the `closingSelector` function emits.\n *\n * @example <caption>Every other second, emit the click events from the next 500ms</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var openings = Rx.Observable.interval(1000);\n * var buffered = clicks.bufferToggle(openings, i =>\n *   i % 2 ? Rx.Observable.interval(500) : Rx.Observable.empty()\n * );\n * buffered.subscribe(x => console.log(x));\n *\n * @see {@link buffer}\n * @see {@link bufferCount}\n * @see {@link bufferTime}\n * @see {@link bufferWhen}\n * @see {@link windowToggle}\n *\n * @param {SubscribableOrPromise<O>} openings A Subscribable or Promise of notifications to start new\n * buffers.\n * @param {function(value: O): SubscribableOrPromise} closingSelector A function that takes\n * the value emitted by the `openings` observable and returns a Subscribable or Promise,\n * which, when it emits, signals that the associated buffer should be emitted\n * and cleared.\n * @return {Observable<T[]>} An observable of arrays of buffered values.\n * @method bufferToggle\n * @owner Observable\n */\nfunction bufferToggle(openings, closingSelector) {\n    return this.lift(new BufferToggleOperator(openings, closingSelector));\n}\nexports.bufferToggle = bufferToggle;\nvar BufferToggleOperator = (function () {\n    function BufferToggleOperator(openings, closingSelector) {\n        this.openings = openings;\n        this.closingSelector = closingSelector;\n    }\n    BufferToggleOperator.prototype.call = function (subscriber, source) {\n        return source._subscribe(new BufferToggleSubscriber(subscriber, this.openings, this.closingSelector));\n    };\n    return BufferToggleOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar BufferToggleSubscriber = (function (_super) {\n    __extends(BufferToggleSubscriber, _super);\n    function BufferToggleSubscriber(destination, openings, closingSelector) {\n        _super.call(this, destination);\n        this.openings = openings;\n        this.closingSelector = closingSelector;\n        this.contexts = [];\n        this.add(subscribeToResult_1.subscribeToResult(this, openings));\n    }\n    BufferToggleSubscriber.prototype._next = function (value) {\n        var contexts = this.contexts;\n        var len = contexts.length;\n        for (var i = 0; i < len; i++) {\n            contexts[i].buffer.push(value);\n        }\n    };\n    BufferToggleSubscriber.prototype._error = function (err) {\n        var contexts = this.contexts;\n        while (contexts.length > 0) {\n            var context = contexts.shift();\n            context.subscription.unsubscribe();\n            context.buffer = null;\n            context.subscription = null;\n        }\n        this.contexts = null;\n        _super.prototype._error.call(this, err);\n    };\n    BufferToggleSubscriber.prototype._complete = function () {\n        var contexts = this.contexts;\n        while (contexts.length > 0) {\n            var context = contexts.shift();\n            this.destination.next(context.buffer);\n            context.subscription.unsubscribe();\n            context.buffer = null;\n            context.subscription = null;\n        }\n        this.contexts = null;\n        _super.prototype._complete.call(this);\n    };\n    BufferToggleSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n        outerValue ? this.closeBuffer(outerValue) : this.openBuffer(innerValue);\n    };\n    BufferToggleSubscriber.prototype.notifyComplete = function (innerSub) {\n        this.closeBuffer(innerSub.context);\n    };\n    BufferToggleSubscriber.prototype.openBuffer = function (value) {\n        try {\n            var closingSelector = this.closingSelector;\n            var closingNotifier = closingSelector.call(this, value);\n            if (closingNotifier) {\n                this.trySubscribe(closingNotifier);\n            }\n        }\n        catch (err) {\n            this._error(err);\n        }\n    };\n    BufferToggleSubscriber.prototype.closeBuffer = function (context) {\n        var contexts = this.contexts;\n        if (contexts && context) {\n            var buffer = context.buffer, subscription = context.subscription;\n            this.destination.next(buffer);\n            contexts.splice(contexts.indexOf(context), 1);\n            this.remove(subscription);\n            subscription.unsubscribe();\n        }\n    };\n    BufferToggleSubscriber.prototype.trySubscribe = function (closingNotifier) {\n        var contexts = this.contexts;\n        var buffer = [];\n        var subscription = new Subscription_1.Subscription();\n        var context = { buffer: buffer, subscription: subscription };\n        contexts.push(context);\n        var innerSubscription = subscribeToResult_1.subscribeToResult(this, closingNotifier, context);\n        if (!innerSubscription || innerSubscription.closed) {\n            this.closeBuffer(context);\n        }\n        else {\n            innerSubscription.context = context;\n            this.add(innerSubscription);\n            subscription.add(innerSubscription);\n        }\n    };\n    return BufferToggleSubscriber;\n}(OuterSubscriber_1.OuterSubscriber));\n\n},{\"../OuterSubscriber\":7,\"../Subscription\":14,\"../util/subscribeToResult\":341}],201:[function(require,module,exports){\n\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Subscription_1 = require('../Subscription');\nvar tryCatch_1 = require('../util/tryCatch');\nvar errorObject_1 = require('../util/errorObject');\nvar OuterSubscriber_1 = require('../OuterSubscriber');\nvar subscribeToResult_1 = require('../util/subscribeToResult');\n/**\n * Buffers the source Observable values, using a factory function of closing\n * Observables to determine when to close, emit, and reset the buffer.\n *\n * <span class=\"informal\">Collects values from the past as an array. When it\n * starts collecting values, it calls a function that returns an Observable that\n * tells when to close the buffer and restart collecting.</span>\n *\n * <img src=\"./img/bufferWhen.png\" width=\"100%\">\n *\n * Opens a buffer immediately, then closes the buffer when the observable\n * returned by calling `closingSelector` function emits a value. When it closes\n * the buffer, it immediately opens a new buffer and repeats the process.\n *\n * @example <caption>Emit an array of the last clicks every [1-5] random seconds</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var buffered = clicks.bufferWhen(() =>\n *   Rx.Observable.interval(1000 + Math.random() * 4000)\n * );\n * buffered.subscribe(x => console.log(x));\n *\n * @see {@link buffer}\n * @see {@link bufferCount}\n * @see {@link bufferTime}\n * @see {@link bufferToggle}\n * @see {@link windowWhen}\n *\n * @param {function(): Observable} closingSelector A function that takes no\n * arguments and returns an Observable that signals buffer closure.\n * @return {Observable<T[]>} An observable of arrays of buffered values.\n * @method bufferWhen\n * @owner Observable\n */\nfunction bufferWhen(closingSelector) {\n    return this.lift(new BufferWhenOperator(closingSelector));\n}\nexports.bufferWhen = bufferWhen;\nvar BufferWhenOperator = (function () {\n    function BufferWhenOperator(closingSelector) {\n        this.closingSelector = closingSelector;\n    }\n    BufferWhenOperator.prototype.call = function (subscriber, source) {\n        return source._subscribe(new BufferWhenSubscriber(subscriber, this.closingSelector));\n    };\n    return BufferWhenOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar BufferWhenSubscriber = (function (_super) {\n    __extends(BufferWhenSubscriber, _super);\n    function BufferWhenSubscriber(destination, closingSelector) {\n        _super.call(this, destination);\n        this.closingSelector = closingSelector;\n        this.subscribing = false;\n        this.openBuffer();\n    }\n    BufferWhenSubscriber.prototype._next = function (value) {\n        this.buffer.push(value);\n    };\n    BufferWhenSubscriber.prototype._complete = function () {\n        var buffer = this.buffer;\n        if (buffer) {\n            this.destination.next(buffer);\n        }\n        _super.prototype._complete.call(this);\n    };\n    BufferWhenSubscriber.prototype._unsubscribe = function () {\n        this.buffer = null;\n        this.subscribing = false;\n    };\n    BufferWhenSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n        this.openBuffer();\n    };\n    BufferWhenSubscriber.prototype.notifyComplete = function () {\n        if (this.subscribing) {\n            this.complete();\n        }\n        else {\n            this.openBuffer();\n        }\n    };\n    BufferWhenSubscriber.prototype.openBuffer = function () {\n        var closingSubscription = this.closingSubscription;\n        if (closingSubscription) {\n            this.remove(closingSubscription);\n            closingSubscription.unsubscribe();\n        }\n        var buffer = this.buffer;\n        if (this.buffer) {\n            this.destination.next(buffer);\n        }\n        this.buffer = [];\n        var closingNotifier = tryCatch_1.tryCatch(this.closingSelector)();\n        if (closingNotifier === errorObject_1.errorObject) {\n            this.error(errorObject_1.errorObject.e);\n        }\n        else {\n            closingSubscription = new Subscription_1.Subscription();\n            this.closingSubscription = closingSubscription;\n            this.add(closingSubscription);\n            this.subscribing = true;\n            closingSubscription.add(subscribeToResult_1.subscribeToResult(this, closingNotifier));\n            this.subscribing = false;\n        }\n    };\n    return BufferWhenSubscriber;\n}(OuterSubscriber_1.OuterSubscriber));\n\n},{\"../OuterSubscriber\":7,\"../Subscription\":14,\"../util/errorObject\":330,\"../util/subscribeToResult\":341,\"../util/tryCatch\":343}],202:[function(require,module,exports){\n\"use strict\";\nvar Observable_1 = require('../Observable');\nvar ReplaySubject_1 = require('../ReplaySubject');\n/**\n * @param bufferSize\n * @param windowTime\n * @param scheduler\n * @return {Observable<any>}\n * @method cache\n * @owner Observable\n */\nfunction cache(bufferSize, windowTime, scheduler) {\n    if (bufferSize === void 0) { bufferSize = Number.POSITIVE_INFINITY; }\n    if (windowTime === void 0) { windowTime = Number.POSITIVE_INFINITY; }\n    var subject;\n    var source = this;\n    var refs = 0;\n    var outerSub;\n    var getSubject = function () {\n        subject = new ReplaySubject_1.ReplaySubject(bufferSize, windowTime, scheduler);\n        return subject;\n    };\n    return new Observable_1.Observable(function (observer) {\n        if (!subject) {\n            subject = getSubject();\n            outerSub = source.subscribe(function (value) { return subject.next(value); }, function (err) {\n                var s = subject;\n                subject = null;\n                s.error(err);\n            }, function () { return subject.complete(); });\n        }\n        refs++;\n        if (!subject) {\n            subject = getSubject();\n        }\n        var innerSub = subject.subscribe(observer);\n        return function () {\n            refs--;\n            if (innerSub) {\n                innerSub.unsubscribe();\n            }\n            if (refs === 0) {\n                outerSub.unsubscribe();\n            }\n        };\n    });\n}\nexports.cache = cache;\n\n},{\"../Observable\":5,\"../ReplaySubject\":8}],203:[function(require,module,exports){\n\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar OuterSubscriber_1 = require('../OuterSubscriber');\nvar subscribeToResult_1 = require('../util/subscribeToResult');\n/**\n * Catches errors on the observable to be handled by returning a new observable or throwing an error.\n * @param {function} selector a function that takes as arguments `err`, which is the error, and `caught`, which\n *  is the source observable, in case you'd like to \"retry\" that observable by returning it again. Whatever observable\n *  is returned by the `selector` will be used to continue the observable chain.\n * @return {Observable} an observable that originates from either the source or the observable returned by the\n *  catch `selector` function.\n * @method catch\n * @owner Observable\n */\nfunction _catch(selector) {\n    var operator = new CatchOperator(selector);\n    var caught = this.lift(operator);\n    return (operator.caught = caught);\n}\nexports._catch = _catch;\nvar CatchOperator = (function () {\n    function CatchOperator(selector) {\n        this.selector = selector;\n    }\n    CatchOperator.prototype.call = function (subscriber, source) {\n        return source._subscribe(new CatchSubscriber(subscriber, this.selector, this.caught));\n    };\n    return CatchOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar CatchSubscriber = (function (_super) {\n    __extends(CatchSubscriber, _super);\n    function CatchSubscriber(destination, selector, caught) {\n        _super.call(this, destination);\n        this.selector = selector;\n        this.caught = caught;\n    }\n    // NOTE: overriding `error` instead of `_error` because we don't want\n    // to have this flag this subscriber as `isStopped`.\n    CatchSubscriber.prototype.error = function (err) {\n        if (!this.isStopped) {\n            var result = void 0;\n            try {\n                result = this.selector(err, this.caught);\n            }\n            catch (err) {\n                this.destination.error(err);\n                return;\n            }\n            this.unsubscribe();\n            this.destination.remove(this);\n            subscribeToResult_1.subscribeToResult(this, result);\n        }\n    };\n    return CatchSubscriber;\n}(OuterSubscriber_1.OuterSubscriber));\n\n},{\"../OuterSubscriber\":7,\"../util/subscribeToResult\":341}],204:[function(require,module,exports){\n\"use strict\";\nvar combineLatest_1 = require('./combineLatest');\n/**\n * Converts a higher-order Observable into a first-order Observable by waiting\n * for the outer Observable to complete, then applying {@link combineLatest}.\n *\n * <span class=\"informal\">Flattens an Observable-of-Observables by applying\n * {@link combineLatest} when the Observable-of-Observables completes.</span>\n *\n * <img src=\"./img/combineAll.png\" width=\"100%\">\n *\n * Takes an Observable of Observables, and collects all Observables from it.\n * Once the outer Observable completes, it subscribes to all collected\n * Observables and combines their values using the {@link combineLatest}\n * strategy, such that:\n * - Every time an inner Observable emits, the output Observable emits.\n * - When the returned observable emits, it emits all of the latest values by:\n *   - If a `project` function is provided, it is called with each recent value\n *     from each inner Observable in whatever order they arrived, and the result\n *     of the `project` function is what is emitted by the output Observable.\n *   - If there is no `project` function, an array of all of the most recent\n *     values is emitted by the output Observable.\n *\n * @example <caption>Map two click events to a finite interval Observable, then apply combineAll</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var higherOrder = clicks.map(ev =>\n *   Rx.Observable.interval(Math.random()*2000).take(3)\n * ).take(2);\n * var result = higherOrder.combineAll();\n * result.subscribe(x => console.log(x));\n *\n * @see {@link combineLatest}\n * @see {@link mergeAll}\n *\n * @param {function} [project] An optional function to map the most recent\n * values from each inner Observable into a new result. Takes each of the most\n * recent values from each collected inner Observable as arguments, in order.\n * @return {Observable} An Observable of projected results or arrays of recent\n * values.\n * @method combineAll\n * @owner Observable\n */\nfunction combineAll(project) {\n    return this.lift(new combineLatest_1.CombineLatestOperator(project));\n}\nexports.combineAll = combineAll;\n\n},{\"./combineLatest\":205}],205:[function(require,module,exports){\n\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar ArrayObservable_1 = require('../observable/ArrayObservable');\nvar isArray_1 = require('../util/isArray');\nvar OuterSubscriber_1 = require('../OuterSubscriber');\nvar subscribeToResult_1 = require('../util/subscribeToResult');\nvar none = {};\n/**\n * Combines multiple Observables to create an Observable whose values are\n * calculated from the latest values of each of its input Observables.\n *\n * <span class=\"informal\">Whenever any input Observable emits a value, it\n * computes a formula using the latest values from all the inputs, then emits\n * the output of that formula.</span>\n *\n * <img src=\"./img/combineLatest.png\" width=\"100%\">\n *\n * `combineLatest` combines the values from this Observable with values from\n * Observables passed as arguments. This is done by subscribing to each\n * Observable, in order, and collecting an array of each of the most recent\n * values any time any of the input Observables emits, then either taking that\n * array and passing it as arguments to an optional `project` function and\n * emitting the return value of that, or just emitting the array of recent\n * values directly if there is no `project` function.\n *\n * @example <caption>Dynamically calculate the Body-Mass Index from an Observable of weight and one for height</caption>\n * var weight = Rx.Observable.of(70, 72, 76, 79, 75);\n * var height = Rx.Observable.of(1.76, 1.77, 1.78);\n * var bmi = weight.combineLatest(height, (w, h) => w / (h * h));\n * bmi.subscribe(x => console.log('BMI is ' + x));\n *\n * @see {@link combineAll}\n * @see {@link merge}\n * @see {@link withLatestFrom}\n *\n * @param {Observable} other An input Observable to combine with the source\n * Observable. More than one input Observables may be given as argument.\n * @param {function} [project] An optional function to project the values from\n * the combined latest values into a new value on the output Observable.\n * @return {Observable} An Observable of projected values from the most recent\n * values from each input Observable, or an array of the most recent values from\n * each input Observable.\n * @method combineLatest\n * @owner Observable\n */\nfunction combineLatest() {\n    var observables = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        observables[_i - 0] = arguments[_i];\n    }\n    var project = null;\n    if (typeof observables[observables.length - 1] === 'function') {\n        project = observables.pop();\n    }\n    // if the first and only other argument besides the resultSelector is an array\n    // assume it's been called with `combineLatest([obs1, obs2, obs3], project)`\n    if (observables.length === 1 && isArray_1.isArray(observables[0])) {\n        observables = observables[0];\n    }\n    observables.unshift(this);\n    return new ArrayObservable_1.ArrayObservable(observables).lift(new CombineLatestOperator(project));\n}\nexports.combineLatest = combineLatest;\n/* tslint:enable:max-line-length */\nvar CombineLatestOperator = (function () {\n    function CombineLatestOperator(project) {\n        this.project = project;\n    }\n    CombineLatestOperator.prototype.call = function (subscriber, source) {\n        return source._subscribe(new CombineLatestSubscriber(subscriber, this.project));\n    };\n    return CombineLatestOperator;\n}());\nexports.CombineLatestOperator = CombineLatestOperator;\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar CombineLatestSubscriber = (function (_super) {\n    __extends(CombineLatestSubscriber, _super);\n    function CombineLatestSubscriber(destination, project) {\n        _super.call(this, destination);\n        this.project = project;\n        this.active = 0;\n        this.values = [];\n        this.observables = [];\n    }\n    CombineLatestSubscriber.prototype._next = function (observable) {\n        this.values.push(none);\n        this.observables.push(observable);\n    };\n    CombineLatestSubscriber.prototype._complete = function () {\n        var observables = this.observables;\n        var len = observables.length;\n        if (len === 0) {\n            this.destination.complete();\n        }\n        else {\n            this.active = len;\n            this.toRespond = len;\n            for (var i = 0; i < len; i++) {\n                var observable = observables[i];\n                this.add(subscribeToResult_1.subscribeToResult(this, observable, observable, i));\n            }\n        }\n    };\n    CombineLatestSubscriber.prototype.notifyComplete = function (unused) {\n        if ((this.active -= 1) === 0) {\n            this.destination.complete();\n        }\n    };\n    CombineLatestSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n        var values = this.values;\n        var oldVal = values[outerIndex];\n        var toRespond = !this.toRespond\n            ? 0\n            : oldVal === none ? --this.toRespond : this.toRespond;\n        values[outerIndex] = innerValue;\n        if (toRespond === 0) {\n            if (this.project) {\n                this._tryProject(values);\n            }\n            else {\n                this.destination.next(values.slice());\n            }\n        }\n    };\n    CombineLatestSubscriber.prototype._tryProject = function (values) {\n        var result;\n        try {\n            result = this.project.apply(this, values);\n        }\n        catch (err) {\n            this.destination.error(err);\n            return;\n        }\n        this.destination.next(result);\n    };\n    return CombineLatestSubscriber;\n}(OuterSubscriber_1.OuterSubscriber));\nexports.CombineLatestSubscriber = CombineLatestSubscriber;\n\n},{\"../OuterSubscriber\":7,\"../observable/ArrayObservable\":145,\"../util/isArray\":331,\"../util/subscribeToResult\":341}],206:[function(require,module,exports){\n\"use strict\";\nvar isScheduler_1 = require('../util/isScheduler');\nvar ArrayObservable_1 = require('../observable/ArrayObservable');\nvar mergeAll_1 = require('./mergeAll');\n/**\n * Creates an output Observable which sequentially emits all values from every\n * given input Observable after the current Observable.\n *\n * <span class=\"informal\">Concatenates multiple Observables together by\n * sequentially emitting their values, one Observable after the other.</span>\n *\n * <img src=\"./img/concat.png\" width=\"100%\">\n *\n * Joins this Observable with multiple other Observables by subscribing to them\n * one at a time, starting with the source, and merging their results into the\n * output Observable. Will wait for each Observable to complete before moving\n * on to the next.\n *\n * @example <caption>Concatenate a timer counting from 0 to 3 with a synchronous sequence from 1 to 10</caption>\n * var timer = Rx.Observable.interval(1000).take(4);\n * var sequence = Rx.Observable.range(1, 10);\n * var result = timer.concat(sequence);\n * result.subscribe(x => console.log(x));\n *\n * @example <caption>Concatenate 3 Observables</caption>\n * var timer1 = Rx.Observable.interval(1000).take(10);\n * var timer2 = Rx.Observable.interval(2000).take(6);\n * var timer3 = Rx.Observable.interval(500).take(10);\n * var result = timer1.concat(timer2, timer3);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link concatAll}\n * @see {@link concatMap}\n * @see {@link concatMapTo}\n *\n * @param {Observable} other An input Observable to concatenate after the source\n * Observable. More than one input Observables may be given as argument.\n * @param {Scheduler} [scheduler=null] An optional Scheduler to schedule each\n * Observable subscription on.\n * @return {Observable} All values of each passed Observable merged into a\n * single Observable, in order, in serial fashion.\n * @method concat\n * @owner Observable\n */\nfunction concat() {\n    var observables = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        observables[_i - 0] = arguments[_i];\n    }\n    return concatStatic.apply(void 0, [this].concat(observables));\n}\nexports.concat = concat;\n/* tslint:enable:max-line-length */\n/**\n * Creates an output Observable which sequentially emits all values from every\n * given input Observable after the current Observable.\n *\n * <span class=\"informal\">Concatenates multiple Observables together by\n * sequentially emitting their values, one Observable after the other.</span>\n *\n * <img src=\"./img/concat.png\" width=\"100%\">\n *\n * Joins multiple Observables together by subscribing to them one at a time and\n * merging their results into the output Observable. Will wait for each\n * Observable to complete before moving on to the next.\n *\n * @example <caption>Concatenate a timer counting from 0 to 3 with a synchronous sequence from 1 to 10</caption>\n * var timer = Rx.Observable.interval(1000).take(4);\n * var sequence = Rx.Observable.range(1, 10);\n * var result = Rx.Observable.concat(timer, sequence);\n * result.subscribe(x => console.log(x));\n *\n * @example <caption>Concatenate 3 Observables</caption>\n * var timer1 = Rx.Observable.interval(1000).take(10);\n * var timer2 = Rx.Observable.interval(2000).take(6);\n * var timer3 = Rx.Observable.interval(500).take(10);\n * var result = Rx.Observable.concat(timer1, timer2, timer3);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link concatAll}\n * @see {@link concatMap}\n * @see {@link concatMapTo}\n *\n * @param {Observable} input1 An input Observable to concatenate with others.\n * @param {Observable} input2 An input Observable to concatenate with others.\n * More than one input Observables may be given as argument.\n * @param {Scheduler} [scheduler=null] An optional Scheduler to schedule each\n * Observable subscription on.\n * @return {Observable} All values of each passed Observable merged into a\n * single Observable, in order, in serial fashion.\n * @static true\n * @name concat\n * @owner Observable\n */\nfunction concatStatic() {\n    var observables = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        observables[_i - 0] = arguments[_i];\n    }\n    var scheduler = null;\n    var args = observables;\n    if (isScheduler_1.isScheduler(args[observables.length - 1])) {\n        scheduler = args.pop();\n    }\n    return new ArrayObservable_1.ArrayObservable(observables, scheduler).lift(new mergeAll_1.MergeAllOperator(1));\n}\nexports.concatStatic = concatStatic;\n\n},{\"../observable/ArrayObservable\":145,\"../util/isScheduler\":337,\"./mergeAll\":242}],207:[function(require,module,exports){\n\"use strict\";\nvar mergeAll_1 = require('./mergeAll');\n/**\n * Converts a higher-order Observable into a first-order Observable by\n * concatenating the inner Observables in order.\n *\n * <span class=\"informal\">Flattens an Observable-of-Observables by putting one\n * inner Observable after the other.</span>\n *\n * <img src=\"./img/concatAll.png\" width=\"100%\">\n *\n * Joins every Observable emitted by the source (a higher-order Observable), in\n * a serial fashion. It subscribes to each inner Observable only after the\n * previous inner Observable has completed, and merges all of their values into\n * the returned observable.\n *\n * __Warning:__ If the source Observable emits Observables quickly and\n * endlessly, and the inner Observables it emits generally complete slower than\n * the source emits, you can run into memory issues as the incoming Observables\n * collect in an unbounded buffer.\n *\n * Note: `concatAll` is equivalent to `mergeAll` with concurrency parameter set\n * to `1`.\n *\n * @example <caption>For each click event, tick every second from 0 to 3, with no concurrency</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var higherOrder = clicks.map(ev => Rx.Observable.interval(1000).take(4));\n * var firstOrder = higherOrder.concatAll();\n * firstOrder.subscribe(x => console.log(x));\n *\n * @see {@link combineAll}\n * @see {@link concat}\n * @see {@link concatMap}\n * @see {@link concatMapTo}\n * @see {@link exhaust}\n * @see {@link mergeAll}\n * @see {@link switch}\n * @see {@link zipAll}\n *\n * @return {Observable} An Observable emitting values from all the inner\n * Observables concatenated.\n * @method concatAll\n * @owner Observable\n */\nfunction concatAll() {\n    return this.lift(new mergeAll_1.MergeAllOperator(1));\n}\nexports.concatAll = concatAll;\n\n},{\"./mergeAll\":242}],208:[function(require,module,exports){\n\"use strict\";\nvar mergeMap_1 = require('./mergeMap');\n/**\n * Projects each source value to an Observable which is merged in the output\n * Observable, in a serialized fashion waiting for each one to complete before\n * merging the next.\n *\n * <span class=\"informal\">Maps each value to an Observable, then flattens all of\n * these inner Observables using {@link concatAll}.</span>\n *\n * <img src=\"./img/concatMap.png\" width=\"100%\">\n *\n * Returns an Observable that emits items based on applying a function that you\n * supply to each item emitted by the source Observable, where that function\n * returns an (so-called \"inner\") Observable. Each new inner Observable is\n * concatenated with the previous inner Observable.\n *\n * __Warning:__ if source values arrive endlessly and faster than their\n * corresponding inner Observables can complete, it will result in memory issues\n * as inner Observables amass in an unbounded buffer waiting for their turn to\n * be subscribed to.\n *\n * Note: `concatMap` is equivalent to `mergeMap` with concurrency parameter set\n * to `1`.\n *\n * @example <caption>For each click event, tick every second from 0 to 3, with no concurrency</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.concatMap(ev => Rx.Observable.interval(1000).take(4));\n * result.subscribe(x => console.log(x));\n *\n * @see {@link concat}\n * @see {@link concatAll}\n * @see {@link concatMapTo}\n * @see {@link exhaustMap}\n * @see {@link mergeMap}\n * @see {@link switchMap}\n *\n * @param {function(value: T, ?index: number): Observable} project A function\n * that, when applied to an item emitted by the source Observable, returns an\n * Observable.\n * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]\n * A function to produce the value on the output Observable based on the values\n * and the indices of the source (outer) emission and the inner Observable\n * emission. The arguments passed to this function are:\n * - `outerValue`: the value that came from the source\n * - `innerValue`: the value that came from the projected Observable\n * - `outerIndex`: the \"index\" of the value that came from the source\n * - `innerIndex`: the \"index\" of the value from the projected Observable\n * @return {Observable} an observable of values merged from the projected\n * Observables as they were subscribed to, one at a time. Optionally, these\n * values may have been projected from a passed `projectResult` argument.\n * @return {Observable} An Observable that emits the result of applying the\n * projection function (and the optional `resultSelector`) to each item emitted\n * by the source Observable and taking values from each projected inner\n * Observable sequentially.\n * @method concatMap\n * @owner Observable\n */\nfunction concatMap(project, resultSelector) {\n    return this.lift(new mergeMap_1.MergeMapOperator(project, resultSelector, 1));\n}\nexports.concatMap = concatMap;\n\n},{\"./mergeMap\":243}],209:[function(require,module,exports){\n\"use strict\";\nvar mergeMapTo_1 = require('./mergeMapTo');\n/**\n * Projects each source value to the same Observable which is merged multiple\n * times in a serialized fashion on the output Observable.\n *\n * <span class=\"informal\">It's like {@link concatMap}, but maps each value\n * always to the same inner Observable.</span>\n *\n * <img src=\"./img/concatMapTo.png\" width=\"100%\">\n *\n * Maps each source value to the given Observable `innerObservable` regardless\n * of the source value, and then flattens those resulting Observables into one\n * single Observable, which is the output Observable. Each new `innerObservable`\n * instance emitted on the output Observable is concatenated with the previous\n * `innerObservable` instance.\n *\n * __Warning:__ if source values arrive endlessly and faster than their\n * corresponding inner Observables can complete, it will result in memory issues\n * as inner Observables amass in an unbounded buffer waiting for their turn to\n * be subscribed to.\n *\n * Note: `concatMapTo` is equivalent to `mergeMapTo` with concurrency parameter\n * set to `1`.\n *\n * @example <caption>For each click event, tick every second from 0 to 3, with no concurrency</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.concatMapTo(Rx.Observable.interval(1000).take(4));\n * result.subscribe(x => console.log(x));\n *\n * @see {@link concat}\n * @see {@link concatAll}\n * @see {@link concatMap}\n * @see {@link mergeMapTo}\n * @see {@link switchMapTo}\n *\n * @param {Observable} innerObservable An Observable to replace each value from\n * the source Observable.\n * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]\n * A function to produce the value on the output Observable based on the values\n * and the indices of the source (outer) emission and the inner Observable\n * emission. The arguments passed to this function are:\n * - `outerValue`: the value that came from the source\n * - `innerValue`: the value that came from the projected Observable\n * - `outerIndex`: the \"index\" of the value that came from the source\n * - `innerIndex`: the \"index\" of the value from the projected Observable\n * @return {Observable} An observable of values merged together by joining the\n * passed observable with itself, one after the other, for each value emitted\n * from the source.\n * @method concatMapTo\n * @owner Observable\n */\nfunction concatMapTo(innerObservable, resultSelector) {\n    return this.lift(new mergeMapTo_1.MergeMapToOperator(innerObservable, resultSelector, 1));\n}\nexports.concatMapTo = concatMapTo;\n\n},{\"./mergeMapTo\":244}],210:[function(require,module,exports){\n\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Subscriber_1 = require('../Subscriber');\n/**\n * Counts the number of emissions on the source and emits that number when the\n * source completes.\n *\n * <span class=\"informal\">Tells how many values were emitted, when the source\n * completes.</span>\n *\n * <img src=\"./img/count.png\" width=\"100%\">\n *\n * `count` transforms an Observable that emits values into an Observable that\n * emits a single value that represents the number of values emitted by the\n * source Observable. If the source Observable terminates with an error, `count`\n * will pass this error notification along without emitting an value first. If\n * the source Observable does not terminate at all, `count` will neither emit\n * a value nor terminate. This operator takes an optional `predicate` function\n * as argument, in which case the output emission will represent the number of\n * source values that matched `true` with the `predicate`.\n *\n * @example <caption>Counts how many seconds have passed before the first click happened</caption>\n * var seconds = Rx.Observable.interval(1000);\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var secondsBeforeClick = seconds.takeUntil(clicks);\n * var result = secondsBeforeClick.count();\n * result.subscribe(x => console.log(x));\n *\n * @example <caption>Counts how many odd numbers are there between 1 and 7</caption>\n * var numbers = Rx.Observable.range(1, 7);\n * var result = numbers.count(i => i % 2 === 1);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link max}\n * @see {@link min}\n * @see {@link reduce}\n *\n * @param {function(value: T, i: number, source: Observable<T>): boolean} [predicate] A\n * boolean function to select what values are to be counted. It is provided with\n * arguments of:\n * - `value`: the value from the source Observable.\n * - `index`: the (zero-based) \"index\" of the value from the source Observable.\n * - `source`: the source Observable instance itself.\n * @return {Observable} An Observable of one number that represents the count as\n * described above.\n * @method count\n * @owner Observable\n */\nfunction count(predicate) {\n    return this.lift(new CountOperator(predicate, this));\n}\nexports.count = count;\nvar CountOperator = (function () {\n    function CountOperator(predicate, source) {\n        this.predicate = predicate;\n        this.source = source;\n    }\n    CountOperator.prototype.call = function (subscriber, source) {\n        return source._subscribe(new CountSubscriber(subscriber, this.predicate, this.source));\n    };\n    return CountOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar CountSubscriber = (function (_super) {\n    __extends(CountSubscriber, _super);\n    function CountSubscriber(destination, predicate, source) {\n        _super.call(this, destination);\n        this.predicate = predicate;\n        this.source = source;\n        this.count = 0;\n        this.index = 0;\n    }\n    CountSubscriber.prototype._next = function (value) {\n        if (this.predicate) {\n            this._tryPredicate(value);\n        }\n        else {\n            this.count++;\n        }\n    };\n    CountSubscriber.prototype._tryPredicate = function (value) {\n        var result;\n        try {\n            result = this.predicate(value, this.index++, this.source);\n        }\n        catch (err) {\n            this.destination.error(err);\n            return;\n        }\n        if (result) {\n            this.count++;\n        }\n    };\n    CountSubscriber.prototype._complete = function () {\n        this.destination.next(this.count);\n        this.destination.complete();\n    };\n    return CountSubscriber;\n}(Subscriber_1.Subscriber));\n\n},{\"../Subscriber\":13}],211:[function(require,module,exports){\n\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar OuterSubscriber_1 = require('../OuterSubscriber');\nvar subscribeToResult_1 = require('../util/subscribeToResult');\n/**\n * Emits a value from the source Observable only after a particular time span\n * determined by another Observable has passed without another source emission.\n *\n * <span class=\"informal\">It's like {@link debounceTime}, but the time span of\n * emission silence is determined by a second Observable.</span>\n *\n * <img src=\"./img/debounce.png\" width=\"100%\">\n *\n * `debounce` delays values emitted by the source Observable, but drops previous\n * pending delayed emissions if a new value arrives on the source Observable.\n * This operator keeps track of the most recent value from the source\n * Observable, and spawns a duration Observable by calling the\n * `durationSelector` function. The value is emitted only when the duration\n * Observable emits a value or completes, and if no other value was emitted on\n * the source Observable since the duration Observable was spawned. If a new\n * value appears before the duration Observable emits, the previous value will\n * be dropped and will not be emitted on the output Observable.\n *\n * Like {@link debounceTime}, this is a rate-limiting operator, and also a\n * delay-like operator since output emissions do not necessarily occur at the\n * same time as they did on the source Observable.\n *\n * @example <caption>Emit the most recent click after a burst of clicks</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.debounce(() => Rx.Observable.interval(1000));\n * result.subscribe(x => console.log(x));\n *\n * @see {@link audit}\n * @see {@link debounceTime}\n * @see {@link delayWhen}\n * @see {@link throttle}\n *\n * @param {function(value: T): Observable|Promise} durationSelector A function\n * that receives a value from the source Observable, for computing the timeout\n * duration for each source value, returned as an Observable or a Promise.\n * @return {Observable} An Observable that delays the emissions of the source\n * Observable by the specified duration Observable returned by\n * `durationSelector`, and may drop some values if they occur too frequently.\n * @method debounce\n * @owner Observable\n */\nfunction debounce(durationSelector) {\n    return this.lift(new DebounceOperator(durationSelector));\n}\nexports.debounce = debounce;\nvar DebounceOperator = (function () {\n    function DebounceOperator(durationSelector) {\n        this.durationSelector = durationSelector;\n    }\n    DebounceOperator.prototype.call = function (subscriber, source) {\n        return source._subscribe(new DebounceSubscriber(subscriber, this.durationSelector));\n    };\n    return DebounceOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar DebounceSubscriber = (function (_super) {\n    __extends(DebounceSubscriber, _super);\n    function DebounceSubscriber(destination, durationSelector) {\n        _super.call(this, destination);\n        this.durationSelector = durationSelector;\n        this.hasValue = false;\n        this.durationSubscription = null;\n    }\n    DebounceSubscriber.prototype._next = function (value) {\n        try {\n            var result = this.durationSelector.call(this, value);\n            if (result) {\n                this._tryNext(value, result);\n            }\n        }\n        catch (err) {\n            this.destination.error(err);\n        }\n    };\n    DebounceSubscriber.prototype._complete = function () {\n        this.emitValue();\n        this.destination.complete();\n    };\n    DebounceSubscriber.prototype._tryNext = function (value, duration) {\n        var subscription = this.durationSubscription;\n        this.value = value;\n        this.hasValue = true;\n        if (subscription) {\n            subscription.unsubscribe();\n            this.remove(subscription);\n        }\n        subscription = subscribeToResult_1.subscribeToResult(this, duration);\n        if (!subscription.closed) {\n            this.add(this.durationSubscription = subscription);\n        }\n    };\n    DebounceSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n        this.emitValue();\n    };\n    DebounceSubscriber.prototype.notifyComplete = function () {\n        this.emitValue();\n    };\n    DebounceSubscriber.prototype.emitValue = function () {\n        if (this.hasValue) {\n            var value = this.value;\n            var subscription = this.durationSubscription;\n            if (subscription) {\n                this.durationSubscription = null;\n                subscription.unsubscribe();\n                this.remove(subscription);\n            }\n            this.value = null;\n            this.hasValue = false;\n            _super.prototype._next.call(this, value);\n        }\n    };\n    return DebounceSubscriber;\n}(OuterSubscriber_1.OuterSubscriber));\n\n},{\"../OuterSubscriber\":7,\"../util/subscribeToResult\":341}],212:[function(require,module,exports){\n\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Subscriber_1 = require('../Subscriber');\nvar async_1 = require('../scheduler/async');\n/**\n * Emits a value from the source Observable only after a particular time span\n * has passed without another source emission.\n *\n * <span class=\"informal\">It's like {@link delay}, but passes only the most\n * recent value from each burst of emissions.</span>\n *\n * <img src=\"./img/debounceTime.png\" width=\"100%\">\n *\n * `debounceTime` delays values emitted by the source Observable, but drops\n * previous pending delayed emissions if a new value arrives on the source\n * Observable. This operator keeps track of the most recent value from the\n * source Observable, and emits that only when `dueTime` enough time has passed\n * without any other value appearing on the source Observable. If a new value\n * appears before `dueTime` silence occurs, the previous value will be dropped\n * and will not be emitted on the output Observable.\n *\n * This is a rate-limiting operator, because it is impossible for more than one\n * value to be emitted in any time window of duration `dueTime`, but it is also\n * a delay-like operator since output emissions do not occur at the same time as\n * they did on the source Observable. Optionally takes a {@link Scheduler} for\n * managing timers.\n *\n * @example <caption>Emit the most recent click after a burst of clicks</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.debounceTime(1000);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link auditTime}\n * @see {@link debounce}\n * @see {@link delay}\n * @see {@link sampleTime}\n * @see {@link throttleTime}\n *\n * @param {number} dueTime The timeout duration in milliseconds (or the time\n * unit determined internally by the optional `scheduler`) for the window of\n * time required to wait for emission silence before emitting the most recent\n * source value.\n * @param {Scheduler} [scheduler=async] The {@link Scheduler} to use for\n * managing the timers that handle the timeout for each value.\n * @return {Observable} An Observable that delays the emissions of the source\n * Observable by the specified `dueTime`, and may drop some values if they occur\n * too frequently.\n * @method debounceTime\n * @owner Observable\n */\nfunction debounceTime(dueTime, scheduler) {\n    if (scheduler === void 0) { scheduler = async_1.async; }\n    return this.lift(new DebounceTimeOperator(dueTime, scheduler));\n}\nexports.debounceTime = debounceTime;\nvar DebounceTimeOperator = (function () {\n    function DebounceTimeOperator(dueTime, scheduler) {\n        this.dueTime = dueTime;\n        this.scheduler = scheduler;\n    }\n    DebounceTimeOperator.prototype.call = function (subscriber, source) {\n        return source._subscribe(new DebounceTimeSubscriber(subscriber, this.dueTime, this.scheduler));\n    };\n    return DebounceTimeOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar DebounceTimeSubscriber = (function (_super) {\n    __extends(DebounceTimeSubscriber, _super);\n    function DebounceTimeSubscriber(destination, dueTime, scheduler) {\n        _super.call(this, destination);\n        this.dueTime = dueTime;\n        this.scheduler = scheduler;\n        this.debouncedSubscription = null;\n        this.lastValue = null;\n        this.hasValue = false;\n    }\n    DebounceTimeSubscriber.prototype._next = function (value) {\n        this.clearDebounce();\n        this.lastValue = value;\n        this.hasValue = true;\n        this.add(this.debouncedSubscription = this.scheduler.schedule(dispatchNext, this.dueTime, this));\n    };\n    DebounceTimeSubscriber.prototype._complete = function () {\n        this.debouncedNext();\n        this.destination.complete();\n    };\n    DebounceTimeSubscriber.prototype.debouncedNext = function () {\n        this.clearDebounce();\n        if (this.hasValue) {\n            this.destination.next(this.lastValue);\n            this.lastValue = null;\n            this.hasValue = false;\n        }\n    };\n    DebounceTimeSubscriber.prototype.clearDebounce = function () {\n        var debouncedSubscription = this.debouncedSubscription;\n        if (debouncedSubscription !== null) {\n            this.remove(debouncedSubscription);\n            debouncedSubscription.unsubscribe();\n            this.debouncedSubscription = null;\n        }\n    };\n    return DebounceTimeSubscriber;\n}(Subscriber_1.Subscriber));\nfunction dispatchNext(subscriber) {\n    subscriber.debouncedNext();\n}\n\n},{\"../Subscriber\":13,\"../scheduler/async\":309}],213:[function(require,module,exports){\n\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Subscriber_1 = require('../Subscriber');\n/**\n * Emits a given value if the source Observable completes without emitting any\n * `next` value, otherwise mirrors the source Observable.\n *\n * <span class=\"informal\">If the source Observable turns out to be empty, then\n * this operator will emit a default value.</span>\n *\n * <img src=\"./img/defaultIfEmpty.png\" width=\"100%\">\n *\n * `defaultIfEmpty` emits the values emitted by the source Observable or a\n * specified default value if the source Observable is empty (completes without\n * having emitted any `next` value).\n *\n * @example <caption>If no clicks happen in 5 seconds, then emit \"no clicks\"</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var clicksBeforeFive = clicks.takeUntil(Rx.Observable.interval(5000));\n * var result = clicksBeforeFive.defaultIfEmpty('no clicks');\n * result.subscribe(x => console.log(x));\n *\n * @see {@link empty}\n * @see {@link last}\n *\n * @param {any} [defaultValue=null] The default value used if the source\n * Observable is empty.\n * @return {Observable} An Observable that emits either the specified\n * `defaultValue` if the source Observable emits no items, or the values emitted\n * by the source Observable.\n * @method defaultIfEmpty\n * @owner Observable\n */\nfunction defaultIfEmpty(defaultValue) {\n    if (defaultValue === void 0) { defaultValue = null; }\n    return this.lift(new DefaultIfEmptyOperator(defaultValue));\n}\nexports.defaultIfEmpty = defaultIfEmpty;\nvar DefaultIfEmptyOperator = (function () {\n    function DefaultIfEmptyOperator(defaultValue) {\n        this.defaultValue = defaultValue;\n    }\n    DefaultIfEmptyOperator.prototype.call = function (subscriber, source) {\n        return source._subscribe(new DefaultIfEmptySubscriber(subscriber, this.defaultValue));\n    };\n    return DefaultIfEmptyOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar DefaultIfEmptySubscriber = (function (_super) {\n    __extends(DefaultIfEmptySubscriber, _super);\n    function DefaultIfEmptySubscriber(destination, defaultValue) {\n        _super.call(this, destination);\n        this.defaultValue = defaultValue;\n        this.isEmpty = true;\n    }\n    DefaultIfEmptySubscriber.prototype._next = function (value) {\n        this.isEmpty = false;\n        this.destination.next(value);\n    };\n    DefaultIfEmptySubscriber.prototype._complete = function () {\n        if (this.isEmpty) {\n            this.destination.next(this.defaultValue);\n        }\n        this.destination.complete();\n    };\n    return DefaultIfEmptySubscriber;\n}(Subscriber_1.Subscriber));\n\n},{\"../Subscriber\":13}],214:[function(require,module,exports){\n\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar async_1 = require('../scheduler/async');\nvar isDate_1 = require('../util/isDate');\nvar Subscriber_1 = require('../Subscriber');\nvar Notification_1 = require('../Notification');\n/**\n * Delays the emission of items from the source Observable by a given timeout or\n * until a given Date.\n *\n * <span class=\"informal\">Time shifts each item by some specified amount of\n * milliseconds.</span>\n *\n * <img src=\"./img/delay.png\" width=\"100%\">\n *\n * If the delay argument is a Number, this operator time shifts the source\n * Observable by that amount of time expressed in milliseconds. The relative\n * time intervals between the values are preserved.\n *\n * If the delay argument is a Date, this operator time shifts the start of the\n * Observable execution until the given date occurs.\n *\n * @example <caption>Delay each click by one second</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var delayedClicks = clicks.delay(1000); // each click emitted after 1 second\n * delayedClicks.subscribe(x => console.log(x));\n *\n * @example <caption>Delay all clicks until a future date happens</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var date = new Date('March 15, 2050 12:00:00'); // in the future\n * var delayedClicks = clicks.delay(date); // click emitted only after that date\n * delayedClicks.subscribe(x => console.log(x));\n *\n * @see {@link debounceTime}\n * @see {@link delayWhen}\n *\n * @param {number|Date} delay The delay duration in milliseconds (a `number`) or\n * a `Date` until which the emission of the source items is delayed.\n * @param {Scheduler} [scheduler=async] The Scheduler to use for\n * managing the timers that handle the time-shift for each item.\n * @return {Observable} An Observable that delays the emissions of the source\n * Observable by the specified timeout or Date.\n * @method delay\n * @owner Observable\n */\nfunction delay(delay, scheduler) {\n    if (scheduler === void 0) { scheduler = async_1.async; }\n    var absoluteDelay = isDate_1.isDate(delay);\n    var delayFor = absoluteDelay ? (+delay - scheduler.now()) : Math.abs(delay);\n    return this.lift(new DelayOperator(delayFor, scheduler));\n}\nexports.delay = delay;\nvar DelayOperator = (function () {\n    function DelayOperator(delay, scheduler) {\n        this.delay = delay;\n        this.scheduler = scheduler;\n    }\n    DelayOperator.prototype.call = function (subscriber, source) {\n        return source._subscribe(new DelaySubscriber(subscriber, this.delay, this.scheduler));\n    };\n    return DelayOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar DelaySubscriber = (function (_super) {\n    __extends(DelaySubscriber, _super);\n    function DelaySubscriber(destination, delay, scheduler) {\n        _super.call(this, destination);\n        this.delay = delay;\n        this.scheduler = scheduler;\n        this.queue = [];\n        this.active = false;\n        this.errored = false;\n    }\n    DelaySubscriber.dispatch = function (state) {\n        var source = state.source;\n        var queue = source.queue;\n        var scheduler = state.scheduler;\n        var destination = state.destination;\n        while (queue.length > 0 && (queue[0].time - scheduler.now()) <= 0) {\n            queue.shift().notification.observe(destination);\n        }\n        if (queue.length > 0) {\n            var delay_1 = Math.max(0, queue[0].time - scheduler.now());\n            this.schedule(state, delay_1);\n        }\n        else {\n            source.active = false;\n        }\n    };\n    DelaySubscriber.prototype._schedule = function (scheduler) {\n        this.active = true;\n        this.add(scheduler.schedule(DelaySubscriber.dispatch, this.delay, {\n            source: this, destination: this.destination, scheduler: scheduler\n        }));\n    };\n    DelaySubscriber.prototype.scheduleNotification = function (notification) {\n        if (this.errored === true) {\n            return;\n        }\n        var scheduler = this.scheduler;\n        var message = new DelayMessage(scheduler.now() + this.delay, notification);\n        this.queue.push(message);\n        if (this.active === false) {\n            this._schedule(scheduler);\n        }\n    };\n    DelaySubscriber.prototype._next = function (value) {\n        this.scheduleNotification(Notification_1.Notification.createNext(value));\n    };\n    DelaySubscriber.prototype._error = function (err) {\n        this.errored = true;\n        this.queue = [];\n        this.destination.error(err);\n    };\n    DelaySubscriber.prototype._complete = function () {\n        this.scheduleNotification(Notification_1.Notification.createComplete());\n    };\n    return DelaySubscriber;\n}(Subscriber_1.Subscriber));\nvar DelayMessage = (function () {\n    function DelayMessage(time, notification) {\n        this.time = time;\n        this.notification = notification;\n    }\n    return DelayMessage;\n}());\n\n},{\"../Notification\":4,\"../Subscriber\":13,\"../scheduler/async\":309,\"../util/isDate\":332}],215:[function(require,module,exports){\n\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Subscriber_1 = require('../Subscriber');\nvar Observable_1 = require('../Observable');\nvar OuterSubscriber_1 = require('../OuterSubscriber');\nvar subscribeToResult_1 = require('../util/subscribeToResult');\n/**\n * Delays the emission of items from the source Observable by a given time span\n * determined by the emissions of another Observable.\n *\n * <span class=\"informal\">It's like {@link delay}, but the time span of the\n * delay duration is determined by a second Observable.</span>\n *\n * <img src=\"./img/delayWhen.png\" width=\"100%\">\n *\n * `delayWhen` time shifts each emitted value from the source Observable by a\n * time span determined by another Observable. When the source emits a value,\n * the `delayDurationSelector` function is called with the source value as\n * argument, and should return an Observable, called the \"duration\" Observable.\n * The source value is emitted on the output Observable only when the duration\n * Observable emits a value or completes.\n *\n * Optionally, `delayWhen` takes a second argument, `subscriptionDelay`, which\n * is an Observable. When `subscriptionDelay` emits its first value or\n * completes, the source Observable is subscribed to and starts behaving like\n * described in the previous paragraph. If `subscriptionDelay` is not provided,\n * `delayWhen` will subscribe to the source Observable as soon as the output\n * Observable is subscribed.\n *\n * @example <caption>Delay each click by a random amount of time, between 0 and 5 seconds</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var delayedClicks = clicks.delayWhen(event =>\n *   Rx.Observable.interval(Math.random() * 5000)\n * );\n * delayedClicks.subscribe(x => console.log(x));\n *\n * @see {@link debounce}\n * @see {@link delay}\n *\n * @param {function(value: T): Observable} delayDurationSelector A function that\n * returns an Observable for each value emitted by the source Observable, which\n * is then used to delay the emission of that item on the output Observable\n * until the Observable returned from this function emits a value.\n * @param {Observable} subscriptionDelay An Observable that triggers the\n * subscription to the source Observable once it emits any value.\n * @return {Observable} An Observable that delays the emissions of the source\n * Observable by an amount of time specified by the Observable returned by\n * `delayDurationSelector`.\n * @method delayWhen\n * @owner Observable\n */\nfunction delayWhen(delayDurationSelector, subscriptionDelay) {\n    if (subscriptionDelay) {\n        return new SubscriptionDelayObservable(this, subscriptionDelay)\n            .lift(new DelayWhenOperator(delayDurationSelector));\n    }\n    return this.lift(new DelayWhenOperator(delayDurationSelector));\n}\nexports.delayWhen = delayWhen;\nvar DelayWhenOperator = (function () {\n    function DelayWhenOperator(delayDurationSelector) {\n        this.delayDurationSelector = delayDurationSelector;\n    }\n    DelayWhenOperator.prototype.call = function (subscriber, source) {\n        return source._subscribe(new DelayWhenSubscriber(subscriber, this.delayDurationSelector));\n    };\n    return DelayWhenOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar DelayWhenSubscriber = (function (_super) {\n    __extends(DelayWhenSubscriber, _super);\n    function DelayWhenSubscriber(destination, delayDurationSelector) {\n        _super.call(this, destination);\n        this.delayDurationSelector = delayDurationSelector;\n        this.completed = false;\n        this.delayNotifierSubscriptions = [];\n        this.values = [];\n    }\n    DelayWhenSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n        this.destination.next(outerValue);\n        this.removeSubscription(innerSub);\n        this.tryComplete();\n    };\n    DelayWhenSubscriber.prototype.notifyError = function (error, innerSub) {\n        this._error(error);\n    };\n    DelayWhenSubscriber.prototype.notifyComplete = function (innerSub) {\n        var value = this.removeSubscription(innerSub);\n        if (value) {\n            this.destination.next(value);\n        }\n        this.tryComplete();\n    };\n    DelayWhenSubscriber.prototype._next = function (value) {\n        try {\n            var delayNotifier = this.delayDurationSelector(value);\n            if (delayNotifier) {\n                this.tryDelay(delayNotifier, value);\n            }\n        }\n        catch (err) {\n            this.destination.error(err);\n        }\n    };\n    DelayWhenSubscriber.prototype._complete = function () {\n        this.completed = true;\n        this.tryComplete();\n    };\n    DelayWhenSubscriber.prototype.removeSubscription = function (subscription) {\n        subscription.unsubscribe();\n        var subscriptionIdx = this.delayNotifierSubscriptions.indexOf(subscription);\n        var value = null;\n        if (subscriptionIdx !== -1) {\n            value = this.values[subscriptionIdx];\n            this.delayNotifierSubscriptions.splice(subscriptionIdx, 1);\n            this.values.splice(subscriptionIdx, 1);\n        }\n        return value;\n    };\n    DelayWhenSubscriber.prototype.tryDelay = function (delayNotifier, value) {\n        var notifierSubscription = subscribeToResult_1.subscribeToResult(this, delayNotifier, value);\n        this.add(notifierSubscription);\n        this.delayNotifierSubscriptions.push(notifierSubscription);\n        this.values.push(value);\n    };\n    DelayWhenSubscriber.prototype.tryComplete = function () {\n        if (this.completed && this.delayNotifierSubscriptions.length === 0) {\n            this.destination.complete();\n        }\n    };\n    return DelayWhenSubscriber;\n}(OuterSubscriber_1.OuterSubscriber));\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar SubscriptionDelayObservable = (function (_super) {\n    __extends(SubscriptionDelayObservable, _super);\n    function SubscriptionDelayObservable(source, subscriptionDelay) {\n        _super.call(this);\n        this.source = source;\n        this.subscriptionDelay = subscriptionDelay;\n    }\n    SubscriptionDelayObservable.prototype._subscribe = function (subscriber) {\n        this.subscriptionDelay.subscribe(new SubscriptionDelaySubscriber(subscriber, this.source));\n    };\n    return SubscriptionDelayObservable;\n}(Observable_1.Observable));\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar SubscriptionDelaySubscriber = (function (_super) {\n    __extends(SubscriptionDelaySubscriber, _super);\n    function SubscriptionDelaySubscriber(parent, source) {\n        _super.call(this);\n        this.parent = parent;\n        this.source = source;\n        this.sourceSubscribed = false;\n    }\n    SubscriptionDelaySubscriber.prototype._next = function (unused) {\n        this.subscribeToSource();\n    };\n    SubscriptionDelaySubscriber.prototype._error = function (err) {\n        this.unsubscribe();\n        this.parent.error(err);\n    };\n    SubscriptionDelaySubscriber.prototype._complete = function () {\n        this.subscribeToSource();\n    };\n    SubscriptionDelaySubscriber.prototype.subscribeToSource = function () {\n        if (!this.sourceSubscribed) {\n            this.sourceSubscribed = true;\n            this.unsubscribe();\n            this.source.subscribe(this.parent);\n        }\n    };\n    return SubscriptionDelaySubscriber;\n}(Subscriber_1.Subscriber));\n\n},{\"../Observable\":5,\"../OuterSubscriber\":7,\"../Subscriber\":13,\"../util/subscribeToResult\":341}],216:[function(require,module,exports){\n\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Subscriber_1 = require('../Subscriber');\n/**\n * Converts an Observable of {@link Notification} objects into the emissions\n * that they represent.\n *\n * <span class=\"informal\">Unwraps {@link Notification} objects as actual `next`,\n * `error` and `complete` emissions. The opposite of {@link materialize}.</span>\n *\n * <img src=\"./img/dematerialize.png\" width=\"100%\">\n *\n * `dematerialize` is assumed to operate an Observable that only emits\n * {@link Notification} objects as `next` emissions, and does not emit any\n * `error`. Such Observable is the output of a `materialize` operation. Those\n * notifications are then unwrapped using the metadata they contain, and emitted\n * as `next`, `error`, and `complete` on the output Observable.\n *\n * Use this operator in conjunction with {@link materialize}.\n *\n * @example <caption>Convert an Observable of Notifications to an actual Observable</caption>\n * var notifA = new Rx.Notification('N', 'A');\n * var notifB = new Rx.Notification('N', 'B');\n * var notifE = new Rx.Notification('E', void 0,\n *   new TypeError('x.toUpperCase is not a function')\n * );\n * var materialized = Rx.Observable.of(notifA, notifB, notifE);\n * var upperCase = materialized.dematerialize();\n * upperCase.subscribe(x => console.log(x), e => console.error(e));\n *\n * @see {@link Notification}\n * @see {@link materialize}\n *\n * @return {Observable} An Observable that emits items and notifications\n * embedded in Notification objects emitted by the source Observable.\n * @method dematerialize\n * @owner Observable\n */\nfunction dematerialize() {\n    return this.lift(new DeMaterializeOperator());\n}\nexports.dematerialize = dematerialize;\nvar DeMaterializeOperator = (function () {\n    function DeMaterializeOperator() {\n    }\n    DeMaterializeOperator.prototype.call = function (subscriber, source) {\n        return source._subscribe(new DeMaterializeSubscriber(subscriber));\n    };\n    return DeMaterializeOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar DeMaterializeSubscriber = (function (_super) {\n    __extends(DeMaterializeSubscriber, _super);\n    function DeMaterializeSubscriber(destination) {\n        _super.call(this, destination);\n    }\n    DeMaterializeSubscriber.prototype._next = function (value) {\n        value.observe(this.destination);\n    };\n    return DeMaterializeSubscriber;\n}(Subscriber_1.Subscriber));\n\n},{\"../Subscriber\":13}],217:[function(require,module,exports){\n\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar OuterSubscriber_1 = require('../OuterSubscriber');\nvar subscribeToResult_1 = require('../util/subscribeToResult');\n/**\n * Returns an Observable that emits all items emitted by the source Observable that are distinct by comparison from previous items.\n * If a comparator function is provided, then it will be called for each item to test for whether or not that value should be emitted.\n * If a comparator function is not provided, an equality check is used by default.\n * As the internal HashSet of this operator grows larger and larger, care should be taken in the domain of inputs this operator may see.\n * An optional parameter is also provided such that an Observable can be provided to queue the internal HashSet to flush the values it holds.\n * @param {function} [compare] optional comparison function called to test if an item is distinct from previous items in the source.\n * @param {Observable} [flushes] optional Observable for flushing the internal HashSet of the operator.\n * @return {Observable} an Observable that emits items from the source Observable with distinct values.\n * @method distinct\n * @owner Observable\n */\nfunction distinct(compare, flushes) {\n    return this.lift(new DistinctOperator(compare, flushes));\n}\nexports.distinct = distinct;\nvar DistinctOperator = (function () {\n    function DistinctOperator(compare, flushes) {\n        this.compare = compare;\n        this.flushes = flushes;\n    }\n    DistinctOperator.prototype.call = function (subscriber, source) {\n        return source._subscribe(new DistinctSubscriber(subscriber, this.compare, this.flushes));\n    };\n    return DistinctOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar DistinctSubscriber = (function (_super) {\n    __extends(DistinctSubscriber, _super);\n    function DistinctSubscriber(destination, compare, flushes) {\n        _super.call(this, destination);\n        this.values = [];\n        if (typeof compare === 'function') {\n            this.compare = compare;\n        }\n        if (flushes) {\n            this.add(subscribeToResult_1.subscribeToResult(this, flushes));\n        }\n    }\n    DistinctSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n        this.values.length = 0;\n    };\n    DistinctSubscriber.prototype.notifyError = function (error, innerSub) {\n        this._error(error);\n    };\n    DistinctSubscriber.prototype._next = function (value) {\n        var found = false;\n        var values = this.values;\n        var len = values.length;\n        try {\n            for (var i = 0; i < len; i++) {\n                if (this.compare(values[i], value)) {\n                    found = true;\n                    return;\n                }\n            }\n        }\n        catch (err) {\n            this.destination.error(err);\n            return;\n        }\n        this.values.push(value);\n        this.destination.next(value);\n    };\n    DistinctSubscriber.prototype.compare = function (x, y) {\n        return x === y;\n    };\n    return DistinctSubscriber;\n}(OuterSubscriber_1.OuterSubscriber));\nexports.DistinctSubscriber = DistinctSubscriber;\n\n},{\"../OuterSubscriber\":7,\"../util/subscribeToResult\":341}],218:[function(require,module,exports){\n\"use strict\";\nvar distinct_1 = require('./distinct');\n/**\n * Returns an Observable that emits all items emitted by the source Observable that are distinct by comparison from previous items,\n * using a property accessed by using the key provided to check if the two items are distinct.\n * If a comparator function is provided, then it will be called for each item to test for whether or not that value should be emitted.\n * If a comparator function is not provided, an equality check is used by default.\n * As the internal HashSet of this operator grows larger and larger, care should be taken in the domain of inputs this operator may see.\n * An optional parameter is also provided such that an Observable can be provided to queue the internal HashSet to flush the values it holds.\n * @param {string} key string key for object property lookup on each item.\n * @param {function} [compare] optional comparison function called to test if an item is distinct from previous items in the source.\n * @param {Observable} [flushes] optional Observable for flushing the internal HashSet of the operator.\n * @return {Observable} an Observable that emits items from the source Observable with distinct values.\n * @method distinctKey\n * @owner Observable\n */\nfunction distinctKey(key, compare, flushes) {\n    return distinct_1.distinct.call(this, function (x, y) {\n        if (compare) {\n            return compare(x[key], y[key]);\n        }\n        return x[key] === y[key];\n    }, flushes);\n}\nexports.distinctKey = distinctKey;\n\n},{\"./distinct\":217}],219:[function(require,module,exports){\n\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Subscriber_1 = require('../Subscriber');\nvar tryCatch_1 = require('../util/tryCatch');\nvar errorObject_1 = require('../util/errorObject');\n/**\n * Returns an Observable that emits all items emitted by the source Observable that are distinct by comparison from the previous item.\n * If a comparator function is provided, then it will be called for each item to test for whether or not that value should be emitted.\n * If a comparator function is not provided, an equality check is used by default.\n * @param {function} [compare] optional comparison function called to test if an item is distinct from the previous item in the source.\n * @return {Observable} an Observable that emits items from the source Observable with distinct values.\n * @method distinctUntilChanged\n * @owner Observable\n */\nfunction distinctUntilChanged(compare, keySelector) {\n    return this.lift(new DistinctUntilChangedOperator(compare, keySelector));\n}\nexports.distinctUntilChanged = distinctUntilChanged;\nvar DistinctUntilChangedOperator = (function () {\n    function DistinctUntilChangedOperator(compare, keySelector) {\n        this.compare = compare;\n        this.keySelector = keySelector;\n    }\n    DistinctUntilChangedOperator.prototype.call = function (subscriber, source) {\n        return source._subscribe(new DistinctUntilChangedSubscriber(subscriber, this.compare, this.keySelector));\n    };\n    return DistinctUntilChangedOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar DistinctUntilChangedSubscriber = (function (_super) {\n    __extends(DistinctUntilChangedSubscriber, _super);\n    function DistinctUntilChangedSubscriber(destination, compare, keySelector) {\n        _super.call(this, destination);\n        this.keySelector = keySelector;\n        this.hasKey = false;\n        if (typeof compare === 'function') {\n            this.compare = compare;\n        }\n    }\n    DistinctUntilChangedSubscriber.prototype.compare = function (x, y) {\n        return x === y;\n    };\n    DistinctUntilChangedSubscriber.prototype._next = function (value) {\n        var keySelector = this.keySelector;\n        var key = value;\n        if (keySelector) {\n            key = tryCatch_1.tryCatch(this.keySelector)(value);\n            if (key === errorObject_1.errorObject) {\n                return this.destination.error(errorObject_1.errorObject.e);\n            }\n        }\n        var result = false;\n        if (this.hasKey) {\n            result = tryCatch_1.tryCatch(this.compare)(this.key, key);\n            if (result === errorObject_1.errorObject) {\n                return this.destination.error(errorObject_1.errorObject.e);\n            }\n        }\n        else {\n            this.hasKey = true;\n        }\n        if (Boolean(result) === false) {\n            this.key = key;\n            this.destination.next(value);\n        }\n    };\n    return DistinctUntilChangedSubscriber;\n}(Subscriber_1.Subscriber));\n\n},{\"../Subscriber\":13,\"../util/errorObject\":330,\"../util/tryCatch\":343}],220:[function(require,module,exports){\n\"use strict\";\nvar distinctUntilChanged_1 = require('./distinctUntilChanged');\n/**\n * Returns an Observable that emits all items emitted by the source Observable that are distinct by comparison from the previous item,\n * using a property accessed by using the key provided to check if the two items are distinct.\n * If a comparator function is provided, then it will be called for each item to test for whether or not that value should be emitted.\n * If a comparator function is not provided, an equality check is used by default.\n * @param {string} key string key for object property lookup on each item.\n * @param {function} [compare] optional comparison function called to test if an item is distinct from the previous item in the source.\n * @return {Observable} an Observable that emits items from the source Observable with distinct values based on the key specified.\n * @method distinctUntilKeyChanged\n * @owner Observable\n */\nfunction distinctUntilKeyChanged(key, compare) {\n    return distinctUntilChanged_1.distinctUntilChanged.call(this, function (x, y) {\n        if (compare) {\n            return compare(x[key], y[key]);\n        }\n        return x[key] === y[key];\n    });\n}\nexports.distinctUntilKeyChanged = distinctUntilKeyChanged;\n\n},{\"./distinctUntilChanged\":219}],221:[function(require,module,exports){\n\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Subscriber_1 = require('../Subscriber');\n/**\n * Perform a side effect for every emission on the source Observable, but return\n * an Observable that is identical to the source.\n *\n * <span class=\"informal\">Intercepts each emission on the source and runs a\n * function, but returns an output which is identical to the source.</span>\n *\n * <img src=\"./img/do.png\" width=\"100%\">\n *\n * Returns a mirrored Observable of the source Observable, but modified so that\n * the provided Observer is called to perform a side effect for every value,\n * error, and completion emitted by the source. Any errors that are thrown in\n * the aforementioned Observer or handlers are safely sent down the error path\n * of the output Observable.\n *\n * This operator is useful for debugging your Observables for the correct values\n * or performing other side effects.\n *\n * Note: this is different to a `subscribe` on the Observable. If the Observable\n * returned by `do` is not subscribed, the side effects specified by the\n * Observer will never happen. `do` therefore simply spies on existing\n * execution, it does not trigger an execution to happen like `subscribe` does.\n *\n * @example <caption>Map every every click to the clientX position of that click, while also logging the click event</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var positions = clicks\n *   .do(ev => console.log(ev))\n *   .map(ev => ev.clientX);\n * positions.subscribe(x => console.log(x));\n *\n * @see {@link map}\n * @see {@link subscribe}\n *\n * @param {Observer|function} [nextOrObserver] A normal Observer object or a\n * callback for `next`.\n * @param {function} [error] Callback for errors in the source.\n * @param {function} [complete] Callback for the completion of the source.\n * @return {Observable} An Observable identical to the source, but runs the\n * specified Observer or callback(s) for each item.\n * @method do\n * @name do\n * @owner Observable\n */\nfunction _do(nextOrObserver, error, complete) {\n    return this.lift(new DoOperator(nextOrObserver, error, complete));\n}\nexports._do = _do;\nvar DoOperator = (function () {\n    function DoOperator(nextOrObserver, error, complete) {\n        this.nextOrObserver = nextOrObserver;\n        this.error = error;\n        this.complete = complete;\n    }\n    DoOperator.prototype.call = function (subscriber, source) {\n        return source._subscribe(new DoSubscriber(subscriber, this.nextOrObserver, this.error, this.complete));\n    };\n    return DoOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar DoSubscriber = (function (_super) {\n    __extends(DoSubscriber, _super);\n    function DoSubscriber(destination, nextOrObserver, error, complete) {\n        _super.call(this, destination);\n        var safeSubscriber = new Subscriber_1.Subscriber(nextOrObserver, error, complete);\n        safeSubscriber.syncErrorThrowable = true;\n        this.add(safeSubscriber);\n        this.safeSubscriber = safeSubscriber;\n    }\n    DoSubscriber.prototype._next = function (value) {\n        var safeSubscriber = this.safeSubscriber;\n        safeSubscriber.next(value);\n        if (safeSubscriber.syncErrorThrown) {\n            this.destination.error(safeSubscriber.syncErrorValue);\n        }\n        else {\n            this.destination.next(value);\n        }\n    };\n    DoSubscriber.prototype._error = function (err) {\n        var safeSubscriber = this.safeSubscriber;\n        safeSubscriber.error(err);\n        if (safeSubscriber.syncErrorThrown) {\n            this.destination.error(safeSubscriber.syncErrorValue);\n        }\n        else {\n            this.destination.error(err);\n        }\n    };\n    DoSubscriber.prototype._complete = function () {\n        var safeSubscriber = this.safeSubscriber;\n        safeSubscriber.complete();\n        if (safeSubscriber.syncErrorThrown) {\n            this.destination.error(safeSubscriber.syncErrorValue);\n        }\n        else {\n            this.destination.complete();\n        }\n    };\n    return DoSubscriber;\n}(Subscriber_1.Subscriber));\n\n},{\"../Subscriber\":13}],222:[function(require,module,exports){\n\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Subscriber_1 = require('../Subscriber');\nvar ArgumentOutOfRangeError_1 = require('../util/ArgumentOutOfRangeError');\n/**\n * Emits the single value at the specified `index` in a sequence of emissions\n * from the source Observable.\n *\n * <span class=\"informal\">Emits only the i-th value, then completes.</span>\n *\n * <img src=\"./img/elementAt.png\" width=\"100%\">\n *\n * `elementAt` returns an Observable that emits the item at the specified\n * `index` in the source Observable, or a default value if that `index` is out\n * of range and the `default` argument is provided. If the `default` argument is\n * not given and the `index` is out of range, the output Observable will emit an\n * `ArgumentOutOfRangeError` error.\n *\n * @example <caption>Emit only the third click event</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.elementAt(2);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link first}\n * @see {@link last}\n * @see {@link skip}\n * @see {@link single}\n * @see {@link take}\n *\n * @throws {ArgumentOutOfRangeError} When using `elementAt(i)`, it delivers an\n * ArgumentOutOrRangeError to the Observer's `error` callback if `i < 0` or the\n * Observable has completed before emitting the i-th `next` notification.\n *\n * @param {number} index Is the number `i` for the i-th source emission that has\n * happened since the subscription, starting from the number `0`.\n * @param {T} [defaultValue] The default value returned for missing indices.\n * @return {Observable} An Observable that emits a single item, if it is found.\n * Otherwise, will emit the default value if given. If not, then emits an error.\n * @method elementAt\n * @owner Observable\n */\nfunction elementAt(index, defaultValue) {\n    return this.lift(new ElementAtOperator(index, defaultValue));\n}\nexports.elementAt = elementAt;\nvar ElementAtOperator = (function () {\n    function ElementAtOperator(index, defaultValue) {\n        this.index = index;\n        this.defaultValue = defaultValue;\n        if (index < 0) {\n            throw new ArgumentOutOfRangeError_1.ArgumentOutOfRangeError;\n        }\n    }\n    ElementAtOperator.prototype.call = function (subscriber, source) {\n        return source._subscribe(new ElementAtSubscriber(subscriber, this.index, this.defaultValue));\n    };\n    return ElementAtOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar ElementAtSubscriber = (function (_super) {\n    __extends(ElementAtSubscriber, _super);\n    function ElementAtSubscriber(destination, index, defaultValue) {\n        _super.call(this, destination);\n        this.index = index;\n        this.defaultValue = defaultValue;\n    }\n    ElementAtSubscriber.prototype._next = function (x) {\n        if (this.index-- === 0) {\n            this.destination.next(x);\n            this.destination.complete();\n        }\n    };\n    ElementAtSubscriber.prototype._complete = function () {\n        var destination = this.destination;\n        if (this.index >= 0) {\n            if (typeof this.defaultValue !== 'undefined') {\n                destination.next(this.defaultValue);\n            }\n            else {\n                destination.error(new ArgumentOutOfRangeError_1.ArgumentOutOfRangeError);\n            }\n        }\n        destination.complete();\n    };\n    return ElementAtSubscriber;\n}(Subscriber_1.Subscriber));\n\n},{\"../Subscriber\":13,\"../util/ArgumentOutOfRangeError\":320}],223:[function(require,module,exports){\n\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Subscriber_1 = require('../Subscriber');\n/**\n * Returns an Observable that emits whether or not every item of the source satisfies the condition specified.\n * @param {function} predicate a function for determining if an item meets a specified condition.\n * @param {any} [thisArg] optional object to use for `this` in the callback\n * @return {Observable} an Observable of booleans that determines if all items of the source Observable meet the condition specified.\n * @method every\n * @owner Observable\n */\nfunction every(predicate, thisArg) {\n    return this.lift(new EveryOperator(predicate, thisArg, this));\n}\nexports.every = every;\nvar EveryOperator = (function () {\n    function EveryOperator(predicate, thisArg, source) {\n        this.predicate = predicate;\n        this.thisArg = thisArg;\n        this.source = source;\n    }\n    EveryOperator.prototype.call = function (observer, source) {\n        return source._subscribe(new EverySubscriber(observer, this.predicate, this.thisArg, this.source));\n    };\n    return EveryOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar EverySubscriber = (function (_super) {\n    __extends(EverySubscriber, _super);\n    function EverySubscriber(destination, predicate, thisArg, source) {\n        _super.call(this, destination);\n        this.predicate = predicate;\n        this.thisArg = thisArg;\n        this.source = source;\n        this.index = 0;\n        this.thisArg = thisArg || this;\n    }\n    EverySubscriber.prototype.notifyComplete = function (everyValueMatch) {\n        this.destination.next(everyValueMatch);\n        this.destination.complete();\n    };\n    EverySubscriber.prototype._next = function (value) {\n        var result = false;\n        try {\n            result = this.predicate.call(this.thisArg, value, this.index++, this.source);\n        }\n        catch (err) {\n            this.destination.error(err);\n            return;\n        }\n        if (!result) {\n            this.notifyComplete(false);\n        }\n    };\n    EverySubscriber.prototype._complete = function () {\n        this.notifyComplete(true);\n    };\n    return EverySubscriber;\n}(Subscriber_1.Subscriber));\n\n},{\"../Subscriber\":13}],224:[function(require,module,exports){\n\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar OuterSubscriber_1 = require('../OuterSubscriber');\nvar subscribeToResult_1 = require('../util/subscribeToResult');\n/**\n * Converts a higher-order Observable into a first-order Observable by dropping\n * inner Observables while the previous inner Observable has not yet completed.\n *\n * <span class=\"informal\">Flattens an Observable-of-Observables by dropping the\n * next inner Observables while the current inner is still executing.</span>\n *\n * <img src=\"./img/exhaust.png\" width=\"100%\">\n *\n * `exhaust` subscribes to an Observable that emits Observables, also known as a\n * higher-order Observable. Each time it observes one of these emitted inner\n * Observables, the output Observable begins emitting the items emitted by that\n * inner Observable. So far, it behaves like {@link mergeAll}. However,\n * `exhaust` ignores every new inner Observable if the previous Observable has\n * not yet completed. Once that one completes, it will accept and flatten the\n * next inner Observable and repeat this process.\n *\n * @example <caption>Run a finite timer for each click, only if there is no currently active timer</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var higherOrder = clicks.map((ev) => Rx.Observable.interval(1000));\n * var result = higherOrder.exhaust();\n * result.subscribe(x => console.log(x));\n *\n * @see {@link combineAll}\n * @see {@link concatAll}\n * @see {@link switch}\n * @see {@link mergeAll}\n * @see {@link exhaustMap}\n * @see {@link zipAll}\n *\n * @return {Observable} Returns an Observable that takes a source of Observables\n * and propagates the first observable exclusively until it completes before\n * subscribing to the next.\n * @method exhaust\n * @owner Observable\n */\nfunction exhaust() {\n    return this.lift(new SwitchFirstOperator());\n}\nexports.exhaust = exhaust;\nvar SwitchFirstOperator = (function () {\n    function SwitchFirstOperator() {\n    }\n    SwitchFirstOperator.prototype.call = function (subscriber, source) {\n        return source._subscribe(new SwitchFirstSubscriber(subscriber));\n    };\n    return SwitchFirstOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar SwitchFirstSubscriber = (function (_super) {\n    __extends(SwitchFirstSubscriber, _super);\n    function SwitchFirstSubscriber(destination) {\n        _super.call(this, destination);\n        this.hasCompleted = false;\n        this.hasSubscription = false;\n    }\n    SwitchFirstSubscriber.prototype._next = function (value) {\n        if (!this.hasSubscription) {\n            this.hasSubscription = true;\n            this.add(subscribeToResult_1.subscribeToResult(this, value));\n        }\n    };\n    SwitchFirstSubscriber.prototype._complete = function () {\n        this.hasCompleted = true;\n        if (!this.hasSubscription) {\n            this.destination.complete();\n        }\n    };\n    SwitchFirstSubscriber.prototype.notifyComplete = function (innerSub) {\n        this.remove(innerSub);\n        this.hasSubscription = false;\n        if (this.hasCompleted) {\n            this.destination.complete();\n        }\n    };\n    return SwitchFirstSubscriber;\n}(OuterSubscriber_1.OuterSubscriber));\n\n},{\"../OuterSubscriber\":7,\"../util/subscribeToResult\":341}],225:[function(require,module,exports){\n\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar OuterSubscriber_1 = require('../OuterSubscriber');\nvar subscribeToResult_1 = require('../util/subscribeToResult');\n/**\n * Projects each source value to an Observable which is merged in the output\n * Observable only if the previous projected Observable has completed.\n *\n * <span class=\"informal\">Maps each value to an Observable, then flattens all of\n * these inner Observables using {@link exhaust}.</span>\n *\n * <img src=\"./img/exhaustMap.png\" width=\"100%\">\n *\n * Returns an Observable that emits items based on applying a function that you\n * supply to each item emitted by the source Observable, where that function\n * returns an (so-called \"inner\") Observable. When it projects a source value to\n * an Observable, the output Observable begins emitting the items emitted by\n * that projected Observable. However, `exhaustMap` ignores every new projected\n * Observable if the previous projected Observable has not yet completed. Once\n * that one completes, it will accept and flatten the next projected Observable\n * and repeat this process.\n *\n * @example <caption>Run a finite timer for each click, only if there is no currently active timer</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.exhaustMap((ev) => Rx.Observable.interval(1000));\n * result.subscribe(x => console.log(x));\n *\n * @see {@link concatMap}\n * @see {@link exhaust}\n * @see {@link mergeMap}\n * @see {@link switchMap}\n *\n * @param {function(value: T, ?index: number): Observable} project A function\n * that, when applied to an item emitted by the source Observable, returns an\n * Observable.\n * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]\n * A function to produce the value on the output Observable based on the values\n * and the indices of the source (outer) emission and the inner Observable\n * emission. The arguments passed to this function are:\n * - `outerValue`: the value that came from the source\n * - `innerValue`: the value that came from the projected Observable\n * - `outerIndex`: the \"index\" of the value that came from the source\n * - `innerIndex`: the \"index\" of the value from the projected Observable\n * @return {Observable} An Observable containing projected Observables\n * of each item of the source, ignoring projected Observables that start before\n * their preceding Observable has completed.\n * @method exhaustMap\n * @owner Observable\n */\nfunction exhaustMap(project, resultSelector) {\n    return this.lift(new SwitchFirstMapOperator(project, resultSelector));\n}\nexports.exhaustMap = exhaustMap;\nvar SwitchFirstMapOperator = (function () {\n    function SwitchFirstMapOperator(project, resultSelector) {\n        this.project = project;\n        this.resultSelector = resultSelector;\n    }\n    SwitchFirstMapOperator.prototype.call = function (subscriber, source) {\n        return source._subscribe(new SwitchFirstMapSubscriber(subscriber, this.project, this.resultSelector));\n    };\n    return SwitchFirstMapOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar SwitchFirstMapSubscriber = (function (_super) {\n    __extends(SwitchFirstMapSubscriber, _super);\n    function SwitchFirstMapSubscriber(destination, project, resultSelector) {\n        _super.call(this, destination);\n        this.project = project;\n        this.resultSelector = resultSelector;\n        this.hasSubscription = false;\n        this.hasCompleted = false;\n        this.index = 0;\n    }\n    SwitchFirstMapSubscriber.prototype._next = function (value) {\n        if (!this.hasSubscription) {\n            this.tryNext(value);\n        }\n    };\n    SwitchFirstMapSubscriber.prototype.tryNext = function (value) {\n        var index = this.index++;\n        var destination = this.destination;\n        try {\n            var result = this.project(value, index);\n            this.hasSubscription = true;\n            this.add(subscribeToResult_1.subscribeToResult(this, result, value, index));\n        }\n        catch (err) {\n            destination.error(err);\n        }\n    };\n    SwitchFirstMapSubscriber.prototype._complete = function () {\n        this.hasCompleted = true;\n        if (!this.hasSubscription) {\n            this.destination.complete();\n        }\n    };\n    SwitchFirstMapSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n        var _a = this, resultSelector = _a.resultSelector, destination = _a.destination;\n        if (resultSelector) {\n            this.trySelectResult(outerValue, innerValue, outerIndex, innerIndex);\n        }\n        else {\n            destination.next(innerValue);\n        }\n    };\n    SwitchFirstMapSubscriber.prototype.trySelectResult = function (outerValue, innerValue, outerIndex, innerIndex) {\n        var _a = this, resultSelector = _a.resultSelector, destination = _a.destination;\n        try {\n            var result = resultSelector(outerValue, innerValue, outerIndex, innerIndex);\n            destination.next(result);\n        }\n        catch (err) {\n            destination.error(err);\n        }\n    };\n    SwitchFirstMapSubscriber.prototype.notifyError = function (err) {\n        this.destination.error(err);\n    };\n    SwitchFirstMapSubscriber.prototype.notifyComplete = function (innerSub) {\n        this.remove(innerSub);\n        this.hasSubscription = false;\n        if (this.hasCompleted) {\n            this.destination.complete();\n        }\n    };\n    return SwitchFirstMapSubscriber;\n}(OuterSubscriber_1.OuterSubscriber));\n\n},{\"../OuterSubscriber\":7,\"../util/subscribeToResult\":341}],226:[function(require,module,exports){\n\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar tryCatch_1 = require('../util/tryCatch');\nvar errorObject_1 = require('../util/errorObject');\nvar OuterSubscriber_1 = require('../OuterSubscriber');\nvar subscribeToResult_1 = require('../util/subscribeToResult');\n/**\n * Recursively projects each source value to an Observable which is merged in\n * the output Observable.\n *\n * <span class=\"informal\">It's similar to {@link mergeMap}, but applies the\n * projection function to every source value as well as every output value.\n * It's recursive.</span>\n *\n * <img src=\"./img/expand.png\" width=\"100%\">\n *\n * Returns an Observable that emits items based on applying a function that you\n * supply to each item emitted by the source Observable, where that function\n * returns an Observable, and then merging those resulting Observables and\n * emitting the results of this merger. *Expand* will re-emit on the output\n * Observable every source value. Then, each output value is given to the\n * `project` function which returns an inner Observable to be merged on the\n * output Observable. Those output values resulting from the projection are also\n * given to the `project` function to produce new output values. This is how\n * *expand* behaves recursively.\n *\n * @example <caption>Start emitting the powers of two on every click, at most 10 of them</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var powersOfTwo = clicks\n *   .mapTo(1)\n *   .expand(x => Rx.Observable.of(2 * x).delay(1000))\n *   .take(10);\n * powersOfTwo.subscribe(x => console.log(x));\n *\n * @see {@link mergeMap}\n * @see {@link mergeScan}\n *\n * @param {function(value: T, index: number) => Observable} project A function\n * that, when applied to an item emitted by the source or the output Observable,\n * returns an Observable.\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of input\n * Observables being subscribed to concurrently.\n * @param {Scheduler} [scheduler=null] The Scheduler to use for subscribing to\n * each projected inner Observable.\n * @return {Observable} An Observable that emits the source values and also\n * result of applying the projection function to each value emitted on the\n * output Observable and and merging the results of the Observables obtained\n * from this transformation.\n * @method expand\n * @owner Observable\n */\nfunction expand(project, concurrent, scheduler) {\n    if (concurrent === void 0) { concurrent = Number.POSITIVE_INFINITY; }\n    if (scheduler === void 0) { scheduler = undefined; }\n    concurrent = (concurrent || 0) < 1 ? Number.POSITIVE_INFINITY : concurrent;\n    return this.lift(new ExpandOperator(project, concurrent, scheduler));\n}\nexports.expand = expand;\nvar ExpandOperator = (function () {\n    function ExpandOperator(project, concurrent, scheduler) {\n        this.project = project;\n        this.concurrent = concurrent;\n        this.scheduler = scheduler;\n    }\n    ExpandOperator.prototype.call = function (subscriber, source) {\n        return source._subscribe(new ExpandSubscriber(subscriber, this.project, this.concurrent, this.scheduler));\n    };\n    return ExpandOperator;\n}());\nexports.ExpandOperator = ExpandOperator;\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar ExpandSubscriber = (function (_super) {\n    __extends(ExpandSubscriber, _super);\n    function ExpandSubscriber(destination, project, concurrent, scheduler) {\n        _super.call(this, destination);\n        this.project = project;\n        this.concurrent = concurrent;\n        this.scheduler = scheduler;\n        this.index = 0;\n        this.active = 0;\n        this.hasCompleted = false;\n        if (concurrent < Number.POSITIVE_INFINITY) {\n            this.buffer = [];\n        }\n    }\n    ExpandSubscriber.dispatch = function (arg) {\n        var subscriber = arg.subscriber, result = arg.result, value = arg.value, index = arg.index;\n        subscriber.subscribeToProjection(result, value, index);\n    };\n    ExpandSubscriber.prototype._next = function (value) {\n        var destination = this.destination;\n        if (destination.closed) {\n            this._complete();\n            return;\n        }\n        var index = this.index++;\n        if (this.active < this.concurrent) {\n            destination.next(value);\n            var result = tryCatch_1.tryCatch(this.project)(value, index);\n            if (result === errorObject_1.errorObject) {\n                destination.error(errorObject_1.errorObject.e);\n            }\n            else if (!this.scheduler) {\n                this.subscribeToProjection(result, value, index);\n            }\n            else {\n                var state = { subscriber: this, result: result, value: value, index: index };\n                this.add(this.scheduler.schedule(ExpandSubscriber.dispatch, 0, state));\n            }\n        }\n        else {\n            this.buffer.push(value);\n        }\n    };\n    ExpandSubscriber.prototype.subscribeToProjection = function (result, value, index) {\n        this.active++;\n        this.add(subscribeToResult_1.subscribeToResult(this, result, value, index));\n    };\n    ExpandSubscriber.prototype._complete = function () {\n        this.hasCompleted = true;\n        if (this.hasCompleted && this.active === 0) {\n            this.destination.complete();\n        }\n    };\n    ExpandSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n        this._next(innerValue);\n    };\n    ExpandSubscriber.prototype.notifyComplete = function (innerSub) {\n        var buffer = this.buffer;\n        this.remove(innerSub);\n        this.active--;\n        if (buffer && buffer.length > 0) {\n            this._next(buffer.shift());\n        }\n        if (this.hasCompleted && this.active === 0) {\n            this.destination.complete();\n        }\n    };\n    return ExpandSubscriber;\n}(OuterSubscriber_1.OuterSubscriber));\nexports.ExpandSubscriber = ExpandSubscriber;\n\n},{\"../OuterSubscriber\":7,\"../util/errorObject\":330,\"../util/subscribeToResult\":341,\"../util/tryCatch\":343}],227:[function(require,module,exports){\n\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Subscriber_1 = require('../Subscriber');\n/**\n * Filter items emitted by the source Observable by only emitting those that\n * satisfy a specified predicate.\n *\n * <span class=\"informal\">Like\n * [Array.prototype.filter()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter),\n * it only emits a value from the source if it passes a criterion function.</span>\n *\n * <img src=\"./img/filter.png\" width=\"100%\">\n *\n * Similar to the well-known `Array.prototype.filter` method, this operator\n * takes values from the source Observable, passes them through a `predicate`\n * function and only emits those values that yielded `true`.\n *\n * @example <caption>Emit only click events whose target was a DIV element</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var clicksOnDivs = clicks.filter(ev => ev.target.tagName === 'DIV');\n * clicksOnDivs.subscribe(x => console.log(x));\n *\n * @see {@link distinct}\n * @see {@link distinctKey}\n * @see {@link distinctUntilChanged}\n * @see {@link distinctUntilKeyChanged}\n * @see {@link ignoreElements}\n * @see {@link partition}\n * @see {@link skip}\n *\n * @param {function(value: T, index: number): boolean} predicate A function that\n * evaluates each value emitted by the source Observable. If it returns `true`,\n * the value is emitted, if `false` the value is not passed to the output\n * Observable. The `index` parameter is the number `i` for the i-th source\n * emission that has happened since the subscription, starting from the number\n * `0`.\n * @param {any} [thisArg] An optional argument to determine the value of `this`\n * in the `predicate` function.\n * @return {Observable} An Observable of values from the source that were\n * allowed by the `predicate` function.\n * @method filter\n * @owner Observable\n */\nfunction filter(predicate, thisArg) {\n    return this.lift(new FilterOperator(predicate, thisArg));\n}\nexports.filter = filter;\nvar FilterOperator = (function () {\n    function FilterOperator(predicate, thisArg) {\n        this.predicate = predicate;\n        this.thisArg = thisArg;\n    }\n    FilterOperator.prototype.call = function (subscriber, source) {\n        return source._subscribe(new FilterSubscriber(subscriber, this.predicate, this.thisArg));\n    };\n    return FilterOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar FilterSubscriber = (function (_super) {\n    __extends(FilterSubscriber, _super);\n    function FilterSubscriber(destination, predicate, thisArg) {\n        _super.call(this, destination);\n        this.predicate = predicate;\n        this.thisArg = thisArg;\n        this.count = 0;\n        this.predicate = predicate;\n    }\n    // the try catch block below is left specifically for\n    // optimization and perf reasons. a tryCatcher is not necessary here.\n    FilterSubscriber.prototype._next = function (value) {\n        var result;\n        try {\n            result = this.predicate.call(this.thisArg, value, this.count++);\n        }\n        catch (err) {\n            this.destination.error(err);\n            return;\n        }\n        if (result) {\n            this.destination.next(value);\n        }\n    };\n    return FilterSubscriber;\n}(Subscriber_1.Subscriber));\n\n},{\"../Subscriber\":13}],228:[function(require,module,exports){\n\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Subscriber_1 = require('../Subscriber');\nvar Subscription_1 = require('../Subscription');\n/**\n * Returns an Observable that mirrors the source Observable, but will call a specified function when\n * the source terminates on complete or error.\n * @param {function} callback function to be called when source terminates.\n * @return {Observable} an Observable that mirrors the source, but will call the specified function on termination.\n * @method finally\n * @owner Observable\n */\nfunction _finally(callback) {\n    return this.lift(new FinallyOperator(callback));\n}\nexports._finally = _finally;\nvar FinallyOperator = (function () {\n    function FinallyOperator(callback) {\n        this.callback = callback;\n    }\n    FinallyOperator.prototype.call = function (subscriber, source) {\n        return source._subscribe(new FinallySubscriber(subscriber, this.callback));\n    };\n    return FinallyOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar FinallySubscriber = (function (_super) {\n    __extends(FinallySubscriber, _super);\n    function FinallySubscriber(destination, callback) {\n        _super.call(this, destination);\n        this.add(new Subscription_1.Subscription(callback));\n    }\n    return FinallySubscriber;\n}(Subscriber_1.Subscriber));\n\n},{\"../Subscriber\":13,\"../Subscription\":14}],229:[function(require,module,exports){\n\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Subscriber_1 = require('../Subscriber');\n/**\n * Emits only the first value emitted by the source Observable that meets some\n * condition.\n *\n * <span class=\"informal\">Finds the first value that passes some test and emits\n * that.</span>\n *\n * <img src=\"./img/find.png\" width=\"100%\">\n *\n * `find` searches for the first item in the source Observable that matches the\n * specified condition embodied by the `predicate`, and returns the first\n * occurrence in the source. Unlike {@link first}, the `predicate` is required\n * in `find`, and does not emit an error if a valid value is not found.\n *\n * @example <caption>Find and emit the first click that happens on a DIV element</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.find(ev => ev.target.tagName === 'DIV');\n * result.subscribe(x => console.log(x));\n *\n * @see {@link filter}\n * @see {@link first}\n * @see {@link findIndex}\n * @see {@link take}\n *\n * @param {function(value: T, index: number, source: Observable<T>): boolean} predicate\n * A function called with each item to test for condition matching.\n * @param {any} [thisArg] An optional argument to determine the value of `this`\n * in the `predicate` function.\n * @return {Observable<T>} An Observable of the first item that matches the\n * condition.\n * @method find\n * @owner Observable\n */\nfunction find(predicate, thisArg) {\n    if (typeof predicate !== 'function') {\n        throw new TypeError('predicate is not a function');\n    }\n    return this.lift(new FindValueOperator(predicate, this, false, thisArg));\n}\nexports.find = find;\nvar FindValueOperator = (function () {\n    function FindValueOperator(predicate, source, yieldIndex, thisArg) {\n        this.predicate = predicate;\n        this.source = source;\n        this.yieldIndex = yieldIndex;\n        this.thisArg = thisArg;\n    }\n    FindValueOperator.prototype.call = function (observer, source) {\n        return source._subscribe(new FindValueSubscriber(observer, this.predicate, this.source, this.yieldIndex, this.thisArg));\n    };\n    return FindValueOperator;\n}());\nexports.FindValueOperator = FindValueOperator;\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar FindValueSubscriber = (function (_super) {\n    __extends(FindValueSubscriber, _super);\n    function FindValueSubscriber(destination, predicate, source, yieldIndex, thisArg) {\n        _super.call(this, destination);\n        this.predicate = predicate;\n        this.source = source;\n        this.yieldIndex = yieldIndex;\n        this.thisArg = thisArg;\n        this.index = 0;\n    }\n    FindValueSubscriber.prototype.notifyComplete = function (value) {\n        var destination = this.destination;\n        destination.next(value);\n        destination.complete();\n    };\n    FindValueSubscriber.prototype._next = function (value) {\n        var _a = this, predicate = _a.predicate, thisArg = _a.thisArg;\n        var index = this.index++;\n        try {\n            var result = predicate.call(thisArg || this, value, index, this.source);\n            if (result) {\n                this.notifyComplete(this.yieldIndex ? index : value);\n            }\n        }\n        catch (err) {\n            this.destination.error(err);\n        }\n    };\n    FindValueSubscriber.prototype._complete = function () {\n        this.notifyComplete(this.yieldIndex ? -1 : undefined);\n    };\n    return FindValueSubscriber;\n}(Subscriber_1.Subscriber));\nexports.FindValueSubscriber = FindValueSubscriber;\n\n},{\"../Subscriber\":13}],230:[function(require,module,exports){\n\"use strict\";\nvar find_1 = require('./find');\n/**\n * Emits only the index of the first value emitted by the source Observable that\n * meets some condition.\n *\n * <span class=\"informal\">It's like {@link find}, but emits the index of the\n * found value, not the value itself.</span>\n *\n * <img src=\"./img/findIndex.png\" width=\"100%\">\n *\n * `findIndex` searches for the first item in the source Observable that matches\n * the specified condition embodied by the `predicate`, and returns the\n * (zero-based) index of the first occurrence in the source. Unlike\n * {@link first}, the `predicate` is required in `findIndex`, and does not emit\n * an error if a valid value is not found.\n *\n * @example <caption>Emit the index of first click that happens on a DIV element</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.findIndex(ev => ev.target.tagName === 'DIV');\n * result.subscribe(x => console.log(x));\n *\n * @see {@link filter}\n * @see {@link find}\n * @see {@link first}\n * @see {@link take}\n *\n * @param {function(value: T, index: number, source: Observable<T>): boolean} predicate\n * A function called with each item to test for condition matching.\n * @param {any} [thisArg] An optional argument to determine the value of `this`\n * in the `predicate` function.\n * @return {Observable} An Observable of the index of the first item that\n * matches the condition.\n * @method find\n * @owner Observable\n */\nfunction findIndex(predicate, thisArg) {\n    return this.lift(new find_1.FindValueOperator(predicate, this, true, thisArg));\n}\nexports.findIndex = findIndex;\n\n},{\"./find\":229}],231:[function(require,module,exports){\n\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Subscriber_1 = require('../Subscriber');\nvar EmptyError_1 = require('../util/EmptyError');\n/**\n * Emits only the first value (or the first value that meets some condition)\n * emitted by the source Observable.\n *\n * <span class=\"informal\">Emits only the first value. Or emits only the first\n * value that passes some test.</span>\n *\n * <img src=\"./img/first.png\" width=\"100%\">\n *\n * If called with no arguments, `first` emits the first value of the source\n * Observable, then completes. If called with a `predicate` function, `first`\n * emits the first value of the source that matches the specified condition. It\n * may also take a `resultSelector` function to produce the output value from\n * the input value, and a `defaultValue` to emit in case the source completes\n * before it is able to emit a valid value. Throws an error if `defaultValue`\n * was not provided and a matching element is not found.\n *\n * @example <caption>Emit only the first click that happens on the DOM</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.first();\n * result.subscribe(x => console.log(x));\n *\n * @example <caption>Emits the first click that happens on a DIV</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.first(ev => ev.target.tagName === 'DIV');\n * result.subscribe(x => console.log(x));\n *\n * @see {@link filter}\n * @see {@link find}\n * @see {@link take}\n *\n * @throws {EmptyError} Delivers an EmptyError to the Observer's `error`\n * callback if the Observable completes before any `next` notification was sent.\n *\n * @param {function(value: T, index: number, source: Observable<T>): boolean} [predicate]\n * An optional function called with each item to test for condition matching.\n * @param {function(value: T, index: number): R} [resultSelector] A function to\n * produce the value on the output Observable based on the values\n * and the indices of the source Observable. The arguments passed to this\n * function are:\n * - `value`: the value that was emitted on the source.\n * - `index`: the \"index\" of the value from the source.\n * @param {R} [defaultValue] The default value emitted in case no valid value\n * was found on the source.\n * @return {Observable<T|R>} an Observable of the first item that matches the\n * condition.\n * @method first\n * @owner Observable\n */\nfunction first(predicate, resultSelector, defaultValue) {\n    return this.lift(new FirstOperator(predicate, resultSelector, defaultValue, this));\n}\nexports.first = first;\nvar FirstOperator = (function () {\n    function FirstOperator(predicate, resultSelector, defaultValue, source) {\n        this.predicate = predicate;\n        this.resultSelector = resultSelector;\n        this.defaultValue = defaultValue;\n        this.source = source;\n    }\n    FirstOperator.prototype.call = function (observer, source) {\n        return source._subscribe(new FirstSubscriber(observer, this.predicate, this.resultSelector, this.defaultValue, this.source));\n    };\n    return FirstOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar FirstSubscriber = (function (_super) {\n    __extends(FirstSubscriber, _super);\n    function FirstSubscriber(destination, predicate, resultSelector, defaultValue, source) {\n        _super.call(this, destination);\n        this.predicate = predicate;\n        this.resultSelector = resultSelector;\n        this.defaultValue = defaultValue;\n        this.source = source;\n        this.index = 0;\n        this.hasCompleted = false;\n    }\n    FirstSubscriber.prototype._next = function (value) {\n        var index = this.index++;\n        if (this.predicate) {\n            this._tryPredicate(value, index);\n        }\n        else {\n            this._emit(value, index);\n        }\n    };\n    FirstSubscriber.prototype._tryPredicate = function (value, index) {\n        var result;\n        try {\n            result = this.predicate(value, index, this.source);\n        }\n        catch (err) {\n            this.destination.error(err);\n            return;\n        }\n        if (result) {\n            this._emit(value, index);\n        }\n    };\n    FirstSubscriber.prototype._emit = function (value, index) {\n        if (this.resultSelector) {\n            this._tryResultSelector(value, index);\n            return;\n        }\n        this._emitFinal(value);\n    };\n    FirstSubscriber.prototype._tryResultSelector = function (value, index) {\n        var result;\n        try {\n            result = this.resultSelector(value, index);\n        }\n        catch (err) {\n            this.destination.error(err);\n            return;\n        }\n        this._emitFinal(result);\n    };\n    FirstSubscriber.prototype._emitFinal = function (value) {\n        var destination = this.destination;\n        destination.next(value);\n        destination.complete();\n        this.hasCompleted = true;\n    };\n    FirstSubscriber.prototype._complete = function () {\n        var destination = this.destination;\n        if (!this.hasCompleted && typeof this.defaultValue !== 'undefined') {\n            destination.next(this.defaultValue);\n            destination.complete();\n        }\n        else if (!this.hasCompleted) {\n            destination.error(new EmptyError_1.EmptyError);\n        }\n    };\n    return FirstSubscriber;\n}(Subscriber_1.Subscriber));\n\n},{\"../Subscriber\":13,\"../util/EmptyError\":321}],232:[function(require,module,exports){\n\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Subscriber_1 = require('../Subscriber');\nvar Subscription_1 = require('../Subscription');\nvar Observable_1 = require('../Observable');\nvar Subject_1 = require('../Subject');\nvar Map_1 = require('../util/Map');\nvar FastMap_1 = require('../util/FastMap');\n/**\n * Groups the items emitted by an Observable according to a specified criterion,\n * and emits these grouped items as `GroupedObservables`, one\n * {@link GroupedObservable} per group.\n *\n * <img src=\"./img/groupBy.png\" width=\"100%\">\n *\n * @param {function(value: T): K} keySelector a function that extracts the key\n * for each item.\n * @param {function(value: T): R} [elementSelector] a function that extracts the\n * return element for each item.\n * @param {function(grouped: GroupedObservable<K,R>): Observable<any>} [durationSelector]\n * a function that returns an Observable to determine how long each group should\n * exist.\n * @return {Observable<GroupedObservable<K,R>>} an Observable that emits\n * GroupedObservables, each of which corresponds to a unique key value and each\n * of which emits those items from the source Observable that share that key\n * value.\n * @method groupBy\n * @owner Observable\n */\nfunction groupBy(keySelector, elementSelector, durationSelector) {\n    return this.lift(new GroupByOperator(this, keySelector, elementSelector, durationSelector));\n}\nexports.groupBy = groupBy;\nvar GroupByOperator = (function () {\n    function GroupByOperator(source, keySelector, elementSelector, durationSelector) {\n        this.source = source;\n        this.keySelector = keySelector;\n        this.elementSelector = elementSelector;\n        this.durationSelector = durationSelector;\n    }\n    GroupByOperator.prototype.call = function (subscriber, source) {\n        return source._subscribe(new GroupBySubscriber(subscriber, this.keySelector, this.elementSelector, this.durationSelector));\n    };\n    return GroupByOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar GroupBySubscriber = (function (_super) {\n    __extends(GroupBySubscriber, _super);\n    function GroupBySubscriber(destination, keySelector, elementSelector, durationSelector) {\n        _super.call(this, destination);\n        this.keySelector = keySelector;\n        this.elementSelector = elementSelector;\n        this.durationSelector = durationSelector;\n        this.groups = null;\n        this.attemptedToUnsubscribe = false;\n        this.count = 0;\n    }\n    GroupBySubscriber.prototype._next = function (value) {\n        var key;\n        try {\n            key = this.keySelector(value);\n        }\n        catch (err) {\n            this.error(err);\n            return;\n        }\n        this._group(value, key);\n    };\n    GroupBySubscriber.prototype._group = function (value, key) {\n        var groups = this.groups;\n        if (!groups) {\n            groups = this.groups = typeof key === 'string' ? new FastMap_1.FastMap() : new Map_1.Map();\n        }\n        var group = groups.get(key);\n        var element;\n        if (this.elementSelector) {\n            try {\n                element = this.elementSelector(value);\n            }\n            catch (err) {\n                this.error(err);\n            }\n        }\n        else {\n            element = value;\n        }\n        if (!group) {\n            groups.set(key, group = new Subject_1.Subject());\n            var groupedObservable = new GroupedObservable(key, group, this);\n            this.destination.next(groupedObservable);\n            if (this.durationSelector) {\n                var duration = void 0;\n                try {\n                    duration = this.durationSelector(new GroupedObservable(key, group));\n                }\n                catch (err) {\n                    this.error(err);\n                    return;\n                }\n                this.add(duration.subscribe(new GroupDurationSubscriber(key, group, this)));\n            }\n        }\n        if (!group.closed) {\n            group.next(element);\n        }\n    };\n    GroupBySubscriber.prototype._error = function (err) {\n        var groups = this.groups;\n        if (groups) {\n            groups.forEach(function (group, key) {\n                group.error(err);\n            });\n            groups.clear();\n        }\n        this.destination.error(err);\n    };\n    GroupBySubscriber.prototype._complete = function () {\n        var groups = this.groups;\n        if (groups) {\n            groups.forEach(function (group, key) {\n                group.complete();\n            });\n            groups.clear();\n        }\n        this.destination.complete();\n    };\n    GroupBySubscriber.prototype.removeGroup = function (key) {\n        this.groups.delete(key);\n    };\n    GroupBySubscriber.prototype.unsubscribe = function () {\n        if (!this.closed && !this.attemptedToUnsubscribe) {\n            this.attemptedToUnsubscribe = true;\n            if (this.count === 0) {\n                _super.prototype.unsubscribe.call(this);\n            }\n        }\n    };\n    return GroupBySubscriber;\n}(Subscriber_1.Subscriber));\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar GroupDurationSubscriber = (function (_super) {\n    __extends(GroupDurationSubscriber, _super);\n    function GroupDurationSubscriber(key, group, parent) {\n        _super.call(this);\n        this.key = key;\n        this.group = group;\n        this.parent = parent;\n    }\n    GroupDurationSubscriber.prototype._next = function (value) {\n        this._complete();\n    };\n    GroupDurationSubscriber.prototype._error = function (err) {\n        var group = this.group;\n        if (!group.closed) {\n            group.error(err);\n        }\n        this.parent.removeGroup(this.key);\n    };\n    GroupDurationSubscriber.prototype._complete = function () {\n        var group = this.group;\n        if (!group.closed) {\n            group.complete();\n        }\n        this.parent.removeGroup(this.key);\n    };\n    return GroupDurationSubscriber;\n}(Subscriber_1.Subscriber));\n/**\n * An Observable representing values belonging to the same group represented by\n * a common key. The values emitted by a GroupedObservable come from the source\n * Observable. The common key is available as the field `key` on a\n * GroupedObservable instance.\n *\n * @class GroupedObservable<K, T>\n */\nvar GroupedObservable = (function (_super) {\n    __extends(GroupedObservable, _super);\n    function GroupedObservable(key, groupSubject, refCountSubscription) {\n        _super.call(this);\n        this.key = key;\n        this.groupSubject = groupSubject;\n        this.refCountSubscription = refCountSubscription;\n    }\n    GroupedObservable.prototype._subscribe = function (subscriber) {\n        var subscription = new Subscription_1.Subscription();\n        var _a = this, refCountSubscription = _a.refCountSubscription, groupSubject = _a.groupSubject;\n        if (refCountSubscription && !refCountSubscription.closed) {\n            subscription.add(new InnerRefCountSubscription(refCountSubscription));\n        }\n        subscription.add(groupSubject.subscribe(subscriber));\n        return subscription;\n    };\n    return GroupedObservable;\n}(Observable_1.Observable));\nexports.GroupedObservable = GroupedObservable;\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar InnerRefCountSubscription = (function (_super) {\n    __extends(InnerRefCountSubscription, _super);\n    function InnerRefCountSubscription(parent) {\n        _super.call(this);\n        this.parent = parent;\n        parent.count++;\n    }\n    InnerRefCountSubscription.prototype.unsubscribe = function () {\n        var parent = this.parent;\n        if (!parent.closed && !this.closed) {\n            _super.prototype.unsubscribe.call(this);\n            parent.count -= 1;\n            if (parent.count === 0 && parent.attemptedToUnsubscribe) {\n                parent.unsubscribe();\n            }\n        }\n    };\n    return InnerRefCountSubscription;\n}(Subscription_1.Subscription));\n\n},{\"../Observable\":5,\"../Subject\":11,\"../Subscriber\":13,\"../Subscription\":14,\"../util/FastMap\":322,\"../util/Map\":324}],233:[function(require,module,exports){\n\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Subscriber_1 = require('../Subscriber');\nvar noop_1 = require('../util/noop');\n/**\n * Ignores all items emitted by the source Observable and only passes calls of `complete` or `error`.\n *\n * <img src=\"./img/ignoreElements.png\" width=\"100%\">\n *\n * @return {Observable} an empty Observable that only calls `complete`\n * or `error`, based on which one is called by the source Observable.\n * @method ignoreElements\n * @owner Observable\n */\nfunction ignoreElements() {\n    return this.lift(new IgnoreElementsOperator());\n}\nexports.ignoreElements = ignoreElements;\n;\nvar IgnoreElementsOperator = (function () {\n    function IgnoreElementsOperator() {\n    }\n    IgnoreElementsOperator.prototype.call = function (subscriber, source) {\n        return source._subscribe(new IgnoreElementsSubscriber(subscriber));\n    };\n    return IgnoreElementsOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar IgnoreElementsSubscriber = (function (_super) {\n    __extends(IgnoreElementsSubscriber, _super);\n    function IgnoreElementsSubscriber() {\n        _super.apply(this, arguments);\n    }\n    IgnoreElementsSubscriber.prototype._next = function (unused) {\n        noop_1.noop();\n    };\n    return IgnoreElementsSubscriber;\n}(Subscriber_1.Subscriber));\n\n},{\"../Subscriber\":13,\"../util/noop\":338}],234:[function(require,module,exports){\n\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Subscriber_1 = require('../Subscriber');\n/**\n * If the source Observable is empty it returns an Observable that emits true, otherwise it emits false.\n *\n * <img src=\"./img/isEmpty.png\" width=\"100%\">\n *\n * @return {Observable} an Observable that emits a Boolean.\n * @method isEmpty\n * @owner Observable\n */\nfunction isEmpty() {\n    return this.lift(new IsEmptyOperator());\n}\nexports.isEmpty = isEmpty;\nvar IsEmptyOperator = (function () {\n    function IsEmptyOperator() {\n    }\n    IsEmptyOperator.prototype.call = function (observer, source) {\n        return source._subscribe(new IsEmptySubscriber(observer));\n    };\n    return IsEmptyOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar IsEmptySubscriber = (function (_super) {\n    __extends(IsEmptySubscriber, _super);\n    function IsEmptySubscriber(destination) {\n        _super.call(this, destination);\n    }\n    IsEmptySubscriber.prototype.notifyComplete = function (isEmpty) {\n        var destination = this.destination;\n        destination.next(isEmpty);\n        destination.complete();\n    };\n    IsEmptySubscriber.prototype._next = function (value) {\n        this.notifyComplete(false);\n    };\n    IsEmptySubscriber.prototype._complete = function () {\n        this.notifyComplete(true);\n    };\n    return IsEmptySubscriber;\n}(Subscriber_1.Subscriber));\n\n},{\"../Subscriber\":13}],235:[function(require,module,exports){\n\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Subscriber_1 = require('../Subscriber');\nvar EmptyError_1 = require('../util/EmptyError');\n/**\n * Returns an Observable that emits only the last item emitted by the source Observable.\n * It optionally takes a predicate function as a parameter, in which case, rather than emitting\n * the last item from the source Observable, the resulting Observable will emit the last item\n * from the source Observable that satisfies the predicate.\n *\n * <img src=\"./img/last.png\" width=\"100%\">\n *\n * @throws {EmptyError} Delivers an EmptyError to the Observer's `error`\n * callback if the Observable completes before any `next` notification was sent.\n * @param {function} predicate - the condition any source emitted item has to satisfy.\n * @return {Observable} an Observable that emits only the last item satisfying the given condition\n * from the source, or an NoSuchElementException if no such items are emitted.\n * @throws - Throws if no items that match the predicate are emitted by the source Observable.\n * @method last\n * @owner Observable\n */\nfunction last(predicate, resultSelector, defaultValue) {\n    return this.lift(new LastOperator(predicate, resultSelector, defaultValue, this));\n}\nexports.last = last;\nvar LastOperator = (function () {\n    function LastOperator(predicate, resultSelector, defaultValue, source) {\n        this.predicate = predicate;\n        this.resultSelector = resultSelector;\n        this.defaultValue = defaultValue;\n        this.source = source;\n    }\n    LastOperator.prototype.call = function (observer, source) {\n        return source._subscribe(new LastSubscriber(observer, this.predicate, this.resultSelector, this.defaultValue, this.source));\n    };\n    return LastOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar LastSubscriber = (function (_super) {\n    __extends(LastSubscriber, _super);\n    function LastSubscriber(destination, predicate, resultSelector, defaultValue, source) {\n        _super.call(this, destination);\n        this.predicate = predicate;\n        this.resultSelector = resultSelector;\n        this.defaultValue = defaultValue;\n        this.source = source;\n        this.hasValue = false;\n        this.index = 0;\n        if (typeof defaultValue !== 'undefined') {\n            this.lastValue = defaultValue;\n            this.hasValue = true;\n        }\n    }\n    LastSubscriber.prototype._next = function (value) {\n        var index = this.index++;\n        if (this.predicate) {\n            this._tryPredicate(value, index);\n        }\n        else {\n            if (this.resultSelector) {\n                this._tryResultSelector(value, index);\n                return;\n            }\n            this.lastValue = value;\n            this.hasValue = true;\n        }\n    };\n    LastSubscriber.prototype._tryPredicate = function (value, index) {\n        var result;\n        try {\n            result = this.predicate(value, index, this.source);\n        }\n        catch (err) {\n            this.destination.error(err);\n            return;\n        }\n        if (result) {\n            if (this.resultSelector) {\n                this._tryResultSelector(value, index);\n                return;\n            }\n            this.lastValue = value;\n            this.hasValue = true;\n        }\n    };\n    LastSubscriber.prototype._tryResultSelector = function (value, index) {\n        var result;\n        try {\n            result = this.resultSelector(value, index);\n        }\n        catch (err) {\n            this.destination.error(err);\n            return;\n        }\n        this.lastValue = result;\n        this.hasValue = true;\n    };\n    LastSubscriber.prototype._complete = function () {\n        var destination = this.destination;\n        if (this.hasValue) {\n            destination.next(this.lastValue);\n            destination.complete();\n        }\n        else {\n            destination.error(new EmptyError_1.EmptyError);\n        }\n    };\n    return LastSubscriber;\n}(Subscriber_1.Subscriber));\n\n},{\"../Subscriber\":13,\"../util/EmptyError\":321}],236:[function(require,module,exports){\n\"use strict\";\n/**\n * @param func\n * @return {Observable<R>}\n * @method let\n * @owner Observable\n */\nfunction letProto(func) {\n    return func(this);\n}\nexports.letProto = letProto;\n\n},{}],237:[function(require,module,exports){\n\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Subscriber_1 = require('../Subscriber');\n/**\n * Applies a given `project` function to each value emitted by the source\n * Observable, and emits the resulting values as an Observable.\n *\n * <span class=\"informal\">Like [Array.prototype.map()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map),\n * it passes each source value through a transformation function to get\n * corresponding output values.</span>\n *\n * <img src=\"./img/map.png\" width=\"100%\">\n *\n * Similar to the well known `Array.prototype.map` function, this operator\n * applies a projection to each value and emits that projection in the output\n * Observable.\n *\n * @example <caption>Map every every click to the clientX position of that click</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var positions = clicks.map(ev => ev.clientX);\n * positions.subscribe(x => console.log(x));\n *\n * @see {@link mapTo}\n * @see {@link pluck}\n *\n * @param {function(value: T, index: number): R} project The function to apply\n * to each `value` emitted by the source Observable. The `index` parameter is\n * the number `i` for the i-th emission that has happened since the\n * subscription, starting from the number `0`.\n * @param {any} [thisArg] An optional argument to define what `this` is in the\n * `project` function.\n * @return {Observable<R>} An Observable that emits the values from the source\n * Observable transformed by the given `project` function.\n * @method map\n * @owner Observable\n */\nfunction map(project, thisArg) {\n    if (typeof project !== 'function') {\n        throw new TypeError('argument is not a function. Are you looking for `mapTo()`?');\n    }\n    return this.lift(new MapOperator(project, thisArg));\n}\nexports.map = map;\nvar MapOperator = (function () {\n    function MapOperator(project, thisArg) {\n        this.project = project;\n        this.thisArg = thisArg;\n    }\n    MapOperator.prototype.call = function (subscriber, source) {\n        return source._subscribe(new MapSubscriber(subscriber, this.project, this.thisArg));\n    };\n    return MapOperator;\n}());\nexports.MapOperator = MapOperator;\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar MapSubscriber = (function (_super) {\n    __extends(MapSubscriber, _super);\n    function MapSubscriber(destination, project, thisArg) {\n        _super.call(this, destination);\n        this.project = project;\n        this.count = 0;\n        this.thisArg = thisArg || this;\n    }\n    // NOTE: This looks unoptimized, but it's actually purposefully NOT\n    // using try/catch optimizations.\n    MapSubscriber.prototype._next = function (value) {\n        var result;\n        try {\n            result = this.project.call(this.thisArg, value, this.count++);\n        }\n        catch (err) {\n            this.destination.error(err);\n            return;\n        }\n        this.destination.next(result);\n    };\n    return MapSubscriber;\n}(Subscriber_1.Subscriber));\n\n},{\"../Subscriber\":13}],238:[function(require,module,exports){\n\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Subscriber_1 = require('../Subscriber');\n/**\n * Emits the given constant value on the output Observable every time the source\n * Observable emits a value.\n *\n * <span class=\"informal\">Like {@link map}, but it maps every source value to\n * the same output value every time.</span>\n *\n * <img src=\"./img/mapTo.png\" width=\"100%\">\n *\n * Takes a constant `value` as argument, and emits that whenever the source\n * Observable emits a value. In other words, ignores the actual source value,\n * and simply uses the emission moment to know when to emit the given `value`.\n *\n * @example <caption>Map every every click to the string 'Hi'</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var greetings = clicks.mapTo('Hi');\n * greetings.subscribe(x => console.log(x));\n *\n * @see {@link map}\n *\n * @param {any} value The value to map each source value to.\n * @return {Observable} An Observable that emits the given `value` every time\n * the source Observable emits something.\n * @method mapTo\n * @owner Observable\n */\nfunction mapTo(value) {\n    return this.lift(new MapToOperator(value));\n}\nexports.mapTo = mapTo;\nvar MapToOperator = (function () {\n    function MapToOperator(value) {\n        this.value = value;\n    }\n    MapToOperator.prototype.call = function (subscriber, source) {\n        return source._subscribe(new MapToSubscriber(subscriber, this.value));\n    };\n    return MapToOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar MapToSubscriber = (function (_super) {\n    __extends(MapToSubscriber, _super);\n    function MapToSubscriber(destination, value) {\n        _super.call(this, destination);\n        this.value = value;\n    }\n    MapToSubscriber.prototype._next = function (x) {\n        this.destination.next(this.value);\n    };\n    return MapToSubscriber;\n}(Subscriber_1.Subscriber));\n\n},{\"../Subscriber\":13}],239:[function(require,module,exports){\n\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Subscriber_1 = require('../Subscriber');\nvar Notification_1 = require('../Notification');\n/**\n * Represents all of the notifications from the source Observable as `next`\n * emissions marked with their original types within {@link Notification}\n * objects.\n *\n * <span class=\"informal\">Wraps `next`, `error` and `complete` emissions in\n * {@link Notification} objects, emitted as `next` on the output Observable.\n * </span>\n *\n * <img src=\"./img/materialize.png\" width=\"100%\">\n *\n * `materialize` returns an Observable that emits a `next` notification for each\n * `next`, `error`, or `complete` emission of the source Observable. When the\n * source Observable emits `complete`, the output Observable will emit `next` as\n * a Notification of type \"complete\", and then it will emit `complete` as well.\n * When the source Observable emits `error`, the output will emit `next` as a\n * Notification of type \"error\", and then `complete`.\n *\n * This operator is useful for producing metadata of the source Observable, to\n * be consumed as `next` emissions. Use it in conjunction with\n * {@link dematerialize}.\n *\n * @example <caption>Convert a faulty Observable to an Observable of Notifications</caption>\n * var letters = Rx.Observable.of('a', 'b', 13, 'd');\n * var upperCase = letters.map(x => x.toUpperCase());\n * var materialized = upperCase.materialize();\n * materialized.subscribe(x => console.log(x));\n *\n * @see {@link Notification}\n * @see {@link dematerialize}\n *\n * @return {Observable<Notification<T>>} An Observable that emits\n * {@link Notification} objects that wrap the original emissions from the source\n * Observable with metadata.\n * @method materialize\n * @owner Observable\n */\nfunction materialize() {\n    return this.lift(new MaterializeOperator());\n}\nexports.materialize = materialize;\nvar MaterializeOperator = (function () {\n    function MaterializeOperator() {\n    }\n    MaterializeOperator.prototype.call = function (subscriber, source) {\n        return source._subscribe(new MaterializeSubscriber(subscriber));\n    };\n    return MaterializeOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar MaterializeSubscriber = (function (_super) {\n    __extends(MaterializeSubscriber, _super);\n    function MaterializeSubscriber(destination) {\n        _super.call(this, destination);\n    }\n    MaterializeSubscriber.prototype._next = function (value) {\n        this.destination.next(Notification_1.Notification.createNext(value));\n    };\n    MaterializeSubscriber.prototype._error = function (err) {\n        var destination = this.destination;\n        destination.next(Notification_1.Notification.createError(err));\n        destination.complete();\n    };\n    MaterializeSubscriber.prototype._complete = function () {\n        var destination = this.destination;\n        destination.next(Notification_1.Notification.createComplete());\n        destination.complete();\n    };\n    return MaterializeSubscriber;\n}(Subscriber_1.Subscriber));\n\n},{\"../Notification\":4,\"../Subscriber\":13}],240:[function(require,module,exports){\n\"use strict\";\nvar reduce_1 = require('./reduce');\n/**\n * The Max operator operates on an Observable that emits numbers (or items that can be evaluated as numbers),\n * and when source Observable completes it emits a single item: the item with the largest number.\n *\n * <img src=\"./img/max.png\" width=\"100%\">\n *\n * @param {Function} optional comparer function that it will use instead of its default to compare the value of two\n * items.\n * @return {Observable} an Observable that emits item with the largest number.\n * @method max\n * @owner Observable\n */\nfunction max(comparer) {\n    var max = (typeof comparer === 'function')\n        ? function (x, y) { return comparer(x, y) > 0 ? x : y; }\n        : function (x, y) { return x > y ? x : y; };\n    return this.lift(new reduce_1.ReduceOperator(max));\n}\nexports.max = max;\n\n},{\"./reduce\":258}],241:[function(require,module,exports){\n\"use strict\";\nvar ArrayObservable_1 = require('../observable/ArrayObservable');\nvar mergeAll_1 = require('./mergeAll');\nvar isScheduler_1 = require('../util/isScheduler');\n/**\n * Creates an output Observable which concurrently emits all values from every\n * given input Observable.\n *\n * <span class=\"informal\">Flattens multiple Observables together by blending\n * their values into one Observable.</span>\n *\n * <img src=\"./img/merge.png\" width=\"100%\">\n *\n * `merge` subscribes to each given input Observable (either the source or an\n * Observable given as argument), and simply forwards (without doing any\n * transformation) all the values from all the input Observables to the output\n * Observable. The output Observable only completes once all input Observables\n * have completed. Any error delivered by an input Observable will be immediately\n * emitted on the output Observable.\n *\n * @example <caption>Merge together two Observables: 1s interval and clicks</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var timer = Rx.Observable.interval(1000);\n * var clicksOrTimer = clicks.merge(timer);\n * clicksOrTimer.subscribe(x => console.log(x));\n *\n * @example <caption>Merge together 3 Observables, but only 2 run concurrently</caption>\n * var timer1 = Rx.Observable.interval(1000).take(10);\n * var timer2 = Rx.Observable.interval(2000).take(6);\n * var timer3 = Rx.Observable.interval(500).take(10);\n * var concurrent = 2; // the argument\n * var merged = timer1.merge(timer2, timer3, concurrent);\n * merged.subscribe(x => console.log(x));\n *\n * @see {@link mergeAll}\n * @see {@link mergeMap}\n * @see {@link mergeMapTo}\n * @see {@link mergeScan}\n *\n * @param {Observable} other An input Observable to merge with the source\n * Observable. More than one input Observables may be given as argument.\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of input\n * Observables being subscribed to concurrently.\n * @param {Scheduler} [scheduler=null] The Scheduler to use for managing\n * concurrency of input Observables.\n * @return {Observable} an Observable that emits items that are the result of\n * every input Observable.\n * @method merge\n * @owner Observable\n */\nfunction merge() {\n    var observables = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        observables[_i - 0] = arguments[_i];\n    }\n    observables.unshift(this);\n    return mergeStatic.apply(this, observables);\n}\nexports.merge = merge;\n/* tslint:enable:max-line-length */\n/**\n * Creates an output Observable which concurrently emits all values from every\n * given input Observable.\n *\n * <span class=\"informal\">Flattens multiple Observables together by blending\n * their values into one Observable.</span>\n *\n * <img src=\"./img/merge.png\" width=\"100%\">\n *\n * `merge` subscribes to each given input Observable (as arguments), and simply\n * forwards (without doing any transformation) all the values from all the input\n * Observables to the output Observable. The output Observable only completes\n * once all input Observables have completed. Any error delivered by an input\n * Observable will be immediately emitted on the output Observable.\n *\n * @example <caption>Merge together two Observables: 1s interval and clicks</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var timer = Rx.Observable.interval(1000);\n * var clicksOrTimer = Rx.Observable.merge(clicks, timer);\n * clicksOrTimer.subscribe(x => console.log(x));\n *\n * @example <caption>Merge together 3 Observables, but only 2 run concurrently</caption>\n * var timer1 = Rx.Observable.interval(1000).take(10);\n * var timer2 = Rx.Observable.interval(2000).take(6);\n * var timer3 = Rx.Observable.interval(500).take(10);\n * var concurrent = 2; // the argument\n * var merged = Rx.Observable.merge(timer1, timer2, timer3, concurrent);\n * merged.subscribe(x => console.log(x));\n *\n * @see {@link mergeAll}\n * @see {@link mergeMap}\n * @see {@link mergeMapTo}\n * @see {@link mergeScan}\n *\n * @param {Observable} input1 An input Observable to merge with others.\n * @param {Observable} input2 An input Observable to merge with others.\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of input\n * Observables being subscribed to concurrently.\n * @param {Scheduler} [scheduler=null] The Scheduler to use for managing\n * concurrency of input Observables.\n * @return {Observable} an Observable that emits items that are the result of\n * every input Observable.\n * @static true\n * @name merge\n * @owner Observable\n */\nfunction mergeStatic() {\n    var observables = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        observables[_i - 0] = arguments[_i];\n    }\n    var concurrent = Number.POSITIVE_INFINITY;\n    var scheduler = null;\n    var last = observables[observables.length - 1];\n    if (isScheduler_1.isScheduler(last)) {\n        scheduler = observables.pop();\n        if (observables.length > 1 && typeof observables[observables.length - 1] === 'number') {\n            concurrent = observables.pop();\n        }\n    }\n    else if (typeof last === 'number') {\n        concurrent = observables.pop();\n    }\n    if (observables.length === 1) {\n        return observables[0];\n    }\n    return new ArrayObservable_1.ArrayObservable(observables, scheduler).lift(new mergeAll_1.MergeAllOperator(concurrent));\n}\nexports.mergeStatic = mergeStatic;\n\n},{\"../observable/ArrayObservable\":145,\"../util/isScheduler\":337,\"./mergeAll\":242}],242:[function(require,module,exports){\n\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar OuterSubscriber_1 = require('../OuterSubscriber');\nvar subscribeToResult_1 = require('../util/subscribeToResult');\n/**\n * Converts a higher-order Observable into a first-order Observable which\n * concurrently delivers all values that are emitted on the inner Observables.\n *\n * <span class=\"informal\">Flattens an Observable-of-Observables.</span>\n *\n * <img src=\"./img/mergeAll.png\" width=\"100%\">\n *\n * `mergeAll` subscribes to an Observable that emits Observables, also known as\n * a higher-order Observable. Each time it observes one of these emitted inner\n * Observables, it subscribes to that and delivers all the values from the\n * inner Observable on the output Observable. The output Observable only\n * completes once all inner Observables have completed. Any error delivered by\n * a inner Observable will be immediately emitted on the output Observable.\n *\n * @example <caption>Spawn a new interval Observable for each click event, and blend their outputs as one Observable</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var higherOrder = clicks.map((ev) => Rx.Observable.interval(1000));\n * var firstOrder = higherOrder.mergeAll();\n * firstOrder.subscribe(x => console.log(x));\n *\n * @example <caption>Count from 0 to 9 every second for each click, but only allow 2 concurrent timers</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var higherOrder = clicks.map((ev) => Rx.Observable.interval(1000).take(10));\n * var firstOrder = higherOrder.mergeAll(2);\n * firstOrder.subscribe(x => console.log(x));\n *\n * @see {@link combineAll}\n * @see {@link concatAll}\n * @see {@link exhaust}\n * @see {@link merge}\n * @see {@link mergeMap}\n * @see {@link mergeMapTo}\n * @see {@link mergeScan}\n * @see {@link switch}\n * @see {@link zipAll}\n *\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of inner\n * Observables being subscribed to concurrently.\n * @return {Observable} An Observable that emits values coming from all the\n * inner Observables emitted by the source Observable.\n * @method mergeAll\n * @owner Observable\n */\nfunction mergeAll(concurrent) {\n    if (concurrent === void 0) { concurrent = Number.POSITIVE_INFINITY; }\n    return this.lift(new MergeAllOperator(concurrent));\n}\nexports.mergeAll = mergeAll;\nvar MergeAllOperator = (function () {\n    function MergeAllOperator(concurrent) {\n        this.concurrent = concurrent;\n    }\n    MergeAllOperator.prototype.call = function (observer, source) {\n        return source._subscribe(new MergeAllSubscriber(observer, this.concurrent));\n    };\n    return MergeAllOperator;\n}());\nexports.MergeAllOperator = MergeAllOperator;\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar MergeAllSubscriber = (function (_super) {\n    __extends(MergeAllSubscriber, _super);\n    function MergeAllSubscriber(destination, concurrent) {\n        _super.call(this, destination);\n        this.concurrent = concurrent;\n        this.hasCompleted = false;\n        this.buffer = [];\n        this.active = 0;\n    }\n    MergeAllSubscriber.prototype._next = function (observable) {\n        if (this.active < this.concurrent) {\n            this.active++;\n            this.add(subscribeToResult_1.subscribeToResult(this, observable));\n        }\n        else {\n            this.buffer.push(observable);\n        }\n    };\n    MergeAllSubscriber.prototype._complete = function () {\n        this.hasCompleted = true;\n        if (this.active === 0 && this.buffer.length === 0) {\n            this.destination.complete();\n        }\n    };\n    MergeAllSubscriber.prototype.notifyComplete = function (innerSub) {\n        var buffer = this.buffer;\n        this.remove(innerSub);\n        this.active--;\n        if (buffer.length > 0) {\n            this._next(buffer.shift());\n        }\n        else if (this.active === 0 && this.hasCompleted) {\n            this.destination.complete();\n        }\n    };\n    return MergeAllSubscriber;\n}(OuterSubscriber_1.OuterSubscriber));\nexports.MergeAllSubscriber = MergeAllSubscriber;\n\n},{\"../OuterSubscriber\":7,\"../util/subscribeToResult\":341}],243:[function(require,module,exports){\n\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar subscribeToResult_1 = require('../util/subscribeToResult');\nvar OuterSubscriber_1 = require('../OuterSubscriber');\n/**\n * Projects each source value to an Observable which is merged in the output\n * Observable.\n *\n * <span class=\"informal\">Maps each value to an Observable, then flattens all of\n * these inner Observables using {@link mergeAll}.</span>\n *\n * <img src=\"./img/mergeMap.png\" width=\"100%\">\n *\n * Returns an Observable that emits items based on applying a function that you\n * supply to each item emitted by the source Observable, where that function\n * returns an Observable, and then merging those resulting Observables and\n * emitting the results of this merger.\n *\n * @example <caption>Map and flatten each letter to an Observable ticking every 1 second</caption>\n * var letters = Rx.Observable.of('a', 'b', 'c');\n * var result = letters.mergeMap(x =>\n *   Rx.Observable.interval(1000).map(i => x+i)\n * );\n * result.subscribe(x => console.log(x));\n *\n * @see {@link concatMap}\n * @see {@link exhaustMap}\n * @see {@link merge}\n * @see {@link mergeAll}\n * @see {@link mergeMapTo}\n * @see {@link mergeScan}\n * @see {@link switchMap}\n *\n * @param {function(value: T, ?index: number): Observable} project A function\n * that, when applied to an item emitted by the source Observable, returns an\n * Observable.\n * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]\n * A function to produce the value on the output Observable based on the values\n * and the indices of the source (outer) emission and the inner Observable\n * emission. The arguments passed to this function are:\n * - `outerValue`: the value that came from the source\n * - `innerValue`: the value that came from the projected Observable\n * - `outerIndex`: the \"index\" of the value that came from the source\n * - `innerIndex`: the \"index\" of the value from the projected Observable\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of input\n * Observables being subscribed to concurrently.\n * @return {Observable} An Observable that emits the result of applying the\n * projection function (and the optional `resultSelector`) to each item emitted\n * by the source Observable and merging the results of the Observables obtained\n * from this transformation.\n * @method mergeMap\n * @owner Observable\n */\nfunction mergeMap(project, resultSelector, concurrent) {\n    if (concurrent === void 0) { concurrent = Number.POSITIVE_INFINITY; }\n    if (typeof resultSelector === 'number') {\n        concurrent = resultSelector;\n        resultSelector = null;\n    }\n    return this.lift(new MergeMapOperator(project, resultSelector, concurrent));\n}\nexports.mergeMap = mergeMap;\nvar MergeMapOperator = (function () {\n    function MergeMapOperator(project, resultSelector, concurrent) {\n        if (concurrent === void 0) { concurrent = Number.POSITIVE_INFINITY; }\n        this.project = project;\n        this.resultSelector = resultSelector;\n        this.concurrent = concurrent;\n    }\n    MergeMapOperator.prototype.call = function (observer, source) {\n        return source._subscribe(new MergeMapSubscriber(observer, this.project, this.resultSelector, this.concurrent));\n    };\n    return MergeMapOperator;\n}());\nexports.MergeMapOperator = MergeMapOperator;\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar MergeMapSubscriber = (function (_super) {\n    __extends(MergeMapSubscriber, _super);\n    function MergeMapSubscriber(destination, project, resultSelector, concurrent) {\n        if (concurrent === void 0) { concurrent = Number.POSITIVE_INFINITY; }\n        _super.call(this, destination);\n        this.project = project;\n        this.resultSelector = resultSelector;\n        this.concurrent = concurrent;\n        this.hasCompleted = false;\n        this.buffer = [];\n        this.active = 0;\n        this.index = 0;\n    }\n    MergeMapSubscriber.prototype._next = function (value) {\n        if (this.active < this.concurrent) {\n            this._tryNext(value);\n        }\n        else {\n            this.buffer.push(value);\n        }\n    };\n    MergeMapSubscriber.prototype._tryNext = function (value) {\n        var result;\n        var index = this.index++;\n        try {\n            result = this.project(value, index);\n        }\n        catch (err) {\n            this.destination.error(err);\n            return;\n        }\n        this.active++;\n        this._innerSub(result, value, index);\n    };\n    MergeMapSubscriber.prototype._innerSub = function (ish, value, index) {\n        this.add(subscribeToResult_1.subscribeToResult(this, ish, value, index));\n    };\n    MergeMapSubscriber.prototype._complete = function () {\n        this.hasCompleted = true;\n        if (this.active === 0 && this.buffer.length === 0) {\n            this.destination.complete();\n        }\n    };\n    MergeMapSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n        if (this.resultSelector) {\n            this._notifyResultSelector(outerValue, innerValue, outerIndex, innerIndex);\n        }\n        else {\n            this.destination.next(innerValue);\n        }\n    };\n    MergeMapSubscriber.prototype._notifyResultSelector = function (outerValue, innerValue, outerIndex, innerIndex) {\n        var result;\n        try {\n            result = this.resultSelector(outerValue, innerValue, outerIndex, innerIndex);\n        }\n        catch (err) {\n            this.destination.error(err);\n            return;\n        }\n        this.destination.next(result);\n    };\n    MergeMapSubscriber.prototype.notifyComplete = function (innerSub) {\n        var buffer = this.buffer;\n        this.remove(innerSub);\n        this.active--;\n        if (buffer.length > 0) {\n            this._next(buffer.shift());\n        }\n        else if (this.active === 0 && this.hasCompleted) {\n            this.destination.complete();\n        }\n    };\n    return MergeMapSubscriber;\n}(OuterSubscriber_1.OuterSubscriber));\nexports.MergeMapSubscriber = MergeMapSubscriber;\n\n},{\"../OuterSubscriber\":7,\"../util/subscribeToResult\":341}],244:[function(require,module,exports){\n\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar OuterSubscriber_1 = require('../OuterSubscriber');\nvar subscribeToResult_1 = require('../util/subscribeToResult');\n/**\n * Projects each source value to the same Observable which is merged multiple\n * times in the output Observable.\n *\n * <span class=\"informal\">It's like {@link mergeMap}, but maps each value always\n * to the same inner Observable.</span>\n *\n * <img src=\"./img/mergeMapTo.png\" width=\"100%\">\n *\n * Maps each source value to the given Observable `innerObservable` regardless\n * of the source value, and then merges those resulting Observables into one\n * single Observable, which is the output Observable.\n *\n * @example <caption>For each click event, start an interval Observable ticking every 1 second</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.mergeMapTo(Rx.Observable.interval(1000));\n * result.subscribe(x => console.log(x));\n *\n * @see {@link concatMapTo}\n * @see {@link merge}\n * @see {@link mergeAll}\n * @see {@link mergeMap}\n * @see {@link mergeScan}\n * @see {@link switchMapTo}\n *\n * @param {Observable} innerObservable An Observable to replace each value from\n * the source Observable.\n * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]\n * A function to produce the value on the output Observable based on the values\n * and the indices of the source (outer) emission and the inner Observable\n * emission. The arguments passed to this function are:\n * - `outerValue`: the value that came from the source\n * - `innerValue`: the value that came from the projected Observable\n * - `outerIndex`: the \"index\" of the value that came from the source\n * - `innerIndex`: the \"index\" of the value from the projected Observable\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of input\n * Observables being subscribed to concurrently.\n * @return {Observable} An Observable that emits items from the given\n * `innerObservable` (and optionally transformed through `resultSelector`) every\n * time a value is emitted on the source Observable.\n * @method mergeMapTo\n * @owner Observable\n */\nfunction mergeMapTo(innerObservable, resultSelector, concurrent) {\n    if (concurrent === void 0) { concurrent = Number.POSITIVE_INFINITY; }\n    if (typeof resultSelector === 'number') {\n        concurrent = resultSelector;\n        resultSelector = null;\n    }\n    return this.lift(new MergeMapToOperator(innerObservable, resultSelector, concurrent));\n}\nexports.mergeMapTo = mergeMapTo;\n// TODO: Figure out correct signature here: an Operator<Observable<T>, R>\n//       needs to implement call(observer: Subscriber<R>): Subscriber<Observable<T>>\nvar MergeMapToOperator = (function () {\n    function MergeMapToOperator(ish, resultSelector, concurrent) {\n        if (concurrent === void 0) { concurrent = Number.POSITIVE_INFINITY; }\n        this.ish = ish;\n        this.resultSelector = resultSelector;\n        this.concurrent = concurrent;\n    }\n    MergeMapToOperator.prototype.call = function (observer, source) {\n        return source._subscribe(new MergeMapToSubscriber(observer, this.ish, this.resultSelector, this.concurrent));\n    };\n    return MergeMapToOperator;\n}());\nexports.MergeMapToOperator = MergeMapToOperator;\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar MergeMapToSubscriber = (function (_super) {\n    __extends(MergeMapToSubscriber, _super);\n    function MergeMapToSubscriber(destination, ish, resultSelector, concurrent) {\n        if (concurrent === void 0) { concurrent = Number.POSITIVE_INFINITY; }\n        _super.call(this, destination);\n        this.ish = ish;\n        this.resultSelector = resultSelector;\n        this.concurrent = concurrent;\n        this.hasCompleted = false;\n        this.buffer = [];\n        this.active = 0;\n        this.index = 0;\n    }\n    MergeMapToSubscriber.prototype._next = function (value) {\n        if (this.active < this.concurrent) {\n            var resultSelector = this.resultSelector;\n            var index = this.index++;\n            var ish = this.ish;\n            var destination = this.destination;\n            this.active++;\n            this._innerSub(ish, destination, resultSelector, value, index);\n        }\n        else {\n            this.buffer.push(value);\n        }\n    };\n    MergeMapToSubscriber.prototype._innerSub = function (ish, destination, resultSelector, value, index) {\n        this.add(subscribeToResult_1.subscribeToResult(this, ish, value, index));\n    };\n    MergeMapToSubscriber.prototype._complete = function () {\n        this.hasCompleted = true;\n        if (this.active === 0 && this.buffer.length === 0) {\n            this.destination.complete();\n        }\n    };\n    MergeMapToSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n        var _a = this, resultSelector = _a.resultSelector, destination = _a.destination;\n        if (resultSelector) {\n            this.trySelectResult(outerValue, innerValue, outerIndex, innerIndex);\n        }\n        else {\n            destination.next(innerValue);\n        }\n    };\n    MergeMapToSubscriber.prototype.trySelectResult = function (outerValue, innerValue, outerIndex, innerIndex) {\n        var _a = this, resultSelector = _a.resultSelector, destination = _a.destination;\n        var result;\n        try {\n            result = resultSelector(outerValue, innerValue, outerIndex, innerIndex);\n        }\n        catch (err) {\n            destination.error(err);\n            return;\n        }\n        destination.next(result);\n    };\n    MergeMapToSubscriber.prototype.notifyError = function (err) {\n        this.destination.error(err);\n    };\n    MergeMapToSubscriber.prototype.notifyComplete = function (innerSub) {\n        var buffer = this.buffer;\n        this.remove(innerSub);\n        this.active--;\n        if (buffer.length > 0) {\n            this._next(buffer.shift());\n        }\n        else if (this.active === 0 && this.hasCompleted) {\n            this.destination.complete();\n        }\n    };\n    return MergeMapToSubscriber;\n}(OuterSubscriber_1.OuterSubscriber));\nexports.MergeMapToSubscriber = MergeMapToSubscriber;\n\n},{\"../OuterSubscriber\":7,\"../util/subscribeToResult\":341}],245:[function(require,module,exports){\n\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar tryCatch_1 = require('../util/tryCatch');\nvar errorObject_1 = require('../util/errorObject');\nvar subscribeToResult_1 = require('../util/subscribeToResult');\nvar OuterSubscriber_1 = require('../OuterSubscriber');\n/**\n * @param project\n * @param seed\n * @param concurrent\n * @return {Observable<R>|WebSocketSubject<T>|Observable<T>}\n * @method mergeScan\n * @owner Observable\n */\nfunction mergeScan(project, seed, concurrent) {\n    if (concurrent === void 0) { concurrent = Number.POSITIVE_INFINITY; }\n    return this.lift(new MergeScanOperator(project, seed, concurrent));\n}\nexports.mergeScan = mergeScan;\nvar MergeScanOperator = (function () {\n    function MergeScanOperator(project, seed, concurrent) {\n        this.project = project;\n        this.seed = seed;\n        this.concurrent = concurrent;\n    }\n    MergeScanOperator.prototype.call = function (subscriber, source) {\n        return source._subscribe(new MergeScanSubscriber(subscriber, this.project, this.seed, this.concurrent));\n    };\n    return MergeScanOperator;\n}());\nexports.MergeScanOperator = MergeScanOperator;\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar MergeScanSubscriber = (function (_super) {\n    __extends(MergeScanSubscriber, _super);\n    function MergeScanSubscriber(destination, project, acc, concurrent) {\n        _super.call(this, destination);\n        this.project = project;\n        this.acc = acc;\n        this.concurrent = concurrent;\n        this.hasValue = false;\n        this.hasCompleted = false;\n        this.buffer = [];\n        this.active = 0;\n        this.index = 0;\n    }\n    MergeScanSubscriber.prototype._next = function (value) {\n        if (this.active < this.concurrent) {\n            var index = this.index++;\n            var ish = tryCatch_1.tryCatch(this.project)(this.acc, value);\n            var destination = this.destination;\n            if (ish === errorObject_1.errorObject) {\n                destination.error(errorObject_1.errorObject.e);\n            }\n            else {\n                this.active++;\n                this._innerSub(ish, value, index);\n            }\n        }\n        else {\n            this.buffer.push(value);\n        }\n    };\n    MergeScanSubscriber.prototype._innerSub = function (ish, value, index) {\n        this.add(subscribeToResult_1.subscribeToResult(this, ish, value, index));\n    };\n    MergeScanSubscriber.prototype._complete = function () {\n        this.hasCompleted = true;\n        if (this.active === 0 && this.buffer.length === 0) {\n            if (this.hasValue === false) {\n                this.destination.next(this.acc);\n            }\n            this.destination.complete();\n        }\n    };\n    MergeScanSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n        var destination = this.destination;\n        this.acc = innerValue;\n        this.hasValue = true;\n        destination.next(innerValue);\n    };\n    MergeScanSubscriber.prototype.notifyComplete = function (innerSub) {\n        var buffer = this.buffer;\n        this.remove(innerSub);\n        this.active--;\n        if (buffer.length > 0) {\n            this._next(buffer.shift());\n        }\n        else if (this.active === 0 && this.hasCompleted) {\n            if (this.hasValue === false) {\n                this.destination.next(this.acc);\n            }\n            this.destination.complete();\n        }\n    };\n    return MergeScanSubscriber;\n}(OuterSubscriber_1.OuterSubscriber));\nexports.MergeScanSubscriber = MergeScanSubscriber;\n\n},{\"../OuterSubscriber\":7,\"../util/errorObject\":330,\"../util/subscribeToResult\":341,\"../util/tryCatch\":343}],246:[function(require,module,exports){\n\"use strict\";\nvar reduce_1 = require('./reduce');\n/**\n * The Min operator operates on an Observable that emits numbers (or items that can be evaluated as numbers),\n * and when source Observable completes it emits a single item: the item with the smallest number.\n *\n * <img src=\"./img/min.png\" width=\"100%\">\n *\n * @param {Function} optional comparer function that it will use instead of its default to compare the value of two items.\n * @return {Observable<R>} an Observable that emits item with the smallest number.\n * @method min\n * @owner Observable\n */\nfunction min(comparer) {\n    var min = (typeof comparer === 'function')\n        ? function (x, y) { return comparer(x, y) < 0 ? x : y; }\n        : function (x, y) { return x < y ? x : y; };\n    return this.lift(new reduce_1.ReduceOperator(min));\n}\nexports.min = min;\n\n},{\"./reduce\":258}],247:[function(require,module,exports){\n\"use strict\";\nvar MulticastObservable_1 = require('../observable/MulticastObservable');\nvar ConnectableObservable_1 = require('../observable/ConnectableObservable');\n/**\n * Returns an Observable that emits the results of invoking a specified selector on items\n * emitted by a ConnectableObservable that shares a single subscription to the underlying stream.\n *\n * <img src=\"./img/multicast.png\" width=\"100%\">\n *\n * @param {Function|Subject} Factory function to create an intermediate subject through\n * which the source sequence's elements will be multicast to the selector function\n * or Subject to push source elements into.\n * @param {Function} Optional selector function that can use the multicasted source stream\n * as many times as needed, without causing multiple subscriptions to the source stream.\n * Subscribers to the given source will receive all notifications of the source from the\n * time of the subscription forward.\n * @return {Observable} an Observable that emits the results of invoking the selector\n * on the items emitted by a `ConnectableObservable` that shares a single subscription to\n * the underlying stream.\n * @method multicast\n * @owner Observable\n */\nfunction multicast(subjectOrSubjectFactory, selector) {\n    var subjectFactory;\n    if (typeof subjectOrSubjectFactory === 'function') {\n        subjectFactory = subjectOrSubjectFactory;\n    }\n    else {\n        subjectFactory = function subjectFactory() {\n            return subjectOrSubjectFactory;\n        };\n    }\n    return !selector ?\n        new ConnectableObservable_1.ConnectableObservable(this, subjectFactory) :\n        new MulticastObservable_1.MulticastObservable(this, subjectFactory, selector);\n}\nexports.multicast = multicast;\n\n},{\"../observable/ConnectableObservable\":148,\"../observable/MulticastObservable\":160}],248:[function(require,module,exports){\n\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Subscriber_1 = require('../Subscriber');\nvar Notification_1 = require('../Notification');\n/**\n * @see {@link Notification}\n *\n * @param scheduler\n * @param delay\n * @return {Observable<R>|WebSocketSubject<T>|Observable<T>}\n * @method observeOn\n * @owner Observable\n */\nfunction observeOn(scheduler, delay) {\n    if (delay === void 0) { delay = 0; }\n    return this.lift(new ObserveOnOperator(scheduler, delay));\n}\nexports.observeOn = observeOn;\nvar ObserveOnOperator = (function () {\n    function ObserveOnOperator(scheduler, delay) {\n        if (delay === void 0) { delay = 0; }\n        this.scheduler = scheduler;\n        this.delay = delay;\n    }\n    ObserveOnOperator.prototype.call = function (subscriber, source) {\n        return source._subscribe(new ObserveOnSubscriber(subscriber, this.scheduler, this.delay));\n    };\n    return ObserveOnOperator;\n}());\nexports.ObserveOnOperator = ObserveOnOperator;\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar ObserveOnSubscriber = (function (_super) {\n    __extends(ObserveOnSubscriber, _super);\n    function ObserveOnSubscriber(destination, scheduler, delay) {\n        if (delay === void 0) { delay = 0; }\n        _super.call(this, destination);\n        this.scheduler = scheduler;\n        this.delay = delay;\n    }\n    ObserveOnSubscriber.dispatch = function (arg) {\n        var notification = arg.notification, destination = arg.destination;\n        notification.observe(destination);\n    };\n    ObserveOnSubscriber.prototype.scheduleMessage = function (notification) {\n        this.add(this.scheduler.schedule(ObserveOnSubscriber.dispatch, this.delay, new ObserveOnMessage(notification, this.destination)));\n    };\n    ObserveOnSubscriber.prototype._next = function (value) {\n        this.scheduleMessage(Notification_1.Notification.createNext(value));\n    };\n    ObserveOnSubscriber.prototype._error = function (err) {\n        this.scheduleMessage(Notification_1.Notification.createError(err));\n    };\n    ObserveOnSubscriber.prototype._complete = function () {\n        this.scheduleMessage(Notification_1.Notification.createComplete());\n    };\n    return ObserveOnSubscriber;\n}(Subscriber_1.Subscriber));\nexports.ObserveOnSubscriber = ObserveOnSubscriber;\nvar ObserveOnMessage = (function () {\n    function ObserveOnMessage(notification, destination) {\n        this.notification = notification;\n        this.destination = destination;\n    }\n    return ObserveOnMessage;\n}());\nexports.ObserveOnMessage = ObserveOnMessage;\n\n},{\"../Notification\":4,\"../Subscriber\":13}],249:[function(require,module,exports){\n\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar FromObservable_1 = require('../observable/FromObservable');\nvar isArray_1 = require('../util/isArray');\nvar OuterSubscriber_1 = require('../OuterSubscriber');\nvar subscribeToResult_1 = require('../util/subscribeToResult');\nfunction onErrorResumeNext() {\n    var nextSources = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        nextSources[_i - 0] = arguments[_i];\n    }\n    if (nextSources.length === 1 && isArray_1.isArray(nextSources[0])) {\n        nextSources = nextSources[0];\n    }\n    return this.lift(new OnErrorResumeNextOperator(nextSources));\n}\nexports.onErrorResumeNext = onErrorResumeNext;\n/* tslint:enable:max-line-length */\nfunction onErrorResumeNextStatic() {\n    var nextSources = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        nextSources[_i - 0] = arguments[_i];\n    }\n    var source = null;\n    if (nextSources.length === 1 && isArray_1.isArray(nextSources[0])) {\n        nextSources = nextSources[0];\n    }\n    source = nextSources.shift();\n    return new FromObservable_1.FromObservable(source, null).lift(new OnErrorResumeNextOperator(nextSources));\n}\nexports.onErrorResumeNextStatic = onErrorResumeNextStatic;\nvar OnErrorResumeNextOperator = (function () {\n    function OnErrorResumeNextOperator(nextSources) {\n        this.nextSources = nextSources;\n    }\n    OnErrorResumeNextOperator.prototype.call = function (subscriber, source) {\n        return source._subscribe(new OnErrorResumeNextSubscriber(subscriber, this.nextSources));\n    };\n    return OnErrorResumeNextOperator;\n}());\nvar OnErrorResumeNextSubscriber = (function (_super) {\n    __extends(OnErrorResumeNextSubscriber, _super);\n    function OnErrorResumeNextSubscriber(destination, nextSources) {\n        _super.call(this, destination);\n        this.destination = destination;\n        this.nextSources = nextSources;\n    }\n    OnErrorResumeNextSubscriber.prototype.notifyError = function (error, innerSub) {\n        this.subscribeToNextSource();\n    };\n    OnErrorResumeNextSubscriber.prototype.notifyComplete = function (innerSub) {\n        this.subscribeToNextSource();\n    };\n    OnErrorResumeNextSubscriber.prototype._error = function (err) {\n        this.subscribeToNextSource();\n    };\n    OnErrorResumeNextSubscriber.prototype._complete = function () {\n        this.subscribeToNextSource();\n    };\n    OnErrorResumeNextSubscriber.prototype.subscribeToNextSource = function () {\n        var next = this.nextSources.shift();\n        if (next) {\n            this.add(subscribeToResult_1.subscribeToResult(this, next));\n        }\n        else {\n            this.destination.complete();\n        }\n    };\n    return OnErrorResumeNextSubscriber;\n}(OuterSubscriber_1.OuterSubscriber));\n\n},{\"../OuterSubscriber\":7,\"../observable/FromObservable\":155,\"../util/isArray\":331,\"../util/subscribeToResult\":341}],250:[function(require,module,exports){\n\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Subscriber_1 = require('../Subscriber');\n/**\n * Groups pairs of consecutive emissions together and emits them as an array of\n * two values.\n *\n * <span class=\"informal\">Puts the current value and previous value together as\n * an array, and emits that.</span>\n *\n * <img src=\"./img/pairwise.png\" width=\"100%\">\n *\n * The Nth emission from the source Observable will cause the output Observable\n * to emit an array [(N-1)th, Nth] of the previous and the current value, as a\n * pair. For this reason, `pairwise` emits on the second and subsequent\n * emissions from the source Observable, but not on the first emission, because\n * there is no previous value in that case.\n *\n * @example <caption>On every click (starting from the second), emit the relative distance to the previous click</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var pairs = clicks.pairwise();\n * var distance = pairs.map(pair => {\n *   var x0 = pair[0].clientX;\n *   var y0 = pair[0].clientY;\n *   var x1 = pair[1].clientX;\n *   var y1 = pair[1].clientY;\n *   return Math.sqrt(Math.pow(x0 - x1, 2) + Math.pow(y0 - y1, 2));\n * });\n * distance.subscribe(x => console.log(x));\n *\n * @see {@link buffer}\n * @see {@link bufferCount}\n *\n * @return {Observable<Array<T>>} An Observable of pairs (as arrays) of\n * consecutive values from the source Observable.\n * @method pairwise\n * @owner Observable\n */\nfunction pairwise() {\n    return this.lift(new PairwiseOperator());\n}\nexports.pairwise = pairwise;\nvar PairwiseOperator = (function () {\n    function PairwiseOperator() {\n    }\n    PairwiseOperator.prototype.call = function (subscriber, source) {\n        return source._subscribe(new PairwiseSubscriber(subscriber));\n    };\n    return PairwiseOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar PairwiseSubscriber = (function (_super) {\n    __extends(PairwiseSubscriber, _super);\n    function PairwiseSubscriber(destination) {\n        _super.call(this, destination);\n        this.hasPrev = false;\n    }\n    PairwiseSubscriber.prototype._next = function (value) {\n        if (this.hasPrev) {\n            this.destination.next([this.prev, value]);\n        }\n        else {\n            this.hasPrev = true;\n        }\n        this.prev = value;\n    };\n    return PairwiseSubscriber;\n}(Subscriber_1.Subscriber));\n\n},{\"../Subscriber\":13}],251:[function(require,module,exports){\n\"use strict\";\nvar not_1 = require('../util/not');\nvar filter_1 = require('./filter');\n/**\n * Splits the source Observable into two, one with values that satisfy a\n * predicate, and another with values that don't satisfy the predicate.\n *\n * <span class=\"informal\">It's like {@link filter}, but returns two Observables:\n * one like the output of {@link filter}, and the other with values that did not\n * pass the condition.</span>\n *\n * <img src=\"./img/partition.png\" width=\"100%\">\n *\n * `partition` outputs an array with two Observables that partition the values\n * from the source Observable through the given `predicate` function. The first\n * Observable in that array emits source values for which the predicate argument\n * returns true. The second Observable emits source values for which the\n * predicate returns false. The first behaves like {@link filter} and the second\n * behaves like {@link filter} with the predicate negated.\n *\n * @example <caption>Partition click events into those on DIV elements and those elsewhere</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var parts = clicks.partition(ev => ev.target.tagName === 'DIV');\n * var clicksOnDivs = parts[0];\n * var clicksElsewhere = parts[1];\n * clicksOnDivs.subscribe(x => console.log('DIV clicked: ', x));\n * clicksElsewhere.subscribe(x => console.log('Other clicked: ', x));\n *\n * @see {@link filter}\n *\n * @param {function(value: T, index: number): boolean} predicate A function that\n * evaluates each value emitted by the source Observable. If it returns `true`,\n * the value is emitted on the first Observable in the returned array, if\n * `false` the value is emitted on the second Observable in the array. The\n * `index` parameter is the number `i` for the i-th source emission that has\n * happened since the subscription, starting from the number `0`.\n * @param {any} [thisArg] An optional argument to determine the value of `this`\n * in the `predicate` function.\n * @return {[Observable<T>, Observable<T>]} An array with two Observables: one\n * with values that passed the predicate, and another with values that did not\n * pass the predicate.\n * @method partition\n * @owner Observable\n */\nfunction partition(predicate, thisArg) {\n    return [\n        filter_1.filter.call(this, predicate),\n        filter_1.filter.call(this, not_1.not(predicate, thisArg))\n    ];\n}\nexports.partition = partition;\n\n},{\"../util/not\":339,\"./filter\":227}],252:[function(require,module,exports){\n\"use strict\";\nvar map_1 = require('./map');\n/**\n * Maps each source value (an object) to its specified nested property.\n *\n * <span class=\"informal\">Like {@link map}, but meant only for picking one of\n * the nested properties of every emitted object.</span>\n *\n * <img src=\"./img/pluck.png\" width=\"100%\">\n *\n * Given a list of strings describing a path to an object property, retrieves\n * the value of a specified nested property from all values in the source\n * Observable. If a property can't be resolved, it will return `undefined` for\n * that value.\n *\n * @example <caption>Map every every click to the tagName of the clicked target element</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var tagNames = clicks.pluck('target', 'tagName');\n * tagNames.subscribe(x => console.log(x));\n *\n * @see {@link map}\n *\n * @param {...string} properties The nested properties to pluck from each source\n * value (an object).\n * @return {Observable} Returns a new Observable of property values from the\n * source values.\n * @method pluck\n * @owner Observable\n */\nfunction pluck() {\n    var properties = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        properties[_i - 0] = arguments[_i];\n    }\n    var length = properties.length;\n    if (length === 0) {\n        throw new Error('list of properties cannot be empty.');\n    }\n    return map_1.map.call(this, plucker(properties, length));\n}\nexports.pluck = pluck;\nfunction plucker(props, length) {\n    var mapper = function (x) {\n        var currentProp = x;\n        for (var i = 0; i < length; i++) {\n            var p = currentProp[props[i]];\n            if (typeof p !== 'undefined') {\n                currentProp = p;\n            }\n            else {\n                return undefined;\n            }\n        }\n        return currentProp;\n    };\n    return mapper;\n}\n\n},{\"./map\":237}],253:[function(require,module,exports){\n\"use strict\";\nvar Subject_1 = require('../Subject');\nvar multicast_1 = require('./multicast');\n/**\n * Returns a ConnectableObservable, which is a variety of Observable that waits until its connect method is called\n * before it begins emitting items to those Observers that have subscribed to it.\n *\n * <img src=\"./img/publish.png\" width=\"100%\">\n *\n * @param {Function} Optional selector function which can use the multicasted source sequence as many times as needed,\n * without causing multiple subscriptions to the source sequence.\n * Subscribers to the given source will receive all notifications of the source from the time of the subscription on.\n * @return a ConnectableObservable that upon connection causes the source Observable to emit items to its Observers.\n * @method publish\n * @owner Observable\n */\nfunction publish(selector) {\n    return selector ? multicast_1.multicast.call(this, function () { return new Subject_1.Subject(); }, selector) :\n        multicast_1.multicast.call(this, new Subject_1.Subject());\n}\nexports.publish = publish;\n\n},{\"../Subject\":11,\"./multicast\":247}],254:[function(require,module,exports){\n\"use strict\";\nvar BehaviorSubject_1 = require('../BehaviorSubject');\nvar multicast_1 = require('./multicast');\n/**\n * @param value\n * @return {ConnectableObservable<T>}\n * @method publishBehavior\n * @owner Observable\n */\nfunction publishBehavior(value) {\n    return multicast_1.multicast.call(this, new BehaviorSubject_1.BehaviorSubject(value));\n}\nexports.publishBehavior = publishBehavior;\n\n},{\"../BehaviorSubject\":2,\"./multicast\":247}],255:[function(require,module,exports){\n\"use strict\";\nvar AsyncSubject_1 = require('../AsyncSubject');\nvar multicast_1 = require('./multicast');\n/**\n * @return {ConnectableObservable<T>}\n * @method publishLast\n * @owner Observable\n */\nfunction publishLast() {\n    return multicast_1.multicast.call(this, new AsyncSubject_1.AsyncSubject());\n}\nexports.publishLast = publishLast;\n\n},{\"../AsyncSubject\":1,\"./multicast\":247}],256:[function(require,module,exports){\n\"use strict\";\nvar ReplaySubject_1 = require('../ReplaySubject');\nvar multicast_1 = require('./multicast');\n/**\n * @param bufferSize\n * @param windowTime\n * @param scheduler\n * @return {ConnectableObservable<T>}\n * @method publishReplay\n * @owner Observable\n */\nfunction publishReplay(bufferSize, windowTime, scheduler) {\n    if (bufferSize === void 0) { bufferSize = Number.POSITIVE_INFINITY; }\n    if (windowTime === void 0) { windowTime = Number.POSITIVE_INFINITY; }\n    return multicast_1.multicast.call(this, new ReplaySubject_1.ReplaySubject(bufferSize, windowTime, scheduler));\n}\nexports.publishReplay = publishReplay;\n\n},{\"../ReplaySubject\":8,\"./multicast\":247}],257:[function(require,module,exports){\n\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar isArray_1 = require('../util/isArray');\nvar ArrayObservable_1 = require('../observable/ArrayObservable');\nvar OuterSubscriber_1 = require('../OuterSubscriber');\nvar subscribeToResult_1 = require('../util/subscribeToResult');\n/**\n * Returns an Observable that mirrors the first source Observable to emit an item\n * from the combination of this Observable and supplied Observables\n * @param {...Observables} ...observables sources used to race for which Observable emits first.\n * @return {Observable} an Observable that mirrors the output of the first Observable to emit an item.\n * @method race\n * @owner Observable\n */\nfunction race() {\n    var observables = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        observables[_i - 0] = arguments[_i];\n    }\n    // if the only argument is an array, it was most likely called with\n    // `pair([obs1, obs2, ...])`\n    if (observables.length === 1 && isArray_1.isArray(observables[0])) {\n        observables = observables[0];\n    }\n    observables.unshift(this);\n    return raceStatic.apply(this, observables);\n}\nexports.race = race;\nfunction raceStatic() {\n    var observables = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        observables[_i - 0] = arguments[_i];\n    }\n    // if the only argument is an array, it was most likely called with\n    // `pair([obs1, obs2, ...])`\n    if (observables.length === 1) {\n        if (isArray_1.isArray(observables[0])) {\n            observables = observables[0];\n        }\n        else {\n            return observables[0];\n        }\n    }\n    return new ArrayObservable_1.ArrayObservable(observables).lift(new RaceOperator());\n}\nexports.raceStatic = raceStatic;\nvar RaceOperator = (function () {\n    function RaceOperator() {\n    }\n    RaceOperator.prototype.call = function (subscriber, source) {\n        return source._subscribe(new RaceSubscriber(subscriber));\n    };\n    return RaceOperator;\n}());\nexports.RaceOperator = RaceOperator;\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar RaceSubscriber = (function (_super) {\n    __extends(RaceSubscriber, _super);\n    function RaceSubscriber(destination) {\n        _super.call(this, destination);\n        this.hasFirst = false;\n        this.observables = [];\n        this.subscriptions = [];\n    }\n    RaceSubscriber.prototype._next = function (observable) {\n        this.observables.push(observable);\n    };\n    RaceSubscriber.prototype._complete = function () {\n        var observables = this.observables;\n        var len = observables.length;\n        if (len === 0) {\n            this.destination.complete();\n        }\n        else {\n            for (var i = 0; i < len; i++) {\n                var observable = observables[i];\n                var subscription = subscribeToResult_1.subscribeToResult(this, observable, observable, i);\n                if (this.subscriptions) {\n                    this.subscriptions.push(subscription);\n                    this.add(subscription);\n                }\n            }\n            this.observables = null;\n        }\n    };\n    RaceSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n        if (!this.hasFirst) {\n            this.hasFirst = true;\n            for (var i = 0; i < this.subscriptions.length; i++) {\n                if (i !== outerIndex) {\n                    var subscription = this.subscriptions[i];\n                    subscription.unsubscribe();\n                    this.remove(subscription);\n                }\n            }\n            this.subscriptions = null;\n        }\n        this.destination.next(innerValue);\n    };\n    return RaceSubscriber;\n}(OuterSubscriber_1.OuterSubscriber));\nexports.RaceSubscriber = RaceSubscriber;\n\n},{\"../OuterSubscriber\":7,\"../observable/ArrayObservable\":145,\"../util/isArray\":331,\"../util/subscribeToResult\":341}],258:[function(require,module,exports){\n\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Subscriber_1 = require('../Subscriber');\n/**\n * Applies an accumulator function over the source Observable, and returns the\n * accumulated result when the source completes, given an optional seed value.\n *\n * <span class=\"informal\">Combines together all values emitted on the source,\n * using an accumulator function that knows how to join a new source value into\n * the accumulation from the past.</span>\n *\n * <img src=\"./img/reduce.png\" width=\"100%\">\n *\n * Like\n * [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce),\n * `reduce` applies an `accumulator` function against an accumulation and each\n * value of the source Observable (from the past) to reduce it to a single\n * value, emitted on the output Observable. Note that `reduce` will only emit\n * one value, only when the source Observable completes. It is equivalent to\n * applying operator {@link scan} followed by operator {@link last}.\n *\n * Returns an Observable that applies a specified `accumulator` function to each\n * item emitted by the source Observable. If a `seed` value is specified, then\n * that value will be used as the initial value for the accumulator. If no seed\n * value is specified, the first item of the source is used as the seed.\n *\n * @example <caption>Count the number of click events that happened in 5 seconds</caption>\n * var clicksInFiveSeconds = Rx.Observable.fromEvent(document, 'click')\n *   .takeUntil(Rx.Observable.interval(5000));\n * var ones = clicksInFiveSeconds.mapTo(1);\n * var seed = 0;\n * var count = ones.reduce((acc, one) => acc + one, seed);\n * count.subscribe(x => console.log(x));\n *\n * @see {@link count}\n * @see {@link expand}\n * @see {@link mergeScan}\n * @see {@link scan}\n *\n * @param {function(acc: R, value: T): R} accumulator The accumulator function\n * called on each source value.\n * @param {R} [seed] The initial accumulation value.\n * @return {Observable<R>} An observable of the accumulated values.\n * @return {Observable<R>} An Observable that emits a single value that is the\n * result of accumulating the values emitted by the source Observable.\n * @method reduce\n * @owner Observable\n */\nfunction reduce(accumulator, seed) {\n    return this.lift(new ReduceOperator(accumulator, seed));\n}\nexports.reduce = reduce;\nvar ReduceOperator = (function () {\n    function ReduceOperator(accumulator, seed) {\n        this.accumulator = accumulator;\n        this.seed = seed;\n    }\n    ReduceOperator.prototype.call = function (subscriber, source) {\n        return source._subscribe(new ReduceSubscriber(subscriber, this.accumulator, this.seed));\n    };\n    return ReduceOperator;\n}());\nexports.ReduceOperator = ReduceOperator;\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar ReduceSubscriber = (function (_super) {\n    __extends(ReduceSubscriber, _super);\n    function ReduceSubscriber(destination, accumulator, seed) {\n        _super.call(this, destination);\n        this.accumulator = accumulator;\n        this.hasValue = false;\n        this.acc = seed;\n        this.accumulator = accumulator;\n        this.hasSeed = typeof seed !== 'undefined';\n    }\n    ReduceSubscriber.prototype._next = function (value) {\n        if (this.hasValue || (this.hasValue = this.hasSeed)) {\n            this._tryReduce(value);\n        }\n        else {\n            this.acc = value;\n            this.hasValue = true;\n        }\n    };\n    ReduceSubscriber.prototype._tryReduce = function (value) {\n        var result;\n        try {\n            result = this.accumulator(this.acc, value);\n        }\n        catch (err) {\n            this.destination.error(err);\n            return;\n        }\n        this.acc = result;\n    };\n    ReduceSubscriber.prototype._complete = function () {\n        if (this.hasValue || this.hasSeed) {\n            this.destination.next(this.acc);\n        }\n        this.destination.complete();\n    };\n    return ReduceSubscriber;\n}(Subscriber_1.Subscriber));\nexports.ReduceSubscriber = ReduceSubscriber;\n\n},{\"../Subscriber\":13}],259:[function(require,module,exports){\n\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Subscriber_1 = require('../Subscriber');\nvar EmptyObservable_1 = require('../observable/EmptyObservable');\n/**\n * Returns an Observable that repeats the stream of items emitted by the source Observable at most count times,\n * on a particular Scheduler.\n *\n * <img src=\"./img/repeat.png\" width=\"100%\">\n *\n * @param {Scheduler} [scheduler] the Scheduler to emit the items on.\n * @param {number} [count] the number of times the source Observable items are repeated, a count of 0 will yield\n * an empty Observable.\n * @return {Observable} an Observable that repeats the stream of items emitted by the source Observable at most\n * count times.\n * @method repeat\n * @owner Observable\n */\nfunction repeat(count) {\n    if (count === void 0) { count = -1; }\n    if (count === 0) {\n        return new EmptyObservable_1.EmptyObservable();\n    }\n    else if (count < 0) {\n        return this.lift(new RepeatOperator(-1, this));\n    }\n    else {\n        return this.lift(new RepeatOperator(count - 1, this));\n    }\n}\nexports.repeat = repeat;\nvar RepeatOperator = (function () {\n    function RepeatOperator(count, source) {\n        this.count = count;\n        this.source = source;\n    }\n    RepeatOperator.prototype.call = function (subscriber, source) {\n        return source._subscribe(new RepeatSubscriber(subscriber, this.count, this.source));\n    };\n    return RepeatOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar RepeatSubscriber = (function (_super) {\n    __extends(RepeatSubscriber, _super);\n    function RepeatSubscriber(destination, count, source) {\n        _super.call(this, destination);\n        this.count = count;\n        this.source = source;\n    }\n    RepeatSubscriber.prototype.complete = function () {\n        if (!this.isStopped) {\n            var _a = this, source = _a.source, count = _a.count;\n            if (count === 0) {\n                return _super.prototype.complete.call(this);\n            }\n            else if (count > -1) {\n                this.count = count - 1;\n            }\n            this.unsubscribe();\n            this.isStopped = false;\n            this.closed = false;\n            source.subscribe(this);\n        }\n    };\n    return RepeatSubscriber;\n}(Subscriber_1.Subscriber));\n\n},{\"../Subscriber\":13,\"../observable/EmptyObservable\":150}],260:[function(require,module,exports){\n\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Subject_1 = require('../Subject');\nvar tryCatch_1 = require('../util/tryCatch');\nvar errorObject_1 = require('../util/errorObject');\nvar OuterSubscriber_1 = require('../OuterSubscriber');\nvar subscribeToResult_1 = require('../util/subscribeToResult');\n/**\n * Returns an Observable that emits the same values as the source observable with the exception of a `complete`.\n * A `complete` will cause the emission of the Throwable that cause the complete to the Observable returned from\n * notificationHandler. If that Observable calls onComplete or `complete` then retry will call `complete` or `error`\n * on the child subscription. Otherwise, this Observable will resubscribe to the source observable, on a particular\n * Scheduler.\n *\n * <img src=\"./img/repeatWhen.png\" width=\"100%\">\n *\n * @param {notificationHandler} receives an Observable of notifications with which a user can `complete` or `error`,\n * aborting the retry.\n * @param {scheduler} the Scheduler on which to subscribe to the source Observable.\n * @return {Observable} the source Observable modified with retry logic.\n * @method repeatWhen\n * @owner Observable\n */\nfunction repeatWhen(notifier) {\n    return this.lift(new RepeatWhenOperator(notifier, this));\n}\nexports.repeatWhen = repeatWhen;\nvar RepeatWhenOperator = (function () {\n    function RepeatWhenOperator(notifier, source) {\n        this.notifier = notifier;\n        this.source = source;\n    }\n    RepeatWhenOperator.prototype.call = function (subscriber, source) {\n        return source._subscribe(new RepeatWhenSubscriber(subscriber, this.notifier, this.source));\n    };\n    return RepeatWhenOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar RepeatWhenSubscriber = (function (_super) {\n    __extends(RepeatWhenSubscriber, _super);\n    function RepeatWhenSubscriber(destination, notifier, source) {\n        _super.call(this, destination);\n        this.notifier = notifier;\n        this.source = source;\n    }\n    RepeatWhenSubscriber.prototype.complete = function () {\n        if (!this.isStopped) {\n            var notifications = this.notifications;\n            var retries = this.retries;\n            var retriesSubscription = this.retriesSubscription;\n            if (!retries) {\n                notifications = new Subject_1.Subject();\n                retries = tryCatch_1.tryCatch(this.notifier)(notifications);\n                if (retries === errorObject_1.errorObject) {\n                    return _super.prototype.complete.call(this);\n                }\n                retriesSubscription = subscribeToResult_1.subscribeToResult(this, retries);\n            }\n            else {\n                this.notifications = null;\n                this.retriesSubscription = null;\n            }\n            this.unsubscribe();\n            this.closed = false;\n            this.notifications = notifications;\n            this.retries = retries;\n            this.retriesSubscription = retriesSubscription;\n            notifications.next();\n        }\n    };\n    RepeatWhenSubscriber.prototype._unsubscribe = function () {\n        var _a = this, notifications = _a.notifications, retriesSubscription = _a.retriesSubscription;\n        if (notifications) {\n            notifications.unsubscribe();\n            this.notifications = null;\n        }\n        if (retriesSubscription) {\n            retriesSubscription.unsubscribe();\n            this.retriesSubscription = null;\n        }\n        this.retries = null;\n    };\n    RepeatWhenSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n        var _a = this, notifications = _a.notifications, retries = _a.retries, retriesSubscription = _a.retriesSubscription;\n        this.notifications = null;\n        this.retries = null;\n        this.retriesSubscription = null;\n        this.unsubscribe();\n        this.isStopped = false;\n        this.closed = false;\n        this.notifications = notifications;\n        this.retries = retries;\n        this.retriesSubscription = retriesSubscription;\n        this.source.subscribe(this);\n    };\n    return RepeatWhenSubscriber;\n}(OuterSubscriber_1.OuterSubscriber));\n\n},{\"../OuterSubscriber\":7,\"../Subject\":11,\"../util/errorObject\":330,\"../util/subscribeToResult\":341,\"../util/tryCatch\":343}],261:[function(require,module,exports){\n\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Subscriber_1 = require('../Subscriber');\n/**\n * Returns an Observable that mirrors the source Observable, resubscribing to it if it calls `error` and the\n * predicate returns true for that specific exception and retry count.\n * If the source Observable calls `error`, this method will resubscribe to the source Observable for a maximum of\n * count resubscriptions (given as a number parameter) rather than propagating the `error` call.\n *\n * <img src=\"./img/retry.png\" width=\"100%\">\n *\n * Any and all items emitted by the source Observable will be emitted by the resulting Observable, even those emitted\n * during failed subscriptions. For example, if an Observable fails at first but emits [1, 2] then succeeds the second\n * time and emits: [1, 2, 3, 4, 5] then the complete stream of emissions and notifications\n * would be: [1, 2, 1, 2, 3, 4, 5, `complete`].\n * @param {number} number of retry attempts before failing.\n * @return {Observable} the source Observable modified with the retry logic.\n * @method retry\n * @owner Observable\n */\nfunction retry(count) {\n    if (count === void 0) { count = -1; }\n    return this.lift(new RetryOperator(count, this));\n}\nexports.retry = retry;\nvar RetryOperator = (function () {\n    function RetryOperator(count, source) {\n        this.count = count;\n        this.source = source;\n    }\n    RetryOperator.prototype.call = function (subscriber, source) {\n        return source._subscribe(new RetrySubscriber(subscriber, this.count, this.source));\n    };\n    return RetryOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar RetrySubscriber = (function (_super) {\n    __extends(RetrySubscriber, _super);\n    function RetrySubscriber(destination, count, source) {\n        _super.call(this, destination);\n        this.count = count;\n        this.source = source;\n    }\n    RetrySubscriber.prototype.error = function (err) {\n        if (!this.isStopped) {\n            var _a = this, source = _a.source, count = _a.count;\n            if (count === 0) {\n                return _super.prototype.error.call(this, err);\n            }\n            else if (count > -1) {\n                this.count = count - 1;\n            }\n            this.unsubscribe();\n            this.isStopped = false;\n            this.closed = false;\n            source.subscribe(this);\n        }\n    };\n    return RetrySubscriber;\n}(Subscriber_1.Subscriber));\n\n},{\"../Subscriber\":13}],262:[function(require,module,exports){\n\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Subject_1 = require('../Subject');\nvar tryCatch_1 = require('../util/tryCatch');\nvar errorObject_1 = require('../util/errorObject');\nvar OuterSubscriber_1 = require('../OuterSubscriber');\nvar subscribeToResult_1 = require('../util/subscribeToResult');\n/**\n * Returns an Observable that emits the same values as the source observable with the exception of an `error`.\n * An `error` will cause the emission of the Throwable that cause the error to the Observable returned from\n * notificationHandler. If that Observable calls onComplete or `error` then retry will call `complete` or `error`\n * on the child subscription. Otherwise, this Observable will resubscribe to the source observable, on a particular\n * Scheduler.\n *\n * <img src=\"./img/retryWhen.png\" width=\"100%\">\n *\n * @param {notificationHandler} receives an Observable of notifications with which a user can `complete` or `error`,\n * aborting the retry.\n * @param {scheduler} the Scheduler on which to subscribe to the source Observable.\n * @return {Observable} the source Observable modified with retry logic.\n * @method retryWhen\n * @owner Observable\n */\nfunction retryWhen(notifier) {\n    return this.lift(new RetryWhenOperator(notifier, this));\n}\nexports.retryWhen = retryWhen;\nvar RetryWhenOperator = (function () {\n    function RetryWhenOperator(notifier, source) {\n        this.notifier = notifier;\n        this.source = source;\n    }\n    RetryWhenOperator.prototype.call = function (subscriber, source) {\n        return source._subscribe(new RetryWhenSubscriber(subscriber, this.notifier, this.source));\n    };\n    return RetryWhenOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar RetryWhenSubscriber = (function (_super) {\n    __extends(RetryWhenSubscriber, _super);\n    function RetryWhenSubscriber(destination, notifier, source) {\n        _super.call(this, destination);\n        this.notifier = notifier;\n        this.source = source;\n    }\n    RetryWhenSubscriber.prototype.error = function (err) {\n        if (!this.isStopped) {\n            var errors = this.errors;\n            var retries = this.retries;\n            var retriesSubscription = this.retriesSubscription;\n            if (!retries) {\n                errors = new Subject_1.Subject();\n                retries = tryCatch_1.tryCatch(this.notifier)(errors);\n                if (retries === errorObject_1.errorObject) {\n                    return _super.prototype.error.call(this, errorObject_1.errorObject.e);\n                }\n                retriesSubscription = subscribeToResult_1.subscribeToResult(this, retries);\n            }\n            else {\n                this.errors = null;\n                this.retriesSubscription = null;\n            }\n            this.unsubscribe();\n            this.closed = false;\n            this.errors = errors;\n            this.retries = retries;\n            this.retriesSubscription = retriesSubscription;\n            errors.next(err);\n        }\n    };\n    RetryWhenSubscriber.prototype._unsubscribe = function () {\n        var _a = this, errors = _a.errors, retriesSubscription = _a.retriesSubscription;\n        if (errors) {\n            errors.unsubscribe();\n            this.errors = null;\n        }\n        if (retriesSubscription) {\n            retriesSubscription.unsubscribe();\n            this.retriesSubscription = null;\n        }\n        this.retries = null;\n    };\n    RetryWhenSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n        var _a = this, errors = _a.errors, retries = _a.retries, retriesSubscription = _a.retriesSubscription;\n        this.errors = null;\n        this.retries = null;\n        this.retriesSubscription = null;\n        this.unsubscribe();\n        this.isStopped = false;\n        this.closed = false;\n        this.errors = errors;\n        this.retries = retries;\n        this.retriesSubscription = retriesSubscription;\n        this.source.subscribe(this);\n    };\n    return RetryWhenSubscriber;\n}(OuterSubscriber_1.OuterSubscriber));\n\n},{\"../OuterSubscriber\":7,\"../Subject\":11,\"../util/errorObject\":330,\"../util/subscribeToResult\":341,\"../util/tryCatch\":343}],263:[function(require,module,exports){\n\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar OuterSubscriber_1 = require('../OuterSubscriber');\nvar subscribeToResult_1 = require('../util/subscribeToResult');\n/**\n * Emits the most recently emitted value from the source Observable whenever\n * another Observable, the `notifier`, emits.\n *\n * <span class=\"informal\">It's like {@link sampleTime}, but samples whenever\n * the `notifier` Observable emits something.</span>\n *\n * <img src=\"./img/sample.png\" width=\"100%\">\n *\n * Whenever the `notifier` Observable emits a value or completes, `sample`\n * looks at the source Observable and emits whichever value it has most recently\n * emitted since the previous sampling, unless the source has not emitted\n * anything since the previous sampling. The `notifier` is subscribed to as soon\n * as the output Observable is subscribed.\n *\n * @example <caption>On every click, sample the most recent \"seconds\" timer</caption>\n * var seconds = Rx.Observable.interval(1000);\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = seconds.sample(clicks);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link audit}\n * @see {@link debounce}\n * @see {@link sampleTime}\n * @see {@link throttle}\n *\n * @param {Observable<any>} notifier The Observable to use for sampling the\n * source Observable.\n * @return {Observable<T>} An Observable that emits the results of sampling the\n * values emitted by the source Observable whenever the notifier Observable\n * emits value or completes.\n * @method sample\n * @owner Observable\n */\nfunction sample(notifier) {\n    return this.lift(new SampleOperator(notifier));\n}\nexports.sample = sample;\nvar SampleOperator = (function () {\n    function SampleOperator(notifier) {\n        this.notifier = notifier;\n    }\n    SampleOperator.prototype.call = function (subscriber, source) {\n        return source._subscribe(new SampleSubscriber(subscriber, this.notifier));\n    };\n    return SampleOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar SampleSubscriber = (function (_super) {\n    __extends(SampleSubscriber, _super);\n    function SampleSubscriber(destination, notifier) {\n        _super.call(this, destination);\n        this.hasValue = false;\n        this.add(subscribeToResult_1.subscribeToResult(this, notifier));\n    }\n    SampleSubscriber.prototype._next = function (value) {\n        this.value = value;\n        this.hasValue = true;\n    };\n    SampleSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n        this.emitValue();\n    };\n    SampleSubscriber.prototype.notifyComplete = function () {\n        this.emitValue();\n    };\n    SampleSubscriber.prototype.emitValue = function () {\n        if (this.hasValue) {\n            this.hasValue = false;\n            this.destination.next(this.value);\n        }\n    };\n    return SampleSubscriber;\n}(OuterSubscriber_1.OuterSubscriber));\n\n},{\"../OuterSubscriber\":7,\"../util/subscribeToResult\":341}],264:[function(require,module,exports){\n\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Subscriber_1 = require('../Subscriber');\nvar async_1 = require('../scheduler/async');\n/**\n * Emits the most recently emitted value from the source Observable within\n * periodic time intervals.\n *\n * <span class=\"informal\">Samples the source Observable at periodic time\n * intervals, emitting what it samples.</span>\n *\n * <img src=\"./img/sampleTime.png\" width=\"100%\">\n *\n * `sampleTime` periodically looks at the source Observable and emits whichever\n * value it has most recently emitted since the previous sampling, unless the\n * source has not emitted anything since the previous sampling. The sampling\n * happens periodically in time every `period` milliseconds (or the time unit\n * defined by the optional `scheduler` argument). The sampling starts as soon as\n * the output Observable is subscribed.\n *\n * @example <caption>Every second, emit the most recent click at most once</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.sampleTime(1000);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link auditTime}\n * @see {@link debounceTime}\n * @see {@link delay}\n * @see {@link sample}\n * @see {@link throttleTime}\n *\n * @param {number} period The sampling period expressed in milliseconds or the\n * time unit determined internally by the optional `scheduler`.\n * @param {Scheduler} [scheduler=async] The {@link Scheduler} to use for\n * managing the timers that handle the sampling.\n * @return {Observable<T>} An Observable that emits the results of sampling the\n * values emitted by the source Observable at the specified time interval.\n * @method sampleTime\n * @owner Observable\n */\nfunction sampleTime(period, scheduler) {\n    if (scheduler === void 0) { scheduler = async_1.async; }\n    return this.lift(new SampleTimeOperator(period, scheduler));\n}\nexports.sampleTime = sampleTime;\nvar SampleTimeOperator = (function () {\n    function SampleTimeOperator(period, scheduler) {\n        this.period = period;\n        this.scheduler = scheduler;\n    }\n    SampleTimeOperator.prototype.call = function (subscriber, source) {\n        return source._subscribe(new SampleTimeSubscriber(subscriber, this.period, this.scheduler));\n    };\n    return SampleTimeOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar SampleTimeSubscriber = (function (_super) {\n    __extends(SampleTimeSubscriber, _super);\n    function SampleTimeSubscriber(destination, period, scheduler) {\n        _super.call(this, destination);\n        this.period = period;\n        this.scheduler = scheduler;\n        this.hasValue = false;\n        this.add(scheduler.schedule(dispatchNotification, period, { subscriber: this, period: period }));\n    }\n    SampleTimeSubscriber.prototype._next = function (value) {\n        this.lastValue = value;\n        this.hasValue = true;\n    };\n    SampleTimeSubscriber.prototype.notifyNext = function () {\n        if (this.hasValue) {\n            this.hasValue = false;\n            this.destination.next(this.lastValue);\n        }\n    };\n    return SampleTimeSubscriber;\n}(Subscriber_1.Subscriber));\nfunction dispatchNotification(state) {\n    var subscriber = state.subscriber, period = state.period;\n    subscriber.notifyNext();\n    this.schedule(state, period);\n}\n\n},{\"../Subscriber\":13,\"../scheduler/async\":309}],265:[function(require,module,exports){\n\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Subscriber_1 = require('../Subscriber');\n/**\n * Applies an accumulator function over the source Observable, and returns each\n * intermediate result, with an optional seed value.\n *\n * <span class=\"informal\">It's like {@link reduce}, but emits the current\n * accumulation whenever the source emits a value.</span>\n *\n * <img src=\"./img/scan.png\" width=\"100%\">\n *\n * Combines together all values emitted on the source, using an accumulator\n * function that knows how to join a new source value into the accumulation from\n * the past. Is similar to {@link reduce}, but emits the intermediate\n * accumulations.\n *\n * Returns an Observable that applies a specified `accumulator` function to each\n * item emitted by the source Observable. If a `seed` value is specified, then\n * that value will be used as the initial value for the accumulator. If no seed\n * value is specified, the first item of the source is used as the seed.\n *\n * @example <caption>Count the number of click events</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var ones = clicks.mapTo(1);\n * var seed = 0;\n * var count = ones.scan((acc, one) => acc + one, seed);\n * count.subscribe(x => console.log(x));\n *\n * @see {@link expand}\n * @see {@link mergeScan}\n * @see {@link reduce}\n *\n * @param {function(acc: R, value: T, index: number): R} accumulator\n * The accumulator function called on each source value.\n * @param {T|R} [seed] The initial accumulation value.\n * @return {Observable<R>} An observable of the accumulated values.\n * @method scan\n * @owner Observable\n */\nfunction scan(accumulator, seed) {\n    return this.lift(new ScanOperator(accumulator, seed));\n}\nexports.scan = scan;\nvar ScanOperator = (function () {\n    function ScanOperator(accumulator, seed) {\n        this.accumulator = accumulator;\n        this.seed = seed;\n    }\n    ScanOperator.prototype.call = function (subscriber, source) {\n        return source._subscribe(new ScanSubscriber(subscriber, this.accumulator, this.seed));\n    };\n    return ScanOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar ScanSubscriber = (function (_super) {\n    __extends(ScanSubscriber, _super);\n    function ScanSubscriber(destination, accumulator, seed) {\n        _super.call(this, destination);\n        this.accumulator = accumulator;\n        this.index = 0;\n        this.accumulatorSet = false;\n        this.seed = seed;\n        this.accumulatorSet = typeof seed !== 'undefined';\n    }\n    Object.defineProperty(ScanSubscriber.prototype, \"seed\", {\n        get: function () {\n            return this._seed;\n        },\n        set: function (value) {\n            this.accumulatorSet = true;\n            this._seed = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    ScanSubscriber.prototype._next = function (value) {\n        if (!this.accumulatorSet) {\n            this.seed = value;\n            this.destination.next(value);\n        }\n        else {\n            return this._tryNext(value);\n        }\n    };\n    ScanSubscriber.prototype._tryNext = function (value) {\n        var index = this.index++;\n        var result;\n        try {\n            result = this.accumulator(this.seed, value, index);\n        }\n        catch (err) {\n            this.destination.error(err);\n        }\n        this.seed = result;\n        this.destination.next(result);\n    };\n    return ScanSubscriber;\n}(Subscriber_1.Subscriber));\n\n},{\"../Subscriber\":13}],266:[function(require,module,exports){\n\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Subscriber_1 = require('../Subscriber');\nvar tryCatch_1 = require('../util/tryCatch');\nvar errorObject_1 = require('../util/errorObject');\n/**\n * Compares all values of two observables in sequence using an optional comparor function\n * and returns an observable of a single boolean value representing whether or not the two sequences\n * are equal.\n *\n * <span class=\"informal\">Checks to see of all values emitted by both observables are equal, in order.</span>\n *\n * <img src=\"./img/sequenceEqual.png\" width=\"100%\">\n *\n * `sequenceEqual` subscribes to two observables and buffers incoming values from each observable. Whenever either\n * observable emits a value, the value is buffered and the buffers are shifted and compared from the bottom\n * up; If any value pair doesn't match, the returned observable will emit `false` and complete. If one of the\n * observables completes, the operator will wait for the other observable to complete; If the other\n * observable emits before completing, the returned observable will emit `false` and complete. If one observable never\n * completes or emits after the other complets, the returned observable will never complete.\n *\n * @example <caption>figure out if the Konami code matches</caption>\n * var code = Observable.from([\n *  \"ArrowUp\",\n *  \"ArrowUp\",\n *  \"ArrowDown\",\n *  \"ArrowDown\",\n *  \"ArrowLeft\",\n *  \"ArrowRight\",\n *  \"ArrowLeft\",\n *  \"ArrowRight\",\n *  \"KeyB\",\n *  \"KeyA\",\n *  \"Enter\" // no start key, clearly.\n * ]);\n *\n * var keys = Rx.Observable.fromEvent(document, 'keyup')\n *  .map(e => e.code);\n * var matches = keys.bufferCount(11, 1)\n *  .mergeMap(\n *    last11 =>\n *      Rx.Observable.from(last11)\n *        .sequenceEqual(code)\n *   );\n * matches.subscribe(matched => console.log('Successful cheat at Contra? ', matched));\n *\n * @see {@link combineLatest}\n * @see {@link zip}\n * @see {@link withLatestFrom}\n *\n * @param {Observable} compareTo the observable sequence to compare the source sequence to.\n * @param {function} [comparor] An optional function to compare each value pair\n * @return {Observable} An Observable of a single boolean value representing whether or not\n * the values emitted by both observables were equal in sequence\n * @method sequenceEqual\n * @owner Observable\n */\nfunction sequenceEqual(compareTo, comparor) {\n    return this.lift(new SequenceEqualOperator(compareTo, comparor));\n}\nexports.sequenceEqual = sequenceEqual;\nvar SequenceEqualOperator = (function () {\n    function SequenceEqualOperator(compareTo, comparor) {\n        this.compareTo = compareTo;\n        this.comparor = comparor;\n    }\n    SequenceEqualOperator.prototype.call = function (subscriber, source) {\n        return source._subscribe(new SequenceEqualSubscriber(subscriber, this.compareTo, this.comparor));\n    };\n    return SequenceEqualOperator;\n}());\nexports.SequenceEqualOperator = SequenceEqualOperator;\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar SequenceEqualSubscriber = (function (_super) {\n    __extends(SequenceEqualSubscriber, _super);\n    function SequenceEqualSubscriber(destination, compareTo, comparor) {\n        _super.call(this, destination);\n        this.compareTo = compareTo;\n        this.comparor = comparor;\n        this._a = [];\n        this._b = [];\n        this._oneComplete = false;\n        this.add(compareTo.subscribe(new SequenceEqualCompareToSubscriber(destination, this)));\n    }\n    SequenceEqualSubscriber.prototype._next = function (value) {\n        if (this._oneComplete && this._b.length === 0) {\n            this.emit(false);\n        }\n        else {\n            this._a.push(value);\n            this.checkValues();\n        }\n    };\n    SequenceEqualSubscriber.prototype._complete = function () {\n        if (this._oneComplete) {\n            this.emit(this._a.length === 0 && this._b.length === 0);\n        }\n        else {\n            this._oneComplete = true;\n        }\n    };\n    SequenceEqualSubscriber.prototype.checkValues = function () {\n        var _c = this, _a = _c._a, _b = _c._b, comparor = _c.comparor;\n        while (_a.length > 0 && _b.length > 0) {\n            var a = _a.shift();\n            var b = _b.shift();\n            var areEqual = false;\n            if (comparor) {\n                areEqual = tryCatch_1.tryCatch(comparor)(a, b);\n                if (areEqual === errorObject_1.errorObject) {\n                    this.destination.error(errorObject_1.errorObject.e);\n                }\n            }\n            else {\n                areEqual = a === b;\n            }\n            if (!areEqual) {\n                this.emit(false);\n            }\n        }\n    };\n    SequenceEqualSubscriber.prototype.emit = function (value) {\n        var destination = this.destination;\n        destination.next(value);\n        destination.complete();\n    };\n    SequenceEqualSubscriber.prototype.nextB = function (value) {\n        if (this._oneComplete && this._a.length === 0) {\n            this.emit(false);\n        }\n        else {\n            this._b.push(value);\n            this.checkValues();\n        }\n    };\n    return SequenceEqualSubscriber;\n}(Subscriber_1.Subscriber));\nexports.SequenceEqualSubscriber = SequenceEqualSubscriber;\nvar SequenceEqualCompareToSubscriber = (function (_super) {\n    __extends(SequenceEqualCompareToSubscriber, _super);\n    function SequenceEqualCompareToSubscriber(destination, parent) {\n        _super.call(this, destination);\n        this.parent = parent;\n    }\n    SequenceEqualCompareToSubscriber.prototype._next = function (value) {\n        this.parent.nextB(value);\n    };\n    SequenceEqualCompareToSubscriber.prototype._error = function (err) {\n        this.parent.error(err);\n    };\n    SequenceEqualCompareToSubscriber.prototype._complete = function () {\n        this.parent._complete();\n    };\n    return SequenceEqualCompareToSubscriber;\n}(Subscriber_1.Subscriber));\n\n},{\"../Subscriber\":13,\"../util/errorObject\":330,\"../util/tryCatch\":343}],267:[function(require,module,exports){\n\"use strict\";\nvar multicast_1 = require('./multicast');\nvar Subject_1 = require('../Subject');\nfunction shareSubjectFactory() {\n    return new Subject_1.Subject();\n}\n/**\n * Returns a new Observable that multicasts (shares) the original Observable. As long as there is at least one\n * Subscriber this Observable will be subscribed and emitting data. When all subscribers have unsubscribed it will\n * unsubscribe from the source Observable. Because the Observable is multicasting it makes the stream `hot`.\n * This is an alias for .publish().refCount().\n *\n * <img src=\"./img/share.png\" width=\"100%\">\n *\n * @return {Observable<T>} an Observable that upon connection causes the source Observable to emit items to its Observers\n * @method share\n * @owner Observable\n */\nfunction share() {\n    return multicast_1.multicast.call(this, shareSubjectFactory).refCount();\n}\nexports.share = share;\n;\n\n},{\"../Subject\":11,\"./multicast\":247}],268:[function(require,module,exports){\n\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Subscriber_1 = require('../Subscriber');\nvar EmptyError_1 = require('../util/EmptyError');\n/**\n * Returns an Observable that emits the single item emitted by the source Observable that matches a specified\n * predicate, if that Observable emits one such item. If the source Observable emits more than one such item or no\n * such items, notify of an IllegalArgumentException or NoSuchElementException respectively.\n *\n * <img src=\"./img/single.png\" width=\"100%\">\n *\n * @throws {EmptyError} Delivers an EmptyError to the Observer's `error`\n * callback if the Observable completes before any `next` notification was sent.\n * @param {Function} a predicate function to evaluate items emitted by the source Observable.\n * @return {Observable<T>} an Observable that emits the single item emitted by the source Observable that matches\n * the predicate.\n .\n * @method single\n * @owner Observable\n */\nfunction single(predicate) {\n    return this.lift(new SingleOperator(predicate, this));\n}\nexports.single = single;\nvar SingleOperator = (function () {\n    function SingleOperator(predicate, source) {\n        this.predicate = predicate;\n        this.source = source;\n    }\n    SingleOperator.prototype.call = function (subscriber, source) {\n        return source._subscribe(new SingleSubscriber(subscriber, this.predicate, this.source));\n    };\n    return SingleOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar SingleSubscriber = (function (_super) {\n    __extends(SingleSubscriber, _super);\n    function SingleSubscriber(destination, predicate, source) {\n        _super.call(this, destination);\n        this.predicate = predicate;\n        this.source = source;\n        this.seenValue = false;\n        this.index = 0;\n    }\n    SingleSubscriber.prototype.applySingleValue = function (value) {\n        if (this.seenValue) {\n            this.destination.error('Sequence contains more than one element');\n        }\n        else {\n            this.seenValue = true;\n            this.singleValue = value;\n        }\n    };\n    SingleSubscriber.prototype._next = function (value) {\n        var predicate = this.predicate;\n        this.index++;\n        if (predicate) {\n            this.tryNext(value);\n        }\n        else {\n            this.applySingleValue(value);\n        }\n    };\n    SingleSubscriber.prototype.tryNext = function (value) {\n        try {\n            var result = this.predicate(value, this.index, this.source);\n            if (result) {\n                this.applySingleValue(value);\n            }\n        }\n        catch (err) {\n            this.destination.error(err);\n        }\n    };\n    SingleSubscriber.prototype._complete = function () {\n        var destination = this.destination;\n        if (this.index > 0) {\n            destination.next(this.seenValue ? this.singleValue : undefined);\n            destination.complete();\n        }\n        else {\n            destination.error(new EmptyError_1.EmptyError);\n        }\n    };\n    return SingleSubscriber;\n}(Subscriber_1.Subscriber));\n\n},{\"../Subscriber\":13,\"../util/EmptyError\":321}],269:[function(require,module,exports){\n\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Subscriber_1 = require('../Subscriber');\n/**\n * Returns an Observable that skips `n` items emitted by an Observable.\n *\n * <img src=\"./img/skip.png\" width=\"100%\">\n *\n * @param {Number} the `n` of times, items emitted by source Observable should be skipped.\n * @return {Observable} an Observable that skips values emitted by the source Observable.\n *\n * @method skip\n * @owner Observable\n */\nfunction skip(total) {\n    return this.lift(new SkipOperator(total));\n}\nexports.skip = skip;\nvar SkipOperator = (function () {\n    function SkipOperator(total) {\n        this.total = total;\n    }\n    SkipOperator.prototype.call = function (subscriber, source) {\n        return source._subscribe(new SkipSubscriber(subscriber, this.total));\n    };\n    return SkipOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar SkipSubscriber = (function (_super) {\n    __extends(SkipSubscriber, _super);\n    function SkipSubscriber(destination, total) {\n        _super.call(this, destination);\n        this.total = total;\n        this.count = 0;\n    }\n    SkipSubscriber.prototype._next = function (x) {\n        if (++this.count > this.total) {\n            this.destination.next(x);\n        }\n    };\n    return SkipSubscriber;\n}(Subscriber_1.Subscriber));\n\n},{\"../Subscriber\":13}],270:[function(require,module,exports){\n\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar OuterSubscriber_1 = require('../OuterSubscriber');\nvar subscribeToResult_1 = require('../util/subscribeToResult');\n/**\n * Returns an Observable that skips items emitted by the source Observable until a second Observable emits an item.\n *\n * <img src=\"./img/skipUntil.png\" width=\"100%\">\n *\n * @param {Observable} the second Observable that has to emit an item before the source Observable's elements begin to\n * be mirrored by the resulting Observable.\n * @return {Observable<T>} an Observable that skips items from the source Observable until the second Observable emits\n * an item, then emits the remaining items.\n * @method skipUntil\n * @owner Observable\n */\nfunction skipUntil(notifier) {\n    return this.lift(new SkipUntilOperator(notifier));\n}\nexports.skipUntil = skipUntil;\nvar SkipUntilOperator = (function () {\n    function SkipUntilOperator(notifier) {\n        this.notifier = notifier;\n    }\n    SkipUntilOperator.prototype.call = function (subscriber, source) {\n        return source._subscribe(new SkipUntilSubscriber(subscriber, this.notifier));\n    };\n    return SkipUntilOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar SkipUntilSubscriber = (function (_super) {\n    __extends(SkipUntilSubscriber, _super);\n    function SkipUntilSubscriber(destination, notifier) {\n        _super.call(this, destination);\n        this.hasValue = false;\n        this.isInnerStopped = false;\n        this.add(subscribeToResult_1.subscribeToResult(this, notifier));\n    }\n    SkipUntilSubscriber.prototype._next = function (value) {\n        if (this.hasValue) {\n            _super.prototype._next.call(this, value);\n        }\n    };\n    SkipUntilSubscriber.prototype._complete = function () {\n        if (this.isInnerStopped) {\n            _super.prototype._complete.call(this);\n        }\n        else {\n            this.unsubscribe();\n        }\n    };\n    SkipUntilSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n        this.hasValue = true;\n    };\n    SkipUntilSubscriber.prototype.notifyComplete = function () {\n        this.isInnerStopped = true;\n        if (this.isStopped) {\n            _super.prototype._complete.call(this);\n        }\n    };\n    return SkipUntilSubscriber;\n}(OuterSubscriber_1.OuterSubscriber));\n\n},{\"../OuterSubscriber\":7,\"../util/subscribeToResult\":341}],271:[function(require,module,exports){\n\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Subscriber_1 = require('../Subscriber');\n/**\n * Returns an Observable that skips all items emitted by the source Observable as long as a specified condition holds\n * true, but emits all further source items as soon as the condition becomes false.\n *\n * <img src=\"./img/skipWhile.png\" width=\"100%\">\n *\n * @param {Function} predicate - a function to test each item emitted from the source Observable.\n * @return {Observable<T>} an Observable that begins emitting items emitted by the source Observable when the\n * specified predicate becomes false.\n * @method skipWhile\n * @owner Observable\n */\nfunction skipWhile(predicate) {\n    return this.lift(new SkipWhileOperator(predicate));\n}\nexports.skipWhile = skipWhile;\nvar SkipWhileOperator = (function () {\n    function SkipWhileOperator(predicate) {\n        this.predicate = predicate;\n    }\n    SkipWhileOperator.prototype.call = function (subscriber, source) {\n        return source._subscribe(new SkipWhileSubscriber(subscriber, this.predicate));\n    };\n    return SkipWhileOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar SkipWhileSubscriber = (function (_super) {\n    __extends(SkipWhileSubscriber, _super);\n    function SkipWhileSubscriber(destination, predicate) {\n        _super.call(this, destination);\n        this.predicate = predicate;\n        this.skipping = true;\n        this.index = 0;\n    }\n    SkipWhileSubscriber.prototype._next = function (value) {\n        var destination = this.destination;\n        if (this.skipping) {\n            this.tryCallPredicate(value);\n        }\n        if (!this.skipping) {\n            destination.next(value);\n        }\n    };\n    SkipWhileSubscriber.prototype.tryCallPredicate = function (value) {\n        try {\n            var result = this.predicate(value, this.index++);\n            this.skipping = Boolean(result);\n        }\n        catch (err) {\n            this.destination.error(err);\n        }\n    };\n    return SkipWhileSubscriber;\n}(Subscriber_1.Subscriber));\n\n},{\"../Subscriber\":13}],272:[function(require,module,exports){\n\"use strict\";\nvar ArrayObservable_1 = require('../observable/ArrayObservable');\nvar ScalarObservable_1 = require('../observable/ScalarObservable');\nvar EmptyObservable_1 = require('../observable/EmptyObservable');\nvar concat_1 = require('./concat');\nvar isScheduler_1 = require('../util/isScheduler');\n/**\n * Returns an Observable that emits the items in a specified Iterable before it begins to emit items emitted by the\n * source Observable.\n *\n * <img src=\"./img/startWith.png\" width=\"100%\">\n *\n * @param {Values} an Iterable that contains the items you want the modified Observable to emit first.\n * @return {Observable} an Observable that emits the items in the specified Iterable and then emits the items\n * emitted by the source Observable.\n * @method startWith\n * @owner Observable\n */\nfunction startWith() {\n    var array = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        array[_i - 0] = arguments[_i];\n    }\n    var scheduler = array[array.length - 1];\n    if (isScheduler_1.isScheduler(scheduler)) {\n        array.pop();\n    }\n    else {\n        scheduler = null;\n    }\n    var len = array.length;\n    if (len === 1) {\n        return concat_1.concatStatic(new ScalarObservable_1.ScalarObservable(array[0], scheduler), this);\n    }\n    else if (len > 1) {\n        return concat_1.concatStatic(new ArrayObservable_1.ArrayObservable(array, scheduler), this);\n    }\n    else {\n        return concat_1.concatStatic(new EmptyObservable_1.EmptyObservable(scheduler), this);\n    }\n}\nexports.startWith = startWith;\n\n},{\"../observable/ArrayObservable\":145,\"../observable/EmptyObservable\":150,\"../observable/ScalarObservable\":165,\"../util/isScheduler\":337,\"./concat\":206}],273:[function(require,module,exports){\n\"use strict\";\nvar SubscribeOnObservable_1 = require('../observable/SubscribeOnObservable');\n/**\n * Asynchronously subscribes Observers to this Observable on the specified Scheduler.\n *\n * <img src=\"./img/subscribeOn.png\" width=\"100%\">\n *\n * @param {Scheduler} the Scheduler to perform subscription actions on.\n * @return {Observable<T>} the source Observable modified so that its subscriptions happen on the specified Scheduler\n .\n * @method subscribeOn\n * @owner Observable\n */\nfunction subscribeOn(scheduler, delay) {\n    if (delay === void 0) { delay = 0; }\n    return new SubscribeOnObservable_1.SubscribeOnObservable(this, delay, scheduler);\n}\nexports.subscribeOn = subscribeOn;\n\n},{\"../observable/SubscribeOnObservable\":166}],274:[function(require,module,exports){\n\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar OuterSubscriber_1 = require('../OuterSubscriber');\nvar subscribeToResult_1 = require('../util/subscribeToResult');\n/**\n * Converts a higher-order Observable into a first-order Observable by\n * subscribing to only the most recently emitted of those inner Observables.\n *\n * <span class=\"informal\">Flattens an Observable-of-Observables by dropping the\n * previous inner Observable once a new one appears.</span>\n *\n * <img src=\"./img/switch.png\" width=\"100%\">\n *\n * `switch` subscribes to an Observable that emits Observables, also known as a\n * higher-order Observable. Each time it observes one of these emitted inner\n * Observables, the output Observable subscribes to the inner Observable and\n * begins emitting the items emitted by that. So far, it behaves\n * like {@link mergeAll}. However, when a new inner Observable is emitted,\n * `switch` unsubscribes from the earlier-emitted inner Observable and\n * subscribes to the new inner Observable and begins emitting items from it. It\n * continues to behave like this for subsequent inner Observables.\n *\n * @example <caption>Rerun an interval Observable on every click event</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * // Each click event is mapped to an Observable that ticks every second\n * var higherOrder = clicks.map((ev) => Rx.Observable.interval(1000));\n * var switched = higherOrder.switch();\n * // The outcome is that `switched` is essentially a timer that restarts\n * // on every click. The interval Observables from older clicks do not merge\n * // with the current interval Observable.\n * switched.subscribe(x => console.log(x));\n *\n * @see {@link combineAll}\n * @see {@link concatAll}\n * @see {@link exhaust}\n * @see {@link mergeAll}\n * @see {@link switchMap}\n * @see {@link switchMapTo}\n * @see {@link zipAll}\n *\n * @return {Observable<T>} An Observable that emits the items emitted by the\n * Observable most recently emitted by the source Observable.\n * @method switch\n * @name switch\n * @owner Observable\n */\nfunction _switch() {\n    return this.lift(new SwitchOperator());\n}\nexports._switch = _switch;\nvar SwitchOperator = (function () {\n    function SwitchOperator() {\n    }\n    SwitchOperator.prototype.call = function (subscriber, source) {\n        return source._subscribe(new SwitchSubscriber(subscriber));\n    };\n    return SwitchOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar SwitchSubscriber = (function (_super) {\n    __extends(SwitchSubscriber, _super);\n    function SwitchSubscriber(destination) {\n        _super.call(this, destination);\n        this.active = 0;\n        this.hasCompleted = false;\n    }\n    SwitchSubscriber.prototype._next = function (value) {\n        this.unsubscribeInner();\n        this.active++;\n        this.add(this.innerSubscription = subscribeToResult_1.subscribeToResult(this, value));\n    };\n    SwitchSubscriber.prototype._complete = function () {\n        this.hasCompleted = true;\n        if (this.active === 0) {\n            this.destination.complete();\n        }\n    };\n    SwitchSubscriber.prototype.unsubscribeInner = function () {\n        this.active = this.active > 0 ? this.active - 1 : 0;\n        var innerSubscription = this.innerSubscription;\n        if (innerSubscription) {\n            innerSubscription.unsubscribe();\n            this.remove(innerSubscription);\n        }\n    };\n    SwitchSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n        this.destination.next(innerValue);\n    };\n    SwitchSubscriber.prototype.notifyError = function (err) {\n        this.destination.error(err);\n    };\n    SwitchSubscriber.prototype.notifyComplete = function () {\n        this.unsubscribeInner();\n        if (this.hasCompleted && this.active === 0) {\n            this.destination.complete();\n        }\n    };\n    return SwitchSubscriber;\n}(OuterSubscriber_1.OuterSubscriber));\n\n},{\"../OuterSubscriber\":7,\"../util/subscribeToResult\":341}],275:[function(require,module,exports){\n\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar OuterSubscriber_1 = require('../OuterSubscriber');\nvar subscribeToResult_1 = require('../util/subscribeToResult');\n/**\n * Projects each source value to an Observable which is merged in the output\n * Observable, emitting values only from the most recently projected Observable.\n *\n * <span class=\"informal\">Maps each value to an Observable, then flattens all of\n * these inner Observables using {@link switch}.</span>\n *\n * <img src=\"./img/switchMap.png\" width=\"100%\">\n *\n * Returns an Observable that emits items based on applying a function that you\n * supply to each item emitted by the source Observable, where that function\n * returns an (so-called \"inner\") Observable. Each time it observes one of these\n * inner Observables, the output Observable begins emitting the items emitted by\n * that inner Observable. When a new inner Observable is emitted, `switchMap`\n * stops emitting items from the earlier-emitted inner Observable and begins\n * emitting items from the new one. It continues to behave like this for\n * subsequent inner Observables.\n *\n * @example <caption>Rerun an interval Observable on every click event</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.switchMap((ev) => Rx.Observable.interval(1000));\n * result.subscribe(x => console.log(x));\n *\n * @see {@link concatMap}\n * @see {@link exhaustMap}\n * @see {@link mergeMap}\n * @see {@link switch}\n * @see {@link switchMapTo}\n *\n * @param {function(value: T, ?index: number): Observable} project A function\n * that, when applied to an item emitted by the source Observable, returns an\n * Observable.\n * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]\n * A function to produce the value on the output Observable based on the values\n * and the indices of the source (outer) emission and the inner Observable\n * emission. The arguments passed to this function are:\n * - `outerValue`: the value that came from the source\n * - `innerValue`: the value that came from the projected Observable\n * - `outerIndex`: the \"index\" of the value that came from the source\n * - `innerIndex`: the \"index\" of the value from the projected Observable\n * @return {Observable} An Observable that emits the result of applying the\n * projection function (and the optional `resultSelector`) to each item emitted\n * by the source Observable and taking only the values from the most recently\n * projected inner Observable.\n * @method switchMap\n * @owner Observable\n */\nfunction switchMap(project, resultSelector) {\n    return this.lift(new SwitchMapOperator(project, resultSelector));\n}\nexports.switchMap = switchMap;\nvar SwitchMapOperator = (function () {\n    function SwitchMapOperator(project, resultSelector) {\n        this.project = project;\n        this.resultSelector = resultSelector;\n    }\n    SwitchMapOperator.prototype.call = function (subscriber, source) {\n        return source._subscribe(new SwitchMapSubscriber(subscriber, this.project, this.resultSelector));\n    };\n    return SwitchMapOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar SwitchMapSubscriber = (function (_super) {\n    __extends(SwitchMapSubscriber, _super);\n    function SwitchMapSubscriber(destination, project, resultSelector) {\n        _super.call(this, destination);\n        this.project = project;\n        this.resultSelector = resultSelector;\n        this.index = 0;\n    }\n    SwitchMapSubscriber.prototype._next = function (value) {\n        var result;\n        var index = this.index++;\n        try {\n            result = this.project(value, index);\n        }\n        catch (error) {\n            this.destination.error(error);\n            return;\n        }\n        this._innerSub(result, value, index);\n    };\n    SwitchMapSubscriber.prototype._innerSub = function (result, value, index) {\n        var innerSubscription = this.innerSubscription;\n        if (innerSubscription) {\n            innerSubscription.unsubscribe();\n        }\n        this.add(this.innerSubscription = subscribeToResult_1.subscribeToResult(this, result, value, index));\n    };\n    SwitchMapSubscriber.prototype._complete = function () {\n        var innerSubscription = this.innerSubscription;\n        if (!innerSubscription || innerSubscription.closed) {\n            _super.prototype._complete.call(this);\n        }\n    };\n    SwitchMapSubscriber.prototype._unsubscribe = function () {\n        this.innerSubscription = null;\n    };\n    SwitchMapSubscriber.prototype.notifyComplete = function (innerSub) {\n        this.remove(innerSub);\n        this.innerSubscription = null;\n        if (this.isStopped) {\n            _super.prototype._complete.call(this);\n        }\n    };\n    SwitchMapSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n        if (this.resultSelector) {\n            this._tryNotifyNext(outerValue, innerValue, outerIndex, innerIndex);\n        }\n        else {\n            this.destination.next(innerValue);\n        }\n    };\n    SwitchMapSubscriber.prototype._tryNotifyNext = function (outerValue, innerValue, outerIndex, innerIndex) {\n        var result;\n        try {\n            result = this.resultSelector(outerValue, innerValue, outerIndex, innerIndex);\n        }\n        catch (err) {\n            this.destination.error(err);\n            return;\n        }\n        this.destination.next(result);\n    };\n    return SwitchMapSubscriber;\n}(OuterSubscriber_1.OuterSubscriber));\n\n},{\"../OuterSubscriber\":7,\"../util/subscribeToResult\":341}],276:[function(require,module,exports){\n\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar OuterSubscriber_1 = require('../OuterSubscriber');\nvar subscribeToResult_1 = require('../util/subscribeToResult');\n/**\n * Projects each source value to the same Observable which is flattened multiple\n * times with {@link switch} in the output Observable.\n *\n * <span class=\"informal\">It's like {@link switchMap}, but maps each value\n * always to the same inner Observable.</span>\n *\n * <img src=\"./img/switchMapTo.png\" width=\"100%\">\n *\n * Maps each source value to the given Observable `innerObservable` regardless\n * of the source value, and then flattens those resulting Observables into one\n * single Observable, which is the output Observable. The output Observables\n * emits values only from the most recently emitted instance of\n * `innerObservable`.\n *\n * @example <caption>Rerun an interval Observable on every click event</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.switchMapTo(Rx.Observable.interval(1000));\n * result.subscribe(x => console.log(x));\n *\n * @see {@link concatMapTo}\n * @see {@link switch}\n * @see {@link switchMap}\n * @see {@link mergeMapTo}\n *\n * @param {Observable} innerObservable An Observable to replace each value from\n * the source Observable.\n * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]\n * A function to produce the value on the output Observable based on the values\n * and the indices of the source (outer) emission and the inner Observable\n * emission. The arguments passed to this function are:\n * - `outerValue`: the value that came from the source\n * - `innerValue`: the value that came from the projected Observable\n * - `outerIndex`: the \"index\" of the value that came from the source\n * - `innerIndex`: the \"index\" of the value from the projected Observable\n * @return {Observable} An Observable that emits items from the given\n * `innerObservable` every time a value is emitted on the source Observable.\n * @return {Observable} An Observable that emits items from the given\n * `innerObservable` (and optionally transformed through `resultSelector`) every\n * time a value is emitted on the source Observable, and taking only the values\n * from the most recently projected inner Observable.\n * @method switchMapTo\n * @owner Observable\n */\nfunction switchMapTo(innerObservable, resultSelector) {\n    return this.lift(new SwitchMapToOperator(innerObservable, resultSelector));\n}\nexports.switchMapTo = switchMapTo;\nvar SwitchMapToOperator = (function () {\n    function SwitchMapToOperator(observable, resultSelector) {\n        this.observable = observable;\n        this.resultSelector = resultSelector;\n    }\n    SwitchMapToOperator.prototype.call = function (subscriber, source) {\n        return source._subscribe(new SwitchMapToSubscriber(subscriber, this.observable, this.resultSelector));\n    };\n    return SwitchMapToOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar SwitchMapToSubscriber = (function (_super) {\n    __extends(SwitchMapToSubscriber, _super);\n    function SwitchMapToSubscriber(destination, inner, resultSelector) {\n        _super.call(this, destination);\n        this.inner = inner;\n        this.resultSelector = resultSelector;\n        this.index = 0;\n    }\n    SwitchMapToSubscriber.prototype._next = function (value) {\n        var innerSubscription = this.innerSubscription;\n        if (innerSubscription) {\n            innerSubscription.unsubscribe();\n        }\n        this.add(this.innerSubscription = subscribeToResult_1.subscribeToResult(this, this.inner, value, this.index++));\n    };\n    SwitchMapToSubscriber.prototype._complete = function () {\n        var innerSubscription = this.innerSubscription;\n        if (!innerSubscription || innerSubscription.closed) {\n            _super.prototype._complete.call(this);\n        }\n    };\n    SwitchMapToSubscriber.prototype._unsubscribe = function () {\n        this.innerSubscription = null;\n    };\n    SwitchMapToSubscriber.prototype.notifyComplete = function (innerSub) {\n        this.remove(innerSub);\n        this.innerSubscription = null;\n        if (this.isStopped) {\n            _super.prototype._complete.call(this);\n        }\n    };\n    SwitchMapToSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n        var _a = this, resultSelector = _a.resultSelector, destination = _a.destination;\n        if (resultSelector) {\n            this.tryResultSelector(outerValue, innerValue, outerIndex, innerIndex);\n        }\n        else {\n            destination.next(innerValue);\n        }\n    };\n    SwitchMapToSubscriber.prototype.tryResultSelector = function (outerValue, innerValue, outerIndex, innerIndex) {\n        var _a = this, resultSelector = _a.resultSelector, destination = _a.destination;\n        var result;\n        try {\n            result = resultSelector(outerValue, innerValue, outerIndex, innerIndex);\n        }\n        catch (err) {\n            destination.error(err);\n            return;\n        }\n        destination.next(result);\n    };\n    return SwitchMapToSubscriber;\n}(OuterSubscriber_1.OuterSubscriber));\n\n},{\"../OuterSubscriber\":7,\"../util/subscribeToResult\":341}],277:[function(require,module,exports){\n\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Subscriber_1 = require('../Subscriber');\nvar ArgumentOutOfRangeError_1 = require('../util/ArgumentOutOfRangeError');\nvar EmptyObservable_1 = require('../observable/EmptyObservable');\n/**\n * Emits only the first `count` values emitted by the source Observable.\n *\n * <span class=\"informal\">Takes the first `count` values from the source, then\n * completes.</span>\n *\n * <img src=\"./img/take.png\" width=\"100%\">\n *\n * `take` returns an Observable that emits only the first `count` values emitted\n * by the source Observable. If the source emits fewer than `count` values then\n * all of its values are emitted. After that, it completes, regardless if the\n * source completes.\n *\n * @example <caption>Take the first 5 seconds of an infinite 1-second interval Observable</caption>\n * var interval = Rx.Observable.interval(1000);\n * var five = interval.take(5);\n * five.subscribe(x => console.log(x));\n *\n * @see {@link takeLast}\n * @see {@link takeUntil}\n * @see {@link takeWhile}\n * @see {@link skip}\n *\n * @throws {ArgumentOutOfRangeError} When using `take(i)`, it delivers an\n * ArgumentOutOrRangeError to the Observer's `error` callback if `i < 0`.\n *\n * @param {number} count The maximum number of `next` values to emit.\n * @return {Observable<T>} An Observable that emits only the first `count`\n * values emitted by the source Observable, or all of the values from the source\n * if the source emits fewer than `count` values.\n * @method take\n * @owner Observable\n */\nfunction take(count) {\n    if (count === 0) {\n        return new EmptyObservable_1.EmptyObservable();\n    }\n    else {\n        return this.lift(new TakeOperator(count));\n    }\n}\nexports.take = take;\nvar TakeOperator = (function () {\n    function TakeOperator(total) {\n        this.total = total;\n        if (this.total < 0) {\n            throw new ArgumentOutOfRangeError_1.ArgumentOutOfRangeError;\n        }\n    }\n    TakeOperator.prototype.call = function (subscriber, source) {\n        return source._subscribe(new TakeSubscriber(subscriber, this.total));\n    };\n    return TakeOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar TakeSubscriber = (function (_super) {\n    __extends(TakeSubscriber, _super);\n    function TakeSubscriber(destination, total) {\n        _super.call(this, destination);\n        this.total = total;\n        this.count = 0;\n    }\n    TakeSubscriber.prototype._next = function (value) {\n        var total = this.total;\n        if (++this.count <= total) {\n            this.destination.next(value);\n            if (this.count === total) {\n                this.destination.complete();\n                this.unsubscribe();\n            }\n        }\n    };\n    return TakeSubscriber;\n}(Subscriber_1.Subscriber));\n\n},{\"../Subscriber\":13,\"../observable/EmptyObservable\":150,\"../util/ArgumentOutOfRangeError\":320}],278:[function(require,module,exports){\n\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Subscriber_1 = require('../Subscriber');\nvar ArgumentOutOfRangeError_1 = require('../util/ArgumentOutOfRangeError');\nvar EmptyObservable_1 = require('../observable/EmptyObservable');\n/**\n * Emits only the last `count` values emitted by the source Observable.\n *\n * <span class=\"informal\">Remembers the latest `count` values, then emits those\n * only when the source completes.</span>\n *\n * <img src=\"./img/takeLast.png\" width=\"100%\">\n *\n * `takeLast` returns an Observable that emits at most the last `count` values\n * emitted by the source Observable. If the source emits fewer than `count`\n * values then all of its values are emitted. This operator must wait until the\n * `complete` notification emission from the source in order to emit the `next`\n * values on the output Observable, because otherwise it is impossible to know\n * whether or not more values will be emitted on the source. For this reason,\n * all values are emitted synchronously, followed by the complete notification.\n *\n * @example <caption>Take the last 3 values of an Observable with many values</caption>\n * var many = Rx.Observable.range(1, 100);\n * var lastThree = many.takeLast(3);\n * lastThree.subscribe(x => console.log(x));\n *\n * @see {@link take}\n * @see {@link takeUntil}\n * @see {@link takeWhile}\n * @see {@link skip}\n *\n * @throws {ArgumentOutOfRangeError} When using `takeLast(i)`, it delivers an\n * ArgumentOutOrRangeError to the Observer's `error` callback if `i < 0`.\n *\n * @param {number} count The maximum number of values to emit from the end of\n * the sequence of values emitted by the source Observable.\n * @return {Observable<T>} An Observable that emits at most the last count\n * values emitted by the source Observable.\n * @method takeLast\n * @owner Observable\n */\nfunction takeLast(count) {\n    if (count === 0) {\n        return new EmptyObservable_1.EmptyObservable();\n    }\n    else {\n        return this.lift(new TakeLastOperator(count));\n    }\n}\nexports.takeLast = takeLast;\nvar TakeLastOperator = (function () {\n    function TakeLastOperator(total) {\n        this.total = total;\n        if (this.total < 0) {\n            throw new ArgumentOutOfRangeError_1.ArgumentOutOfRangeError;\n        }\n    }\n    TakeLastOperator.prototype.call = function (subscriber, source) {\n        return source._subscribe(new TakeLastSubscriber(subscriber, this.total));\n    };\n    return TakeLastOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar TakeLastSubscriber = (function (_super) {\n    __extends(TakeLastSubscriber, _super);\n    function TakeLastSubscriber(destination, total) {\n        _super.call(this, destination);\n        this.total = total;\n        this.ring = new Array();\n        this.count = 0;\n    }\n    TakeLastSubscriber.prototype._next = function (value) {\n        var ring = this.ring;\n        var total = this.total;\n        var count = this.count++;\n        if (ring.length < total) {\n            ring.push(value);\n        }\n        else {\n            var index = count % total;\n            ring[index] = value;\n        }\n    };\n    TakeLastSubscriber.prototype._complete = function () {\n        var destination = this.destination;\n        var count = this.count;\n        if (count > 0) {\n            var total = this.count >= this.total ? this.total : this.count;\n            var ring = this.ring;\n            for (var i = 0; i < total; i++) {\n                var idx = (count++) % total;\n                destination.next(ring[idx]);\n            }\n        }\n        destination.complete();\n    };\n    return TakeLastSubscriber;\n}(Subscriber_1.Subscriber));\n\n},{\"../Subscriber\":13,\"../observable/EmptyObservable\":150,\"../util/ArgumentOutOfRangeError\":320}],279:[function(require,module,exports){\n\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar OuterSubscriber_1 = require('../OuterSubscriber');\nvar subscribeToResult_1 = require('../util/subscribeToResult');\n/**\n * Emits the values emitted by the source Observable until a `notifier`\n * Observable emits a value.\n *\n * <span class=\"informal\">Lets values pass until a second Observable,\n * `notifier`, emits something. Then, it completes.</span>\n *\n * <img src=\"./img/takeUntil.png\" width=\"100%\">\n *\n * `takeUntil` subscribes and begins mirroring the source Observable. It also\n * monitors a second Observable, `notifier` that you provide. If the `notifier`\n * emits a value or a complete notification, the output Observable stops\n * mirroring the source Observable and completes.\n *\n * @example <caption>Tick every second until the first click happens</caption>\n * var interval = Rx.Observable.interval(1000);\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = interval.takeUntil(clicks);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link take}\n * @see {@link takeLast}\n * @see {@link takeWhile}\n * @see {@link skip}\n *\n * @param {Observable} notifier The Observable whose first emitted value will\n * cause the output Observable of `takeUntil` to stop emitting values from the\n * source Observable.\n * @return {Observable<T>} An Observable that emits the values from the source\n * Observable until such time as `notifier` emits its first value.\n * @method takeUntil\n * @owner Observable\n */\nfunction takeUntil(notifier) {\n    return this.lift(new TakeUntilOperator(notifier));\n}\nexports.takeUntil = takeUntil;\nvar TakeUntilOperator = (function () {\n    function TakeUntilOperator(notifier) {\n        this.notifier = notifier;\n    }\n    TakeUntilOperator.prototype.call = function (subscriber, source) {\n        return source._subscribe(new TakeUntilSubscriber(subscriber, this.notifier));\n    };\n    return TakeUntilOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar TakeUntilSubscriber = (function (_super) {\n    __extends(TakeUntilSubscriber, _super);\n    function TakeUntilSubscriber(destination, notifier) {\n        _super.call(this, destination);\n        this.notifier = notifier;\n        this.add(subscribeToResult_1.subscribeToResult(this, notifier));\n    }\n    TakeUntilSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n        this.complete();\n    };\n    TakeUntilSubscriber.prototype.notifyComplete = function () {\n        // noop\n    };\n    return TakeUntilSubscriber;\n}(OuterSubscriber_1.OuterSubscriber));\n\n},{\"../OuterSubscriber\":7,\"../util/subscribeToResult\":341}],280:[function(require,module,exports){\n\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Subscriber_1 = require('../Subscriber');\n/**\n * Emits values emitted by the source Observable so long as each value satisfies\n * the given `predicate`, and then completes as soon as this `predicate` is not\n * satisfied.\n *\n * <span class=\"informal\">Takes values from the source only while they pass the\n * condition given. When the first value does not satisfy, it completes.</span>\n *\n * <img src=\"./img/takeWhile.png\" width=\"100%\">\n *\n * `takeWhile` subscribes and begins mirroring the source Observable. Each value\n * emitted on the source is given to the `predicate` function which returns a\n * boolean, representing a condition to be satisfied by the source values. The\n * output Observable emits the source values until such time as the `predicate`\n * returns false, at which point `takeWhile` stops mirroring the source\n * Observable and completes the output Observable.\n *\n * @example <caption>Emit click events only while the clientX property is greater than 200</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.takeWhile(ev => ev.clientX > 200);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link take}\n * @see {@link takeLast}\n * @see {@link takeUntil}\n * @see {@link skip}\n *\n * @param {function(value: T, index: number): boolean} predicate A function that\n * evaluates a value emitted by the source Observable and returns a boolean.\n * Also takes the (zero-based) index as the second argument.\n * @return {Observable<T>} An Observable that emits the values from the source\n * Observable so long as each value satisfies the condition defined by the\n * `predicate`, then completes.\n * @method takeWhile\n * @owner Observable\n */\nfunction takeWhile(predicate) {\n    return this.lift(new TakeWhileOperator(predicate));\n}\nexports.takeWhile = takeWhile;\nvar TakeWhileOperator = (function () {\n    function TakeWhileOperator(predicate) {\n        this.predicate = predicate;\n    }\n    TakeWhileOperator.prototype.call = function (subscriber, source) {\n        return source._subscribe(new TakeWhileSubscriber(subscriber, this.predicate));\n    };\n    return TakeWhileOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar TakeWhileSubscriber = (function (_super) {\n    __extends(TakeWhileSubscriber, _super);\n    function TakeWhileSubscriber(destination, predicate) {\n        _super.call(this, destination);\n        this.predicate = predicate;\n        this.index = 0;\n    }\n    TakeWhileSubscriber.prototype._next = function (value) {\n        var destination = this.destination;\n        var result;\n        try {\n            result = this.predicate(value, this.index++);\n        }\n        catch (err) {\n            destination.error(err);\n            return;\n        }\n        this.nextOrComplete(value, result);\n    };\n    TakeWhileSubscriber.prototype.nextOrComplete = function (value, predicateResult) {\n        var destination = this.destination;\n        if (Boolean(predicateResult)) {\n            destination.next(value);\n        }\n        else {\n            destination.complete();\n        }\n    };\n    return TakeWhileSubscriber;\n}(Subscriber_1.Subscriber));\n\n},{\"../Subscriber\":13}],281:[function(require,module,exports){\n\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar OuterSubscriber_1 = require('../OuterSubscriber');\nvar subscribeToResult_1 = require('../util/subscribeToResult');\n/**\n * Emits a value from the source Observable, then ignores subsequent source\n * values for a duration determined by another Observable, then repeats this\n * process.\n *\n * <span class=\"informal\">It's like {@link throttleTime}, but the silencing\n * duration is determined by a second Observable.</span>\n *\n * <img src=\"./img/throttle.png\" width=\"100%\">\n *\n * `throttle` emits the source Observable values on the output Observable\n * when its internal timer is disabled, and ignores source values when the timer\n * is enabled. Initially, the timer is disabled. As soon as the first source\n * value arrives, it is forwarded to the output Observable, and then the timer\n * is enabled by calling the `durationSelector` function with the source value,\n * which returns the \"duration\" Observable. When the duration Observable emits a\n * value or completes, the timer is disabled, and this process repeats for the\n * next source value.\n *\n * @example <caption>Emit clicks at a rate of at most one click per second</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.throttle(ev => Rx.Observable.interval(1000));\n * result.subscribe(x => console.log(x));\n *\n * @see {@link audit}\n * @see {@link debounce}\n * @see {@link delayWhen}\n * @see {@link sample}\n * @see {@link throttleTime}\n *\n * @param {function(value: T): Observable|Promise} durationSelector A function\n * that receives a value from the source Observable, for computing the silencing\n * duration for each source value, returned as an Observable or a Promise.\n * @return {Observable<T>} An Observable that performs the throttle operation to\n * limit the rate of emissions from the source.\n * @method throttle\n * @owner Observable\n */\nfunction throttle(durationSelector) {\n    return this.lift(new ThrottleOperator(durationSelector));\n}\nexports.throttle = throttle;\nvar ThrottleOperator = (function () {\n    function ThrottleOperator(durationSelector) {\n        this.durationSelector = durationSelector;\n    }\n    ThrottleOperator.prototype.call = function (subscriber, source) {\n        return source._subscribe(new ThrottleSubscriber(subscriber, this.durationSelector));\n    };\n    return ThrottleOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar ThrottleSubscriber = (function (_super) {\n    __extends(ThrottleSubscriber, _super);\n    function ThrottleSubscriber(destination, durationSelector) {\n        _super.call(this, destination);\n        this.destination = destination;\n        this.durationSelector = durationSelector;\n    }\n    ThrottleSubscriber.prototype._next = function (value) {\n        if (!this.throttled) {\n            this.tryDurationSelector(value);\n        }\n    };\n    ThrottleSubscriber.prototype.tryDurationSelector = function (value) {\n        var duration = null;\n        try {\n            duration = this.durationSelector(value);\n        }\n        catch (err) {\n            this.destination.error(err);\n            return;\n        }\n        this.emitAndThrottle(value, duration);\n    };\n    ThrottleSubscriber.prototype.emitAndThrottle = function (value, duration) {\n        this.add(this.throttled = subscribeToResult_1.subscribeToResult(this, duration));\n        this.destination.next(value);\n    };\n    ThrottleSubscriber.prototype._unsubscribe = function () {\n        var throttled = this.throttled;\n        if (throttled) {\n            this.remove(throttled);\n            this.throttled = null;\n            throttled.unsubscribe();\n        }\n    };\n    ThrottleSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n        this._unsubscribe();\n    };\n    ThrottleSubscriber.prototype.notifyComplete = function () {\n        this._unsubscribe();\n    };\n    return ThrottleSubscriber;\n}(OuterSubscriber_1.OuterSubscriber));\n\n},{\"../OuterSubscriber\":7,\"../util/subscribeToResult\":341}],282:[function(require,module,exports){\n\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Subscriber_1 = require('../Subscriber');\nvar async_1 = require('../scheduler/async');\n/**\n * Emits a value from the source Observable, then ignores subsequent source\n * values for `duration` milliseconds, then repeats this process.\n *\n * <span class=\"informal\">Lets a value pass, then ignores source values for the\n * next `duration` milliseconds.</span>\n *\n * <img src=\"./img/throttleTime.png\" width=\"100%\">\n *\n * `throttleTime` emits the source Observable values on the output Observable\n * when its internal timer is disabled, and ignores source values when the timer\n * is enabled. Initially, the timer is disabled. As soon as the first source\n * value arrives, it is forwarded to the output Observable, and then the timer\n * is enabled. After `duration` milliseconds (or the time unit determined\n * internally by the optional `scheduler`) has passed, the timer is disabled,\n * and this process repeats for the next source value. Optionally takes a\n * {@link Scheduler} for managing timers.\n *\n * @example <caption>Emit clicks at a rate of at most one click per second</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.throttleTime(1000);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link auditTime}\n * @see {@link debounceTime}\n * @see {@link delay}\n * @see {@link sampleTime}\n * @see {@link throttle}\n *\n * @param {number} duration Time to wait before emitting another value after\n * emitting the last value, measured in milliseconds or the time unit determined\n * internally by the optional `scheduler`.\n * @param {Scheduler} [scheduler=async] The {@link Scheduler} to use for\n * managing the timers that handle the sampling.\n * @return {Observable<T>} An Observable that performs the throttle operation to\n * limit the rate of emissions from the source.\n * @method throttleTime\n * @owner Observable\n */\nfunction throttleTime(duration, scheduler) {\n    if (scheduler === void 0) { scheduler = async_1.async; }\n    return this.lift(new ThrottleTimeOperator(duration, scheduler));\n}\nexports.throttleTime = throttleTime;\nvar ThrottleTimeOperator = (function () {\n    function ThrottleTimeOperator(duration, scheduler) {\n        this.duration = duration;\n        this.scheduler = scheduler;\n    }\n    ThrottleTimeOperator.prototype.call = function (subscriber, source) {\n        return source._subscribe(new ThrottleTimeSubscriber(subscriber, this.duration, this.scheduler));\n    };\n    return ThrottleTimeOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar ThrottleTimeSubscriber = (function (_super) {\n    __extends(ThrottleTimeSubscriber, _super);\n    function ThrottleTimeSubscriber(destination, duration, scheduler) {\n        _super.call(this, destination);\n        this.duration = duration;\n        this.scheduler = scheduler;\n    }\n    ThrottleTimeSubscriber.prototype._next = function (value) {\n        if (!this.throttled) {\n            this.add(this.throttled = this.scheduler.schedule(dispatchNext, this.duration, { subscriber: this }));\n            this.destination.next(value);\n        }\n    };\n    ThrottleTimeSubscriber.prototype.clearThrottle = function () {\n        var throttled = this.throttled;\n        if (throttled) {\n            throttled.unsubscribe();\n            this.remove(throttled);\n            this.throttled = null;\n        }\n    };\n    return ThrottleTimeSubscriber;\n}(Subscriber_1.Subscriber));\nfunction dispatchNext(arg) {\n    var subscriber = arg.subscriber;\n    subscriber.clearThrottle();\n}\n\n},{\"../Subscriber\":13,\"../scheduler/async\":309}],283:[function(require,module,exports){\n\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Subscriber_1 = require('../Subscriber');\nvar async_1 = require('../scheduler/async');\n/**\n * @param scheduler\n * @return {Observable<TimeInterval<any>>|WebSocketSubject<T>|Observable<T>}\n * @method timeInterval\n * @owner Observable\n */\nfunction timeInterval(scheduler) {\n    if (scheduler === void 0) { scheduler = async_1.async; }\n    return this.lift(new TimeIntervalOperator(scheduler));\n}\nexports.timeInterval = timeInterval;\nvar TimeInterval = (function () {\n    function TimeInterval(value, interval) {\n        this.value = value;\n        this.interval = interval;\n    }\n    return TimeInterval;\n}());\nexports.TimeInterval = TimeInterval;\n;\nvar TimeIntervalOperator = (function () {\n    function TimeIntervalOperator(scheduler) {\n        this.scheduler = scheduler;\n    }\n    TimeIntervalOperator.prototype.call = function (observer, source) {\n        return source._subscribe(new TimeIntervalSubscriber(observer, this.scheduler));\n    };\n    return TimeIntervalOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar TimeIntervalSubscriber = (function (_super) {\n    __extends(TimeIntervalSubscriber, _super);\n    function TimeIntervalSubscriber(destination, scheduler) {\n        _super.call(this, destination);\n        this.scheduler = scheduler;\n        this.lastTime = 0;\n        this.lastTime = scheduler.now();\n    }\n    TimeIntervalSubscriber.prototype._next = function (value) {\n        var now = this.scheduler.now();\n        var span = now - this.lastTime;\n        this.lastTime = now;\n        this.destination.next(new TimeInterval(value, span));\n    };\n    return TimeIntervalSubscriber;\n}(Subscriber_1.Subscriber));\n\n},{\"../Subscriber\":13,\"../scheduler/async\":309}],284:[function(require,module,exports){\n\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar async_1 = require('../scheduler/async');\nvar isDate_1 = require('../util/isDate');\nvar Subscriber_1 = require('../Subscriber');\n/**\n * @param due\n * @param errorToSend\n * @param scheduler\n * @return {Observable<R>|WebSocketSubject<T>|Observable<T>}\n * @method timeout\n * @owner Observable\n */\nfunction timeout(due, errorToSend, scheduler) {\n    if (errorToSend === void 0) { errorToSend = null; }\n    if (scheduler === void 0) { scheduler = async_1.async; }\n    var absoluteTimeout = isDate_1.isDate(due);\n    var waitFor = absoluteTimeout ? (+due - scheduler.now()) : Math.abs(due);\n    return this.lift(new TimeoutOperator(waitFor, absoluteTimeout, errorToSend, scheduler));\n}\nexports.timeout = timeout;\nvar TimeoutOperator = (function () {\n    function TimeoutOperator(waitFor, absoluteTimeout, errorToSend, scheduler) {\n        this.waitFor = waitFor;\n        this.absoluteTimeout = absoluteTimeout;\n        this.errorToSend = errorToSend;\n        this.scheduler = scheduler;\n    }\n    TimeoutOperator.prototype.call = function (subscriber, source) {\n        return source._subscribe(new TimeoutSubscriber(subscriber, this.absoluteTimeout, this.waitFor, this.errorToSend, this.scheduler));\n    };\n    return TimeoutOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar TimeoutSubscriber = (function (_super) {\n    __extends(TimeoutSubscriber, _super);\n    function TimeoutSubscriber(destination, absoluteTimeout, waitFor, errorToSend, scheduler) {\n        _super.call(this, destination);\n        this.absoluteTimeout = absoluteTimeout;\n        this.waitFor = waitFor;\n        this.errorToSend = errorToSend;\n        this.scheduler = scheduler;\n        this.index = 0;\n        this._previousIndex = 0;\n        this._hasCompleted = false;\n        this.scheduleTimeout();\n    }\n    Object.defineProperty(TimeoutSubscriber.prototype, \"previousIndex\", {\n        get: function () {\n            return this._previousIndex;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(TimeoutSubscriber.prototype, \"hasCompleted\", {\n        get: function () {\n            return this._hasCompleted;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    TimeoutSubscriber.dispatchTimeout = function (state) {\n        var source = state.subscriber;\n        var currentIndex = state.index;\n        if (!source.hasCompleted && source.previousIndex === currentIndex) {\n            source.notifyTimeout();\n        }\n    };\n    TimeoutSubscriber.prototype.scheduleTimeout = function () {\n        var currentIndex = this.index;\n        this.scheduler.schedule(TimeoutSubscriber.dispatchTimeout, this.waitFor, { subscriber: this, index: currentIndex });\n        this.index++;\n        this._previousIndex = currentIndex;\n    };\n    TimeoutSubscriber.prototype._next = function (value) {\n        this.destination.next(value);\n        if (!this.absoluteTimeout) {\n            this.scheduleTimeout();\n        }\n    };\n    TimeoutSubscriber.prototype._error = function (err) {\n        this.destination.error(err);\n        this._hasCompleted = true;\n    };\n    TimeoutSubscriber.prototype._complete = function () {\n        this.destination.complete();\n        this._hasCompleted = true;\n    };\n    TimeoutSubscriber.prototype.notifyTimeout = function () {\n        this.error(this.errorToSend || new Error('timeout'));\n    };\n    return TimeoutSubscriber;\n}(Subscriber_1.Subscriber));\n\n},{\"../Subscriber\":13,\"../scheduler/async\":309,\"../util/isDate\":332}],285:[function(require,module,exports){\n\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar async_1 = require('../scheduler/async');\nvar isDate_1 = require('../util/isDate');\nvar OuterSubscriber_1 = require('../OuterSubscriber');\nvar subscribeToResult_1 = require('../util/subscribeToResult');\n/**\n * @param due\n * @param withObservable\n * @param scheduler\n * @return {Observable<R>|WebSocketSubject<T>|Observable<T>}\n * @method timeoutWith\n * @owner Observable\n */\nfunction timeoutWith(due, withObservable, scheduler) {\n    if (scheduler === void 0) { scheduler = async_1.async; }\n    var absoluteTimeout = isDate_1.isDate(due);\n    var waitFor = absoluteTimeout ? (+due - scheduler.now()) : Math.abs(due);\n    return this.lift(new TimeoutWithOperator(waitFor, absoluteTimeout, withObservable, scheduler));\n}\nexports.timeoutWith = timeoutWith;\nvar TimeoutWithOperator = (function () {\n    function TimeoutWithOperator(waitFor, absoluteTimeout, withObservable, scheduler) {\n        this.waitFor = waitFor;\n        this.absoluteTimeout = absoluteTimeout;\n        this.withObservable = withObservable;\n        this.scheduler = scheduler;\n    }\n    TimeoutWithOperator.prototype.call = function (subscriber, source) {\n        return source._subscribe(new TimeoutWithSubscriber(subscriber, this.absoluteTimeout, this.waitFor, this.withObservable, this.scheduler));\n    };\n    return TimeoutWithOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar TimeoutWithSubscriber = (function (_super) {\n    __extends(TimeoutWithSubscriber, _super);\n    function TimeoutWithSubscriber(destination, absoluteTimeout, waitFor, withObservable, scheduler) {\n        _super.call(this);\n        this.destination = destination;\n        this.absoluteTimeout = absoluteTimeout;\n        this.waitFor = waitFor;\n        this.withObservable = withObservable;\n        this.scheduler = scheduler;\n        this.timeoutSubscription = undefined;\n        this.index = 0;\n        this._previousIndex = 0;\n        this._hasCompleted = false;\n        destination.add(this);\n        this.scheduleTimeout();\n    }\n    Object.defineProperty(TimeoutWithSubscriber.prototype, \"previousIndex\", {\n        get: function () {\n            return this._previousIndex;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(TimeoutWithSubscriber.prototype, \"hasCompleted\", {\n        get: function () {\n            return this._hasCompleted;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    TimeoutWithSubscriber.dispatchTimeout = function (state) {\n        var source = state.subscriber;\n        var currentIndex = state.index;\n        if (!source.hasCompleted && source.previousIndex === currentIndex) {\n            source.handleTimeout();\n        }\n    };\n    TimeoutWithSubscriber.prototype.scheduleTimeout = function () {\n        var currentIndex = this.index;\n        var timeoutState = { subscriber: this, index: currentIndex };\n        this.scheduler.schedule(TimeoutWithSubscriber.dispatchTimeout, this.waitFor, timeoutState);\n        this.index++;\n        this._previousIndex = currentIndex;\n    };\n    TimeoutWithSubscriber.prototype._next = function (value) {\n        this.destination.next(value);\n        if (!this.absoluteTimeout) {\n            this.scheduleTimeout();\n        }\n    };\n    TimeoutWithSubscriber.prototype._error = function (err) {\n        this.destination.error(err);\n        this._hasCompleted = true;\n    };\n    TimeoutWithSubscriber.prototype._complete = function () {\n        this.destination.complete();\n        this._hasCompleted = true;\n    };\n    TimeoutWithSubscriber.prototype.handleTimeout = function () {\n        if (!this.closed) {\n            var withObservable = this.withObservable;\n            this.unsubscribe();\n            this.destination.add(this.timeoutSubscription = subscribeToResult_1.subscribeToResult(this, withObservable));\n        }\n    };\n    return TimeoutWithSubscriber;\n}(OuterSubscriber_1.OuterSubscriber));\n\n},{\"../OuterSubscriber\":7,\"../scheduler/async\":309,\"../util/isDate\":332,\"../util/subscribeToResult\":341}],286:[function(require,module,exports){\n\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Subscriber_1 = require('../Subscriber');\nvar async_1 = require('../scheduler/async');\n/**\n * @param scheduler\n * @return {Observable<Timestamp<any>>|WebSocketSubject<T>|Observable<T>}\n * @method timestamp\n * @owner Observable\n */\nfunction timestamp(scheduler) {\n    if (scheduler === void 0) { scheduler = async_1.async; }\n    return this.lift(new TimestampOperator(scheduler));\n}\nexports.timestamp = timestamp;\nvar Timestamp = (function () {\n    function Timestamp(value, timestamp) {\n        this.value = value;\n        this.timestamp = timestamp;\n    }\n    return Timestamp;\n}());\nexports.Timestamp = Timestamp;\n;\nvar TimestampOperator = (function () {\n    function TimestampOperator(scheduler) {\n        this.scheduler = scheduler;\n    }\n    TimestampOperator.prototype.call = function (observer, source) {\n        return source._subscribe(new TimestampSubscriber(observer, this.scheduler));\n    };\n    return TimestampOperator;\n}());\nvar TimestampSubscriber = (function (_super) {\n    __extends(TimestampSubscriber, _super);\n    function TimestampSubscriber(destination, scheduler) {\n        _super.call(this, destination);\n        this.scheduler = scheduler;\n    }\n    TimestampSubscriber.prototype._next = function (value) {\n        var now = this.scheduler.now();\n        this.destination.next(new Timestamp(value, now));\n    };\n    return TimestampSubscriber;\n}(Subscriber_1.Subscriber));\n\n},{\"../Subscriber\":13,\"../scheduler/async\":309}],287:[function(require,module,exports){\n\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Subscriber_1 = require('../Subscriber');\n/**\n * @return {Observable<any[]>|WebSocketSubject<T>|Observable<T>}\n * @method toArray\n * @owner Observable\n */\nfunction toArray() {\n    return this.lift(new ToArrayOperator());\n}\nexports.toArray = toArray;\nvar ToArrayOperator = (function () {\n    function ToArrayOperator() {\n    }\n    ToArrayOperator.prototype.call = function (subscriber, source) {\n        return source._subscribe(new ToArraySubscriber(subscriber));\n    };\n    return ToArrayOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar ToArraySubscriber = (function (_super) {\n    __extends(ToArraySubscriber, _super);\n    function ToArraySubscriber(destination) {\n        _super.call(this, destination);\n        this.array = [];\n    }\n    ToArraySubscriber.prototype._next = function (x) {\n        this.array.push(x);\n    };\n    ToArraySubscriber.prototype._complete = function () {\n        this.destination.next(this.array);\n        this.destination.complete();\n    };\n    return ToArraySubscriber;\n}(Subscriber_1.Subscriber));\n\n},{\"../Subscriber\":13}],288:[function(require,module,exports){\n\"use strict\";\nvar root_1 = require('../util/root');\n/**\n * @param PromiseCtor\n * @return {Promise<T>}\n * @method toPromise\n * @owner Observable\n */\nfunction toPromise(PromiseCtor) {\n    var _this = this;\n    if (!PromiseCtor) {\n        if (root_1.root.Rx && root_1.root.Rx.config && root_1.root.Rx.config.Promise) {\n            PromiseCtor = root_1.root.Rx.config.Promise;\n        }\n        else if (root_1.root.Promise) {\n            PromiseCtor = root_1.root.Promise;\n        }\n    }\n    if (!PromiseCtor) {\n        throw new Error('no Promise impl found');\n    }\n    return new PromiseCtor(function (resolve, reject) {\n        var value;\n        _this.subscribe(function (x) { return value = x; }, function (err) { return reject(err); }, function () { return resolve(value); });\n    });\n}\nexports.toPromise = toPromise;\n\n},{\"../util/root\":340}],289:[function(require,module,exports){\n\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Subject_1 = require('../Subject');\nvar OuterSubscriber_1 = require('../OuterSubscriber');\nvar subscribeToResult_1 = require('../util/subscribeToResult');\n/**\n * Branch out the source Observable values as a nested Observable whenever\n * `windowBoundaries` emits.\n *\n * <span class=\"informal\">It's like {@link buffer}, but emits a nested Observable\n * instead of an array.</span>\n *\n * <img src=\"./img/window.png\" width=\"100%\">\n *\n * Returns an Observable that emits windows of items it collects from the source\n * Observable. The output Observable emits connected, non-overlapping\n * windows. It emits the current window and opens a new one whenever the\n * Observable `windowBoundaries` emits an item. Because each window is an\n * Observable, the output is a higher-order Observable.\n *\n * @example <caption>In every window of 1 second each, emit at most 2 click events</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var interval = Rx.Observable.interval(1000);\n * var result = clicks.window(interval)\n *   .map(win => win.take(2)) // each window has at most 2 emissions\n *   .mergeAll(); // flatten the Observable-of-Observables\n * result.subscribe(x => console.log(x));\n *\n * @see {@link windowCount}\n * @see {@link windowTime}\n * @see {@link windowToggle}\n * @see {@link windowWhen}\n * @see {@link buffer}\n *\n * @param {Observable<any>} windowBoundaries An Observable that completes the\n * previous window and starts a new window.\n * @return {Observable<Observable<T>>} An Observable of windows, which are\n * Observables emitting values of the source Observable.\n * @method window\n * @owner Observable\n */\nfunction window(windowBoundaries) {\n    return this.lift(new WindowOperator(windowBoundaries));\n}\nexports.window = window;\nvar WindowOperator = (function () {\n    function WindowOperator(windowBoundaries) {\n        this.windowBoundaries = windowBoundaries;\n    }\n    WindowOperator.prototype.call = function (subscriber, source) {\n        var windowSubscriber = new WindowSubscriber(subscriber);\n        var sourceSubscription = source._subscribe(windowSubscriber);\n        if (!sourceSubscription.closed) {\n            windowSubscriber.add(subscribeToResult_1.subscribeToResult(windowSubscriber, this.windowBoundaries));\n        }\n        return sourceSubscription;\n    };\n    return WindowOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar WindowSubscriber = (function (_super) {\n    __extends(WindowSubscriber, _super);\n    function WindowSubscriber(destination) {\n        _super.call(this, destination);\n        this.window = new Subject_1.Subject();\n        destination.next(this.window);\n    }\n    WindowSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n        this.openWindow();\n    };\n    WindowSubscriber.prototype.notifyError = function (error, innerSub) {\n        this._error(error);\n    };\n    WindowSubscriber.prototype.notifyComplete = function (innerSub) {\n        this._complete();\n    };\n    WindowSubscriber.prototype._next = function (value) {\n        this.window.next(value);\n    };\n    WindowSubscriber.prototype._error = function (err) {\n        this.window.error(err);\n        this.destination.error(err);\n    };\n    WindowSubscriber.prototype._complete = function () {\n        this.window.complete();\n        this.destination.complete();\n    };\n    WindowSubscriber.prototype._unsubscribe = function () {\n        this.window = null;\n    };\n    WindowSubscriber.prototype.openWindow = function () {\n        var prevWindow = this.window;\n        if (prevWindow) {\n            prevWindow.complete();\n        }\n        var destination = this.destination;\n        var newWindow = this.window = new Subject_1.Subject();\n        destination.next(newWindow);\n    };\n    return WindowSubscriber;\n}(OuterSubscriber_1.OuterSubscriber));\n\n},{\"../OuterSubscriber\":7,\"../Subject\":11,\"../util/subscribeToResult\":341}],290:[function(require,module,exports){\n\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Subscriber_1 = require('../Subscriber');\nvar Subject_1 = require('../Subject');\n/**\n * Branch out the source Observable values as a nested Observable with each\n * nested Observable emitting at most `windowSize` values.\n *\n * <span class=\"informal\">It's like {@link bufferCount}, but emits a nested\n * Observable instead of an array.</span>\n *\n * <img src=\"./img/windowCount.png\" width=\"100%\">\n *\n * Returns an Observable that emits windows of items it collects from the source\n * Observable. The output Observable emits windows every `startWindowEvery`\n * items, each containing no more than `windowSize` items. When the source\n * Observable completes or encounters an error, the output Observable emits\n * the current window and propagates the notification from the source\n * Observable. If `startWindowEvery` is not provided, then new windows are\n * started immediately at the start of the source and when each window completes\n * with size `windowSize`.\n *\n * @example <caption>Ignore every 3rd click event, starting from the first one</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.windowCount(3)\n *   .map(win => win.skip(1)) // skip first of every 3 clicks\n *   .mergeAll(); // flatten the Observable-of-Observables\n * result.subscribe(x => console.log(x));\n *\n * @example <caption>Ignore every 3rd click event, starting from the third one</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.windowCount(2, 3)\n *   .mergeAll(); // flatten the Observable-of-Observables\n * result.subscribe(x => console.log(x));\n *\n * @see {@link window}\n * @see {@link windowTime}\n * @see {@link windowToggle}\n * @see {@link windowWhen}\n * @see {@link bufferCount}\n *\n * @param {number} windowSize The maximum number of values emitted by each\n * window.\n * @param {number} [startWindowEvery] Interval at which to start a new window.\n * For example if `startWindowEvery` is `2`, then a new window will be started\n * on every other value from the source. A new window is started at the\n * beginning of the source by default.\n * @return {Observable<Observable<T>>} An Observable of windows, which in turn\n * are Observable of values.\n * @method windowCount\n * @owner Observable\n */\nfunction windowCount(windowSize, startWindowEvery) {\n    if (startWindowEvery === void 0) { startWindowEvery = 0; }\n    return this.lift(new WindowCountOperator(windowSize, startWindowEvery));\n}\nexports.windowCount = windowCount;\nvar WindowCountOperator = (function () {\n    function WindowCountOperator(windowSize, startWindowEvery) {\n        this.windowSize = windowSize;\n        this.startWindowEvery = startWindowEvery;\n    }\n    WindowCountOperator.prototype.call = function (subscriber, source) {\n        return source._subscribe(new WindowCountSubscriber(subscriber, this.windowSize, this.startWindowEvery));\n    };\n    return WindowCountOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar WindowCountSubscriber = (function (_super) {\n    __extends(WindowCountSubscriber, _super);\n    function WindowCountSubscriber(destination, windowSize, startWindowEvery) {\n        _super.call(this, destination);\n        this.destination = destination;\n        this.windowSize = windowSize;\n        this.startWindowEvery = startWindowEvery;\n        this.windows = [new Subject_1.Subject()];\n        this.count = 0;\n        destination.next(this.windows[0]);\n    }\n    WindowCountSubscriber.prototype._next = function (value) {\n        var startWindowEvery = (this.startWindowEvery > 0) ? this.startWindowEvery : this.windowSize;\n        var destination = this.destination;\n        var windowSize = this.windowSize;\n        var windows = this.windows;\n        var len = windows.length;\n        for (var i = 0; i < len && !this.closed; i++) {\n            windows[i].next(value);\n        }\n        var c = this.count - windowSize + 1;\n        if (c >= 0 && c % startWindowEvery === 0 && !this.closed) {\n            windows.shift().complete();\n        }\n        if (++this.count % startWindowEvery === 0 && !this.closed) {\n            var window_1 = new Subject_1.Subject();\n            windows.push(window_1);\n            destination.next(window_1);\n        }\n    };\n    WindowCountSubscriber.prototype._error = function (err) {\n        var windows = this.windows;\n        if (windows) {\n            while (windows.length > 0 && !this.closed) {\n                windows.shift().error(err);\n            }\n        }\n        this.destination.error(err);\n    };\n    WindowCountSubscriber.prototype._complete = function () {\n        var windows = this.windows;\n        if (windows) {\n            while (windows.length > 0 && !this.closed) {\n                windows.shift().complete();\n            }\n        }\n        this.destination.complete();\n    };\n    WindowCountSubscriber.prototype._unsubscribe = function () {\n        this.count = 0;\n        this.windows = null;\n    };\n    return WindowCountSubscriber;\n}(Subscriber_1.Subscriber));\n\n},{\"../Subject\":11,\"../Subscriber\":13}],291:[function(require,module,exports){\n\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Subject_1 = require('../Subject');\nvar async_1 = require('../scheduler/async');\nvar Subscriber_1 = require('../Subscriber');\n/**\n * Branch out the source Observable values as a nested Observable periodically\n * in time.\n *\n * <span class=\"informal\">It's like {@link bufferTime}, but emits a nested\n * Observable instead of an array.</span>\n *\n * <img src=\"./img/windowTime.png\" width=\"100%\">\n *\n * Returns an Observable that emits windows of items it collects from the source\n * Observable. The output Observable starts a new window periodically, as\n * determined by the `windowCreationInterval` argument. It emits each window\n * after a fixed timespan, specified by the `windowTimeSpan` argument. When the\n * source Observable completes or encounters an error, the output Observable\n * emits the current window and propagates the notification from the source\n * Observable. If `windowCreationInterval` is not provided, the output\n * Observable starts a new window when the previous window of duration\n * `windowTimeSpan` completes.\n *\n * @example <caption>In every window of 1 second each, emit at most 2 click events</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.windowTime(1000)\n *   .map(win => win.take(2)) // each window has at most 2 emissions\n *   .mergeAll(); // flatten the Observable-of-Observables\n * result.subscribe(x => console.log(x));\n *\n * @example <caption>Every 5 seconds start a window 1 second long, and emit at most 2 click events per window</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.windowTime(1000, 5000)\n *   .map(win => win.take(2)) // each window has at most 2 emissions\n *   .mergeAll(); // flatten the Observable-of-Observables\n * result.subscribe(x => console.log(x));\n *\n * @see {@link window}\n * @see {@link windowCount}\n * @see {@link windowToggle}\n * @see {@link windowWhen}\n * @see {@link bufferTime}\n *\n * @param {number} windowTimeSpan The amount of time to fill each window.\n * @param {number} [windowCreationInterval] The interval at which to start new\n * windows.\n * @param {Scheduler} [scheduler=async] The scheduler on which to schedule the\n * intervals that determine window boundaries.\n * @return {Observable<Observable<T>>} An observable of windows, which in turn\n * are Observables.\n * @method windowTime\n * @owner Observable\n */\nfunction windowTime(windowTimeSpan, windowCreationInterval, scheduler) {\n    if (windowCreationInterval === void 0) { windowCreationInterval = null; }\n    if (scheduler === void 0) { scheduler = async_1.async; }\n    return this.lift(new WindowTimeOperator(windowTimeSpan, windowCreationInterval, scheduler));\n}\nexports.windowTime = windowTime;\nvar WindowTimeOperator = (function () {\n    function WindowTimeOperator(windowTimeSpan, windowCreationInterval, scheduler) {\n        this.windowTimeSpan = windowTimeSpan;\n        this.windowCreationInterval = windowCreationInterval;\n        this.scheduler = scheduler;\n    }\n    WindowTimeOperator.prototype.call = function (subscriber, source) {\n        return source._subscribe(new WindowTimeSubscriber(subscriber, this.windowTimeSpan, this.windowCreationInterval, this.scheduler));\n    };\n    return WindowTimeOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar WindowTimeSubscriber = (function (_super) {\n    __extends(WindowTimeSubscriber, _super);\n    function WindowTimeSubscriber(destination, windowTimeSpan, windowCreationInterval, scheduler) {\n        _super.call(this, destination);\n        this.destination = destination;\n        this.windowTimeSpan = windowTimeSpan;\n        this.windowCreationInterval = windowCreationInterval;\n        this.scheduler = scheduler;\n        this.windows = [];\n        if (windowCreationInterval !== null && windowCreationInterval >= 0) {\n            var window_1 = this.openWindow();\n            var closeState = { subscriber: this, window: window_1, context: null };\n            var creationState = { windowTimeSpan: windowTimeSpan, windowCreationInterval: windowCreationInterval, subscriber: this, scheduler: scheduler };\n            this.add(scheduler.schedule(dispatchWindowClose, windowTimeSpan, closeState));\n            this.add(scheduler.schedule(dispatchWindowCreation, windowCreationInterval, creationState));\n        }\n        else {\n            var window_2 = this.openWindow();\n            var timeSpanOnlyState = { subscriber: this, window: window_2, windowTimeSpan: windowTimeSpan };\n            this.add(scheduler.schedule(dispatchWindowTimeSpanOnly, windowTimeSpan, timeSpanOnlyState));\n        }\n    }\n    WindowTimeSubscriber.prototype._next = function (value) {\n        var windows = this.windows;\n        var len = windows.length;\n        for (var i = 0; i < len; i++) {\n            var window_3 = windows[i];\n            if (!window_3.closed) {\n                window_3.next(value);\n            }\n        }\n    };\n    WindowTimeSubscriber.prototype._error = function (err) {\n        var windows = this.windows;\n        while (windows.length > 0) {\n            windows.shift().error(err);\n        }\n        this.destination.error(err);\n    };\n    WindowTimeSubscriber.prototype._complete = function () {\n        var windows = this.windows;\n        while (windows.length > 0) {\n            var window_4 = windows.shift();\n            if (!window_4.closed) {\n                window_4.complete();\n            }\n        }\n        this.destination.complete();\n    };\n    WindowTimeSubscriber.prototype.openWindow = function () {\n        var window = new Subject_1.Subject();\n        this.windows.push(window);\n        var destination = this.destination;\n        destination.next(window);\n        return window;\n    };\n    WindowTimeSubscriber.prototype.closeWindow = function (window) {\n        window.complete();\n        var windows = this.windows;\n        windows.splice(windows.indexOf(window), 1);\n    };\n    return WindowTimeSubscriber;\n}(Subscriber_1.Subscriber));\nfunction dispatchWindowTimeSpanOnly(state) {\n    var subscriber = state.subscriber, windowTimeSpan = state.windowTimeSpan, window = state.window;\n    if (window) {\n        window.complete();\n    }\n    state.window = subscriber.openWindow();\n    this.schedule(state, windowTimeSpan);\n}\nfunction dispatchWindowCreation(state) {\n    var windowTimeSpan = state.windowTimeSpan, subscriber = state.subscriber, scheduler = state.scheduler, windowCreationInterval = state.windowCreationInterval;\n    var window = subscriber.openWindow();\n    var action = this;\n    var context = { action: action, subscription: null };\n    var timeSpanState = { subscriber: subscriber, window: window, context: context };\n    context.subscription = scheduler.schedule(dispatchWindowClose, windowTimeSpan, timeSpanState);\n    action.add(context.subscription);\n    action.schedule(state, windowCreationInterval);\n}\nfunction dispatchWindowClose(arg) {\n    var subscriber = arg.subscriber, window = arg.window, context = arg.context;\n    if (context && context.action && context.subscription) {\n        context.action.remove(context.subscription);\n    }\n    subscriber.closeWindow(window);\n}\n\n},{\"../Subject\":11,\"../Subscriber\":13,\"../scheduler/async\":309}],292:[function(require,module,exports){\n\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Subject_1 = require('../Subject');\nvar Subscription_1 = require('../Subscription');\nvar tryCatch_1 = require('../util/tryCatch');\nvar errorObject_1 = require('../util/errorObject');\nvar OuterSubscriber_1 = require('../OuterSubscriber');\nvar subscribeToResult_1 = require('../util/subscribeToResult');\n/**\n * Branch out the source Observable values as a nested Observable starting from\n * an emission from `openings` and ending when the output of `closingSelector`\n * emits.\n *\n * <span class=\"informal\">It's like {@link bufferToggle}, but emits a nested\n * Observable instead of an array.</span>\n *\n * <img src=\"./img/windowToggle.png\" width=\"100%\">\n *\n * Returns an Observable that emits windows of items it collects from the source\n * Observable. The output Observable emits windows that contain those items\n * emitted by the source Observable between the time when the `openings`\n * Observable emits an item and when the Observable returned by\n * `closingSelector` emits an item.\n *\n * @example <caption>Every other second, emit the click events from the next 500ms</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var openings = Rx.Observable.interval(1000);\n * var result = clicks.windowToggle(openings, i =>\n *   i % 2 ? Rx.Observable.interval(500) : Rx.Observable.empty()\n * ).mergeAll();\n * result.subscribe(x => console.log(x));\n *\n * @see {@link window}\n * @see {@link windowCount}\n * @see {@link windowTime}\n * @see {@link windowWhen}\n * @see {@link bufferToggle}\n *\n * @param {Observable<O>} openings An observable of notifications to start new\n * windows.\n * @param {function(value: O): Observable} closingSelector A function that takes\n * the value emitted by the `openings` observable and returns an Observable,\n * which, when it emits (either `next` or `complete`), signals that the\n * associated window should complete.\n * @return {Observable<Observable<T>>} An observable of windows, which in turn\n * are Observables.\n * @method windowToggle\n * @owner Observable\n */\nfunction windowToggle(openings, closingSelector) {\n    return this.lift(new WindowToggleOperator(openings, closingSelector));\n}\nexports.windowToggle = windowToggle;\nvar WindowToggleOperator = (function () {\n    function WindowToggleOperator(openings, closingSelector) {\n        this.openings = openings;\n        this.closingSelector = closingSelector;\n    }\n    WindowToggleOperator.prototype.call = function (subscriber, source) {\n        return source._subscribe(new WindowToggleSubscriber(subscriber, this.openings, this.closingSelector));\n    };\n    return WindowToggleOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar WindowToggleSubscriber = (function (_super) {\n    __extends(WindowToggleSubscriber, _super);\n    function WindowToggleSubscriber(destination, openings, closingSelector) {\n        _super.call(this, destination);\n        this.openings = openings;\n        this.closingSelector = closingSelector;\n        this.contexts = [];\n        this.add(this.openSubscription = subscribeToResult_1.subscribeToResult(this, openings, openings));\n    }\n    WindowToggleSubscriber.prototype._next = function (value) {\n        var contexts = this.contexts;\n        if (contexts) {\n            var len = contexts.length;\n            for (var i = 0; i < len; i++) {\n                contexts[i].window.next(value);\n            }\n        }\n    };\n    WindowToggleSubscriber.prototype._error = function (err) {\n        var contexts = this.contexts;\n        this.contexts = null;\n        if (contexts) {\n            var len = contexts.length;\n            var index = -1;\n            while (++index < len) {\n                var context = contexts[index];\n                context.window.error(err);\n                context.subscription.unsubscribe();\n            }\n        }\n        _super.prototype._error.call(this, err);\n    };\n    WindowToggleSubscriber.prototype._complete = function () {\n        var contexts = this.contexts;\n        this.contexts = null;\n        if (contexts) {\n            var len = contexts.length;\n            var index = -1;\n            while (++index < len) {\n                var context = contexts[index];\n                context.window.complete();\n                context.subscription.unsubscribe();\n            }\n        }\n        _super.prototype._complete.call(this);\n    };\n    WindowToggleSubscriber.prototype._unsubscribe = function () {\n        var contexts = this.contexts;\n        this.contexts = null;\n        if (contexts) {\n            var len = contexts.length;\n            var index = -1;\n            while (++index < len) {\n                var context = contexts[index];\n                context.window.unsubscribe();\n                context.subscription.unsubscribe();\n            }\n        }\n    };\n    WindowToggleSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n        if (outerValue === this.openings) {\n            var closingSelector = this.closingSelector;\n            var closingNotifier = tryCatch_1.tryCatch(closingSelector)(innerValue);\n            if (closingNotifier === errorObject_1.errorObject) {\n                return this.error(errorObject_1.errorObject.e);\n            }\n            else {\n                var window_1 = new Subject_1.Subject();\n                var subscription = new Subscription_1.Subscription();\n                var context = { window: window_1, subscription: subscription };\n                this.contexts.push(context);\n                var innerSubscription = subscribeToResult_1.subscribeToResult(this, closingNotifier, context);\n                if (innerSubscription.closed) {\n                    this.closeWindow(this.contexts.length - 1);\n                }\n                else {\n                    innerSubscription.context = context;\n                    subscription.add(innerSubscription);\n                }\n                this.destination.next(window_1);\n            }\n        }\n        else {\n            this.closeWindow(this.contexts.indexOf(outerValue));\n        }\n    };\n    WindowToggleSubscriber.prototype.notifyError = function (err) {\n        this.error(err);\n    };\n    WindowToggleSubscriber.prototype.notifyComplete = function (inner) {\n        if (inner !== this.openSubscription) {\n            this.closeWindow(this.contexts.indexOf(inner.context));\n        }\n    };\n    WindowToggleSubscriber.prototype.closeWindow = function (index) {\n        if (index === -1) {\n            return;\n        }\n        var contexts = this.contexts;\n        var context = contexts[index];\n        var window = context.window, subscription = context.subscription;\n        contexts.splice(index, 1);\n        window.complete();\n        subscription.unsubscribe();\n    };\n    return WindowToggleSubscriber;\n}(OuterSubscriber_1.OuterSubscriber));\n\n},{\"../OuterSubscriber\":7,\"../Subject\":11,\"../Subscription\":14,\"../util/errorObject\":330,\"../util/subscribeToResult\":341,\"../util/tryCatch\":343}],293:[function(require,module,exports){\n\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Subject_1 = require('../Subject');\nvar tryCatch_1 = require('../util/tryCatch');\nvar errorObject_1 = require('../util/errorObject');\nvar OuterSubscriber_1 = require('../OuterSubscriber');\nvar subscribeToResult_1 = require('../util/subscribeToResult');\n/**\n * Branch out the source Observable values as a nested Observable using a\n * factory function of closing Observables to determine when to start a new\n * window.\n *\n * <span class=\"informal\">It's like {@link bufferWhen}, but emits a nested\n * Observable instead of an array.</span>\n *\n * <img src=\"./img/windowWhen.png\" width=\"100%\">\n *\n * Returns an Observable that emits windows of items it collects from the source\n * Observable. The output Observable emits connected, non-overlapping windows.\n * It emits the current window and opens a new one whenever the Observable\n * produced by the specified `closingSelector` function emits an item. The first\n * window is opened immediately when subscribing to the output Observable.\n *\n * @example <caption>Emit only the first two clicks events in every window of [1-5] random seconds</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks\n *   .windowWhen(() => Rx.Observable.interval(1000 + Math.random() * 4000))\n *   .map(win => win.take(2)) // each window has at most 2 emissions\n *   .mergeAll(); // flatten the Observable-of-Observables\n * result.subscribe(x => console.log(x));\n *\n * @see {@link window}\n * @see {@link windowCount}\n * @see {@link windowTime}\n * @see {@link windowToggle}\n * @see {@link bufferWhen}\n *\n * @param {function(): Observable} closingSelector A function that takes no\n * arguments and returns an Observable that signals (on either `next` or\n * `complete`) when to close the previous window and start a new one.\n * @return {Observable<Observable<T>>} An observable of windows, which in turn\n * are Observables.\n * @method windowWhen\n * @owner Observable\n */\nfunction windowWhen(closingSelector) {\n    return this.lift(new WindowOperator(closingSelector));\n}\nexports.windowWhen = windowWhen;\nvar WindowOperator = (function () {\n    function WindowOperator(closingSelector) {\n        this.closingSelector = closingSelector;\n    }\n    WindowOperator.prototype.call = function (subscriber, source) {\n        return source._subscribe(new WindowSubscriber(subscriber, this.closingSelector));\n    };\n    return WindowOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar WindowSubscriber = (function (_super) {\n    __extends(WindowSubscriber, _super);\n    function WindowSubscriber(destination, closingSelector) {\n        _super.call(this, destination);\n        this.destination = destination;\n        this.closingSelector = closingSelector;\n        this.openWindow();\n    }\n    WindowSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n        this.openWindow(innerSub);\n    };\n    WindowSubscriber.prototype.notifyError = function (error, innerSub) {\n        this._error(error);\n    };\n    WindowSubscriber.prototype.notifyComplete = function (innerSub) {\n        this.openWindow(innerSub);\n    };\n    WindowSubscriber.prototype._next = function (value) {\n        this.window.next(value);\n    };\n    WindowSubscriber.prototype._error = function (err) {\n        this.window.error(err);\n        this.destination.error(err);\n        this.unsubscribeClosingNotification();\n    };\n    WindowSubscriber.prototype._complete = function () {\n        this.window.complete();\n        this.destination.complete();\n        this.unsubscribeClosingNotification();\n    };\n    WindowSubscriber.prototype.unsubscribeClosingNotification = function () {\n        if (this.closingNotification) {\n            this.closingNotification.unsubscribe();\n        }\n    };\n    WindowSubscriber.prototype.openWindow = function (innerSub) {\n        if (innerSub === void 0) { innerSub = null; }\n        if (innerSub) {\n            this.remove(innerSub);\n            innerSub.unsubscribe();\n        }\n        var prevWindow = this.window;\n        if (prevWindow) {\n            prevWindow.complete();\n        }\n        var window = this.window = new Subject_1.Subject();\n        this.destination.next(window);\n        var closingNotifier = tryCatch_1.tryCatch(this.closingSelector)();\n        if (closingNotifier === errorObject_1.errorObject) {\n            var err = errorObject_1.errorObject.e;\n            this.destination.error(err);\n            this.window.error(err);\n        }\n        else {\n            this.add(this.closingNotification = subscribeToResult_1.subscribeToResult(this, closingNotifier));\n        }\n    };\n    return WindowSubscriber;\n}(OuterSubscriber_1.OuterSubscriber));\n\n},{\"../OuterSubscriber\":7,\"../Subject\":11,\"../util/errorObject\":330,\"../util/subscribeToResult\":341,\"../util/tryCatch\":343}],294:[function(require,module,exports){\n\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar OuterSubscriber_1 = require('../OuterSubscriber');\nvar subscribeToResult_1 = require('../util/subscribeToResult');\n/**\n * Combines the source Observable with other Observables to create an Observable\n * whose values are calculated from the latest values of each, only when the\n * source emits.\n *\n * <span class=\"informal\">Whenever the source Observable emits a value, it\n * computes a formula using that value plus the latest values from other input\n * Observables, then emits the output of that formula.</span>\n *\n * <img src=\"./img/withLatestFrom.png\" width=\"100%\">\n *\n * `withLatestFrom` combines each value from the source Observable (the\n * instance) with the latest values from the other input Observables only when\n * the source emits a value, optionally using a `project` function to determine\n * the value to be emitted on the output Observable. All input Observables must\n * emit at least one value before the output Observable will emit a value.\n *\n * @example <caption>On every click event, emit an array with the latest timer event plus the click event</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var timer = Rx.Observable.interval(1000);\n * var result = clicks.withLatestFrom(timer);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link combineLatest}\n *\n * @param {Observable} other An input Observable to combine with the source\n * Observable. More than one input Observables may be given as argument.\n * @param {Function} [project] Projection function for combining values\n * together. Receives all values in order of the Observables passed, where the\n * first parameter is a value from the source Observable. (e.g.\n * `a.withLatestFrom(b, c, (a1, b1, c1) => a1 + b1 + c1)`). If this is not\n * passed, arrays will be emitted on the output Observable.\n * @return {Observable} An Observable of projected values from the most recent\n * values from each input Observable, or an array of the most recent values from\n * each input Observable.\n * @method withLatestFrom\n * @owner Observable\n */\nfunction withLatestFrom() {\n    var args = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        args[_i - 0] = arguments[_i];\n    }\n    var project;\n    if (typeof args[args.length - 1] === 'function') {\n        project = args.pop();\n    }\n    var observables = args;\n    return this.lift(new WithLatestFromOperator(observables, project));\n}\nexports.withLatestFrom = withLatestFrom;\n/* tslint:enable:max-line-length */\nvar WithLatestFromOperator = (function () {\n    function WithLatestFromOperator(observables, project) {\n        this.observables = observables;\n        this.project = project;\n    }\n    WithLatestFromOperator.prototype.call = function (subscriber, source) {\n        return source._subscribe(new WithLatestFromSubscriber(subscriber, this.observables, this.project));\n    };\n    return WithLatestFromOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar WithLatestFromSubscriber = (function (_super) {\n    __extends(WithLatestFromSubscriber, _super);\n    function WithLatestFromSubscriber(destination, observables, project) {\n        _super.call(this, destination);\n        this.observables = observables;\n        this.project = project;\n        this.toRespond = [];\n        var len = observables.length;\n        this.values = new Array(len);\n        for (var i = 0; i < len; i++) {\n            this.toRespond.push(i);\n        }\n        for (var i = 0; i < len; i++) {\n            var observable = observables[i];\n            this.add(subscribeToResult_1.subscribeToResult(this, observable, observable, i));\n        }\n    }\n    WithLatestFromSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n        this.values[outerIndex] = innerValue;\n        var toRespond = this.toRespond;\n        if (toRespond.length > 0) {\n            var found = toRespond.indexOf(outerIndex);\n            if (found !== -1) {\n                toRespond.splice(found, 1);\n            }\n        }\n    };\n    WithLatestFromSubscriber.prototype.notifyComplete = function () {\n        // noop\n    };\n    WithLatestFromSubscriber.prototype._next = function (value) {\n        if (this.toRespond.length === 0) {\n            var args = [value].concat(this.values);\n            if (this.project) {\n                this._tryProject(args);\n            }\n            else {\n                this.destination.next(args);\n            }\n        }\n    };\n    WithLatestFromSubscriber.prototype._tryProject = function (args) {\n        var result;\n        try {\n            result = this.project.apply(this, args);\n        }\n        catch (err) {\n            this.destination.error(err);\n            return;\n        }\n        this.destination.next(result);\n    };\n    return WithLatestFromSubscriber;\n}(OuterSubscriber_1.OuterSubscriber));\n\n},{\"../OuterSubscriber\":7,\"../util/subscribeToResult\":341}],295:[function(require,module,exports){\n\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar ArrayObservable_1 = require('../observable/ArrayObservable');\nvar isArray_1 = require('../util/isArray');\nvar Subscriber_1 = require('../Subscriber');\nvar OuterSubscriber_1 = require('../OuterSubscriber');\nvar subscribeToResult_1 = require('../util/subscribeToResult');\nvar iterator_1 = require('../symbol/iterator');\n/**\n * @param observables\n * @return {Observable<R>}\n * @method zip\n * @owner Observable\n */\nfunction zipProto() {\n    var observables = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        observables[_i - 0] = arguments[_i];\n    }\n    observables.unshift(this);\n    return zipStatic.apply(this, observables);\n}\nexports.zipProto = zipProto;\n/* tslint:enable:max-line-length */\n/**\n * @param observables\n * @return {Observable<R>}\n * @static true\n * @name zip\n * @owner Observable\n */\nfunction zipStatic() {\n    var observables = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        observables[_i - 0] = arguments[_i];\n    }\n    var project = observables[observables.length - 1];\n    if (typeof project === 'function') {\n        observables.pop();\n    }\n    return new ArrayObservable_1.ArrayObservable(observables).lift(new ZipOperator(project));\n}\nexports.zipStatic = zipStatic;\nvar ZipOperator = (function () {\n    function ZipOperator(project) {\n        this.project = project;\n    }\n    ZipOperator.prototype.call = function (subscriber, source) {\n        return source._subscribe(new ZipSubscriber(subscriber, this.project));\n    };\n    return ZipOperator;\n}());\nexports.ZipOperator = ZipOperator;\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar ZipSubscriber = (function (_super) {\n    __extends(ZipSubscriber, _super);\n    function ZipSubscriber(destination, project, values) {\n        if (values === void 0) { values = Object.create(null); }\n        _super.call(this, destination);\n        this.index = 0;\n        this.iterators = [];\n        this.active = 0;\n        this.project = (typeof project === 'function') ? project : null;\n        this.values = values;\n    }\n    ZipSubscriber.prototype._next = function (value) {\n        var iterators = this.iterators;\n        var index = this.index++;\n        if (isArray_1.isArray(value)) {\n            iterators.push(new StaticArrayIterator(value));\n        }\n        else if (typeof value[iterator_1.$$iterator] === 'function') {\n            iterators.push(new StaticIterator(value[iterator_1.$$iterator]()));\n        }\n        else {\n            iterators.push(new ZipBufferIterator(this.destination, this, value, index));\n        }\n    };\n    ZipSubscriber.prototype._complete = function () {\n        var iterators = this.iterators;\n        var len = iterators.length;\n        this.active = len;\n        for (var i = 0; i < len; i++) {\n            var iterator = iterators[i];\n            if (iterator.stillUnsubscribed) {\n                this.add(iterator.subscribe(iterator, i));\n            }\n            else {\n                this.active--; // not an observable\n            }\n        }\n    };\n    ZipSubscriber.prototype.notifyInactive = function () {\n        this.active--;\n        if (this.active === 0) {\n            this.destination.complete();\n        }\n    };\n    ZipSubscriber.prototype.checkIterators = function () {\n        var iterators = this.iterators;\n        var len = iterators.length;\n        var destination = this.destination;\n        // abort if not all of them have values\n        for (var i = 0; i < len; i++) {\n            var iterator = iterators[i];\n            if (typeof iterator.hasValue === 'function' && !iterator.hasValue()) {\n                return;\n            }\n        }\n        var shouldComplete = false;\n        var args = [];\n        for (var i = 0; i < len; i++) {\n            var iterator = iterators[i];\n            var result = iterator.next();\n            // check to see if it's completed now that you've gotten\n            // the next value.\n            if (iterator.hasCompleted()) {\n                shouldComplete = true;\n            }\n            if (result.done) {\n                destination.complete();\n                return;\n            }\n            args.push(result.value);\n        }\n        if (this.project) {\n            this._tryProject(args);\n        }\n        else {\n            destination.next(args);\n        }\n        if (shouldComplete) {\n            destination.complete();\n        }\n    };\n    ZipSubscriber.prototype._tryProject = function (args) {\n        var result;\n        try {\n            result = this.project.apply(this, args);\n        }\n        catch (err) {\n            this.destination.error(err);\n            return;\n        }\n        this.destination.next(result);\n    };\n    return ZipSubscriber;\n}(Subscriber_1.Subscriber));\nexports.ZipSubscriber = ZipSubscriber;\nvar StaticIterator = (function () {\n    function StaticIterator(iterator) {\n        this.iterator = iterator;\n        this.nextResult = iterator.next();\n    }\n    StaticIterator.prototype.hasValue = function () {\n        return true;\n    };\n    StaticIterator.prototype.next = function () {\n        var result = this.nextResult;\n        this.nextResult = this.iterator.next();\n        return result;\n    };\n    StaticIterator.prototype.hasCompleted = function () {\n        var nextResult = this.nextResult;\n        return nextResult && nextResult.done;\n    };\n    return StaticIterator;\n}());\nvar StaticArrayIterator = (function () {\n    function StaticArrayIterator(array) {\n        this.array = array;\n        this.index = 0;\n        this.length = 0;\n        this.length = array.length;\n    }\n    StaticArrayIterator.prototype[iterator_1.$$iterator] = function () {\n        return this;\n    };\n    StaticArrayIterator.prototype.next = function (value) {\n        var i = this.index++;\n        var array = this.array;\n        return i < this.length ? { value: array[i], done: false } : { value: null, done: true };\n    };\n    StaticArrayIterator.prototype.hasValue = function () {\n        return this.array.length > this.index;\n    };\n    StaticArrayIterator.prototype.hasCompleted = function () {\n        return this.array.length === this.index;\n    };\n    return StaticArrayIterator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar ZipBufferIterator = (function (_super) {\n    __extends(ZipBufferIterator, _super);\n    function ZipBufferIterator(destination, parent, observable, index) {\n        _super.call(this, destination);\n        this.parent = parent;\n        this.observable = observable;\n        this.index = index;\n        this.stillUnsubscribed = true;\n        this.buffer = [];\n        this.isComplete = false;\n    }\n    ZipBufferIterator.prototype[iterator_1.$$iterator] = function () {\n        return this;\n    };\n    // NOTE: there is actually a name collision here with Subscriber.next and Iterator.next\n    //    this is legit because `next()` will never be called by a subscription in this case.\n    ZipBufferIterator.prototype.next = function () {\n        var buffer = this.buffer;\n        if (buffer.length === 0 && this.isComplete) {\n            return { value: null, done: true };\n        }\n        else {\n            return { value: buffer.shift(), done: false };\n        }\n    };\n    ZipBufferIterator.prototype.hasValue = function () {\n        return this.buffer.length > 0;\n    };\n    ZipBufferIterator.prototype.hasCompleted = function () {\n        return this.buffer.length === 0 && this.isComplete;\n    };\n    ZipBufferIterator.prototype.notifyComplete = function () {\n        if (this.buffer.length > 0) {\n            this.isComplete = true;\n            this.parent.notifyInactive();\n        }\n        else {\n            this.destination.complete();\n        }\n    };\n    ZipBufferIterator.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n        this.buffer.push(innerValue);\n        this.parent.checkIterators();\n    };\n    ZipBufferIterator.prototype.subscribe = function (value, index) {\n        return subscribeToResult_1.subscribeToResult(this, this.observable, this, index);\n    };\n    return ZipBufferIterator;\n}(OuterSubscriber_1.OuterSubscriber));\n\n},{\"../OuterSubscriber\":7,\"../Subscriber\":13,\"../observable/ArrayObservable\":145,\"../symbol/iterator\":311,\"../util/isArray\":331,\"../util/subscribeToResult\":341}],296:[function(require,module,exports){\n\"use strict\";\nvar zip_1 = require('./zip');\n/**\n * @param project\n * @return {Observable<R>|WebSocketSubject<T>|Observable<T>}\n * @method zipAll\n * @owner Observable\n */\nfunction zipAll(project) {\n    return this.lift(new zip_1.ZipOperator(project));\n}\nexports.zipAll = zipAll;\n\n},{\"./zip\":295}],297:[function(require,module,exports){\n\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Subscription_1 = require('../Subscription');\n/**\n * A unit of work to be executed in a {@link Scheduler}. An action is typically\n * created from within a Scheduler and an RxJS user does not need to concern\n * themselves about creating and manipulating an Action.\n *\n * ```ts\n * class Action<T> extends Subscription {\n *   new (scheduler: Scheduler, work: (state?: T) => void);\n *   schedule(state?: T, delay: number = 0): Subscription;\n * }\n * ```\n *\n * @class Action<T>\n */\nvar Action = (function (_super) {\n    __extends(Action, _super);\n    function Action(scheduler, work) {\n        _super.call(this);\n    }\n    /**\n     * Schedules this action on its parent Scheduler for execution. May be passed\n     * some context object, `state`. May happen at some point in the future,\n     * according to the `delay` parameter, if specified.\n     * @param {T} [state] Some contextual data that the `work` function uses when\n     * called by the Scheduler.\n     * @param {number} [delay] Time to wait before executing the work, where the\n     * time unit is implicit and defined by the Scheduler.\n     * @return {void}\n     */\n    Action.prototype.schedule = function (state, delay) {\n        if (delay === void 0) { delay = 0; }\n        return this;\n    };\n    return Action;\n}(Subscription_1.Subscription));\nexports.Action = Action;\n\n},{\"../Subscription\":14}],298:[function(require,module,exports){\n\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar AsyncAction_1 = require('./AsyncAction');\nvar AnimationFrame_1 = require('../util/AnimationFrame');\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar AnimationFrameAction = (function (_super) {\n    __extends(AnimationFrameAction, _super);\n    function AnimationFrameAction(scheduler, work) {\n        _super.call(this, scheduler, work);\n        this.scheduler = scheduler;\n        this.work = work;\n    }\n    AnimationFrameAction.prototype.requestAsyncId = function (scheduler, id, delay) {\n        if (delay === void 0) { delay = 0; }\n        // If delay is greater than 0, request as an async action.\n        if (delay !== null && delay > 0) {\n            return _super.prototype.requestAsyncId.call(this, scheduler, id, delay);\n        }\n        // Push the action to the end of the scheduler queue.\n        scheduler.actions.push(this);\n        // If an animation frame has already been requested, don't request another\n        // one. If an animation frame hasn't been requested yet, request one. Return\n        // the current animation frame request id.\n        return scheduler.scheduled || (scheduler.scheduled = AnimationFrame_1.AnimationFrame.requestAnimationFrame(scheduler.flush.bind(scheduler, null)));\n    };\n    AnimationFrameAction.prototype.recycleAsyncId = function (scheduler, id, delay) {\n        if (delay === void 0) { delay = 0; }\n        // If delay exists and is greater than 0, recycle as an async action.\n        if (delay !== null && delay > 0) {\n            return _super.prototype.recycleAsyncId.call(this, scheduler, id, delay);\n        }\n        // If the scheduler queue is empty, cancel the requested animation frame and\n        // set the scheduled flag to undefined so the next AnimationFrameAction will\n        // request its own.\n        if (scheduler.actions.length === 0) {\n            AnimationFrame_1.AnimationFrame.cancelAnimationFrame(id);\n            scheduler.scheduled = undefined;\n        }\n        // Return undefined so the action knows to request a new async id if it's rescheduled.\n        return undefined;\n    };\n    return AnimationFrameAction;\n}(AsyncAction_1.AsyncAction));\nexports.AnimationFrameAction = AnimationFrameAction;\n\n},{\"../util/AnimationFrame\":319,\"./AsyncAction\":302}],299:[function(require,module,exports){\n\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar AsyncScheduler_1 = require('./AsyncScheduler');\nvar AnimationFrameScheduler = (function (_super) {\n    __extends(AnimationFrameScheduler, _super);\n    function AnimationFrameScheduler() {\n        _super.apply(this, arguments);\n    }\n    AnimationFrameScheduler.prototype.flush = function () {\n        this.active = true;\n        this.scheduled = undefined;\n        var actions = this.actions;\n        var error;\n        var index = -1;\n        var count = actions.length;\n        var action = actions.shift();\n        do {\n            if (error = action.execute(action.state, action.delay)) {\n                break;\n            }\n        } while (++index < count && (action = actions.shift()));\n        this.active = false;\n        if (error) {\n            while (++index < count && (action = actions.shift())) {\n                action.unsubscribe();\n            }\n            throw error;\n        }\n    };\n    return AnimationFrameScheduler;\n}(AsyncScheduler_1.AsyncScheduler));\nexports.AnimationFrameScheduler = AnimationFrameScheduler;\n\n},{\"./AsyncScheduler\":303}],300:[function(require,module,exports){\n\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Immediate_1 = require('../util/Immediate');\nvar AsyncAction_1 = require('./AsyncAction');\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar AsapAction = (function (_super) {\n    __extends(AsapAction, _super);\n    function AsapAction(scheduler, work) {\n        _super.call(this, scheduler, work);\n        this.scheduler = scheduler;\n        this.work = work;\n    }\n    AsapAction.prototype.requestAsyncId = function (scheduler, id, delay) {\n        if (delay === void 0) { delay = 0; }\n        // If delay is greater than 0, request as an async action.\n        if (delay !== null && delay > 0) {\n            return _super.prototype.requestAsyncId.call(this, scheduler, id, delay);\n        }\n        // Push the action to the end of the scheduler queue.\n        scheduler.actions.push(this);\n        // If a microtask has already been scheduled, don't schedule another\n        // one. If a microtask hasn't been scheduled yet, schedule one now. Return\n        // the current scheduled microtask id.\n        return scheduler.scheduled || (scheduler.scheduled = Immediate_1.Immediate.setImmediate(scheduler.flush.bind(scheduler, null)));\n    };\n    AsapAction.prototype.recycleAsyncId = function (scheduler, id, delay) {\n        if (delay === void 0) { delay = 0; }\n        // If delay exists and is greater than 0, recycle as an async action.\n        if (delay !== null && delay > 0) {\n            return _super.prototype.recycleAsyncId.call(this, scheduler, id, delay);\n        }\n        // If the scheduler queue is empty, cancel the requested microtask and\n        // set the scheduled flag to undefined so the next AsapAction will schedule\n        // its own.\n        if (scheduler.actions.length === 0) {\n            Immediate_1.Immediate.clearImmediate(id);\n            scheduler.scheduled = undefined;\n        }\n        // Return undefined so the action knows to request a new async id if it's rescheduled.\n        return undefined;\n    };\n    return AsapAction;\n}(AsyncAction_1.AsyncAction));\nexports.AsapAction = AsapAction;\n\n},{\"../util/Immediate\":323,\"./AsyncAction\":302}],301:[function(require,module,exports){\n\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar AsyncScheduler_1 = require('./AsyncScheduler');\nvar AsapScheduler = (function (_super) {\n    __extends(AsapScheduler, _super);\n    function AsapScheduler() {\n        _super.apply(this, arguments);\n    }\n    AsapScheduler.prototype.flush = function () {\n        this.active = true;\n        this.scheduled = undefined;\n        var actions = this.actions;\n        var error;\n        var index = -1;\n        var count = actions.length;\n        var action = actions.shift();\n        do {\n            if (error = action.execute(action.state, action.delay)) {\n                break;\n            }\n        } while (++index < count && (action = actions.shift()));\n        this.active = false;\n        if (error) {\n            while (++index < count && (action = actions.shift())) {\n                action.unsubscribe();\n            }\n            throw error;\n        }\n    };\n    return AsapScheduler;\n}(AsyncScheduler_1.AsyncScheduler));\nexports.AsapScheduler = AsapScheduler;\n\n},{\"./AsyncScheduler\":303}],302:[function(require,module,exports){\n\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar root_1 = require('../util/root');\nvar Action_1 = require('./Action');\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar AsyncAction = (function (_super) {\n    __extends(AsyncAction, _super);\n    function AsyncAction(scheduler, work) {\n        _super.call(this, scheduler, work);\n        this.scheduler = scheduler;\n        this.work = work;\n        this.pending = false;\n    }\n    AsyncAction.prototype.schedule = function (state, delay) {\n        if (delay === void 0) { delay = 0; }\n        if (this.closed) {\n            return this;\n        }\n        // Always replace the current state with the new state.\n        this.state = state;\n        // Set the pending flag indicating that this action has been scheduled, or\n        // has recursively rescheduled itself.\n        this.pending = true;\n        var id = this.id;\n        var scheduler = this.scheduler;\n        //\n        // Important implementation note:\n        //\n        // Actions only execute once by default, unless rescheduled from within the\n        // scheduled callback. This allows us to implement single and repeat\n        // actions via the same code path, without adding API surface area, as well\n        // as mimic traditional recursion but across asynchronous boundaries.\n        //\n        // However, JS runtimes and timers distinguish between intervals achieved by\n        // serial `setTimeout` calls vs. a single `setInterval` call. An interval of\n        // serial `setTimeout` calls can be individually delayed, which delays\n        // scheduling the next `setTimeout`, and so on. `setInterval` attempts to\n        // guarantee the interval callback will be invoked more precisely to the\n        // interval period, regardless of load.\n        //\n        // Therefore, we use `setInterval` to schedule single and repeat actions.\n        // If the action reschedules itself with the same delay, the interval is not\n        // canceled. If the action doesn't reschedule, or reschedules with a\n        // different delay, the interval will be canceled after scheduled callback\n        // execution.\n        //\n        if (id != null) {\n            this.id = this.recycleAsyncId(scheduler, id, delay);\n        }\n        this.delay = delay;\n        // If this action has already an async Id, don't request a new one.\n        this.id = this.id || this.requestAsyncId(scheduler, this.id, delay);\n        return this;\n    };\n    AsyncAction.prototype.requestAsyncId = function (scheduler, id, delay) {\n        if (delay === void 0) { delay = 0; }\n        return root_1.root.setInterval(scheduler.flush.bind(scheduler, this), delay);\n    };\n    AsyncAction.prototype.recycleAsyncId = function (scheduler, id, delay) {\n        if (delay === void 0) { delay = 0; }\n        // If this action is rescheduled with the same delay time, don't clear the interval id.\n        if (delay !== null && this.delay === delay) {\n            return id;\n        }\n        // Otherwise, if the action's delay time is different from the current delay,\n        // clear the interval id\n        return root_1.root.clearInterval(id) && undefined || undefined;\n    };\n    /**\n     * Immediately executes this action and the `work` it contains.\n     * @return {any}\n     */\n    AsyncAction.prototype.execute = function (state, delay) {\n        if (this.closed) {\n            return new Error('executing a cancelled action');\n        }\n        this.pending = false;\n        var error = this._execute(state, delay);\n        if (error) {\n            return error;\n        }\n        else if (this.pending === false && this.id != null) {\n            // Dequeue if the action didn't reschedule itself. Don't call\n            // unsubscribe(), because the action could reschedule later.\n            // For example:\n            // ```\n            // scheduler.schedule(function doWork(counter) {\n            //   /* ... I'm a busy worker bee ... */\n            //   var originalAction = this;\n            //   /* wait 100ms before rescheduling the action */\n            //   setTimeout(function () {\n            //     originalAction.schedule(counter + 1);\n            //   }, 100);\n            // }, 1000);\n            // ```\n            this.id = this.recycleAsyncId(this.scheduler, this.id, null);\n        }\n    };\n    AsyncAction.prototype._execute = function (state, delay) {\n        var errored = false;\n        var errorValue = undefined;\n        try {\n            this.work(state);\n        }\n        catch (e) {\n            errored = true;\n            errorValue = !!e && e || new Error(e);\n        }\n        if (errored) {\n            this.unsubscribe();\n            return errorValue;\n        }\n    };\n    AsyncAction.prototype._unsubscribe = function () {\n        var id = this.id;\n        var scheduler = this.scheduler;\n        var actions = scheduler.actions;\n        var index = actions.indexOf(this);\n        this.work = null;\n        this.delay = null;\n        this.state = null;\n        this.pending = false;\n        this.scheduler = null;\n        if (index !== -1) {\n            actions.splice(index, 1);\n        }\n        if (id != null) {\n            this.id = this.recycleAsyncId(scheduler, id, null);\n        }\n    };\n    return AsyncAction;\n}(Action_1.Action));\nexports.AsyncAction = AsyncAction;\n\n},{\"../util/root\":340,\"./Action\":297}],303:[function(require,module,exports){\n\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Scheduler_1 = require('../Scheduler');\nvar AsyncScheduler = (function (_super) {\n    __extends(AsyncScheduler, _super);\n    function AsyncScheduler() {\n        _super.apply(this, arguments);\n        this.actions = [];\n        /**\n         * A flag to indicate whether the Scheduler is currently executing a batch of\n         * queued actions.\n         * @type {boolean}\n         */\n        this.active = false;\n        /**\n         * An internal ID used to track the latest asynchronous task such as those\n         * coming from `setTimeout`, `setInterval`, `requestAnimationFrame`, and\n         * others.\n         * @type {any}\n         */\n        this.scheduled = undefined;\n    }\n    AsyncScheduler.prototype.flush = function (action) {\n        var actions = this.actions;\n        if (this.active) {\n            actions.push(action);\n            return;\n        }\n        var error;\n        this.active = true;\n        do {\n            if (error = action.execute(action.state, action.delay)) {\n                break;\n            }\n        } while (action = actions.shift()); // exhaust the scheduler queue\n        this.active = false;\n        if (error) {\n            while (action = actions.shift()) {\n                action.unsubscribe();\n            }\n            throw error;\n        }\n    };\n    return AsyncScheduler;\n}(Scheduler_1.Scheduler));\nexports.AsyncScheduler = AsyncScheduler;\n\n},{\"../Scheduler\":10}],304:[function(require,module,exports){\n\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar AsyncAction_1 = require('./AsyncAction');\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar QueueAction = (function (_super) {\n    __extends(QueueAction, _super);\n    function QueueAction(scheduler, work) {\n        _super.call(this, scheduler, work);\n        this.scheduler = scheduler;\n        this.work = work;\n    }\n    QueueAction.prototype.schedule = function (state, delay) {\n        if (delay === void 0) { delay = 0; }\n        if (delay > 0) {\n            return _super.prototype.schedule.call(this, state, delay);\n        }\n        this.delay = delay;\n        this.state = state;\n        this.scheduler.flush(this);\n        return this;\n    };\n    QueueAction.prototype.execute = function (state, delay) {\n        return (delay > 0 || this.closed) ?\n            _super.prototype.execute.call(this, state, delay) :\n            this._execute(state, delay);\n    };\n    QueueAction.prototype.requestAsyncId = function (scheduler, id, delay) {\n        if (delay === void 0) { delay = 0; }\n        // If delay is greater than 0, enqueue as an async action.\n        if (delay !== null && delay > 0) {\n            return _super.prototype.requestAsyncId.call(this, scheduler, id, delay);\n        }\n        // Otherwise flush the scheduler starting with this action.\n        return scheduler.flush(this);\n    };\n    return QueueAction;\n}(AsyncAction_1.AsyncAction));\nexports.QueueAction = QueueAction;\n\n},{\"./AsyncAction\":302}],305:[function(require,module,exports){\n\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar AsyncScheduler_1 = require('./AsyncScheduler');\nvar QueueScheduler = (function (_super) {\n    __extends(QueueScheduler, _super);\n    function QueueScheduler() {\n        _super.apply(this, arguments);\n    }\n    return QueueScheduler;\n}(AsyncScheduler_1.AsyncScheduler));\nexports.QueueScheduler = QueueScheduler;\n\n},{\"./AsyncScheduler\":303}],306:[function(require,module,exports){\n\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar AsyncAction_1 = require('./AsyncAction');\nvar AsyncScheduler_1 = require('./AsyncScheduler');\nvar VirtualTimeScheduler = (function (_super) {\n    __extends(VirtualTimeScheduler, _super);\n    function VirtualTimeScheduler(SchedulerAction, maxFrames) {\n        var _this = this;\n        if (SchedulerAction === void 0) { SchedulerAction = VirtualAction; }\n        if (maxFrames === void 0) { maxFrames = Number.POSITIVE_INFINITY; }\n        _super.call(this, SchedulerAction, function () { return _this.frame; });\n        this.maxFrames = maxFrames;\n        this.frame = 0;\n        this.index = -1;\n    }\n    /**\n     * Prompt the Scheduler to execute all of its queued actions, therefore\n     * clearing its queue.\n     * @return {void}\n     */\n    VirtualTimeScheduler.prototype.flush = function () {\n        var _a = this, actions = _a.actions, maxFrames = _a.maxFrames;\n        var error, action;\n        while ((action = actions.shift()) && (this.frame = action.delay) <= maxFrames) {\n            if (error = action.execute(action.state, action.delay)) {\n                break;\n            }\n        }\n        if (error) {\n            while (action = actions.shift()) {\n                action.unsubscribe();\n            }\n            throw error;\n        }\n    };\n    VirtualTimeScheduler.frameTimeFactor = 10;\n    return VirtualTimeScheduler;\n}(AsyncScheduler_1.AsyncScheduler));\nexports.VirtualTimeScheduler = VirtualTimeScheduler;\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar VirtualAction = (function (_super) {\n    __extends(VirtualAction, _super);\n    function VirtualAction(scheduler, work, index) {\n        if (index === void 0) { index = scheduler.index += 1; }\n        _super.call(this, scheduler, work);\n        this.scheduler = scheduler;\n        this.work = work;\n        this.index = index;\n        this.index = scheduler.index = index;\n    }\n    VirtualAction.prototype.schedule = function (state, delay) {\n        if (delay === void 0) { delay = 0; }\n        return !this.id ?\n            _super.prototype.schedule.call(this, state, delay) : this.add(new VirtualAction(this.scheduler, this.work)).schedule(state, delay);\n    };\n    VirtualAction.prototype.requestAsyncId = function (scheduler, id, delay) {\n        if (delay === void 0) { delay = 0; }\n        this.delay = scheduler.frame + delay;\n        var actions = scheduler.actions;\n        actions.push(this);\n        actions.sort(VirtualAction.sortActions);\n        return true;\n    };\n    VirtualAction.prototype.recycleAsyncId = function (scheduler, id, delay) {\n        if (delay === void 0) { delay = 0; }\n        return undefined;\n    };\n    VirtualAction.sortActions = function (a, b) {\n        if (a.delay === b.delay) {\n            if (a.index === b.index) {\n                return 0;\n            }\n            else if (a.index > b.index) {\n                return 1;\n            }\n            else {\n                return -1;\n            }\n        }\n        else if (a.delay > b.delay) {\n            return 1;\n        }\n        else {\n            return -1;\n        }\n    };\n    return VirtualAction;\n}(AsyncAction_1.AsyncAction));\nexports.VirtualAction = VirtualAction;\n\n},{\"./AsyncAction\":302,\"./AsyncScheduler\":303}],307:[function(require,module,exports){\n\"use strict\";\nvar AnimationFrameAction_1 = require('./AnimationFrameAction');\nvar AnimationFrameScheduler_1 = require('./AnimationFrameScheduler');\nexports.animationFrame = new AnimationFrameScheduler_1.AnimationFrameScheduler(AnimationFrameAction_1.AnimationFrameAction);\n\n},{\"./AnimationFrameAction\":298,\"./AnimationFrameScheduler\":299}],308:[function(require,module,exports){\n\"use strict\";\nvar AsapAction_1 = require('./AsapAction');\nvar AsapScheduler_1 = require('./AsapScheduler');\nexports.asap = new AsapScheduler_1.AsapScheduler(AsapAction_1.AsapAction);\n\n},{\"./AsapAction\":300,\"./AsapScheduler\":301}],309:[function(require,module,exports){\n\"use strict\";\nvar AsyncAction_1 = require('./AsyncAction');\nvar AsyncScheduler_1 = require('./AsyncScheduler');\nexports.async = new AsyncScheduler_1.AsyncScheduler(AsyncAction_1.AsyncAction);\n\n},{\"./AsyncAction\":302,\"./AsyncScheduler\":303}],310:[function(require,module,exports){\n\"use strict\";\nvar QueueAction_1 = require('./QueueAction');\nvar QueueScheduler_1 = require('./QueueScheduler');\nexports.queue = new QueueScheduler_1.QueueScheduler(QueueAction_1.QueueAction);\n\n},{\"./QueueAction\":304,\"./QueueScheduler\":305}],311:[function(require,module,exports){\n\"use strict\";\nvar root_1 = require('../util/root');\nvar Symbol = root_1.root.Symbol;\nif (typeof Symbol === 'function') {\n    if (Symbol.iterator) {\n        exports.$$iterator = Symbol.iterator;\n    }\n    else if (typeof Symbol.for === 'function') {\n        exports.$$iterator = Symbol.for('iterator');\n    }\n}\nelse {\n    if (root_1.root.Set && typeof new root_1.root.Set()['@@iterator'] === 'function') {\n        // Bug for mozilla version\n        exports.$$iterator = '@@iterator';\n    }\n    else if (root_1.root.Map) {\n        // es6-shim specific logic\n        var keys = Object.getOwnPropertyNames(root_1.root.Map.prototype);\n        for (var i = 0; i < keys.length; ++i) {\n            var key = keys[i];\n            if (key !== 'entries' && key !== 'size' && root_1.root.Map.prototype[key] === root_1.root.Map.prototype['entries']) {\n                exports.$$iterator = key;\n                break;\n            }\n        }\n    }\n    else {\n        exports.$$iterator = '@@iterator';\n    }\n}\n\n},{\"../util/root\":340}],312:[function(require,module,exports){\n\"use strict\";\nvar root_1 = require('../util/root');\nfunction getSymbolObservable(context) {\n    var $$observable;\n    var Symbol = context.Symbol;\n    if (typeof Symbol === 'function') {\n        if (Symbol.observable) {\n            $$observable = Symbol.observable;\n        }\n        else {\n            $$observable = Symbol('observable');\n            Symbol.observable = $$observable;\n        }\n    }\n    else {\n        $$observable = '@@observable';\n    }\n    return $$observable;\n}\nexports.getSymbolObservable = getSymbolObservable;\nexports.$$observable = getSymbolObservable(root_1.root);\n\n},{\"../util/root\":340}],313:[function(require,module,exports){\n\"use strict\";\nvar root_1 = require('../util/root');\nvar Symbol = root_1.root.Symbol;\nexports.$$rxSubscriber = (typeof Symbol === 'function' && typeof Symbol.for === 'function') ?\n    Symbol.for('rxSubscriber') : '@@rxSubscriber';\n\n},{\"../util/root\":340}],314:[function(require,module,exports){\n\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Observable_1 = require('../Observable');\nvar Subscription_1 = require('../Subscription');\nvar SubscriptionLoggable_1 = require('./SubscriptionLoggable');\nvar applyMixins_1 = require('../util/applyMixins');\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar ColdObservable = (function (_super) {\n    __extends(ColdObservable, _super);\n    function ColdObservable(messages, scheduler) {\n        _super.call(this, function (subscriber) {\n            var observable = this;\n            var index = observable.logSubscribedFrame();\n            subscriber.add(new Subscription_1.Subscription(function () {\n                observable.logUnsubscribedFrame(index);\n            }));\n            observable.scheduleMessages(subscriber);\n            return subscriber;\n        });\n        this.messages = messages;\n        this.subscriptions = [];\n        this.scheduler = scheduler;\n    }\n    ColdObservable.prototype.scheduleMessages = function (subscriber) {\n        var messagesLength = this.messages.length;\n        for (var i = 0; i < messagesLength; i++) {\n            var message = this.messages[i];\n            subscriber.add(this.scheduler.schedule(function (_a) {\n                var message = _a.message, subscriber = _a.subscriber;\n                message.notification.observe(subscriber);\n            }, message.frame, { message: message, subscriber: subscriber }));\n        }\n    };\n    return ColdObservable;\n}(Observable_1.Observable));\nexports.ColdObservable = ColdObservable;\napplyMixins_1.applyMixins(ColdObservable, [SubscriptionLoggable_1.SubscriptionLoggable]);\n\n},{\"../Observable\":5,\"../Subscription\":14,\"../util/applyMixins\":328,\"./SubscriptionLoggable\":317}],315:[function(require,module,exports){\n\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Subject_1 = require('../Subject');\nvar Subscription_1 = require('../Subscription');\nvar SubscriptionLoggable_1 = require('./SubscriptionLoggable');\nvar applyMixins_1 = require('../util/applyMixins');\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar HotObservable = (function (_super) {\n    __extends(HotObservable, _super);\n    function HotObservable(messages, scheduler) {\n        _super.call(this);\n        this.messages = messages;\n        this.subscriptions = [];\n        this.scheduler = scheduler;\n    }\n    HotObservable.prototype._subscribe = function (subscriber) {\n        var subject = this;\n        var index = subject.logSubscribedFrame();\n        subscriber.add(new Subscription_1.Subscription(function () {\n            subject.logUnsubscribedFrame(index);\n        }));\n        return _super.prototype._subscribe.call(this, subscriber);\n    };\n    HotObservable.prototype.setup = function () {\n        var subject = this;\n        var messagesLength = subject.messages.length;\n        /* tslint:disable:no-var-keyword */\n        for (var i = 0; i < messagesLength; i++) {\n            (function () {\n                var message = subject.messages[i];\n                /* tslint:enable */\n                subject.scheduler.schedule(function () { message.notification.observe(subject); }, message.frame);\n            })();\n        }\n    };\n    return HotObservable;\n}(Subject_1.Subject));\nexports.HotObservable = HotObservable;\napplyMixins_1.applyMixins(HotObservable, [SubscriptionLoggable_1.SubscriptionLoggable]);\n\n},{\"../Subject\":11,\"../Subscription\":14,\"../util/applyMixins\":328,\"./SubscriptionLoggable\":317}],316:[function(require,module,exports){\n\"use strict\";\nvar SubscriptionLog = (function () {\n    function SubscriptionLog(subscribedFrame, unsubscribedFrame) {\n        if (unsubscribedFrame === void 0) { unsubscribedFrame = Number.POSITIVE_INFINITY; }\n        this.subscribedFrame = subscribedFrame;\n        this.unsubscribedFrame = unsubscribedFrame;\n    }\n    return SubscriptionLog;\n}());\nexports.SubscriptionLog = SubscriptionLog;\n\n},{}],317:[function(require,module,exports){\n\"use strict\";\nvar SubscriptionLog_1 = require('./SubscriptionLog');\nvar SubscriptionLoggable = (function () {\n    function SubscriptionLoggable() {\n        this.subscriptions = [];\n    }\n    SubscriptionLoggable.prototype.logSubscribedFrame = function () {\n        this.subscriptions.push(new SubscriptionLog_1.SubscriptionLog(this.scheduler.now()));\n        return this.subscriptions.length - 1;\n    };\n    SubscriptionLoggable.prototype.logUnsubscribedFrame = function (index) {\n        var subscriptionLogs = this.subscriptions;\n        var oldSubscriptionLog = subscriptionLogs[index];\n        subscriptionLogs[index] = new SubscriptionLog_1.SubscriptionLog(oldSubscriptionLog.subscribedFrame, this.scheduler.now());\n    };\n    return SubscriptionLoggable;\n}());\nexports.SubscriptionLoggable = SubscriptionLoggable;\n\n},{\"./SubscriptionLog\":316}],318:[function(require,module,exports){\n\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Observable_1 = require('../Observable');\nvar Notification_1 = require('../Notification');\nvar ColdObservable_1 = require('./ColdObservable');\nvar HotObservable_1 = require('./HotObservable');\nvar SubscriptionLog_1 = require('./SubscriptionLog');\nvar VirtualTimeScheduler_1 = require('../scheduler/VirtualTimeScheduler');\nvar defaultMaxFrame = 750;\nvar TestScheduler = (function (_super) {\n    __extends(TestScheduler, _super);\n    function TestScheduler(assertDeepEqual) {\n        _super.call(this, VirtualTimeScheduler_1.VirtualAction, defaultMaxFrame);\n        this.assertDeepEqual = assertDeepEqual;\n        this.hotObservables = [];\n        this.coldObservables = [];\n        this.flushTests = [];\n    }\n    TestScheduler.prototype.createTime = function (marbles) {\n        var indexOf = marbles.indexOf('|');\n        if (indexOf === -1) {\n            throw new Error('marble diagram for time should have a completion marker \"|\"');\n        }\n        return indexOf * TestScheduler.frameTimeFactor;\n    };\n    TestScheduler.prototype.createColdObservable = function (marbles, values, error) {\n        if (marbles.indexOf('^') !== -1) {\n            throw new Error('cold observable cannot have subscription offset \"^\"');\n        }\n        if (marbles.indexOf('!') !== -1) {\n            throw new Error('cold observable cannot have unsubscription marker \"!\"');\n        }\n        var messages = TestScheduler.parseMarbles(marbles, values, error);\n        var cold = new ColdObservable_1.ColdObservable(messages, this);\n        this.coldObservables.push(cold);\n        return cold;\n    };\n    TestScheduler.prototype.createHotObservable = function (marbles, values, error) {\n        if (marbles.indexOf('!') !== -1) {\n            throw new Error('hot observable cannot have unsubscription marker \"!\"');\n        }\n        var messages = TestScheduler.parseMarbles(marbles, values, error);\n        var subject = new HotObservable_1.HotObservable(messages, this);\n        this.hotObservables.push(subject);\n        return subject;\n    };\n    TestScheduler.prototype.materializeInnerObservable = function (observable, outerFrame) {\n        var _this = this;\n        var messages = [];\n        observable.subscribe(function (value) {\n            messages.push({ frame: _this.frame - outerFrame, notification: Notification_1.Notification.createNext(value) });\n        }, function (err) {\n            messages.push({ frame: _this.frame - outerFrame, notification: Notification_1.Notification.createError(err) });\n        }, function () {\n            messages.push({ frame: _this.frame - outerFrame, notification: Notification_1.Notification.createComplete() });\n        });\n        return messages;\n    };\n    TestScheduler.prototype.expectObservable = function (observable, unsubscriptionMarbles) {\n        var _this = this;\n        if (unsubscriptionMarbles === void 0) { unsubscriptionMarbles = null; }\n        var actual = [];\n        var flushTest = { actual: actual, ready: false };\n        var unsubscriptionFrame = TestScheduler\n            .parseMarblesAsSubscriptions(unsubscriptionMarbles).unsubscribedFrame;\n        var subscription;\n        this.schedule(function () {\n            subscription = observable.subscribe(function (x) {\n                var value = x;\n                // Support Observable-of-Observables\n                if (x instanceof Observable_1.Observable) {\n                    value = _this.materializeInnerObservable(value, _this.frame);\n                }\n                actual.push({ frame: _this.frame, notification: Notification_1.Notification.createNext(value) });\n            }, function (err) {\n                actual.push({ frame: _this.frame, notification: Notification_1.Notification.createError(err) });\n            }, function () {\n                actual.push({ frame: _this.frame, notification: Notification_1.Notification.createComplete() });\n            });\n        }, 0);\n        if (unsubscriptionFrame !== Number.POSITIVE_INFINITY) {\n            this.schedule(function () { return subscription.unsubscribe(); }, unsubscriptionFrame);\n        }\n        this.flushTests.push(flushTest);\n        return {\n            toBe: function (marbles, values, errorValue) {\n                flushTest.ready = true;\n                flushTest.expected = TestScheduler.parseMarbles(marbles, values, errorValue, true);\n            }\n        };\n    };\n    TestScheduler.prototype.expectSubscriptions = function (actualSubscriptionLogs) {\n        var flushTest = { actual: actualSubscriptionLogs, ready: false };\n        this.flushTests.push(flushTest);\n        return {\n            toBe: function (marbles) {\n                var marblesArray = (typeof marbles === 'string') ? [marbles] : marbles;\n                flushTest.ready = true;\n                flushTest.expected = marblesArray.map(function (marbles) {\n                    return TestScheduler.parseMarblesAsSubscriptions(marbles);\n                });\n            }\n        };\n    };\n    TestScheduler.prototype.flush = function () {\n        var hotObservables = this.hotObservables;\n        while (hotObservables.length > 0) {\n            hotObservables.shift().setup();\n        }\n        _super.prototype.flush.call(this);\n        var readyFlushTests = this.flushTests.filter(function (test) { return test.ready; });\n        while (readyFlushTests.length > 0) {\n            var test = readyFlushTests.shift();\n            this.assertDeepEqual(test.actual, test.expected);\n        }\n    };\n    TestScheduler.parseMarblesAsSubscriptions = function (marbles) {\n        if (typeof marbles !== 'string') {\n            return new SubscriptionLog_1.SubscriptionLog(Number.POSITIVE_INFINITY);\n        }\n        var len = marbles.length;\n        var groupStart = -1;\n        var subscriptionFrame = Number.POSITIVE_INFINITY;\n        var unsubscriptionFrame = Number.POSITIVE_INFINITY;\n        for (var i = 0; i < len; i++) {\n            var frame = i * this.frameTimeFactor;\n            var c = marbles[i];\n            switch (c) {\n                case '-':\n                case ' ':\n                    break;\n                case '(':\n                    groupStart = frame;\n                    break;\n                case ')':\n                    groupStart = -1;\n                    break;\n                case '^':\n                    if (subscriptionFrame !== Number.POSITIVE_INFINITY) {\n                        throw new Error('found a second subscription point \\'^\\' in a ' +\n                            'subscription marble diagram. There can only be one.');\n                    }\n                    subscriptionFrame = groupStart > -1 ? groupStart : frame;\n                    break;\n                case '!':\n                    if (unsubscriptionFrame !== Number.POSITIVE_INFINITY) {\n                        throw new Error('found a second subscription point \\'^\\' in a ' +\n                            'subscription marble diagram. There can only be one.');\n                    }\n                    unsubscriptionFrame = groupStart > -1 ? groupStart : frame;\n                    break;\n                default:\n                    throw new Error('there can only be \\'^\\' and \\'!\\' markers in a ' +\n                        'subscription marble diagram. Found instead \\'' + c + '\\'.');\n            }\n        }\n        if (unsubscriptionFrame < 0) {\n            return new SubscriptionLog_1.SubscriptionLog(subscriptionFrame);\n        }\n        else {\n            return new SubscriptionLog_1.SubscriptionLog(subscriptionFrame, unsubscriptionFrame);\n        }\n    };\n    TestScheduler.parseMarbles = function (marbles, values, errorValue, materializeInnerObservables) {\n        if (materializeInnerObservables === void 0) { materializeInnerObservables = false; }\n        if (marbles.indexOf('!') !== -1) {\n            throw new Error('conventional marble diagrams cannot have the ' +\n                'unsubscription marker \"!\"');\n        }\n        var len = marbles.length;\n        var testMessages = [];\n        var subIndex = marbles.indexOf('^');\n        var frameOffset = subIndex === -1 ? 0 : (subIndex * -this.frameTimeFactor);\n        var getValue = typeof values !== 'object' ?\n            function (x) { return x; } :\n            function (x) {\n                // Support Observable-of-Observables\n                if (materializeInnerObservables && values[x] instanceof ColdObservable_1.ColdObservable) {\n                    return values[x].messages;\n                }\n                return values[x];\n            };\n        var groupStart = -1;\n        for (var i = 0; i < len; i++) {\n            var frame = i * this.frameTimeFactor + frameOffset;\n            var notification = void 0;\n            var c = marbles[i];\n            switch (c) {\n                case '-':\n                case ' ':\n                    break;\n                case '(':\n                    groupStart = frame;\n                    break;\n                case ')':\n                    groupStart = -1;\n                    break;\n                case '|':\n                    notification = Notification_1.Notification.createComplete();\n                    break;\n                case '^':\n                    break;\n                case '#':\n                    notification = Notification_1.Notification.createError(errorValue || 'error');\n                    break;\n                default:\n                    notification = Notification_1.Notification.createNext(getValue(c));\n                    break;\n            }\n            if (notification) {\n                testMessages.push({ frame: groupStart > -1 ? groupStart : frame, notification: notification });\n            }\n        }\n        return testMessages;\n    };\n    return TestScheduler;\n}(VirtualTimeScheduler_1.VirtualTimeScheduler));\nexports.TestScheduler = TestScheduler;\n\n},{\"../Notification\":4,\"../Observable\":5,\"../scheduler/VirtualTimeScheduler\":306,\"./ColdObservable\":314,\"./HotObservable\":315,\"./SubscriptionLog\":316}],319:[function(require,module,exports){\n\"use strict\";\nvar root_1 = require('./root');\nvar RequestAnimationFrameDefinition = (function () {\n    function RequestAnimationFrameDefinition(root) {\n        if (root.requestAnimationFrame) {\n            this.cancelAnimationFrame = root.cancelAnimationFrame.bind(root);\n            this.requestAnimationFrame = root.requestAnimationFrame.bind(root);\n        }\n        else if (root.mozRequestAnimationFrame) {\n            this.cancelAnimationFrame = root.mozCancelAnimationFrame.bind(root);\n            this.requestAnimationFrame = root.mozRequestAnimationFrame.bind(root);\n        }\n        else if (root.webkitRequestAnimationFrame) {\n            this.cancelAnimationFrame = root.webkitCancelAnimationFrame.bind(root);\n            this.requestAnimationFrame = root.webkitRequestAnimationFrame.bind(root);\n        }\n        else if (root.msRequestAnimationFrame) {\n            this.cancelAnimationFrame = root.msCancelAnimationFrame.bind(root);\n            this.requestAnimationFrame = root.msRequestAnimationFrame.bind(root);\n        }\n        else if (root.oRequestAnimationFrame) {\n            this.cancelAnimationFrame = root.oCancelAnimationFrame.bind(root);\n            this.requestAnimationFrame = root.oRequestAnimationFrame.bind(root);\n        }\n        else {\n            this.cancelAnimationFrame = root.clearTimeout.bind(root);\n            this.requestAnimationFrame = function (cb) { return root.setTimeout(cb, 1000 / 60); };\n        }\n    }\n    return RequestAnimationFrameDefinition;\n}());\nexports.RequestAnimationFrameDefinition = RequestAnimationFrameDefinition;\nexports.AnimationFrame = new RequestAnimationFrameDefinition(root_1.root);\n\n},{\"./root\":340}],320:[function(require,module,exports){\n\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\n/**\n * An error thrown when an element was queried at a certain index of an\n * Observable, but no such index or position exists in that sequence.\n *\n * @see {@link elementAt}\n * @see {@link take}\n * @see {@link takeLast}\n *\n * @class ArgumentOutOfRangeError\n */\nvar ArgumentOutOfRangeError = (function (_super) {\n    __extends(ArgumentOutOfRangeError, _super);\n    function ArgumentOutOfRangeError() {\n        var err = _super.call(this, 'argument out of range');\n        this.name = err.name = 'ArgumentOutOfRangeError';\n        this.stack = err.stack;\n        this.message = err.message;\n    }\n    return ArgumentOutOfRangeError;\n}(Error));\nexports.ArgumentOutOfRangeError = ArgumentOutOfRangeError;\n\n},{}],321:[function(require,module,exports){\n\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\n/**\n * An error thrown when an Observable or a sequence was queried but has no\n * elements.\n *\n * @see {@link first}\n * @see {@link last}\n * @see {@link single}\n *\n * @class EmptyError\n */\nvar EmptyError = (function (_super) {\n    __extends(EmptyError, _super);\n    function EmptyError() {\n        var err = _super.call(this, 'no elements in sequence');\n        this.name = err.name = 'EmptyError';\n        this.stack = err.stack;\n        this.message = err.message;\n    }\n    return EmptyError;\n}(Error));\nexports.EmptyError = EmptyError;\n\n},{}],322:[function(require,module,exports){\n\"use strict\";\nvar FastMap = (function () {\n    function FastMap() {\n        this.values = {};\n    }\n    FastMap.prototype.delete = function (key) {\n        this.values[key] = null;\n        return true;\n    };\n    FastMap.prototype.set = function (key, value) {\n        this.values[key] = value;\n        return this;\n    };\n    FastMap.prototype.get = function (key) {\n        return this.values[key];\n    };\n    FastMap.prototype.forEach = function (cb, thisArg) {\n        var values = this.values;\n        for (var key in values) {\n            if (values.hasOwnProperty(key) && values[key] !== null) {\n                cb.call(thisArg, values[key], key);\n            }\n        }\n    };\n    FastMap.prototype.clear = function () {\n        this.values = {};\n    };\n    return FastMap;\n}());\nexports.FastMap = FastMap;\n\n},{}],323:[function(require,module,exports){\n/**\nSome credit for this helper goes to http://github.com/YuzuJS/setImmediate\n*/\n\"use strict\";\nvar root_1 = require('./root');\nvar ImmediateDefinition = (function () {\n    function ImmediateDefinition(root) {\n        this.root = root;\n        if (root.setImmediate && typeof root.setImmediate === 'function') {\n            this.setImmediate = root.setImmediate.bind(root);\n            this.clearImmediate = root.clearImmediate.bind(root);\n        }\n        else {\n            this.nextHandle = 1;\n            this.tasksByHandle = {};\n            this.currentlyRunningATask = false;\n            // Don't get fooled by e.g. browserify environments.\n            if (this.canUseProcessNextTick()) {\n                // For Node.js before 0.9\n                this.setImmediate = this.createProcessNextTickSetImmediate();\n            }\n            else if (this.canUsePostMessage()) {\n                // For non-IE10 modern browsers\n                this.setImmediate = this.createPostMessageSetImmediate();\n            }\n            else if (this.canUseMessageChannel()) {\n                // For web workers, where supported\n                this.setImmediate = this.createMessageChannelSetImmediate();\n            }\n            else if (this.canUseReadyStateChange()) {\n                // For IE 6–8\n                this.setImmediate = this.createReadyStateChangeSetImmediate();\n            }\n            else {\n                // For older browsers\n                this.setImmediate = this.createSetTimeoutSetImmediate();\n            }\n            var ci = function clearImmediate(handle) {\n                delete clearImmediate.instance.tasksByHandle[handle];\n            };\n            ci.instance = this;\n            this.clearImmediate = ci;\n        }\n    }\n    ImmediateDefinition.prototype.identify = function (o) {\n        return this.root.Object.prototype.toString.call(o);\n    };\n    ImmediateDefinition.prototype.canUseProcessNextTick = function () {\n        return this.identify(this.root.process) === '[object process]';\n    };\n    ImmediateDefinition.prototype.canUseMessageChannel = function () {\n        return Boolean(this.root.MessageChannel);\n    };\n    ImmediateDefinition.prototype.canUseReadyStateChange = function () {\n        var document = this.root.document;\n        return Boolean(document && 'onreadystatechange' in document.createElement('script'));\n    };\n    ImmediateDefinition.prototype.canUsePostMessage = function () {\n        var root = this.root;\n        // The test against `importScripts` prevents this implementation from being installed inside a web worker,\n        // where `root.postMessage` means something completely different and can't be used for this purpose.\n        if (root.postMessage && !root.importScripts) {\n            var postMessageIsAsynchronous_1 = true;\n            var oldOnMessage = root.onmessage;\n            root.onmessage = function () {\n                postMessageIsAsynchronous_1 = false;\n            };\n            root.postMessage('', '*');\n            root.onmessage = oldOnMessage;\n            return postMessageIsAsynchronous_1;\n        }\n        return false;\n    };\n    // This function accepts the same arguments as setImmediate, but\n    // returns a function that requires no arguments.\n    ImmediateDefinition.prototype.partiallyApplied = function (handler) {\n        var args = [];\n        for (var _i = 1; _i < arguments.length; _i++) {\n            args[_i - 1] = arguments[_i];\n        }\n        var fn = function result() {\n            var _a = result, handler = _a.handler, args = _a.args;\n            if (typeof handler === 'function') {\n                handler.apply(undefined, args);\n            }\n            else {\n                (new Function('' + handler))();\n            }\n        };\n        fn.handler = handler;\n        fn.args = args;\n        return fn;\n    };\n    ImmediateDefinition.prototype.addFromSetImmediateArguments = function (args) {\n        this.tasksByHandle[this.nextHandle] = this.partiallyApplied.apply(undefined, args);\n        return this.nextHandle++;\n    };\n    ImmediateDefinition.prototype.createProcessNextTickSetImmediate = function () {\n        var fn = function setImmediate() {\n            var instance = setImmediate.instance;\n            var handle = instance.addFromSetImmediateArguments(arguments);\n            instance.root.process.nextTick(instance.partiallyApplied(instance.runIfPresent, handle));\n            return handle;\n        };\n        fn.instance = this;\n        return fn;\n    };\n    ImmediateDefinition.prototype.createPostMessageSetImmediate = function () {\n        // Installs an event handler on `global` for the `message` event: see\n        // * https://developer.mozilla.org/en/DOM/window.postMessage\n        // * http://www.whatwg.org/specs/web-apps/current-work/multipage/comms.html#crossDocumentMessages\n        var root = this.root;\n        var messagePrefix = 'setImmediate$' + root.Math.random() + '$';\n        var onGlobalMessage = function globalMessageHandler(event) {\n            var instance = globalMessageHandler.instance;\n            if (event.source === root &&\n                typeof event.data === 'string' &&\n                event.data.indexOf(messagePrefix) === 0) {\n                instance.runIfPresent(+event.data.slice(messagePrefix.length));\n            }\n        };\n        onGlobalMessage.instance = this;\n        root.addEventListener('message', onGlobalMessage, false);\n        var fn = function setImmediate() {\n            var _a = setImmediate, messagePrefix = _a.messagePrefix, instance = _a.instance;\n            var handle = instance.addFromSetImmediateArguments(arguments);\n            instance.root.postMessage(messagePrefix + handle, '*');\n            return handle;\n        };\n        fn.instance = this;\n        fn.messagePrefix = messagePrefix;\n        return fn;\n    };\n    ImmediateDefinition.prototype.runIfPresent = function (handle) {\n        // From the spec: 'Wait until any invocations of this algorithm started before this one have completed.'\n        // So if we're currently running a task, we'll need to delay this invocation.\n        if (this.currentlyRunningATask) {\n            // Delay by doing a setTimeout. setImmediate was tried instead, but in Firefox 7 it generated a\n            // 'too much recursion' error.\n            this.root.setTimeout(this.partiallyApplied(this.runIfPresent, handle), 0);\n        }\n        else {\n            var task = this.tasksByHandle[handle];\n            if (task) {\n                this.currentlyRunningATask = true;\n                try {\n                    task();\n                }\n                finally {\n                    this.clearImmediate(handle);\n                    this.currentlyRunningATask = false;\n                }\n            }\n        }\n    };\n    ImmediateDefinition.prototype.createMessageChannelSetImmediate = function () {\n        var _this = this;\n        var channel = new this.root.MessageChannel();\n        channel.port1.onmessage = function (event) {\n            var handle = event.data;\n            _this.runIfPresent(handle);\n        };\n        var fn = function setImmediate() {\n            var _a = setImmediate, channel = _a.channel, instance = _a.instance;\n            var handle = instance.addFromSetImmediateArguments(arguments);\n            channel.port2.postMessage(handle);\n            return handle;\n        };\n        fn.channel = channel;\n        fn.instance = this;\n        return fn;\n    };\n    ImmediateDefinition.prototype.createReadyStateChangeSetImmediate = function () {\n        var fn = function setImmediate() {\n            var instance = setImmediate.instance;\n            var root = instance.root;\n            var doc = root.document;\n            var html = doc.documentElement;\n            var handle = instance.addFromSetImmediateArguments(arguments);\n            // Create a <script> element; its readystatechange event will be fired asynchronously once it is inserted\n            // into the document. Do so, thus queuing up the task. Remember to clean up once it's been called.\n            var script = doc.createElement('script');\n            script.onreadystatechange = function () {\n                instance.runIfPresent(handle);\n                script.onreadystatechange = null;\n                html.removeChild(script);\n                script = null;\n            };\n            html.appendChild(script);\n            return handle;\n        };\n        fn.instance = this;\n        return fn;\n    };\n    ImmediateDefinition.prototype.createSetTimeoutSetImmediate = function () {\n        var fn = function setImmediate() {\n            var instance = setImmediate.instance;\n            var handle = instance.addFromSetImmediateArguments(arguments);\n            instance.root.setTimeout(instance.partiallyApplied(instance.runIfPresent, handle), 0);\n            return handle;\n        };\n        fn.instance = this;\n        return fn;\n    };\n    return ImmediateDefinition;\n}());\nexports.ImmediateDefinition = ImmediateDefinition;\nexports.Immediate = new ImmediateDefinition(root_1.root);\n\n},{\"./root\":340}],324:[function(require,module,exports){\n\"use strict\";\nvar root_1 = require('./root');\nvar MapPolyfill_1 = require('./MapPolyfill');\nexports.Map = root_1.root.Map || (function () { return MapPolyfill_1.MapPolyfill; })();\n\n},{\"./MapPolyfill\":325,\"./root\":340}],325:[function(require,module,exports){\n\"use strict\";\nvar MapPolyfill = (function () {\n    function MapPolyfill() {\n        this.size = 0;\n        this._values = [];\n        this._keys = [];\n    }\n    MapPolyfill.prototype.get = function (key) {\n        var i = this._keys.indexOf(key);\n        return i === -1 ? undefined : this._values[i];\n    };\n    MapPolyfill.prototype.set = function (key, value) {\n        var i = this._keys.indexOf(key);\n        if (i === -1) {\n            this._keys.push(key);\n            this._values.push(value);\n            this.size++;\n        }\n        else {\n            this._values[i] = value;\n        }\n        return this;\n    };\n    MapPolyfill.prototype.delete = function (key) {\n        var i = this._keys.indexOf(key);\n        if (i === -1) {\n            return false;\n        }\n        this._values.splice(i, 1);\n        this._keys.splice(i, 1);\n        this.size--;\n        return true;\n    };\n    MapPolyfill.prototype.clear = function () {\n        this._keys.length = 0;\n        this._values.length = 0;\n        this.size = 0;\n    };\n    MapPolyfill.prototype.forEach = function (cb, thisArg) {\n        for (var i = 0; i < this.size; i++) {\n            cb.call(thisArg, this._values[i], this._keys[i]);\n        }\n    };\n    return MapPolyfill;\n}());\nexports.MapPolyfill = MapPolyfill;\n\n},{}],326:[function(require,module,exports){\n\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\n/**\n * An error thrown when an action is invalid because the object has been\n * unsubscribed.\n *\n * @see {@link Subject}\n * @see {@link BehaviorSubject}\n *\n * @class ObjectUnsubscribedError\n */\nvar ObjectUnsubscribedError = (function (_super) {\n    __extends(ObjectUnsubscribedError, _super);\n    function ObjectUnsubscribedError() {\n        var err = _super.call(this, 'object unsubscribed');\n        this.name = err.name = 'ObjectUnsubscribedError';\n        this.stack = err.stack;\n        this.message = err.message;\n    }\n    return ObjectUnsubscribedError;\n}(Error));\nexports.ObjectUnsubscribedError = ObjectUnsubscribedError;\n\n},{}],327:[function(require,module,exports){\n\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\n/**\n * An error thrown when one or more errors have occurred during the\n * `unsubscribe` of a {@link Subscription}.\n */\nvar UnsubscriptionError = (function (_super) {\n    __extends(UnsubscriptionError, _super);\n    function UnsubscriptionError(errors) {\n        _super.call(this);\n        this.errors = errors;\n        var err = Error.call(this, errors ?\n            errors.length + \" errors occurred during unsubscription:\\n  \" + errors.map(function (err, i) { return ((i + 1) + \") \" + err.toString()); }).join('\\n  ') : '');\n        this.name = err.name = 'UnsubscriptionError';\n        this.stack = err.stack;\n        this.message = err.message;\n    }\n    return UnsubscriptionError;\n}(Error));\nexports.UnsubscriptionError = UnsubscriptionError;\n\n},{}],328:[function(require,module,exports){\n\"use strict\";\nfunction applyMixins(derivedCtor, baseCtors) {\n    for (var i = 0, len = baseCtors.length; i < len; i++) {\n        var baseCtor = baseCtors[i];\n        var propertyKeys = Object.getOwnPropertyNames(baseCtor.prototype);\n        for (var j = 0, len2 = propertyKeys.length; j < len2; j++) {\n            var name_1 = propertyKeys[j];\n            derivedCtor.prototype[name_1] = baseCtor.prototype[name_1];\n        }\n    }\n}\nexports.applyMixins = applyMixins;\n\n},{}],329:[function(require,module,exports){\n\"use strict\";\nvar root_1 = require('./root');\nvar Object = root_1.root.Object;\nif (typeof Object.assign != 'function') {\n    (function () {\n        Object.assign = function assignPolyfill(target) {\n            var sources = [];\n            for (var _i = 1; _i < arguments.length; _i++) {\n                sources[_i - 1] = arguments[_i];\n            }\n            if (target === undefined || target === null) {\n                throw new TypeError('cannot convert undefined or null to object');\n            }\n            var output = Object(target);\n            var len = sources.length;\n            for (var index = 0; index < len; index++) {\n                var source = sources[index];\n                if (source !== undefined && source !== null) {\n                    for (var key in source) {\n                        if (source.hasOwnProperty(key)) {\n                            output[key] = source[key];\n                        }\n                    }\n                }\n            }\n            return output;\n        };\n    })();\n}\nexports.assign = Object.assign;\n\n},{\"./root\":340}],330:[function(require,module,exports){\n\"use strict\";\n// typeof any so that it we don't have to cast when comparing a result to the error object\nexports.errorObject = { e: {} };\n\n},{}],331:[function(require,module,exports){\n\"use strict\";\nexports.isArray = Array.isArray || (function (x) { return x && typeof x.length === 'number'; });\n\n},{}],332:[function(require,module,exports){\n\"use strict\";\nfunction isDate(value) {\n    return value instanceof Date && !isNaN(+value);\n}\nexports.isDate = isDate;\n\n},{}],333:[function(require,module,exports){\n\"use strict\";\nfunction isFunction(x) {\n    return typeof x === 'function';\n}\nexports.isFunction = isFunction;\n\n},{}],334:[function(require,module,exports){\n\"use strict\";\nvar isArray_1 = require('../util/isArray');\nfunction isNumeric(val) {\n    // parseFloat NaNs numeric-cast false positives (null|true|false|\"\")\n    // ...but misinterprets leading-number strings, particularly hex literals (\"0x...\")\n    // subtraction forces infinities to NaN\n    // adding 1 corrects loss of precision from parseFloat (#15100)\n    return !isArray_1.isArray(val) && (val - parseFloat(val) + 1) >= 0;\n}\nexports.isNumeric = isNumeric;\n;\n\n},{\"../util/isArray\":331}],335:[function(require,module,exports){\n\"use strict\";\nfunction isObject(x) {\n    return x != null && typeof x === 'object';\n}\nexports.isObject = isObject;\n\n},{}],336:[function(require,module,exports){\n\"use strict\";\nfunction isPromise(value) {\n    return value && typeof value.subscribe !== 'function' && typeof value.then === 'function';\n}\nexports.isPromise = isPromise;\n\n},{}],337:[function(require,module,exports){\n\"use strict\";\nfunction isScheduler(value) {\n    return value && typeof value.schedule === 'function';\n}\nexports.isScheduler = isScheduler;\n\n},{}],338:[function(require,module,exports){\n\"use strict\";\n/* tslint:disable:no-empty */\nfunction noop() { }\nexports.noop = noop;\n\n},{}],339:[function(require,module,exports){\n\"use strict\";\nfunction not(pred, thisArg) {\n    function notPred() {\n        return !(notPred.pred.apply(notPred.thisArg, arguments));\n    }\n    notPred.pred = pred;\n    notPred.thisArg = thisArg;\n    return notPred;\n}\nexports.not = not;\n\n},{}],340:[function(require,module,exports){\n(function (global){\n\"use strict\";\nvar objectTypes = {\n    'boolean': false,\n    'function': true,\n    'object': true,\n    'number': false,\n    'string': false,\n    'undefined': false\n};\nexports.root = (objectTypes[typeof self] && self) || (objectTypes[typeof window] && window);\nvar freeGlobal = objectTypes[typeof global] && global;\nif (freeGlobal && (freeGlobal.global === freeGlobal || freeGlobal.window === freeGlobal)) {\n    exports.root = freeGlobal;\n}\n\n}).call(this,typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {})\n},{}],341:[function(require,module,exports){\n\"use strict\";\nvar root_1 = require('./root');\nvar isArray_1 = require('./isArray');\nvar isPromise_1 = require('./isPromise');\nvar Observable_1 = require('../Observable');\nvar iterator_1 = require('../symbol/iterator');\nvar InnerSubscriber_1 = require('../InnerSubscriber');\nvar observable_1 = require('../symbol/observable');\nfunction subscribeToResult(outerSubscriber, result, outerValue, outerIndex) {\n    var destination = new InnerSubscriber_1.InnerSubscriber(outerSubscriber, outerValue, outerIndex);\n    if (destination.closed) {\n        return null;\n    }\n    if (result instanceof Observable_1.Observable) {\n        if (result._isScalar) {\n            destination.next(result.value);\n            destination.complete();\n            return null;\n        }\n        else {\n            return result.subscribe(destination);\n        }\n    }\n    if (isArray_1.isArray(result)) {\n        for (var i = 0, len = result.length; i < len && !destination.closed; i++) {\n            destination.next(result[i]);\n        }\n        if (!destination.closed) {\n            destination.complete();\n        }\n    }\n    else if (isPromise_1.isPromise(result)) {\n        result.then(function (value) {\n            if (!destination.closed) {\n                destination.next(value);\n                destination.complete();\n            }\n        }, function (err) { return destination.error(err); })\n            .then(null, function (err) {\n            // Escaping the Promise trap: globally throw unhandled errors\n            root_1.root.setTimeout(function () { throw err; });\n        });\n        return destination;\n    }\n    else if (typeof result[iterator_1.$$iterator] === 'function') {\n        var iterator = result[iterator_1.$$iterator]();\n        do {\n            var item = iterator.next();\n            if (item.done) {\n                destination.complete();\n                break;\n            }\n            destination.next(item.value);\n            if (destination.closed) {\n                break;\n            }\n        } while (true);\n    }\n    else if (typeof result[observable_1.$$observable] === 'function') {\n        var obs = result[observable_1.$$observable]();\n        if (typeof obs.subscribe !== 'function') {\n            destination.error(new Error('invalid observable'));\n        }\n        else {\n            return obs.subscribe(new InnerSubscriber_1.InnerSubscriber(outerSubscriber, outerValue, outerIndex));\n        }\n    }\n    else {\n        destination.error(new TypeError('unknown type returned'));\n    }\n    return null;\n}\nexports.subscribeToResult = subscribeToResult;\n\n},{\"../InnerSubscriber\":3,\"../Observable\":5,\"../symbol/iterator\":311,\"../symbol/observable\":312,\"./isArray\":331,\"./isPromise\":336,\"./root\":340}],342:[function(require,module,exports){\n\"use strict\";\nvar Subscriber_1 = require('../Subscriber');\nvar rxSubscriber_1 = require('../symbol/rxSubscriber');\nfunction toSubscriber(nextOrObserver, error, complete) {\n    if (nextOrObserver) {\n        if (nextOrObserver instanceof Subscriber_1.Subscriber) {\n            return nextOrObserver;\n        }\n        if (nextOrObserver[rxSubscriber_1.$$rxSubscriber]) {\n            return nextOrObserver[rxSubscriber_1.$$rxSubscriber]();\n        }\n    }\n    if (!nextOrObserver && !error && !complete) {\n        return new Subscriber_1.Subscriber();\n    }\n    return new Subscriber_1.Subscriber(nextOrObserver, error, complete);\n}\nexports.toSubscriber = toSubscriber;\n\n},{\"../Subscriber\":13,\"../symbol/rxSubscriber\":313}],343:[function(require,module,exports){\n\"use strict\";\nvar errorObject_1 = require('./errorObject');\nvar tryCatchTarget;\nfunction tryCatcher() {\n    try {\n        return tryCatchTarget.apply(this, arguments);\n    }\n    catch (e) {\n        errorObject_1.errorObject.e = e;\n        return errorObject_1.errorObject;\n    }\n}\nfunction tryCatch(fn) {\n    tryCatchTarget = fn;\n    return tryCatcher;\n}\nexports.tryCatch = tryCatch;\n;\n\n},{\"./errorObject\":330}]},{},[9])(9)\n});\n",
			"file": "/C/jbart5-ng/node_modules/rxjs/bundles/Rx.js",
			"file_size": 671605,
			"file_write_time": 131226616236765099,
			"settings":
			{
				"buffer_size": 671608,
				"line_ending": "Unix"
			}
		}
	],
	"build_system": "",
	"build_system_choices":
	[
	],
	"build_varint": "",
	"command_palette":
	{
		"height": 35.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"",
				"About"
			]
		],
		"width": 416.0
	},
	"console":
	{
		"height": 174.0,
		"history":
		[
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"expanded_folders":
	[
		"/C/jbart5-ng/src/ui",
		"/C/jbart5-ng",
		"/C/jbart5-ng/.vscode",
		"/C/jbart5-ng/projects/ui-tests",
		"/C/jbart5-ng/src",
		"/C/jbart5-ng/src/testing",
		"/C/Dropbox/mega"
	],
	"file_history":
	[
		"/C/jbart5-ng/projects/material-demo/ng-material-demo-loader.ts",
		"/C/jbart5-ng/src/ui/md-styles/group-md.ts",
		"/C/jbart5-ng/projects/studio/studio-tree.ts",
		"/C/jbart5-ng/src/ui/styles/picklist-styles.ts",
		"/C/jbart5-ng/src/ui/md-styles/editable-boolean-md.ts",
		"/C/jbart5-ng/src/ui/editable-number.ts",
		"/C/jbart5-ng/src/ui/styles/editable-boolean-styles.ts",
		"/C/jbart5-ng/src/core/data-binding.js",
		"/C/jbart5-ng/src/ui/slider.ts",
		"/C/jbart5-ng/build/ng2materialDemo.js",
		"/C/jbart5-ng/index.html",
		"/C/ng2materialDemo/index.html",
		"/C/jbart5-ng/src/loader/load-jbart.js",
		"/C/jbart5-ng/src/ui/picklist.js",
		"/C/jbart5-ng/src/ui/dialog.js",
		"/C/jbart5-ng/src/ui/tabs.js",
		"/C/jbart5-ng/src/ui/itemlog.js",
		"/C/jbart5-ng/src/ui/jb-ui-utils.ts",
		"/C/jbart5-ng/projects/ui-tests/md-tests.ts",
		"/C/material2/src/demo-app/dialog/dialog-demo.ts",
		"/C/material2/package.json",
		"/C/jbart5-ng/projects/studio/studio-open-project.ts",
		"/C/jbart5-ng/projects/hello-world/hello.ts",
		"/C/jbart5-ng/projects/ui-tests/rx-tests.ts",
		"/C/jbart5-ng/src/ui/jb-rx.ts",
		"/C/jbart5-ng/projects/studio/studio-suggestions.ts",
		"/C/jbart5-ng/src/ui/md-styles/input-md.ts",
		"/C/jbart5-ng/projects/studio/css/studio.css",
		"/C/jbart5-ng/projects/studio-helper/suggestion-tests.js",
		"/C/jbart5-ng/projects/studio-helper/studio-tree-tests.js",
		"/C/jbart5-ng/src/ui/group.js",
		"/C/jbart5-ng/projects/studio/studio-probe.ts",
		"/C/jbart5-ng/src/testing/ui-testers-ctrls.ts",
		"/C/jbart5-ng/src/ui/md-styles/button-md.ts",
		"/C/jbart5-ng/node_modules/@angular2-material/button/button.metadata.json",
		"/C/jbart5-ng/node_modules/@angular2-material/button/README.md",
		"/C/jbart5-ng/node_modules/@angular2-material/core/ripple/README.md",
		"/C/jbart5-ng/node_modules/@angular2-material/core/ripple/ripple.metadata.json",
		"/C/jbart5-ng/todo.txt",
		"/C/jbart5-ng/node_modules/@angular2-material/button/button.css",
		"/C/jbart5-ng/projects/studio-helper/studio-helper.js",
		"/C/jbart5-ng/src/ui/itemlist.js",
		"/C/jbart5-ng/projects/studio/studio-edit-source.ts",
		"/C/jbart5-ng/src/core/utils.js",
		"/C/jbart5-ng/projects/studio/studio-styles.ts",
		"/C/jbart5-ng/projects/ui-tests/ui-tests-old.js",
		"/C/jbart5-ng/src/ui/styles/group-styles.ts",
		"/C/jbart5-ng/src/ui/features.js",
		"/C/jbart5-ng/src/ui/field.js",
		"/C/jbart5-ng/src/ui/styles.js",
		"/C/material2/src/demo-app/system-config.ts",
		"/C/jbart5-ng/node_modules/rxjs/bundles/Rx.js",
		"/C/jbart5-ng/dist/ng2.js",
		"/C/jbart5-ng/projects/ui-tests/single-test.html",
		"/C/jbart5-ng/src/testing/ui-testers.ts",
		"/C/jbart5-ng/projects/ui-tests/tests.html",
		"/C/jbart5-ng/src/ui/editable-text.js",
		"/C/jbart5-ng/src/ui/styles/layout-styles.ts",
		"/C/jbart5-ng/src/ui/tree/tree.ts",
		"/C/jbart5-ng/projects/material-demo/material-demo.js",
		"/C/material2/src/demo-app/checkbox/checkbox-demo.ts",
		"/C/jbart5-ng/projects/material-demo/material-demo.html",
		"/C/jbart5-ng/projects/material-demo/all-readmes.js",
		"/C/jbart5-ng/projects/studio/studio-context-viewer.ts",
		"/C/jbart5-ng/projects/studio/studio-save.ts",
		"/C/jbart5-ng/jbart-studio.js",
		"/C/jbart5-ng/jbart.json",
		"/C/jbart5-ng/src/ui/ui-common.js",
		"/C/material2/src/demo-app/tooltip/tooltip-demo.ts",
		"/C/jbart5-ng/package.json",
		"/C/jbart5-ng/build/build-ngdemo-site.bat",
		"/C/material2/src/demo-app/progress-circle/progress-circle-demo.html",
		"/C/material2/src/demo-app/progress-circle/progress-circle-demo.ts",
		"/C/material2/src/demo-app/toolbar/toolbar-demo.html",
		"/C/material2/src/lib/core/ripple/ripple.ts",
		"/C/material2/src/demo-app/input/input-demo.ts",
		"/C/material2/src/demo-app/input/input-demo.html",
		"/C/jbart5-ng/projects/studio/studio-menu.ts",
		"/C/jbart5-ng/src/core/components.js",
		"/C/jbart5-ng/node_modules/@angular2-material/core/package.json",
		"/C/jbart5-ng/node_modules/@angular2-material/tooltip/tooltip.js",
		"/C/jbart5-ng/node_modules/hammerjs/hammer.js",
		"/C/material2/src/demo-app/button/button-demo.html",
		"/C/material2/src/demo-app/button/button-demo.scss",
		"/C/material2/src/demo-app/button/button-demo.ts",
		"/C/jbart5-ng/projects/studio/studio-main.ts",
		"/C/jbart5-ng/projects/material-demo/material-demo-pick.js",
		"/C/jbart5-ng/projects/studio-helper/studio-helper.html",
		"/C/jbart5-ng/projects/studio/studio-jb-editor-styles.ts",
		"/C/jbart5-ng/src/ui/tree/json-tree.ts",
		"/C/jbart5-ng/src/ui/css-features.js",
		"/C/jbart5-ng/projects/studio/studio-toolbar.ts",
		"/C/jbart5-ng/src/ui/pulldown-menu.js",
		"/C/jbart5-ng/projects/studio/studio-testers.ts",
		"/C/jbart5-ng/projects/studio-helper/path-tests.js",
		"/C/jbart5-ng/projects/studio/studio-jb-editor.ts",
		"/C/material2/src/lib/button/button.ts",
		"/C/material2/src/lib/card/README.md",
		"/C/jbart5-ng/projects/material-demo/nodejs-concat-all-apis.js",
		"/C/jbart5-ng/projects/material-demo/nodejs-prepare-material2.js",
		"/C/jbart5-ng/src/ui/label.js",
		"/C/jbart5-ng/projects/studio/studio-new-control.ts",
		"/C/jbart5-ng/projects/studio/studio-pick-dialog.ts",
		"/C/jbart5-ng/projects/studio/studio-model-components.ts",
		"/C/jbart5-ng/projects/studio/studio-properties-menu.ts",
		"/C/jbart5-ng/projects/studio/studio-path.ts",
		"/C/jbart5-ng/projects/studio/studio-popups.ts",
		"/C/jbart5-ng/projects/studio/studio-style-editor.ts",
		"/C/jbart5-ng/projects/studio/studio-properties.ts",
		"/C/jbart5-ng/projects/studio/studio-tgp-model.ts",
		"/C/jbart5-ng/projects/ui-tests/ui-tests.ts",
		"/C/jbart5-ng/src/ui/markdown.js",
		"/C/jbart5-ng/src/ui/text.js",
		"/C/jbart5-ng/src/ui/editable-boolean.js",
		"/C/jbart5-ng/src/ui/styles/codemirror-styles.ts",
		"/C/jbart5-ng/src/ui/jb-ui.ts",
		"/C/jbart5-ng/projects/data-tests/data-tests.js",
		"/C/jbart5-ng/projects/material-demo/all-demos.js",
		"/C/material2/src/demo-app/snack-bar/snack-bar-demo.ts",
		"/C/material2/src/demo-app/ripple/ripple-demo.ts",
		"/C/jbart5-ng/src/core/core.js",
		"/C/jbart5-ng/projects/studio/studio-utils.ts",
		"/C/jbart5-ng/projects/data-tests/data-tests.html",
		"/C/jbart5-ng/src/ui/button.js",
		"/C/jbart5-ng/src/core/pretty-print.js",
		"/C/jbart5-ng/projects/studio/studio-undo.ts",
		"/C/ng2materialDemo/loader.js",
		"/C/jbart5-ng/node_modules/@angular2-material/button/button.html"
	],
	"find":
	{
		"height": 36.0
	},
	"find_in_files":
	{
		"height": 90.0,
		"where_history":
		[
			"*.ts,*.js,*.css,*.html	",
			"*.ts,*.js,*.css,*.html",
			"*.ts,*.js,*.css		",
			"*.ts,*.js,*.css	",
			"*.ts,*.js,*.css",
			"*.ts,*.js",
			"*.ts;*.js",
			"*.ts",
			"*.ts,*.js,*.css",
			"*.ts",
			"*.ts,*.js,*.css",
			"*.ts,*.js",
			"*.ts",
			"*.ts,*.js,*.css",
			"*.ts,*.js",
			"*.ts;*.js",
			"*.ts,*.js",
			"*.css",
			"*.ts,*.js",
			"*.css",
			"*.ts,*.js",
			"*.ts",
			"*.js,*.ts",
			"*.js;*.ts",
			"*.js",
			""
		]
	},
	"find_state":
	{
		"case_sensitive": false,
		"find_history":
		[
			"ui-test.markdown",
			"Array.from",
			"Arry.from",
			"md-tabs",
			"compi",
			"compil",
			"this.hashkey()",
			"imports:",
			"imports",
			"MdIcon",
			"directives: 'MdButton'",
			"directives: 'MdSlideToggle'",
			"MdSlideToggle",
			"jbTreeModule",
			"annotations.imports",
			"extend(",
			"MaterialModule",
			"directives",
			"directives:",
			"MaterialModule",
			"Module =",
			"MdCoreModule",
			"MdRippleModule",
			"ngModule",
			"TreeNode",
			"registerDirectives",
			"@NgModule",
			"jBartComponentDependencies",
			"annot",
			"jBartComponentDependencies",
			"registerDirectives",
			"MdIcon",
			"registerDirectives",
			"getOrCre",
			"ng.directives",
			"jb_node",
			"compile",
			"_Cmp_0_4",
			"compile",
			"renderer",
			"Renderer",
			"setElementAttribute",
			"jBartAllModule",
			"createComp(",
			"createComp",
			"BrowserModule",
			"jbComp",
			"provideF",
			"ViewChild",
			"FormsModule",
			"ngModule",
			"Observable",
			"jb_rx.Obs",
			"injector-get",
			"injector",
			"Inject",
			"require(",
			"requ",
			"require",
			"System.",
			"rxjs",
			"rxjs/Subject",
			"ui-tests/rxjs/Subject",
			"input.js",
			"angular2-materi",
			"http",
			"2.0.0-rc.5",
			"NgModule",
			"export class",
			" [flatten]=\"true\" class=\"group-item\"",
			"'group.style'",
			"jb_comp",
			"'group'",
			"('group",
			"registerMethods",
			"hashkey",
			"hash",
			"check",
			"label.md-card-title",
			"^    ",
			"    ",
			"^ ",
			"^\\t",
			"         ",
			"        ",
			"       ",
			"      ",
			"     ",
			"    ",
			"createC",
			"@comp",
			"@compon",
			"cleanCtxDictionary",
			"jbModel[^(]",
			"jbModel[^a]",
			"jbModel^[a]",
			"jbModel[^a]",
			"jbModel[^(]",
			"jbModel",
			"modelExp",
			"twoWayBind",
			"field",
			"editable-boolean.md-slide-toggle",
			"md-slide-toggle",
			"field",
			".takeUntil( cmp.jbEmitter.filter(x=>x =='destroy') )",
			"=='destroy'",
			".takeUntil(cmp.jbEmitter.filter(x=>x =='destroy'))",
			"'destroy'",
			"x == 'destroy'",
			"picklist.dynamic-options",
			"field",
			"editable-number.",
			"field",
			"('contains'",
			"'contains'",
			"('ng2-ui-test",
			"'field.subscribe'",
			"field",
			"editable-text.bind-field",
			"data-bind",
			"editable-text.bind-field",
			".value",
			"%$field.modelExp%",
			"editable-boolean.checkbox",
			"twoWayB",
			"modelExp",
			"twoWayB"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
			"readme-of-elem",
			"'studio.comp-source'",
			"'studio.project-source'",
			"'studio.new-array-item'",
			"'studio.move-in-array'",
			"'studio.wrap-with-pipeline'",
			"'studio.add-property'",
			"'studio.wrap-with-group'",
			"'studio.insert-comp'",
			"'studio.param-def'",
			"studio.comp-name",
			"open-new-control-dialog",
			"dialog-feature",
			"params: [ {id: 'path', as: 'string' } ]",
			"params: [ {id: 'path' as: 'string' } ]",
			"preparedParams",
			"Array.isArray",
			"staticPath",
			"studio-script",
			"'goto-url'",
			"notifyModification",
			"itemlist-with-groups",
			"model.",
			"import {model} from './studio-tgp-model';",
			"$jbProbe",
			"open-source-dialog",
			"studio.make-local",
			"studio.open-properties",
			"studio.goto-sublime",
			"profileFromPath",
			"{$: 'studio.property-toobar-feature', path: '%$path%'",
			"studio-position-under-property",
			"'group.wait'",
			"'MdButton'",
			"field.subscribe",
			"studio.subscribe",
			"studio-floating",
			"studio.control-tree",
			"open-control-tree",
			"bindYesNoMappings",
			"bindYesNo",
			"",
			"*ngFor=\"let ",
			"",
			"@angular/core",
			"compAsStr",
			"sortedPropertyNames",
			"property-",
			"pulldown.menu-item",
			"menu-item-separator",
			"modal-overlay",
			"from 'jb-core';",
			"from 'jb-ui'",
			"from 'jb-ui/",
			"from 'jb-ui/jb-rx';",
			"from 'jb-core/jb';",
			"from 'core/jb';",
			",",
			"'",
			",",
			"",
			"profileRefFromPath",
			"import * as ui_utils from 'ui/jb-ui-utils';",
			"import * as jb_ui from 'ui/jb-ui';",
			"jb_ui.Comp(",
			"import {jb_ui} from 'ui/jb-ui'",
			"this"
		],
		"reverse": false,
		"show_context": true,
		"use_buffer2": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"selected": 23,
			"sheets":
			[
				{
					"buffer": 0,
					"file": "/C/jbart5-ng/src/ui/md-styles/card-md.ts",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2096,
						"regions":
						{
						},
						"selection":
						[
							[
								117,
								117
							]
						],
						"settings":
						{
							"syntax": "Packages/JavaScript/JavaScript.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 20,
					"type": "text"
				},
				{
					"buffer": 1,
					"file": "/C/jbart5-ng/src/ui/md-styles/dialog-md.ts",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1151,
						"regions":
						{
						},
						"selection":
						[
							[
								1150,
								1150
							]
						],
						"settings":
						{
							"syntax": "Packages/JavaScript/JavaScript.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 11,
					"type": "text"
				},
				{
					"buffer": 2,
					"file": "/C/jbart5-ng/src/ui/md-styles/editable-boolean-md.ts",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1724,
						"regions":
						{
						},
						"selection":
						[
							[
								1305,
								1305
							]
						],
						"settings":
						{
							"syntax": "Packages/JavaScript/JavaScript.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 10,
					"type": "text"
				},
				{
					"buffer": 3,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 786,
						"regions":
						{
						},
						"selection":
						[
							[
								252,
								395
							]
						],
						"settings":
						{
							"syntax": "Packages/JavaScript/JavaScript.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 30,
					"type": "text"
				},
				{
					"buffer": 4,
					"file": "/C/jbart5-ng/docs/jbart-anatomy.md",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 8793,
						"regions":
						{
						},
						"selection":
						[
							[
								8130,
								8130
							]
						],
						"settings":
						{
							"syntax": "Packages/Markdown/Markdown.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 4411.0,
						"zoom_level": 1.0
					},
					"stack_index": 27,
					"type": "text"
				},
				{
					"buffer": 5,
					"file": "/C/jbart5-ng/src/ui/label.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1575,
						"regions":
						{
						},
						"selection":
						[
							[
								722,
								722
							]
						],
						"settings":
						{
							"syntax": "Packages/JavaScript/JavaScript.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 67.0,
						"zoom_level": 1.0
					},
					"stack_index": 1,
					"type": "text"
				},
				{
					"buffer": 6,
					"file": "/C/jbart5-ng/projects/ui-tests/md-tests.ts",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3435,
						"regions":
						{
						},
						"selection":
						[
							[
								500,
								500
							]
						],
						"settings":
						{
							"syntax": "Packages/JavaScript/JavaScript.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 8,
					"type": "text"
				},
				{
					"buffer": 7,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 456295,
						"regions":
						{
							"match":
							{
								"flags": 112,
								"regions":
								[
									[
										97,
										104
									],
									[
										217,
										224
									],
									[
										426,
										433
									],
									[
										593,
										600
									],
									[
										61931,
										61938
									],
									[
										66746,
										66753
									],
									[
										67120,
										67139
									],
									[
										67349,
										67368
									],
									[
										67601,
										67620
									],
									[
										67796,
										67815
									],
									[
										68028,
										68047
									],
									[
										68297,
										68316
									],
									[
										68914,
										68921
									],
									[
										69157,
										69164
									],
									[
										69411,
										69418
									],
									[
										69448,
										69455
									],
									[
										69743,
										69750
									],
									[
										69969,
										69976
									],
									[
										70193,
										70200
									],
									[
										70400,
										70407
									],
									[
										70648,
										70655
									],
									[
										70817,
										70824
									],
									[
										70983,
										70990
									],
									[
										71117,
										71124
									],
									[
										71320,
										71327
									],
									[
										71454,
										71461
									],
									[
										71678,
										71685
									],
									[
										71840,
										71847
									],
									[
										72053,
										72060
									],
									[
										72263,
										72270
									],
									[
										72467,
										72474
									],
									[
										72649,
										72656
									],
									[
										72810,
										72817
									],
									[
										72959,
										72966
									],
									[
										73152,
										73159
									],
									[
										73258,
										73265
									],
									[
										73421,
										73428
									],
									[
										73595,
										73602
									],
									[
										73762,
										73769
									],
									[
										74014,
										74021
									],
									[
										74247,
										74254
									],
									[
										74399,
										74406
									],
									[
										74499,
										74506
									],
									[
										74619,
										74626
									],
									[
										74724,
										74731
									],
									[
										74974,
										74981
									],
									[
										75153,
										75160
									],
									[
										75358,
										75365
									],
									[
										75527,
										75534
									],
									[
										75739,
										75746
									],
									[
										75847,
										75854
									],
									[
										76051,
										76058
									],
									[
										76252,
										76259
									],
									[
										76502,
										76509
									],
									[
										76688,
										76695
									],
									[
										76907,
										76914
									],
									[
										77180,
										77187
									],
									[
										77386,
										77393
									],
									[
										77610,
										77617
									],
									[
										77785,
										77792
									],
									[
										78073,
										78080
									],
									[
										78259,
										78266
									],
									[
										78470,
										78477
									],
									[
										78662,
										78669
									],
									[
										78865,
										78872
									],
									[
										78977,
										78984
									],
									[
										79193,
										79200
									],
									[
										79396,
										79403
									],
									[
										79612,
										79619
									],
									[
										79785,
										79792
									],
									[
										79929,
										79936
									],
									[
										80124,
										80131
									],
									[
										80341,
										80348
									],
									[
										80539,
										80546
									],
									[
										80678,
										80685
									],
									[
										80896,
										80903
									],
									[
										81112,
										81119
									],
									[
										81301,
										81308
									],
									[
										81512,
										81519
									],
									[
										81849,
										81856
									],
									[
										82003,
										82010
									],
									[
										82241,
										82248
									],
									[
										82438,
										82445
									],
									[
										82622,
										82629
									],
									[
										82872,
										82879
									],
									[
										83111,
										83118
									],
									[
										83335,
										83342
									],
									[
										83510,
										83517
									],
									[
										83693,
										83700
									],
									[
										83865,
										83872
									],
									[
										84023,
										84030
									],
									[
										84249,
										84256
									],
									[
										84446,
										84453
									],
									[
										84654,
										84661
									],
									[
										84860,
										84867
									],
									[
										85094,
										85101
									],
									[
										85353,
										85360
									],
									[
										85586,
										85593
									],
									[
										85718,
										85725
									],
									[
										85943,
										85950
									],
									[
										86152,
										86159
									],
									[
										86428,
										86435
									],
									[
										86505,
										86512
									],
									[
										86674,
										86681
									],
									[
										86844,
										86851
									],
									[
										87040,
										87047
									],
									[
										87206,
										87213
									],
									[
										87459,
										87466
									],
									[
										87513,
										87520
									],
									[
										87688,
										87695
									],
									[
										87775,
										87782
									],
									[
										87999,
										88006
									],
									[
										88204,
										88211
									],
									[
										88258,
										88265
									],
									[
										88515,
										88522
									],
									[
										88602,
										88609
									],
									[
										88766,
										88773
									],
									[
										88956,
										88963
									],
									[
										89228,
										89235
									],
									[
										89457,
										89464
									],
									[
										89575,
										89582
									],
									[
										89780,
										89787
									],
									[
										89953,
										89960
									],
									[
										90116,
										90123
									],
									[
										90296,
										90303
									],
									[
										90436,
										90443
									],
									[
										90537,
										90544
									],
									[
										90741,
										90748
									],
									[
										90912,
										90919
									],
									[
										91125,
										91132
									],
									[
										91284,
										91291
									],
									[
										91474,
										91481
									],
									[
										91669,
										91676
									],
									[
										91719,
										91726
									],
									[
										91927,
										91934
									],
									[
										91977,
										91984
									],
									[
										92162,
										92169
									],
									[
										92340,
										92347
									],
									[
										92503,
										92510
									],
									[
										92673,
										92680
									],
									[
										92832,
										92839
									],
									[
										93044,
										93051
									],
									[
										93267,
										93274
									],
									[
										93322,
										93329
									],
									[
										93523,
										93530
									],
									[
										93578,
										93585
									],
									[
										93778,
										93785
									],
									[
										93966,
										93973
									],
									[
										94053,
										94060
									],
									[
										94228,
										94235
									],
									[
										94324,
										94331
									],
									[
										94411,
										94418
									],
									[
										94659,
										94666
									],
									[
										94857,
										94864
									],
									[
										95045,
										95052
									],
									[
										95163,
										95170
									],
									[
										95361,
										95368
									],
									[
										95552,
										95559
									],
									[
										95762,
										95769
									],
									[
										95931,
										95938
									],
									[
										96032,
										96039
									],
									[
										96280,
										96287
									],
									[
										96481,
										96488
									],
									[
										96724,
										96731
									],
									[
										96913,
										96920
									],
									[
										97133,
										97140
									],
									[
										97358,
										97365
									],
									[
										97408,
										97415
									],
									[
										97646,
										97653
									],
									[
										97696,
										97703
									],
									[
										97911,
										97918
									],
									[
										98119,
										98126
									],
									[
										98312,
										98319
									],
									[
										98512,
										98519
									],
									[
										98701,
										98708
									],
									[
										98943,
										98950
									],
									[
										99198,
										99205
									],
									[
										99253,
										99260
									],
									[
										99484,
										99491
									],
									[
										99539,
										99546
									],
									[
										99769,
										99776
									],
									[
										99957,
										99964
									],
									[
										100044,
										100051
									],
									[
										100249,
										100256
									],
									[
										100345,
										100352
									],
									[
										100432,
										100439
									],
									[
										100660,
										100667
									],
									[
										100808,
										100815
									],
									[
										100974,
										100981
									],
									[
										101166,
										101173
									],
									[
										101347,
										101354
									],
									[
										101558,
										101565
									],
									[
										101818,
										101825
									],
									[
										101884,
										101891
									],
									[
										102318,
										102331
									],
									[
										102487,
										102500
									],
									[
										102810,
										102823
									],
									[
										103099,
										103112
									],
									[
										103286,
										103299
									],
									[
										103536,
										103549
									],
									[
										103698,
										103711
									],
									[
										103868,
										103881
									],
									[
										104037,
										104050
									],
									[
										104233,
										104246
									],
									[
										104398,
										104411
									],
									[
										104569,
										104582
									],
									[
										104739,
										104752
									],
									[
										104945,
										104958
									],
									[
										105111,
										105124
									],
									[
										105271,
										105284
									],
									[
										105546,
										105559
									],
									[
										105734,
										105747
									],
									[
										105911,
										105924
									],
									[
										106092,
										106105
									],
									[
										106266,
										106279
									],
									[
										106492,
										106505
									],
									[
										106672,
										106685
									],
									[
										106858,
										106871
									],
									[
										107070,
										107083
									],
									[
										107399,
										107414
									],
									[
										107465,
										107480
									],
									[
										107530,
										107545
									],
									[
										107585,
										107600
									],
									[
										107810,
										107825
									],
									[
										107877,
										107892
									],
									[
										107948,
										107963
									],
									[
										108036,
										108051
									],
									[
										108102,
										108117
									],
									[
										108164,
										108179
									],
									[
										108219,
										108234
									],
									[
										108553,
										108568
									],
									[
										108782,
										108797
									],
									[
										109018,
										109033
									],
									[
										109262,
										109277
									],
									[
										109496,
										109511
									],
									[
										109778,
										109793
									],
									[
										109844,
										109859
									],
									[
										109991,
										110006
									],
									[
										110132,
										110147
									],
									[
										110358,
										110373
									],
									[
										126718,
										126733
									],
									[
										127308,
										127323
									],
									[
										143286,
										143301
									],
									[
										148679,
										148694
									],
									[
										148977,
										148992
									],
									[
										159337,
										159352
									],
									[
										175657,
										175672
									],
									[
										176633,
										176648
									],
									[
										176709,
										176724
									],
									[
										176785,
										176800
									],
									[
										176861,
										176876
									],
									[
										176942,
										176957
									],
									[
										177004,
										177019
									],
									[
										177067,
										177082
									],
									[
										177155,
										177170
									],
									[
										177250,
										177265
									],
									[
										177345,
										177360
									],
									[
										177427,
										177442
									],
									[
										177511,
										177526
									],
									[
										177609,
										177624
									],
									[
										177709,
										177724
									],
									[
										177806,
										177821
									],
									[
										177887,
										177902
									],
									[
										178060,
										178075
									],
									[
										178167,
										178182
									],
									[
										178410,
										178425
									],
									[
										178446,
										178461
									],
									[
										178622,
										178637
									],
									[
										178936,
										178944
									],
									[
										179280,
										179292
									],
									[
										179478,
										179490
									],
									[
										179760,
										179772
									],
									[
										179962,
										179974
									],
									[
										180257,
										180265
									],
									[
										180527,
										180535
									],
									[
										181067,
										181075
									],
									[
										181107,
										181115
									],
									[
										181128,
										181136
									],
									[
										181174,
										181182
									],
									[
										181193,
										181201
									],
									[
										181220,
										181228
									],
									[
										181476,
										181484
									],
									[
										181486,
										181494
									],
									[
										181832,
										181840
									],
									[
										181847,
										181855
									],
									[
										181984,
										181992
									],
									[
										182152,
										182160
									],
									[
										182198,
										182206
									],
									[
										182583,
										182591
									],
									[
										182822,
										182830
									],
									[
										183092,
										183100
									],
									[
										183632,
										183640
									],
									[
										183672,
										183680
									],
									[
										183693,
										183701
									],
									[
										183739,
										183747
									],
									[
										183758,
										183766
									],
									[
										183785,
										183793
									],
									[
										184041,
										184049
									],
									[
										184051,
										184059
									],
									[
										184397,
										184405
									],
									[
										184412,
										184420
									],
									[
										184549,
										184557
									],
									[
										184717,
										184725
									],
									[
										184763,
										184771
									],
									[
										185107,
										185119
									],
									[
										185265,
										185277
									],
									[
										185701,
										185710
									],
									[
										185777,
										185786
									],
									[
										185967,
										185976
									],
									[
										186042,
										186051
									],
									[
										186256,
										186265
									],
									[
										186333,
										186342
									],
									[
										186671,
										186680
									],
									[
										186929,
										186938
									],
									[
										187222,
										187231
									],
									[
										187534,
										187543
									],
									[
										187574,
										187583
									],
									[
										187864,
										187873
									],
									[
										187977,
										187986
									],
									[
										188252,
										188261
									],
									[
										188324,
										188333
									],
									[
										188611,
										188620
									],
									[
										188720,
										188729
									],
									[
										189096,
										189105
									],
									[
										189292,
										189301
									],
									[
										189369,
										189378
									],
									[
										189445,
										189454
									],
									[
										189705,
										189714
									],
									[
										189945,
										189954
									],
									[
										190030,
										190039
									],
									[
										190105,
										190114
									],
									[
										190230,
										190239
									],
									[
										190301,
										190310
									],
									[
										190566,
										190575
									],
									[
										190934,
										190944
									],
									[
										191159,
										191169
									],
									[
										191491,
										191501
									],
									[
										191795,
										191805
									],
									[
										192041,
										192051
									],
									[
										192298,
										192308
									],
									[
										192527,
										192537
									],
									[
										192884,
										192894
									],
									[
										193223,
										193233
									],
									[
										193438,
										193448
									],
									[
										193758,
										193769
									],
									[
										194088,
										194102
									],
									[
										194434,
										194448
									],
									[
										194776,
										194795
									],
									[
										195171,
										195190
									],
									[
										195572,
										195580
									],
									[
										195976,
										195984
									],
									[
										196433,
										196441
									],
									[
										196710,
										196718
									],
									[
										196790,
										196798
									],
									[
										196801,
										196809
									],
									[
										196990,
										196998
									],
									[
										197344,
										197352
									],
									[
										197678,
										197686
									],
									[
										197728,
										197736
									],
									[
										197740,
										197748
									],
									[
										197988,
										197996
									],
									[
										198433,
										198441
									],
									[
										198739,
										198747
									],
									[
										198946,
										198954
									],
									[
										198996,
										199004
									],
									[
										199008,
										199016
									],
									[
										199301,
										199309
									],
									[
										199730,
										199738
									],
									[
										200020,
										200028
									],
									[
										200225,
										200233
									],
									[
										200275,
										200283
									],
									[
										200287,
										200295
									],
									[
										200606,
										200614
									],
									[
										201015,
										201023
									],
									[
										201303,
										201311
									],
									[
										201520,
										201528
									],
									[
										201592,
										201600
									],
									[
										201604,
										201612
									],
									[
										201881,
										201889
									],
									[
										202306,
										202314
									],
									[
										202628,
										202636
									],
									[
										202881,
										202889
									],
									[
										202931,
										202939
									],
									[
										202943,
										202951
									],
									[
										203199,
										203207
									],
									[
										203625,
										203633
									],
									[
										203902,
										203910
									],
									[
										204107,
										204115
									],
									[
										204198,
										204206
									],
									[
										204210,
										204218
									],
									[
										204452,
										204460
									],
									[
										204764,
										204772
									],
									[
										205079,
										205087
									],
									[
										205129,
										205137
									],
									[
										205141,
										205149
									],
									[
										205492,
										205500
									],
									[
										205777,
										205785
									],
									[
										205998,
										206006
									],
									[
										206089,
										206097
									],
									[
										206101,
										206109
									],
									[
										206353,
										206361
									],
									[
										206587,
										206595
									],
									[
										206921,
										206929
									],
									[
										207376,
										207384
									],
									[
										207833,
										207841
									],
									[
										208110,
										208118
									],
									[
										208190,
										208198
									],
									[
										208201,
										208209
									],
									[
										208390,
										208398
									],
									[
										208744,
										208752
									],
									[
										209078,
										209086
									],
									[
										209128,
										209136
									],
									[
										209140,
										209148
									],
									[
										209388,
										209396
									],
									[
										209833,
										209841
									],
									[
										210139,
										210147
									],
									[
										210346,
										210354
									],
									[
										210396,
										210404
									],
									[
										210408,
										210416
									],
									[
										210701,
										210709
									],
									[
										211130,
										211138
									],
									[
										211420,
										211428
									],
									[
										211625,
										211633
									],
									[
										211675,
										211683
									],
									[
										211687,
										211695
									],
									[
										212006,
										212014
									],
									[
										212415,
										212423
									],
									[
										212703,
										212711
									],
									[
										212920,
										212928
									],
									[
										212992,
										213000
									],
									[
										213004,
										213012
									],
									[
										213281,
										213289
									],
									[
										213706,
										213714
									],
									[
										214028,
										214036
									],
									[
										214281,
										214289
									],
									[
										214331,
										214339
									],
									[
										214343,
										214351
									],
									[
										214599,
										214607
									],
									[
										215025,
										215033
									],
									[
										215302,
										215310
									],
									[
										215507,
										215515
									],
									[
										215598,
										215606
									],
									[
										215610,
										215618
									],
									[
										215852,
										215860
									],
									[
										216164,
										216172
									],
									[
										216479,
										216487
									],
									[
										216529,
										216537
									],
									[
										216541,
										216549
									],
									[
										216892,
										216900
									],
									[
										217177,
										217185
									],
									[
										217398,
										217406
									],
									[
										217489,
										217497
									],
									[
										217501,
										217509
									],
									[
										217753,
										217761
									],
									[
										217987,
										217995
									],
									[
										218321,
										218329
									],
									[
										218776,
										218784
									],
									[
										219233,
										219241
									],
									[
										219580,
										219588
									],
									[
										219591,
										219599
									],
									[
										219780,
										219788
									],
									[
										220134,
										220142
									],
									[
										220468,
										220476
									],
									[
										220518,
										220526
									],
									[
										220530,
										220538
									],
									[
										220778,
										220786
									],
									[
										221223,
										221231
									],
									[
										221529,
										221537
									],
									[
										221736,
										221744
									],
									[
										221786,
										221794
									],
									[
										221798,
										221806
									],
									[
										222091,
										222099
									],
									[
										222520,
										222528
									],
									[
										222810,
										222818
									],
									[
										223015,
										223023
									],
									[
										223065,
										223073
									],
									[
										223077,
										223085
									],
									[
										223396,
										223404
									],
									[
										223805,
										223813
									],
									[
										224093,
										224101
									],
									[
										224310,
										224318
									],
									[
										224382,
										224390
									],
									[
										224394,
										224402
									],
									[
										224671,
										224679
									],
									[
										225096,
										225104
									],
									[
										225418,
										225426
									],
									[
										225671,
										225679
									],
									[
										225721,
										225729
									],
									[
										225733,
										225741
									],
									[
										225989,
										225997
									],
									[
										226415,
										226423
									],
									[
										226692,
										226700
									],
									[
										226897,
										226905
									],
									[
										226988,
										226996
									],
									[
										227000,
										227008
									],
									[
										227242,
										227250
									],
									[
										227554,
										227562
									],
									[
										227869,
										227877
									],
									[
										227919,
										227927
									],
									[
										227931,
										227939
									],
									[
										228282,
										228290
									],
									[
										228567,
										228575
									],
									[
										228788,
										228796
									],
									[
										228879,
										228887
									],
									[
										228891,
										228899
									],
									[
										229143,
										229151
									],
									[
										229377,
										229385
									],
									[
										229711,
										229719
									],
									[
										230166,
										230174
									],
									[
										230623,
										230631
									],
									[
										230970,
										230978
									],
									[
										230981,
										230989
									],
									[
										231170,
										231178
									],
									[
										231524,
										231532
									],
									[
										231858,
										231866
									],
									[
										231908,
										231916
									],
									[
										231920,
										231928
									],
									[
										232168,
										232176
									],
									[
										232613,
										232621
									],
									[
										232919,
										232927
									],
									[
										233126,
										233134
									],
									[
										233176,
										233184
									],
									[
										233188,
										233196
									],
									[
										233481,
										233489
									],
									[
										233910,
										233918
									],
									[
										234200,
										234208
									],
									[
										234405,
										234413
									],
									[
										234455,
										234463
									],
									[
										234467,
										234475
									],
									[
										234786,
										234794
									],
									[
										235195,
										235203
									],
									[
										235483,
										235491
									],
									[
										235700,
										235708
									],
									[
										235772,
										235780
									],
									[
										235784,
										235792
									],
									[
										236061,
										236069
									],
									[
										236486,
										236494
									],
									[
										236808,
										236816
									],
									[
										237061,
										237069
									],
									[
										237111,
										237119
									],
									[
										237123,
										237131
									],
									[
										237379,
										237387
									],
									[
										237805,
										237813
									],
									[
										238082,
										238090
									],
									[
										238287,
										238295
									],
									[
										238378,
										238386
									],
									[
										238390,
										238398
									],
									[
										238632,
										238640
									],
									[
										238944,
										238952
									],
									[
										239259,
										239267
									],
									[
										239309,
										239317
									],
									[
										239321,
										239329
									],
									[
										239672,
										239680
									],
									[
										239957,
										239965
									],
									[
										240178,
										240186
									],
									[
										240269,
										240277
									],
									[
										240281,
										240289
									],
									[
										240533,
										240541
									],
									[
										240767,
										240775
									],
									[
										241101,
										241109
									],
									[
										241556,
										241564
									],
									[
										242013,
										242021
									],
									[
										242299,
										242307
									],
									[
										242653,
										242661
									],
									[
										242987,
										242995
									],
									[
										243037,
										243045
									],
									[
										243049,
										243057
									],
									[
										243297,
										243305
									],
									[
										243742,
										243750
									],
									[
										244048,
										244056
									],
									[
										244255,
										244263
									],
									[
										244305,
										244313
									],
									[
										244317,
										244325
									],
									[
										244610,
										244618
									],
									[
										245039,
										245047
									],
									[
										245329,
										245337
									],
									[
										245534,
										245542
									],
									[
										245584,
										245592
									],
									[
										245596,
										245604
									],
									[
										245915,
										245923
									],
									[
										246324,
										246332
									],
									[
										246612,
										246620
									],
									[
										246829,
										246837
									],
									[
										246901,
										246909
									],
									[
										246913,
										246921
									],
									[
										247190,
										247198
									],
									[
										247615,
										247623
									],
									[
										247937,
										247945
									],
									[
										248190,
										248198
									],
									[
										248240,
										248248
									],
									[
										248252,
										248260
									],
									[
										248508,
										248516
									],
									[
										248934,
										248942
									],
									[
										249211,
										249219
									],
									[
										249416,
										249424
									],
									[
										249507,
										249515
									],
									[
										249519,
										249527
									],
									[
										249761,
										249769
									],
									[
										250073,
										250081
									],
									[
										250388,
										250396
									],
									[
										250438,
										250446
									],
									[
										250450,
										250458
									],
									[
										250801,
										250809
									],
									[
										251086,
										251094
									],
									[
										251307,
										251315
									],
									[
										251398,
										251406
									],
									[
										251410,
										251418
									],
									[
										251662,
										251670
									],
									[
										251896,
										251904
									],
									[
										252230,
										252238
									],
									[
										252685,
										252693
									],
									[
										253142,
										253150
									],
									[
										253537,
										253545
									],
									[
										253871,
										253879
									],
									[
										253921,
										253929
									],
									[
										253933,
										253941
									],
									[
										254181,
										254189
									],
									[
										254626,
										254634
									],
									[
										254932,
										254940
									],
									[
										255139,
										255147
									],
									[
										255189,
										255197
									],
									[
										255201,
										255209
									],
									[
										255494,
										255502
									],
									[
										255923,
										255931
									],
									[
										256213,
										256221
									],
									[
										256418,
										256426
									],
									[
										256468,
										256476
									],
									[
										256480,
										256488
									],
									[
										256799,
										256807
									],
									[
										257208,
										257216
									],
									[
										257496,
										257504
									],
									[
										257713,
										257721
									],
									[
										257785,
										257793
									],
									[
										257797,
										257805
									],
									[
										258074,
										258082
									],
									[
										258499,
										258507
									],
									[
										258821,
										258829
									],
									[
										259074,
										259082
									],
									[
										259124,
										259132
									],
									[
										259136,
										259144
									],
									[
										259392,
										259400
									],
									[
										259818,
										259826
									],
									[
										260095,
										260103
									],
									[
										260300,
										260308
									],
									[
										260391,
										260399
									],
									[
										260403,
										260411
									],
									[
										260645,
										260653
									],
									[
										260957,
										260965
									],
									[
										261272,
										261280
									],
									[
										261322,
										261330
									],
									[
										261334,
										261342
									],
									[
										261685,
										261693
									],
									[
										261970,
										261978
									],
									[
										262191,
										262199
									],
									[
										262282,
										262290
									],
									[
										262294,
										262302
									],
									[
										262546,
										262554
									],
									[
										262780,
										262788
									],
									[
										263114,
										263122
									],
									[
										263569,
										263577
									],
									[
										264026,
										264034
									],
									[
										264431,
										264439
									],
									[
										264481,
										264489
									],
									[
										264493,
										264501
									],
									[
										264741,
										264749
									],
									[
										265186,
										265194
									],
									[
										265492,
										265500
									],
									[
										265699,
										265707
									],
									[
										265749,
										265757
									],
									[
										265761,
										265769
									],
									[
										266054,
										266062
									],
									[
										266483,
										266491
									],
									[
										266773,
										266781
									],
									[
										266978,
										266986
									],
									[
										267028,
										267036
									],
									[
										267040,
										267048
									],
									[
										267359,
										267367
									],
									[
										267768,
										267776
									],
									[
										268056,
										268064
									],
									[
										268273,
										268281
									],
									[
										268345,
										268353
									],
									[
										268357,
										268365
									],
									[
										268634,
										268642
									],
									[
										269059,
										269067
									],
									[
										269381,
										269389
									],
									[
										269634,
										269642
									],
									[
										269684,
										269692
									],
									[
										269696,
										269704
									],
									[
										269952,
										269960
									],
									[
										270378,
										270386
									],
									[
										270655,
										270663
									],
									[
										270860,
										270868
									],
									[
										270951,
										270959
									],
									[
										270963,
										270971
									],
									[
										271205,
										271213
									],
									[
										271517,
										271525
									],
									[
										271832,
										271840
									],
									[
										271882,
										271890
									],
									[
										271894,
										271902
									],
									[
										272245,
										272253
									],
									[
										272530,
										272538
									],
									[
										272751,
										272759
									],
									[
										272842,
										272850
									],
									[
										272854,
										272862
									],
									[
										273106,
										273114
									],
									[
										273340,
										273348
									],
									[
										273674,
										273682
									],
									[
										274117,
										274130
									],
									[
										274248,
										274261
									],
									[
										274517,
										274530
									],
									[
										274702,
										274715
									],
									[
										275095,
										275108
									],
									[
										275226,
										275239
									],
									[
										275495,
										275508
									],
									[
										275680,
										275693
									],
									[
										275950,
										275968
									],
									[
										276057,
										276075
									],
									[
										276348,
										276366
									],
									[
										276683,
										276701
									],
									[
										276925,
										276943
									],
									[
										277158,
										277176
									],
									[
										277384,
										277402
									],
									[
										277656,
										277674
									],
									[
										277903,
										277921
									],
									[
										278124,
										278142
									],
									[
										278399,
										278417
									],
									[
										278506,
										278524
									],
									[
										278760,
										278778
									],
									[
										279020,
										279038
									],
									[
										279264,
										279282
									],
									[
										279499,
										279517
									],
									[
										279727,
										279745
									],
									[
										280001,
										280019
									],
									[
										280248,
										280266
									],
									[
										280469,
										280487
									],
									[
										280814,
										280840
									],
									[
										280991,
										281017
									],
									[
										281195,
										281221
									],
									[
										281357,
										281383
									],
									[
										281719,
										281745
									],
									[
										281896,
										281922
									],
									[
										282100,
										282126
									],
									[
										282262,
										282288
									],
									[
										282624,
										282650
									],
									[
										282815,
										282841
									],
									[
										283019,
										283045
									],
									[
										283181,
										283207
									],
									[
										283543,
										283569
									],
									[
										283734,
										283760
									],
									[
										283938,
										283964
									],
									[
										284100,
										284126
									],
									[
										284464,
										284490
									],
									[
										284663,
										284689
									],
									[
										284920,
										284946
									],
									[
										285082,
										285108
									],
									[
										285374,
										285392
									],
									[
										285481,
										285499
									],
									[
										285735,
										285753
									],
									[
										285995,
										286013
									],
									[
										286237,
										286255
									],
									[
										286472,
										286490
									],
									[
										286700,
										286718
									],
									[
										286974,
										286992
									],
									[
										287221,
										287239
									],
									[
										287442,
										287460
									],
									[
										287761,
										287769
									],
									[
										288035,
										288043
									],
									[
										288306,
										288314
									],
									[
										288567,
										288575
									],
									[
										288685,
										288693
									],
									[
										288697,
										288705
									],
									[
										288821,
										288829
									],
									[
										288909,
										288917
									],
									[
										289181,
										289189
									],
									[
										289348,
										289356
									],
									[
										289578,
										289586
									],
									[
										289676,
										289684
									],
									[
										289749,
										289757
									],
									[
										289876,
										289884
									],
									[
										289889,
										289897
									],
									[
										289922,
										289930
									],
									[
										290181,
										290189
									],
									[
										290425,
										290433
									],
									[
										290490,
										290498
									],
									[
										290820,
										290828
									],
									[
										291002,
										291010
									],
									[
										291021,
										291029
									],
									[
										291239,
										291247
									],
									[
										291346,
										291354
									],
									[
										291356,
										291364
									],
									[
										291366,
										291374
									],
									[
										291379,
										291387
									],
									[
										291562,
										291570
									],
									[
										291723,
										291731
									],
									[
										291839,
										291847
									],
									[
										292038,
										292046
									],
									[
										292054,
										292062
									],
									[
										292109,
										292117
									],
									[
										292390,
										292398
									],
									[
										292613,
										292621
									],
									[
										292685,
										292693
									],
									[
										292754,
										292762
									],
									[
										292923,
										292931
									],
									[
										293047,
										293055
									],
									[
										293185,
										293193
									],
									[
										293263,
										293271
									],
									[
										293336,
										293344
									],
									[
										293351,
										293359
									],
									[
										293424,
										293432
									],
									[
										293505,
										293513
									],
									[
										293588,
										293596
									],
									[
										293688,
										293696
									],
									[
										293708,
										293716
									],
									[
										293770,
										293778
									],
									[
										293795,
										293803
									],
									[
										293857,
										293865
									],
									[
										293872,
										293880
									],
									[
										293939,
										293947
									],
									[
										293954,
										293962
									],
									[
										294017,
										294025
									],
									[
										294040,
										294048
									],
									[
										294294,
										294302
									],
									[
										294424,
										294432
									],
									[
										294731,
										294739
									],
									[
										294877,
										294885
									],
									[
										294993,
										295001
									],
									[
										295192,
										295200
									],
									[
										295473,
										295481
									],
									[
										295696,
										295704
									],
									[
										295768,
										295776
									],
									[
										295837,
										295845
									],
									[
										296006,
										296014
									],
									[
										296130,
										296138
									],
									[
										296268,
										296276
									],
									[
										296346,
										296354
									],
									[
										296419,
										296427
									],
									[
										296434,
										296442
									],
									[
										296507,
										296515
									],
									[
										296588,
										296596
									],
									[
										296671,
										296679
									],
									[
										296771,
										296779
									],
									[
										296791,
										296799
									],
									[
										296853,
										296861
									],
									[
										296878,
										296886
									],
									[
										296940,
										296948
									],
									[
										296955,
										296963
									],
									[
										297022,
										297030
									],
									[
										297037,
										297045
									],
									[
										297100,
										297108
									],
									[
										297123,
										297131
									],
									[
										297352,
										297360
									],
									[
										297439,
										297447
									],
									[
										297514,
										297522
									],
									[
										297629,
										297637
									],
									[
										297906,
										297914
									],
									[
										298139,
										298147
									],
									[
										298351,
										298359
									],
									[
										298427,
										298435
									],
									[
										298500,
										298508
									],
									[
										298673,
										298681
									],
									[
										298801,
										298809
									],
									[
										298943,
										298951
									],
									[
										299020,
										299028
									],
									[
										299040,
										299048
									],
									[
										299106,
										299114
									],
									[
										299121,
										299129
									],
									[
										299192,
										299200
									],
									[
										299207,
										299215
									],
									[
										299276,
										299284
									],
									[
										299291,
										299299
									],
									[
										299365,
										299373
									],
									[
										299388,
										299396
									],
									[
										299489,
										299497
									],
									[
										299574,
										299582
									],
									[
										299639,
										299647
									],
									[
										299744,
										299752
									],
									[
										300011,
										300019
									],
									[
										300234,
										300242
									],
									[
										300436,
										300444
									],
									[
										300502,
										300510
									],
									[
										300565,
										300573
									],
									[
										300728,
										300736
									],
									[
										300846,
										300854
									],
									[
										300978,
										300986
									],
									[
										301045,
										301053
									],
									[
										301065,
										301073
									],
									[
										301121,
										301129
									],
									[
										301136,
										301144
									],
									[
										301197,
										301205
									],
									[
										301212,
										301220
									],
									[
										301271,
										301279
									],
									[
										301286,
										301294
									],
									[
										301350,
										301358
									],
									[
										301373,
										301381
									],
									[
										301711,
										301723
									],
									[
										301761,
										301773
									],
									[
										301802,
										301814
									],
									[
										301892,
										301904
									],
									[
										302016,
										302028
									],
									[
										302287,
										302299
									],
									[
										302320,
										302332
									],
									[
										302397,
										302409
									],
									[
										302412,
										302424
									],
									[
										302726,
										302745
									],
									[
										302884,
										302903
									],
									[
										302907,
										302926
									],
									[
										303267,
										303275
									],
									[
										303454,
										303462
									],
									[
										303692,
										303700
									],
									[
										303840,
										303848
									],
									[
										304092,
										304100
									],
									[
										304374,
										304382
									],
									[
										304574,
										304582
									],
									[
										304754,
										304762
									],
									[
										304974,
										304982
									],
									[
										305135,
										305143
									],
									[
										305336,
										305344
									],
									[
										305537,
										305545
									],
									[
										305775,
										305783
									],
									[
										306075,
										306083
									],
									[
										306220,
										306228
									],
									[
										306397,
										306405
									],
									[
										306611,
										306619
									],
									[
										306727,
										306735
									],
									[
										307146,
										307154
									],
									[
										312132,
										312140
									],
									[
										324127,
										324135
									],
									[
										340100,
										340108
									],
									[
										345493,
										345501
									],
									[
										356204,
										356212
									],
									[
										365042,
										365050
									],
									[
										373279,
										373287
									],
									[
										373557,
										373565
									],
									[
										373897,
										373905
									],
									[
										374242,
										374250
									],
									[
										374513,
										374521
									],
									[
										374725,
										374733
									],
									[
										374968,
										374976
									],
									[
										375202,
										375210
									],
									[
										375471,
										375479
									],
									[
										375784,
										375792
									],
									[
										376075,
										376083
									],
									[
										376307,
										376315
									],
									[
										376575,
										376583
									],
									[
										376837,
										376845
									],
									[
										377137,
										377145
									],
									[
										377488,
										377496
									],
									[
										377744,
										377752
									],
									[
										378044,
										378052
									],
									[
										378312,
										378320
									],
									[
										378528,
										378536
									],
									[
										378810,
										378818
									],
									[
										378997,
										379005
									],
									[
										379235,
										379243
									],
									[
										379383,
										379391
									],
									[
										379635,
										379643
									],
									[
										379917,
										379925
									],
									[
										380117,
										380125
									],
									[
										380297,
										380305
									],
									[
										380517,
										380525
									],
									[
										380678,
										380686
									],
									[
										380879,
										380887
									],
									[
										381080,
										381088
									],
									[
										381318,
										381326
									],
									[
										381623,
										381631
									],
									[
										381768,
										381776
									],
									[
										381945,
										381953
									],
									[
										382159,
										382167
									],
									[
										382275,
										382283
									],
									[
										382694,
										382702
									],
									[
										387680,
										387688
									],
									[
										399675,
										399683
									],
									[
										415648,
										415656
									],
									[
										421041,
										421049
									],
									[
										431752,
										431760
									],
									[
										440590,
										440598
									],
									[
										448827,
										448835
									],
									[
										449105,
										449113
									],
									[
										449445,
										449453
									],
									[
										449790,
										449798
									],
									[
										450061,
										450069
									],
									[
										450273,
										450281
									],
									[
										450516,
										450524
									],
									[
										450750,
										450758
									],
									[
										451019,
										451027
									],
									[
										451332,
										451340
									],
									[
										451623,
										451631
									],
									[
										451855,
										451863
									],
									[
										452123,
										452131
									],
									[
										452385,
										452393
									],
									[
										452685,
										452693
									],
									[
										453036,
										453044
									],
									[
										453292,
										453300
									],
									[
										453592,
										453600
									],
									[
										453860,
										453868
									],
									[
										454076,
										454084
									],
									[
										454459,
										454466
									],
									[
										454642,
										454649
									],
									[
										454731,
										454738
									],
									[
										454771,
										454778
									],
									[
										454888,
										454895
									],
									[
										454985,
										454992
									],
									[
										455138,
										455145
									],
									[
										455295,
										455302
									],
									[
										455446,
										455453
									],
									[
										455576,
										455583
									],
									[
										455777,
										455784
									],
									[
										455867,
										455874
									],
									[
										456142,
										456158
									]
								],
								"scope": ""
							}
						},
						"selection":
						[
							[
								456151,
								456151
							]
						],
						"settings":
						{
							"detect_indentation": false,
							"line_numbers": false,
							"output_tag": 42,
							"result_base_dir": "",
							"result_file_regex": "^([^ 	].*):$",
							"result_line_regex": "^ +([0-9]+):",
							"scroll_past_end": true,
							"syntax": "Packages/Default/Find Results.hidden-tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 152160.0,
						"zoom_level": 1.0
					},
					"stack_index": 3,
					"type": "text"
				},
				{
					"buffer": 8,
					"file": "/C/jbart5-ng/node_modules/@angular/material/material.umd.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 440135,
						"regions":
						{
						},
						"selection":
						[
							[
								437554,
								437566
							]
						],
						"settings":
						{
							"syntax": "Packages/JavaScript/JavaScript.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 178741.0,
						"zoom_level": 1.0
					},
					"stack_index": 13,
					"type": "text"
				},
				{
					"buffer": 9,
					"file": "/C/jbart5-ng/src/ui/styles.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1612,
						"regions":
						{
						},
						"selection":
						[
							[
								663,
								663
							]
						],
						"settings":
						{
							"syntax": "Packages/JavaScript/JavaScript.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 18,
					"type": "text"
				},
				{
					"buffer": 10,
					"file": "/C/jbart5-ng/src/testing/ui-testers.ts",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2315,
						"regions":
						{
						},
						"selection":
						[
							[
								943,
								943
							]
						],
						"settings":
						{
							"syntax": "Packages/JavaScript/JavaScript.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 187.0,
						"zoom_level": 1.0
					},
					"stack_index": 5,
					"type": "text"
				},
				{
					"buffer": 11,
					"file": "/C/jbart5-ng/src/ui/ui-common.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2522,
						"regions":
						{
						},
						"selection":
						[
							[
								2107,
								2519
							]
						],
						"settings":
						{
							"syntax": "Packages/JavaScript/JavaScript.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 1352.0,
						"zoom_level": 1.0
					},
					"stack_index": 24,
					"type": "text"
				},
				{
					"buffer": 12,
					"file": "/C/jbart5-ng/src/ui/tree/tree.ts",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 11211,
						"regions":
						{
						},
						"selection":
						[
							[
								1068,
								1068
							]
						],
						"settings":
						{
							"syntax": "Packages/JavaScript/JavaScript.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 83.0,
						"zoom_level": 1.0
					},
					"stack_index": 17,
					"type": "text"
				},
				{
					"buffer": 13,
					"file": "/C/jbart5-ng/src/ui/md-styles/input-md.ts",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 706,
						"regions":
						{
						},
						"selection":
						[
							[
								230,
								230
							]
						],
						"settings":
						{
							"syntax": "Packages/JavaScript/JavaScript.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 7,
					"type": "text"
				},
				{
					"buffer": 14,
					"file": "/C/jbart5-ng/src/ui/md-styles/layout-md.ts",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 4473,
						"regions":
						{
						},
						"selection":
						[
							[
								1793,
								1793
							]
						],
						"settings":
						{
							"syntax": "Packages/JavaScript/JavaScript.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 207.0,
						"zoom_level": 1.0
					},
					"stack_index": 14,
					"type": "text"
				},
				{
					"buffer": 15,
					"file": "/C/jbart5-ng/src/ui/md-styles/sidenav-md.ts",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 840,
						"regions":
						{
						},
						"selection":
						[
							[
								832,
								832
							]
						],
						"settings":
						{
							"syntax": "Packages/JavaScript/JavaScript.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 15,
					"type": "text"
				},
				{
					"buffer": 16,
					"file": "/C/jbart5-ng/src/ui/md-styles/tabs-md.ts",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 782,
						"regions":
						{
						},
						"selection":
						[
							[
								771,
								771
							]
						],
						"settings":
						{
							"syntax": "Packages/JavaScript/JavaScript.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 16,
					"type": "text"
				},
				{
					"buffer": 17,
					"file": "/C/jbart5-ng/projects/ui-tests/ui-tests.ts",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 22351,
						"regions":
						{
						},
						"selection":
						[
							[
								22056,
								22056
							]
						],
						"settings":
						{
							"syntax": "Packages/JavaScript/JavaScript.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": -0.0,
						"translation.y": 14723.0,
						"zoom_level": 1.0
					},
					"stack_index": 2,
					"type": "text"
				},
				{
					"buffer": 18,
					"file": "/C/jbart5-ng/src/ui/md-styles/button-md.ts",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3902,
						"regions":
						{
						},
						"selection":
						[
							[
								61,
								139
							]
						],
						"settings":
						{
							"syntax": "Packages/JavaScript/JavaScript.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 12,
					"type": "text"
				},
				{
					"buffer": 19,
					"file": "/C/jbart5-ng/src/ui/styles/layout-styles.ts",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3612,
						"regions":
						{
						},
						"selection":
						[
							[
								1040,
								1040
							]
						],
						"settings":
						{
							"syntax": "Packages/JavaScript/JavaScript.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 447.0,
						"zoom_level": 1.0
					},
					"stack_index": 28,
					"type": "text"
				},
				{
					"buffer": 20,
					"file": "/C/jbart5-ng/src/ui/group.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 4143,
						"regions":
						{
						},
						"selection":
						[
							[
								1756,
								1771
							]
						],
						"settings":
						{
							"syntax": "Packages/JavaScript/JavaScript.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 440.0,
						"zoom_level": 1.0
					},
					"stack_index": 29,
					"type": "text"
				},
				{
					"buffer": 21,
					"file": "/C/jbart5-ng/src/ui/jb-ui.ts",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 24129,
						"regions":
						{
						},
						"selection":
						[
							[
								11132,
								11132
							]
						],
						"settings":
						{
							"syntax": "Packages/JavaScript/JavaScript.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 33.0,
						"translation.y": 5341.0,
						"zoom_level": 1.0
					},
					"stack_index": 6,
					"type": "text"
				},
				{
					"buffer": 22,
					"file": "/C/jbart5-ng/src/testing/ui-testers-ctrls.ts",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 4817,
						"regions":
						{
						},
						"selection":
						[
							[
								666,
								666
							]
						],
						"settings":
						{
							"syntax": "Packages/JavaScript/JavaScript.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 80.0,
						"zoom_level": 1.0
					},
					"stack_index": 4,
					"type": "text"
				},
				{
					"buffer": 23,
					"file": "/C/jbart5-ng/src/ui/markdown.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1251,
						"regions":
						{
						},
						"selection":
						[
							[
								795,
								795
							]
						],
						"settings":
						{
							"syntax": "Packages/JavaScript/JavaScript.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 227.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"type": "text"
				},
				{
					"buffer": 24,
					"file": "/C/jbart5-ng/projects/studio/studio-main.ts",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 9662,
						"regions":
						{
						},
						"selection":
						[
							[
								7389,
								7389
							]
						],
						"settings":
						{
							"syntax": "Packages/JavaScript/JavaScript.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 3500.0,
						"zoom_level": 1.0
					},
					"stack_index": 9,
					"type": "text"
				},
				{
					"buffer": 25,
					"file": "/C/jbart5-ng/src/ui/jb-rx.ts",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 9121,
						"regions":
						{
						},
						"selection":
						[
							[
								1252,
								1252
							]
						],
						"settings":
						{
							"syntax": "Packages/JavaScript/JavaScript.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 200.0,
						"zoom_level": 1.0
					},
					"stack_index": 19,
					"type": "text"
				},
				{
					"buffer": 26,
					"file": "/C/jbart5-ng/package.json",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1874,
						"regions":
						{
						},
						"selection":
						[
							[
								1486,
								1486
							]
						],
						"settings":
						{
							"syntax": "Packages/JavaScript/JSON.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 187.0,
						"zoom_level": 1.0
					},
					"stack_index": 22,
					"type": "text"
				},
				{
					"buffer": 27,
					"file": "/C/jbart5-ng/src/loader/load-jbart.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 7778,
						"regions":
						{
						},
						"selection":
						[
							[
								6655,
								6655
							]
						],
						"settings":
						{
							"syntax": "Packages/JavaScript/JavaScript.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 3909.0,
						"zoom_level": 1.0
					},
					"stack_index": 21,
					"type": "text"
				},
				{
					"buffer": 28,
					"file": "/C/jbart5-ng/node_modules/@angular/forms/bundles/forms.umd.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 193935,
						"regions":
						{
						},
						"selection":
						[
							[
								131057,
								131057
							]
						],
						"settings":
						{
							"syntax": "Packages/JavaScript/JavaScript.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": -0.0,
						"translation.y": 61345.0,
						"zoom_level": 1.0
					},
					"stack_index": 23,
					"type": "text"
				},
				{
					"buffer": 29,
					"file": "/C/jbart5-ng/projects/ui-tests/ui-tests.html",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 598,
						"regions":
						{
						},
						"selection":
						[
							[
								381,
								381
							]
						],
						"settings":
						{
							"syntax": "Packages/HTML/HTML.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 25,
					"type": "text"
				},
				{
					"buffer": 30,
					"file": "/C/jbart5-ng/node_modules/rxjs/bundles/Rx.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 671608,
						"regions":
						{
						},
						"selection":
						[
							[
								29118,
								29118
							]
						],
						"settings":
						{
							"syntax": "Packages/JavaScript/JavaScript.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 18.0,
						"translation.y": 12725.0,
						"zoom_level": 1.0
					},
					"stack_index": 26,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 28.0
	},
	"input":
	{
		"height": 38.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			]
		],
		"cols":
		[
			0.0,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.doc":
	{
		"height": 0.0
	},
	"output.find_results":
	{
		"height": 0.0
	},
	"pinned_build_system": "",
	"project": "jbart.sublime-project",
	"replace":
	{
		"height": 52.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"mark",
				"ui\\markdown.js"
			],
			[
				"ui-tes",
				"jbart5-ng\\src\\testing\\ui-testers.ts"
			],
			[
				"jb-ui",
				"ui\\jb-ui.ts"
			],
			[
				"md-in",
				"ui\\md-styles\\input-md.ts"
			],
			[
				"studio-",
				"jbart5-ng\\projects\\studio\\studio-main.ts"
			],
			[
				"butto",
				"ui\\md-styles\\button-md.ts"
			],
			[
				"tree",
				"ui\\tree\\tree.ts"
			],
			[
				"sty",
				"ui\\styles.js"
			],
			[
				"md",
				"ui\\md-styles\\input-md.ts"
			],
			[
				"styles",
				"ui\\styles.js"
			],
			[
				"styl",
				"ui\\styles.js"
			],
			[
				"jb-rx",
				"ui\\jb-rx.ts"
			],
			[
				"loader",
				"jbart5-ng\\src\\loader\\load-jbart.js"
			],
			[
				"pack",
				"jbart5-ng\\package.json"
			],
			[
				"load",
				"jbart5-ng\\src\\loader\\load-jbart.js"
			],
			[
				"jb",
				"ui\\jb-rx.ts"
			],
			[
				"laod",
				"jbart5-ng\\src\\loader\\load-jbart.js"
			],
			[
				"rx",
				"C:\\jbart5-ng\\node_modules\\rxjs\\bundles\\Rx.js"
			],
			[
				"ui-test",
				"jbart5-ng\\projects\\ui-tests\\ui-tests.ts"
			],
			[
				"lab",
				"ui\\label.js"
			],
			[
				"lay",
				"ui\\styles\\layout-styles.ts"
			],
			[
				"md-ca",
				"ui\\md-styles\\card-md.ts"
			],
			[
				"grou",
				"ui\\group.js"
			],
			[
				"",
				"ui\\label.js"
			],
			[
				"feat",
				"ui\\features.js"
			],
			[
				"code",
				"ui\\styles\\codemirror-styles.ts"
			],
			[
				"edita",
				"ui\\editable-boolean.js"
			],
			[
				"field",
				"ui\\field.js"
			],
			[
				"testing",
				"jbart5-ng\\src\\testing\\ui-testers-ctrls.ts"
			],
			[
				"fea",
				"ui\\features.js"
			],
			[
				"edit",
				"ui\\editable-text.js"
			],
			[
				"core",
				"jbart5-ng\\src\\core\\core.js"
			],
			[
				"hello",
				"jbart5-ng\\projects\\hello-world\\hello.ts"
			],
			[
				"mater",
				"jbart5-ng\\projects\\material-demo\\material-demo.js"
			],
			[
				"mate",
				"jbart5-ng\\projects\\material-demo\\material-demo.js"
			],
			[
				"comp",
				"jbart5-ng\\src\\core\\components.js"
			],
			[
				"index",
				"C:\\ng2materialDemo\\index.html"
			],
			[
				"index.",
				"jbart5-ng\\index.html"
			],
			[
				"bui",
				"jbart5-ng\\build\\ng2materialDemo.js"
			],
			[
				"buil",
				"jbart5-ng\\build\\ng2materialDemo.js"
			],
			[
				"inde",
				"C:\\ng2materialDemo\\index.html"
			],
			[
				"mat",
				"jbart5-ng\\projects\\material-demo\\material-demo.html"
			],
			[
				"html",
				"C:\\ng2materialDemo\\index.html"
			],
			[
				"pac",
				"jbart5-ng\\package.json"
			],
			[
				"uti",
				"jbart5-ng\\src\\core\\utils.js"
			],
			[
				"feature",
				"ui\\features.js"
			],
			[
				"model",
				"jbart5-ng\\projects\\studio\\studio-tgp-model.ts"
			],
			[
				"materail-demo",
				"jbart5-ng\\projects\\material-demo\\material-demo.html"
			],
			[
				"demos",
				"jbart5-ng\\projects\\material-demo\\all-demos.js"
			],
			[
				"featu",
				"ui\\features.js"
			],
			[
				"jb-iu",
				"ui\\jb-ui.ts"
			],
			[
				"utils",
				"jbart5-ng\\src\\core\\utils.js"
			],
			[
				"group",
				"ui\\group.js"
			],
			[
				"pick",
				"jbart5-ng\\projects\\studio\\studio-pick-dialog.ts"
			],
			[
				"probe",
				"jbart5-ng\\projects\\studio\\studio-probe.ts"
			],
			[
				"dialog",
				"ui\\dialog.js"
			],
			[
				"sugg",
				"jbart5-ng\\projects\\studio\\studio-suggestions.ts"
			],
			[
				"studio-he",
				"jbart5-ng\\projects\\studio-helper\\studio-helper.js"
			],
			[
				"path",
				"jbart5-ng\\projects\\studio\\studio-path.ts"
			],
			[
				"undo",
				"jbart5-ng\\projects\\studio\\studio-undo.ts"
			],
			[
				"prop",
				"jbart5-ng\\projects\\studio\\studio-properties.ts"
			],
			[
				"jb-edi",
				"jbart5-ng\\projects\\studio\\studio-jb-editor.ts"
			],
			[
				"pro",
				"jbart5-ng\\projects\\studio\\studio-probe.ts"
			],
			[
				"test",
				"jbart5-ng\\projects\\ui-tests\\ui-tests.ts"
			],
			[
				"jb-",
				"jbart5-ng\\projects\\studio\\studio-jb-editor.ts"
			],
			[
				"jb-ed",
				"jbart5-ng\\projects\\studio\\studio-jb-editor.ts"
			],
			[
				"jbedi",
				"jbart5-ng\\projects\\studio\\studio-jb-editor.ts"
			],
			[
				"mode",
				"jbart5-ng\\projects\\studio\\studio-model-components.ts"
			],
			[
				"prob",
				"jbart5-ng\\projects\\studio\\studio-probe.ts"
			],
			[
				"dil",
				"ui\\dialog.js"
			],
			[
				"compo",
				"jbart5-ng\\src\\core\\components.js"
			],
			[
				"itemli",
				"ui\\itemlist.js"
			],
			[
				"sugge",
				"jbart5-ng\\projects\\studio\\studio-suggestions.ts"
			],
			[
				"codemirr",
				"ui\\styles\\codemirror-styles.ts"
			],
			[
				"studio-m",
				"jbart5-ng\\projects\\studio\\studio-main.ts"
			],
			[
				"pa",
				"jbart5-ng\\package.json"
			],
			[
				"snakc-b",
				"C:\\material2\\src\\demo-app\\snack-bar\\snack-bar-demo.ts"
			],
			[
				"materi",
				"jbart5-ng\\projects\\material-demo\\material-demo.html"
			],
			[
				"util",
				"jbart5-ng\\src\\core\\utils.js"
			],
			[
				"hello-",
				"jbart5-ng\\projects\\hello-world\\hello.ts"
			],
			[
				"all-de",
				"jbart5-ng\\projects\\material-demo\\all-demos.js"
			],
			[
				"butt",
				"ui\\button.js"
			],
			[
				"concat",
				"C:\\jbart5-ng\\projects\\material-demo\\nodejs-concat-all-apis.js"
			],
			[
				"markd",
				"ui\\markdown.js"
			],
			[
				"style",
				"ui\\styles.js"
			],
			[
				"material-p",
				"jbart5-ng\\projects\\material-demo\\material-demo-pick.js"
			],
			[
				"studio-pi",
				"jbart5-ng\\projects\\studio\\studio-pick-dialog.ts"
			],
			[
				"css",
				"jbart5-ng\\projects\\studio\\css\\studio.css"
			],
			[
				"label",
				"ui\\label.js"
			],
			[
				"tgp-",
				"jbart5-ng\\projects\\studio\\studio-tgp-model.ts"
			],
			[
				"path-te",
				"jbart5-ng\\projects\\studio-helper\\path-tests.ts"
			],
			[
				"helper",
				"jbart5-ng\\projects\\studio-helper\\studio-helper.ts"
			],
			[
				"mar",
				"ui\\markdown.js"
			],
			[
				"api",
				"jbart5-ng\\projects\\material-demo\\material-api.js"
			],
			[
				"button.md",
				"C:\\jbart5-ng\\node_modules\\@angular2-material\\button\\README.md"
			],
			[
				"button-md",
				"ui\\md-styles\\button-md.ts"
			],
			[
				"md-but",
				"jbart5-ng\\projects\\material-demo\\material-buttons.js"
			],
			[
				"todo",
				"jbart5-ng\\todo.txt"
			],
			[
				"pret",
				"jbart5-ng\\src\\core\\pretty-print.js"
			],
			[
				"tod",
				"jbart5-ng\\todo.txt"
			],
			[
				"markdow",
				"ui\\markdown.js"
			],
			[
				"code-m",
				"ui\\styles\\codemirror-styles.ts"
			],
			[
				"jbart",
				"jbart5-ng\\src\\loader\\load-jbart.js"
			],
			[
				"new-con",
				"jbart5-ng\\projects\\studio\\studio-new-control.ts"
			],
			[
				"new-",
				"jbart5-ng\\projects\\studio\\studio-new-control.ts"
			],
			[
				"css-f",
				"ui\\css-features.js"
			],
			[
				"main",
				"jbart5-ng\\projects\\studio\\studio-main.ts"
			],
			[
				"studio-pa",
				"jbart5-ng\\projects\\studio\\studio-path.ts"
			],
			[
				"stued",
				"jbart5-ng\\projects\\studio\\studio-style-editor.ts"
			],
			[
				"pre",
				"jbart5-ng\\src\\core\\pretty-print.js"
			],
			[
				"save",
				"jbart5-ng\\projects\\studio\\studio-save.ts"
			],
			[
				"tests.html",
				"jbart5-ng\\projects\\ui-tests\\tests.html"
			],
			[
				"data-te",
				"jbart5-ng\\projects\\data-tests\\data-tests.ts"
			],
			[
				"tgp-mo",
				"jbart5-ng\\projects\\studio\\studio-tgp-model.ts"
			],
			[
				"prett",
				"jbart5-ng\\src\\core\\pretty-print.js"
			],
			[
				"proper",
				"jbart5-ng\\projects\\studio\\studio-properties.ts"
			],
			[
				"fix",
				"jbart5-ng\\fixParams.js"
			],
			[
				"data-br",
				"jbart5-ng\\projects\\studio\\studio-data-browse.ts"
			],
			[
				"tests.ht",
				"jbart5-ng\\projects\\ui-tests\\tests.html"
			],
			[
				"studio-sa",
				"jbart5-ng\\projects\\studio\\studio-save.ts"
			],
			[
				"studio-un",
				"jbart5-ng\\projects\\studio\\studio-undo.ts"
			],
			[
				"tgp-mode",
				"jbart5-ng\\projects\\studio\\studio-tgp-model.ts"
			],
			[
				"rxjs",
				"C:\\jbart5-ng\\node_modules\\rxjs\\bundles\\Rx.js"
			],
			[
				"stu",
				"jbart5-ng\\projects\\studio\\studio-utils.ts"
			],
			[
				"studut",
				"jbart5-ng\\projects\\studio\\studio-utils.ts"
			],
			[
				"studio-mode",
				"jbart5-ng\\projects\\studio\\studio-tgp-model.ts"
			],
			[
				"lo",
				"jbart5-ng\\src\\loader\\load-jbart.js"
			],
			[
				"uno",
				"ui\\tree\\tree-undo.ts"
			]
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_symbol":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"selected_group": 0,
	"settings":
	{
	},
	"show_minimap": true,
	"show_open_files": false,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 244.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
