var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var testing_1 = require('angular2/testing');
var testing_2 = require('../../core/facade/testing');
var core_1 = require('angular2/core');
var portal_directives_1 = require('./portal-directives');
var portal_1 = require('./portal');
var portal_directives_2 = require('./portal-directives');
var testing_3 = require('angular2/testing');
var testing_4 = require('angular2/testing');
function main() {
    testing_2.describe('Portal directives', function () {
        var builder;
        testing_2.beforeEach(testing_1.inject([testing_1.TestComponentBuilder], function (tcb) {
            builder = tcb;
        }));
        testing_2.it('should load a component into the portal', fakeAsyncTest(function () {
            var appFixture;
            builder.createAsync(PortalTestApp).then(function (fixture) {
                appFixture = fixture;
            });
            // Flush the async creation of the PortalTestApp.
            testing_4.flushMicrotasks();
            // Set the selectedHost to be a ComponentPortal.
            var testAppComponent = appFixture.debugElement.componentInstance;
            testAppComponent.selectedPortal = new portal_1.ComponentPortal(PizzaMsg);
            appFixture.detectChanges();
            // Flush the attachment of the Portal.
            testing_4.flushMicrotasks();
            // Expect that the content of the attached portal is present.
            var hostContainer = appFixture.nativeElement.querySelector('.portal-container');
            testing_2.expect(hostContainer.textContent).toContain('Pizza');
        }));
        testing_2.it('should load a <template> portal', fakeAsyncTest(function () {
            var appFixture;
            builder.createAsync(PortalTestApp).then(function (fixture) {
                appFixture = fixture;
            });
            // Flush the async creation of the PortalTestApp.
            testing_4.flushMicrotasks();
            var testAppComponent = appFixture.debugElement.componentInstance;
            // Detect changes initially so that the component's ViewChildren are resolved.
            appFixture.detectChanges();
            // Set the selectedHost to be a TemplatePortal.
            testAppComponent.selectedPortal = testAppComponent.cakePortal;
            appFixture.detectChanges();
            // Flush the attachment of the Portal.
            testing_4.flushMicrotasks();
            // Expect that the content of the attached portal is present.
            var hostContainer = appFixture.nativeElement.querySelector('.portal-container');
            testing_2.expect(hostContainer.textContent).toContain('Cake');
        }));
        testing_2.it('should load a <template> portal with the `*` sugar', fakeAsyncTest(function () {
            var appFixture;
            builder.createAsync(PortalTestApp).then(function (fixture) {
                appFixture = fixture;
            });
            // Flush the async creation of the PortalTestApp.
            testing_4.flushMicrotasks();
            var testAppComponent = appFixture.debugElement.componentInstance;
            // Detect changes initially so that the component's ViewChildren are resolved.
            appFixture.detectChanges();
            // Set the selectedHost to be a TemplatePortal (with the `*` syntax).
            testAppComponent.selectedPortal = testAppComponent.piePortal;
            appFixture.detectChanges();
            // Flush the attachment of the Portal.
            testing_4.flushMicrotasks();
            // Expect that the content of the attached portal is present.
            var hostContainer = appFixture.nativeElement.querySelector('.portal-container');
            testing_2.expect(hostContainer.textContent).toContain('Pie');
        }));
        testing_2.it('should load a <template> portal with a binding', fakeAsyncTest(function () {
            var appFixture;
            builder.createAsync(PortalTestApp).then(function (fixture) {
                appFixture = fixture;
            });
            // Flush the async creation of the PortalTestApp.
            testing_4.flushMicrotasks();
            var testAppComponent = appFixture.debugElement.componentInstance;
            // Detect changes initially so that the component's ViewChildren are resolved.
            appFixture.detectChanges();
            // Set the selectedHost to be a TemplatePortal.
            testAppComponent.selectedPortal = testAppComponent.portalWithBinding;
            appFixture.detectChanges();
            // Flush the attachment of the Portal.
            testing_4.flushMicrotasks();
            // Now that the portal is attached, change detection has to happen again in order
            // for the bindings to update.
            appFixture.detectChanges();
            // Expect that the content of the attached portal is present.
            var hostContainer = appFixture.nativeElement.querySelector('.portal-container');
            testing_2.expect(hostContainer.textContent).toContain('Banana');
        }));
        testing_2.it('should load a <template> portal with extra locals', fakeAsyncTest(function () {
            var appFixture;
            builder.createAsync(PortalTestApp).then(function (fixture) {
                appFixture = fixture;
            });
            // Flush the async creation of the PortalTestApp.
            testing_4.flushMicrotasks();
            var testAppComponent = appFixture.debugElement.componentInstance;
            // Detect changes initially so that the component's ViewChildren are resolved.
            appFixture.detectChanges();
            var locals = new Map();
            locals.set('appetizer', 'Samosa');
            var templatePortal = testAppComponent.portalWithLocals;
            templatePortal.locals = locals;
            // Set the selectedHost to be a TemplatePortal.
            testAppComponent.selectedPortal = templatePortal;
            appFixture.detectChanges();
            // Flush the attachment of the Portal.
            testing_4.flushMicrotasks();
            // Now that the portal is attached, change detection has to happen again in order
            // for the bindings to update.
            appFixture.detectChanges();
            // Expect that the content of the attached portal is present.
            var hostContainer = appFixture.nativeElement.querySelector('.portal-container');
            testing_2.expect(hostContainer.textContent).toContain('Samosa');
        }));
        testing_2.it('should change the attached portal', fakeAsyncTest(function () {
            var appFixture;
            builder.createAsync(PortalTestApp).then(function (fixture) {
                appFixture = fixture;
            });
            // Flush the async creation of the PortalTestApp.
            testing_4.flushMicrotasks();
            var testAppComponent = appFixture.debugElement.componentInstance;
            // Detect changes initially so that the component's ViewChildren are resolved.
            appFixture.detectChanges();
            // Set the selectedHost to be a ComponentPortal.
            testAppComponent.selectedPortal = testAppComponent.piePortal;
            appFixture.detectChanges();
            // Flush the attachment of the Portal.
            testing_4.flushMicrotasks();
            appFixture.detectChanges();
            // Expect that the content of the attached portal is present.
            var hostContainer = appFixture.nativeElement.querySelector('.portal-container');
            testing_2.expect(hostContainer.textContent).toContain('Pie');
            testAppComponent.selectedPortal = new portal_1.ComponentPortal(PizzaMsg);
            appFixture.detectChanges();
            testing_4.flushMicrotasks();
            testing_2.expect(hostContainer.textContent).toContain('Pizza');
        }));
    });
}
exports.main = main;
/** Simple component for testing ComponentPortal. */
var PizzaMsg = (function () {
    function PizzaMsg() {
    }
    PizzaMsg = __decorate([
        core_1.Component({
            selector: 'pizza-msg',
            template: '<p>Pizza</p>',
        }), 
        __metadata('design:paramtypes', [])
    ], PizzaMsg);
    return PizzaMsg;
})();
/** Test-bed component that contains a portal host and a couple of template portals. */
var PortalTestApp = (function () {
    function PortalTestApp() {
        this.fruit = 'Banana';
    }
    Object.defineProperty(PortalTestApp.prototype, "cakePortal", {
        get: function () {
            return this.portals.first;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PortalTestApp.prototype, "piePortal", {
        get: function () {
            return this.portals.toArray()[1];
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PortalTestApp.prototype, "portalWithBinding", {
        get: function () {
            return this.portals.toArray()[2];
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PortalTestApp.prototype, "portalWithLocals", {
        get: function () {
            return this.portals.last;
        },
        enumerable: true,
        configurable: true
    });
    __decorate([
        core_1.ViewChildren(portal_directives_1.TemplatePortalDirective), 
        __metadata('design:type', core_1.QueryList)
    ], PortalTestApp.prototype, "portals", void 0);
    PortalTestApp = __decorate([
        core_1.Component({
            selector: 'portal-test',
            template: "\n  <div class=\"portal-container\">\n    <template [portalHost]=\"selectedPortal\"></template>\n  </div>\n\n  <template portal>Cake</template>\n\n  <div *portal>Pie</div>\n\n  <template portal> {{fruit}} </template>\n\n  <template portal #yum=\"appetizer\">{{yum}}</template>\n  ",
            directives: [portal_directives_2.PortalHostDirective, portal_directives_1.TemplatePortalDirective],
        }), 
        __metadata('design:paramtypes', [])
    ], PortalTestApp);
    return PortalTestApp;
})();
function fakeAsyncTest(fn) {
    return testing_1.inject([], testing_3.fakeAsync(fn));
}
//# sourceMappingURL=../../../../core/portal/portal.spec.js.map