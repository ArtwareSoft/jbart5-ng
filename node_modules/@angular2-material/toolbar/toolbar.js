var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var core_1 = require('angular2/core');
var core_2 = require('angular2/core');
var core_3 = require('angular2/core');
var MdToolbar = (function () {
    function MdToolbar(elementRef, renderer) {
        this.elementRef = elementRef;
        this.renderer = renderer;
    }
    Object.defineProperty(MdToolbar.prototype, "color", {
        get: function () {
            return this._color;
        },
        set: function (value) {
            this._updateColor(value);
        },
        enumerable: true,
        configurable: true
    });
    MdToolbar.prototype._updateColor = function (newColor) {
        if (this._color != null && this._color != '') {
            this.renderer.setElementClass(this.elementRef.nativeElement, "md-" + newColor, false);
        }
        if (newColor != null && newColor != '') {
            this.renderer.setElementClass(this.elementRef.nativeElement, "md-" + newColor, true);
        }
        this._color = newColor;
    };
    __decorate([
        core_1.Input(), 
        __metadata('design:type', String)
    ], MdToolbar.prototype, "color", null);
    MdToolbar = __decorate([
        core_1.Component({
            selector: 'md-toolbar',
            template: `
              <div class="md-toolbar-layout">
                <md-toolbar-row>
                  <ng-content></ng-content>
                </md-toolbar-row>
                <ng-content select="md-toolbar-row"></ng-content>
              </div>
            `,
            styles: [`
              /**
               * Mixin that creates a new stacking context.
               * see https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Positioning/Understanding_z_index/The_stacking_context
               */
              :host {
                display: -webkit-flex;
                display: flex;
                box-sizing: border-box;
                width: 100%;
                min-height: 64px;
                font-size: 20px;
                font-weight: 400;
                font-family: Roboto, "Helvetica Neue", sans-serif;
                padding: 0 16px;
                -webkit-flex-direction: column;
                        flex-direction: column;
                background: whitesmoke;
                color: rgba(0, 0, 0, 0.87); }
                :host.md-primary {
                  background: #2196f3;
                  color: white; }
                :host.md-accent {
                  background: #ff5252;
                  color: white; }
                :host.md-warn {
                  background: #ff9800;
                  color: rgba(0, 0, 0, 0.870588); }
                :host md-toolbar-row {
                  display: -webkit-flex;
                  display: flex;
                  box-sizing: border-box;
                  width: 100%;
                  height: 64px;
                  -webkit-flex-direction: row;
                          flex-direction: row;
                  -webkit-align-items: center;
                          align-items: center; }
            `],
            changeDetection: core_1.ChangeDetectionStrategy.OnPush,
        }), 
        __metadata('design:paramtypes', [core_3.ElementRef, core_2.Renderer])
    ], MdToolbar);
    return MdToolbar;
})();
exports.MdToolbar = MdToolbar;
//# sourceMappingURL=../../../../components/toolbar/toolbar.js.map