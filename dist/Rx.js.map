{"version":3,"sources":["../node_modules/rxjs/src/observable/BoundCallbackObservable.ts","../node_modules/rxjs/src/observable/bindCallback.ts","../node_modules/rxjs/src/add/observable/bindCallback.ts","../node_modules/rxjs/src/observable/BoundNodeCallbackObservable.ts","../node_modules/rxjs/src/observable/bindNodeCallback.ts","../node_modules/rxjs/src/add/observable/bindNodeCallback.ts","../node_modules/rxjs/src/observable/combineLatest.ts","../node_modules/rxjs/src/add/observable/combineLatest.ts","../node_modules/rxjs/src/observable/concat.ts","../node_modules/rxjs/src/add/observable/concat.ts","../node_modules/rxjs/src/observable/DeferObservable.ts","../node_modules/rxjs/src/observable/defer.ts","../node_modules/rxjs/src/add/observable/defer.ts","../node_modules/rxjs/src/observable/empty.ts","../node_modules/rxjs/src/add/observable/empty.ts","../node_modules/rxjs/src/observable/ForkJoinObservable.ts","../node_modules/rxjs/src/observable/forkJoin.ts","../node_modules/rxjs/src/add/observable/forkJoin.ts","../node_modules/rxjs/src/observable/from.ts","../node_modules/rxjs/src/add/observable/from.ts","../node_modules/rxjs/src/observable/FromEventObservable.ts","../node_modules/rxjs/src/observable/fromEvent.ts","../node_modules/rxjs/src/add/observable/fromEvent.ts","../node_modules/rxjs/src/observable/FromEventPatternObservable.ts","../node_modules/rxjs/src/observable/fromEventPattern.ts","../node_modules/rxjs/src/add/observable/fromEventPattern.ts","../node_modules/rxjs/src/observable/fromPromise.ts","../node_modules/rxjs/src/add/observable/fromPromise.ts","../node_modules/rxjs/src/observable/GenerateObservable.ts","../node_modules/rxjs/src/add/observable/generate.ts","../node_modules/rxjs/src/observable/IfObservable.ts","../node_modules/rxjs/src/observable/if.ts","../node_modules/rxjs/src/add/observable/if.ts","../node_modules/rxjs/src/observable/IntervalObservable.ts","../node_modules/rxjs/src/observable/interval.ts","../node_modules/rxjs/src/add/observable/interval.ts","../node_modules/rxjs/src/observable/merge.ts","../node_modules/rxjs/src/add/observable/merge.ts","../node_modules/rxjs/src/add/observable/race.ts","../node_modules/rxjs/src/observable/NeverObservable.ts","../node_modules/rxjs/src/observable/never.ts","../node_modules/rxjs/src/add/observable/never.ts","../node_modules/rxjs/src/observable/of.ts","../node_modules/rxjs/src/add/observable/of.ts","../node_modules/rxjs/src/add/observable/onErrorResumeNext.ts","../node_modules/rxjs/src/observable/PairsObservable.ts","../node_modules/rxjs/src/observable/pairs.ts","../node_modules/rxjs/src/add/observable/pairs.ts","../node_modules/rxjs/src/observable/RangeObservable.ts","../node_modules/rxjs/src/observable/range.ts","../node_modules/rxjs/src/add/observable/range.ts","../node_modules/rxjs/src/observable/UsingObservable.ts","../node_modules/rxjs/src/observable/using.ts","../node_modules/rxjs/src/add/observable/using.ts","../node_modules/rxjs/src/observable/ErrorObservable.ts","../node_modules/rxjs/src/observable/throw.ts","../node_modules/rxjs/src/add/observable/throw.ts","../node_modules/rxjs/src/observable/TimerObservable.ts","../node_modules/rxjs/src/observable/timer.ts","../node_modules/rxjs/src/add/observable/timer.ts","../node_modules/rxjs/src/observable/zip.ts","../node_modules/rxjs/src/add/observable/zip.ts","../node_modules/rxjs/src/observable/dom/ajax.ts","../node_modules/rxjs/src/add/observable/dom/ajax.ts","../node_modules/rxjs/src/util/assign.ts","../node_modules/rxjs/src/observable/dom/WebSocketSubject.ts","../node_modules/rxjs/src/observable/dom/webSocket.ts","../node_modules/rxjs/src/add/observable/dom/webSocket.ts","../node_modules/rxjs/src/operator/buffer.ts","../node_modules/rxjs/src/add/operator/buffer.ts","../node_modules/rxjs/src/operator/bufferCount.ts","../node_modules/rxjs/src/add/operator/bufferCount.ts","../node_modules/rxjs/src/operator/bufferTime.ts","../node_modules/rxjs/src/add/operator/bufferTime.ts","../node_modules/rxjs/src/operator/bufferToggle.ts","../node_modules/rxjs/src/add/operator/bufferToggle.ts","../node_modules/rxjs/src/operator/bufferWhen.ts","../node_modules/rxjs/src/add/operator/bufferWhen.ts","../node_modules/rxjs/src/operator/cache.ts","../node_modules/rxjs/src/add/operator/cache.ts","../node_modules/rxjs/src/operator/catch.ts","../node_modules/rxjs/src/add/operator/catch.ts","../node_modules/rxjs/src/operator/combineAll.ts","../node_modules/rxjs/src/add/operator/combineAll.ts","../node_modules/rxjs/src/operator/combineLatest.ts","../node_modules/rxjs/src/add/operator/combineLatest.ts","../node_modules/rxjs/src/add/operator/concat.ts","../node_modules/rxjs/src/operator/concatAll.ts","../node_modules/rxjs/src/add/operator/concatAll.ts","../node_modules/rxjs/src/operator/concatMap.ts","../node_modules/rxjs/src/add/operator/concatMap.ts","../node_modules/rxjs/src/operator/concatMapTo.ts","../node_modules/rxjs/src/add/operator/concatMapTo.ts","../node_modules/rxjs/src/operator/count.ts","../node_modules/rxjs/src/add/operator/count.ts","../node_modules/rxjs/src/operator/dematerialize.ts","../node_modules/rxjs/src/add/operator/dematerialize.ts","../node_modules/rxjs/src/operator/debounce.ts","../node_modules/rxjs/src/add/operator/debounce.ts","../node_modules/rxjs/src/operator/debounceTime.ts","../node_modules/rxjs/src/add/operator/debounceTime.ts","../node_modules/rxjs/src/operator/defaultIfEmpty.ts","../node_modules/rxjs/src/add/operator/defaultIfEmpty.ts","../node_modules/rxjs/src/operator/delay.ts","../node_modules/rxjs/src/add/operator/delay.ts","../node_modules/rxjs/src/operator/delayWhen.ts","../node_modules/rxjs/src/add/operator/delayWhen.ts","../node_modules/rxjs/src/add/operator/distinct.ts","../node_modules/rxjs/src/operator/distinct.ts","../node_modules/rxjs/src/operator/distinctKey.ts","../node_modules/rxjs/src/add/operator/distinctKey.ts","../node_modules/rxjs/src/add/operator/distinctUntilChanged.ts","../node_modules/rxjs/src/operator/distinctUntilChanged.ts","../node_modules/rxjs/src/operator/distinctUntilKeyChanged.ts","../node_modules/rxjs/src/add/operator/distinctUntilKeyChanged.ts","../node_modules/rxjs/src/operator/do.ts","../node_modules/rxjs/src/add/operator/do.ts","../node_modules/rxjs/src/operator/exhaust.ts","../node_modules/rxjs/src/add/operator/exhaust.ts","../node_modules/rxjs/src/operator/exhaustMap.ts","../node_modules/rxjs/src/add/operator/exhaustMap.ts","../node_modules/rxjs/src/operator/expand.ts","../node_modules/rxjs/src/add/operator/expand.ts","../node_modules/rxjs/src/operator/elementAt.ts","../node_modules/rxjs/src/add/operator/elementAt.ts","../node_modules/rxjs/src/add/operator/filter.ts","../node_modules/rxjs/src/operator/finally.ts","../node_modules/rxjs/src/add/operator/finally.ts","../node_modules/rxjs/src/add/operator/find.ts","../node_modules/rxjs/src/operator/find.ts","../node_modules/rxjs/src/operator/findIndex.ts","../node_modules/rxjs/src/add/operator/findIndex.ts","../node_modules/rxjs/src/operator/first.ts","../node_modules/rxjs/src/add/operator/first.ts","../node_modules/rxjs/src/util/MapPolyfill.ts","../node_modules/rxjs/src/util/Map.ts","../node_modules/rxjs/src/util/FastMap.ts","../node_modules/rxjs/src/operator/groupBy.ts","../node_modules/rxjs/src/add/operator/groupBy.ts","../node_modules/rxjs/src/util/noop.ts","../node_modules/rxjs/src/operator/ignoreElements.ts","../node_modules/rxjs/src/add/operator/ignoreElements.ts","../node_modules/rxjs/src/operator/isEmpty.ts","../node_modules/rxjs/src/add/operator/isEmpty.ts","../node_modules/rxjs/src/operator/audit.ts","../node_modules/rxjs/src/add/operator/audit.ts","../node_modules/rxjs/src/operator/auditTime.ts","../node_modules/rxjs/src/add/operator/auditTime.ts","../node_modules/rxjs/src/operator/last.ts","../node_modules/rxjs/src/add/operator/last.ts","../node_modules/rxjs/src/operator/let.ts","../node_modules/rxjs/src/add/operator/let.ts","../node_modules/rxjs/src/operator/every.ts","../node_modules/rxjs/src/add/operator/every.ts","../node_modules/rxjs/src/add/operator/map.ts","../node_modules/rxjs/src/operator/mapTo.ts","../node_modules/rxjs/src/add/operator/mapTo.ts","../node_modules/rxjs/src/operator/materialize.ts","../node_modules/rxjs/src/add/operator/materialize.ts","../node_modules/rxjs/src/operator/max.ts","../node_modules/rxjs/src/add/operator/max.ts","../node_modules/rxjs/src/operator/merge.ts","../node_modules/rxjs/src/add/operator/merge.ts","../node_modules/rxjs/src/add/operator/mergeAll.ts","../node_modules/rxjs/src/operator/mergeMap.ts","../node_modules/rxjs/src/add/operator/mergeMap.ts","../node_modules/rxjs/src/operator/mergeMapTo.ts","../node_modules/rxjs/src/add/operator/mergeMapTo.ts","../node_modules/rxjs/src/operator/mergeScan.ts","../node_modules/rxjs/src/add/operator/mergeScan.ts","../node_modules/rxjs/src/operator/min.ts","../node_modules/rxjs/src/add/operator/min.ts","../node_modules/rxjs/src/add/operator/multicast.ts","../node_modules/rxjs/src/add/operator/observeOn.ts","../node_modules/rxjs/src/observable/PromiseObservable.ts","../node_modules/rxjs/src/observable/IteratorObservable.ts","../node_modules/rxjs/src/observable/ArrayLikeObservable.ts","../node_modules/rxjs/src/observable/FromObservable.ts","../node_modules/rxjs/src/operator/onErrorResumeNext.ts","../node_modules/rxjs/src/add/operator/onErrorResumeNext.ts","../node_modules/rxjs/src/operator/pairwise.ts","../node_modules/rxjs/src/add/operator/pairwise.ts","../node_modules/rxjs/src/util/not.ts","../node_modules/rxjs/src/operator/filter.ts","../node_modules/rxjs/src/operator/partition.ts","../node_modules/rxjs/src/add/operator/partition.ts","../node_modules/rxjs/src/operator/pluck.ts","../node_modules/rxjs/src/add/operator/pluck.ts","../node_modules/rxjs/src/operator/publish.ts","../node_modules/rxjs/src/add/operator/publish.ts","../node_modules/rxjs/src/operator/publishBehavior.ts","../node_modules/rxjs/src/add/operator/publishBehavior.ts","../node_modules/rxjs/src/operator/publishReplay.ts","../node_modules/rxjs/src/add/operator/publishReplay.ts","../node_modules/rxjs/src/operator/publishLast.ts","../node_modules/rxjs/src/add/operator/publishLast.ts","../node_modules/rxjs/src/operator/race.ts","../node_modules/rxjs/src/add/operator/race.ts","../node_modules/rxjs/src/operator/reduce.ts","../node_modules/rxjs/src/add/operator/reduce.ts","../node_modules/rxjs/src/operator/repeat.ts","../node_modules/rxjs/src/add/operator/repeat.ts","../node_modules/rxjs/src/operator/repeatWhen.ts","../node_modules/rxjs/src/add/operator/repeatWhen.ts","../node_modules/rxjs/src/operator/retry.ts","../node_modules/rxjs/src/add/operator/retry.ts","../node_modules/rxjs/src/operator/retryWhen.ts","../node_modules/rxjs/src/add/operator/retryWhen.ts","../node_modules/rxjs/src/operator/sample.ts","../node_modules/rxjs/src/add/operator/sample.ts","../node_modules/rxjs/src/operator/sampleTime.ts","../node_modules/rxjs/src/add/operator/sampleTime.ts","../node_modules/rxjs/src/operator/scan.ts","../node_modules/rxjs/src/add/operator/scan.ts","../node_modules/rxjs/src/operator/sequenceEqual.ts","../node_modules/rxjs/src/add/operator/sequenceEqual.ts","../node_modules/rxjs/src/operator/multicast.ts","../node_modules/rxjs/src/operator/share.ts","../node_modules/rxjs/src/add/operator/share.ts","../node_modules/rxjs/src/operator/single.ts","../node_modules/rxjs/src/add/operator/single.ts","../node_modules/rxjs/src/operator/skip.ts","../node_modules/rxjs/src/add/operator/skip.ts","../node_modules/rxjs/src/operator/skipUntil.ts","../node_modules/rxjs/src/add/operator/skipUntil.ts","../node_modules/rxjs/src/operator/skipWhile.ts","../node_modules/rxjs/src/add/operator/skipWhile.ts","../node_modules/rxjs/src/operator/mergeAll.ts","../node_modules/rxjs/src/operator/concat.ts","../node_modules/rxjs/src/operator/startWith.ts","../node_modules/rxjs/src/add/operator/startWith.ts","../node_modules/rxjs/src/util/isNumeric.ts","../node_modules/rxjs/src/observable/SubscribeOnObservable.ts","../node_modules/rxjs/src/operator/subscribeOn.ts","../node_modules/rxjs/src/add/operator/subscribeOn.ts","../node_modules/rxjs/src/operator/switch.ts","../node_modules/rxjs/src/add/operator/switch.ts","../node_modules/rxjs/src/operator/switchMap.ts","../node_modules/rxjs/src/add/operator/switchMap.ts","../node_modules/rxjs/src/operator/switchMapTo.ts","../node_modules/rxjs/src/add/operator/switchMapTo.ts","../node_modules/rxjs/src/operator/take.ts","../node_modules/rxjs/src/add/operator/take.ts","../node_modules/rxjs/src/operator/takeLast.ts","../node_modules/rxjs/src/add/operator/takeLast.ts","../node_modules/rxjs/src/operator/takeUntil.ts","../node_modules/rxjs/src/add/operator/takeUntil.ts","../node_modules/rxjs/src/operator/takeWhile.ts","../node_modules/rxjs/src/add/operator/takeWhile.ts","../node_modules/rxjs/src/operator/throttle.ts","../node_modules/rxjs/src/add/operator/throttle.ts","../node_modules/rxjs/src/operator/throttleTime.ts","../node_modules/rxjs/src/add/operator/throttleTime.ts","../node_modules/rxjs/src/add/operator/timeInterval.ts","../node_modules/rxjs/src/operator/timeout.ts","../node_modules/rxjs/src/add/operator/timeout.ts","../node_modules/rxjs/src/util/isDate.ts","../node_modules/rxjs/src/operator/timeoutWith.ts","../node_modules/rxjs/src/add/operator/timeoutWith.ts","../node_modules/rxjs/src/add/operator/timestamp.ts","../node_modules/rxjs/src/operator/toArray.ts","../node_modules/rxjs/src/add/operator/toArray.ts","../node_modules/rxjs/src/operator/toPromise.ts","../node_modules/rxjs/src/add/operator/toPromise.ts","../node_modules/rxjs/src/operator/window.ts","../node_modules/rxjs/src/add/operator/window.ts","../node_modules/rxjs/src/operator/windowCount.ts","../node_modules/rxjs/src/add/operator/windowCount.ts","../node_modules/rxjs/src/operator/windowTime.ts","../node_modules/rxjs/src/add/operator/windowTime.ts","../node_modules/rxjs/src/operator/windowToggle.ts","../node_modules/rxjs/src/add/operator/windowToggle.ts","../node_modules/rxjs/src/operator/windowWhen.ts","../node_modules/rxjs/src/add/operator/windowWhen.ts","../node_modules/rxjs/src/operator/withLatestFrom.ts","../node_modules/rxjs/src/add/operator/withLatestFrom.ts","../node_modules/rxjs/src/add/operator/zip.ts","../node_modules/rxjs/src/observable/ScalarObservable.ts","../node_modules/rxjs/src/observable/EmptyObservable.ts","../node_modules/rxjs/src/util/isScheduler.ts","../node_modules/rxjs/src/observable/ArrayObservable.ts","../node_modules/rxjs/src/OuterSubscriber.ts","../node_modules/rxjs/src/util/isPromise.ts","../node_modules/rxjs/src/InnerSubscriber.ts","../node_modules/rxjs/src/util/subscribeToResult.ts","../node_modules/rxjs/src/operator/zip.ts","../node_modules/rxjs/src/operator/zipAll.ts","../node_modules/rxjs/src/add/operator/zipAll.ts","../node_modules/rxjs/src/AsyncSubject.ts","../node_modules/rxjs/src/operator/observeOn.ts","../node_modules/rxjs/src/ReplaySubject.ts","../node_modules/rxjs/src/BehaviorSubject.ts","../node_modules/rxjs/src/observable/MulticastObservable.ts","../node_modules/rxjs/src/observable/ConnectableObservable.ts","../node_modules/rxjs/src/util/EmptyError.ts","../node_modules/rxjs/src/util/ArgumentOutOfRangeError.ts","../node_modules/rxjs/src/operator/timeInterval.ts","../node_modules/rxjs/src/operator/timestamp.ts","../node_modules/rxjs/src/Notification.ts","../node_modules/rxjs/src/testing/ColdObservable.ts","../node_modules/rxjs/src/util/ObjectUnsubscribedError.ts","../node_modules/rxjs/src/SubjectSubscription.ts","../node_modules/rxjs/src/Subject.ts","../node_modules/rxjs/src/testing/SubscriptionLoggable.ts","../node_modules/rxjs/src/util/applyMixins.ts","../node_modules/rxjs/src/testing/HotObservable.ts","../node_modules/rxjs/src/testing/SubscriptionLog.ts","../node_modules/rxjs/src/testing/TestScheduler.ts","../node_modules/rxjs/src/scheduler/VirtualTimeScheduler.ts","../node_modules/rxjs/src/util/toSubscriber.ts","../node_modules/rxjs/src/Observable.ts","../node_modules/rxjs/src/Observer.ts","../node_modules/rxjs/src/Subscriber.ts","../node_modules/rxjs/src/operator/map.ts","../node_modules/rxjs/src/observable/dom/AjaxObservable.ts","../node_modules/rxjs/src/util/Immediate.ts","../node_modules/rxjs/src/scheduler/AsapAction.ts","../node_modules/rxjs/src/scheduler/AsapScheduler.ts","../node_modules/rxjs/src/scheduler/asap.ts","../node_modules/rxjs/src/scheduler/async.ts","../node_modules/rxjs/src/scheduler/QueueAction.ts","../node_modules/rxjs/src/scheduler/QueueScheduler.ts","../node_modules/rxjs/src/scheduler/queue.ts","../node_modules/rxjs/src/util/isArray.ts","../node_modules/rxjs/src/util/isObject.ts","../node_modules/rxjs/src/util/isFunction.ts","../node_modules/rxjs/src/util/tryCatch.ts","../node_modules/rxjs/src/util/errorObject.ts","../node_modules/rxjs/src/util/UnsubscriptionError.ts","../node_modules/rxjs/src/Subscription.ts","../node_modules/rxjs/src/scheduler/Action.ts","../node_modules/rxjs/src/scheduler/AsyncAction.ts","../node_modules/rxjs/src/util/AnimationFrame.ts","../node_modules/rxjs/src/scheduler/AnimationFrameAction.ts","../node_modules/rxjs/src/Scheduler.ts","../node_modules/rxjs/src/scheduler/AsyncScheduler.ts","../node_modules/rxjs/src/scheduler/AnimationFrameScheduler.ts","../node_modules/rxjs/src/scheduler/animationFrame.ts","../node_modules/rxjs/src/symbol/rxSubscriber.ts","../node_modules/rxjs/src/symbol/iterator.ts","../node_modules/rxjs/src/util/root.ts","../node_modules/rxjs/src/symbol/observable.ts","../node_modules/rxjs/src/Rx.ts"],"names":[],"mappings":"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","file":"Rx.js","sourcesContent":["import { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { Scheduler } from '../Scheduler';\nimport { tryCatch } from '../util/tryCatch';\nimport { errorObject } from '../util/errorObject';\nimport { AsyncSubject } from '../AsyncSubject';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class BoundCallbackObservable<T> extends Observable<T> {\n  subject: AsyncSubject<T>;\n\n  /* tslint:disable:max-line-length */\n  static create<R>(callbackFunc: (callback: (result: R) => any) => any, selector?: void, scheduler?: Scheduler): () => Observable<R>;\n  static create<T, R>(callbackFunc: (v1: T, callback: (result: R) => any) => any, selector?: void, scheduler?: Scheduler): (v1: T) => Observable<R>;\n  static create<T, T2, R>(callbackFunc: (v1: T, v2: T2, callback: (result: R) => any) => any, selector?: void, scheduler?: Scheduler): (v1: T, v2: T2) => Observable<R>;\n  static create<T, T2, T3, R>(callbackFunc: (v1: T, v2: T2, v3: T3, callback: (result: R) => any) => any, selector?: void, scheduler?: Scheduler): (v1: T, v2: T2, v3: T3) => Observable<R>;\n  static create<T, T2, T3, T4, R>(callbackFunc: (v1: T, v2: T2, v3: T3, v4: T4, callback: (result: R) => any) => any, selector?: void, scheduler?: Scheduler): (v1: T, v2: T2, v3: T3, v4: T4) => Observable<R>;\n  static create<T, T2, T3, T4, T5, R>(callbackFunc: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5, callback: (result: R) => any) => any, selector?: void, scheduler?: Scheduler): (v1: T, v2: T2, v3: T3, v4: T4, v5: T5) => Observable<R>;\n  static create<T, T2, T3, T4, T5, T6, R>(callbackFunc: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5, v6: T6, callback: (result: R) => any) => any, selector?: void, scheduler?: Scheduler): (v1: T, v2: T2, v3: T3, v4: T4, v5: T5, v6: T6) => Observable<R>;\n  static create<R>(callbackFunc: (callback: (...args: any[]) => any) => any, selector: (...args: any[]) => R, scheduler?: Scheduler): () => Observable<R>;\n  static create<T, R>(callbackFunc: (v1: T, callback: (...args: any[]) => any) => any, selector: (...args: any[]) => R, scheduler?: Scheduler): (v1: T) => Observable<R>;\n  static create<T, T2, R>(callbackFunc: (v1: T, v2: T2, callback: (...args: any[]) => any) => any, selector: (...args: any[]) => R, scheduler?: Scheduler): (v1: T, v2: T2) => Observable<R>;\n  static create<T, T2, T3, R>(callbackFunc: (v1: T, v2: T2, v3: T3, callback: (...args: any[]) => any) => any, selector: (...args: any[]) => R, scheduler?: Scheduler): (v1: T, v2: T2, v3: T3) => Observable<R>;\n  static create<T, T2, T3, T4, R>(callbackFunc: (v1: T, v2: T2, v3: T3, v4: T4, callback: (...args: any[]) => any) => any, selector: (...args: any[]) => R, scheduler?: Scheduler): (v1: T, v2: T2, v3: T3, v4: T4) => Observable<R>;\n  static create<T, T2, T3, T4, T5, R>(callbackFunc: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5, callback: (...args: any[]) => any) => any, selector: (...args: any[]) => R, scheduler?: Scheduler): (v1: T, v2: T2, v3: T3, v4: T4, v5: T5) => Observable<R>;\n  static create<T, T2, T3, T4, T5, T6, R>(callbackFunc: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5, v6: T6, callback: (...args: any[]) => any) => any, selector: (...args: any[]) => R, scheduler?: Scheduler): (v1: T, v2: T2, v3: T3, v4: T4, v5: T5, v6: T6) => Observable<R>;\n  static create<T>(callbackFunc: Function, selector?: void, scheduler?: Scheduler): (...args: any[]) => Observable<T>;\n  static create<T>(callbackFunc: Function, selector?: (...args: any[]) => T, scheduler?: Scheduler): (...args: any[]) => Observable<T>;\n  /* tslint:enable:max-line-length */\n\n  /**\n   * Converts a callback API to a function that returns an Observable.\n   *\n   * <span class=\"informal\">Give it a function `f` of type `f(x, callback)` and\n   * it will return a function `g` that when called as `g(x)` will output an\n   * Observable.</span>\n   *\n   * `bindCallback` is not an operator because its input and output are not\n   * Observables. The input is a function `func` with some parameters, but the\n   * last parameter must be a callback function that `func` calls when it is\n   * done. The output of `bindCallback` is a function that takes the same\n   * parameters as `func`, except the last one (the callback). When the output\n   * function is called with arguments, it will return an Observable where the\n   * results will be delivered to.\n   *\n   * @example <caption>Convert jQuery's getJSON to an Observable API</caption>\n   * // Suppose we have jQuery.getJSON('/my/url', callback)\n   * var getJSONAsObservable = Rx.Observable.bindCallback(jQuery.getJSON);\n   * var result = getJSONAsObservable('/my/url');\n   * result.subscribe(x => console.log(x), e => console.error(e));\n   *\n   * @see {@link bindNodeCallback}\n   * @see {@link from}\n   * @see {@link fromPromise}\n   *\n   * @param {function} func Function with a callback as the last parameter.\n   * @param {function} selector A function which takes the arguments from the\n   * callback and maps those a value to emit on the output Observable.\n   * @param {Scheduler} [scheduler] The scheduler on which to schedule the\n   * callbacks.\n   * @return {function(...params: *): Observable} A function which returns the\n   * Observable that delivers the same values the callback would deliver.\n   * @static true\n   * @name bindCallback\n   * @owner Observable\n   */\n  static create<T>(func: Function,\n                   selector: Function | void = undefined,\n                   scheduler?: Scheduler): (...args: any[]) => Observable<T> {\n    return (...args: any[]): Observable<T> => {\n      return new BoundCallbackObservable<T>(func, <any>selector, args, scheduler);\n    };\n  }\n\n  constructor(private callbackFunc: Function,\n              private selector: Function,\n              private args: any[],\n              private scheduler: Scheduler) {\n    super();\n  }\n\n  protected _subscribe(subscriber: Subscriber<T | T[]>): Subscription {\n    const callbackFunc = this.callbackFunc;\n    const args = this.args;\n    const scheduler = this.scheduler;\n    let subject = this.subject;\n\n    if (!scheduler) {\n      if (!subject) {\n        subject = this.subject = new AsyncSubject<T>();\n        const handler = function handlerFn(...innerArgs: any[]) {\n          const source = (<any>handlerFn).source;\n          const { selector, subject } = source;\n          if (selector) {\n            const result = tryCatch(selector).apply(this, innerArgs);\n            if (result === errorObject) {\n              subject.error(errorObject.e);\n          } else {\n              subject.next(result);\n              subject.complete();\n            }\n          } else {\n            subject.next(innerArgs.length === 1 ? innerArgs[0] : innerArgs);\n            subject.complete();\n          }\n        };\n        // use named function instance to avoid closure.\n        (<any>handler).source = this;\n\n        const result = tryCatch(callbackFunc).apply(this, args.concat(handler));\n        if (result === errorObject) {\n          subject.error(errorObject.e);\n        }\n      }\n      return subject.subscribe(subscriber);\n    } else {\n      return scheduler.schedule(BoundCallbackObservable.dispatch, 0, { source: this, subscriber });\n    }\n  }\n\n  static dispatch<T>(state: { source: BoundCallbackObservable<T>, subscriber: Subscriber<T> }) {\n    const self = (<Subscription><any>this);\n    const { source, subscriber } = state;\n    const { callbackFunc, args, scheduler } = source;\n    let subject = source.subject;\n\n    if (!subject) {\n      subject = source.subject = new AsyncSubject<T>();\n\n      const handler = function handlerFn(...innerArgs: any[]) {\n        const source = (<any>handlerFn).source;\n        const { selector, subject } = source;\n        if (selector) {\n          const result = tryCatch(selector).apply(this, innerArgs);\n          if (result === errorObject) {\n            self.add(scheduler.schedule(dispatchError, 0, { err: errorObject.e, subject }));\n          } else {\n            self.add(scheduler.schedule(dispatchNext, 0, { value: result, subject }));\n          }\n        } else {\n          const value = innerArgs.length === 1 ? innerArgs[0] : innerArgs;\n          self.add(scheduler.schedule(dispatchNext, 0, { value, subject }));\n        }\n      };\n      // use named function to pass values in without closure\n      (<any>handler).source = source;\n\n      const result = tryCatch(callbackFunc).apply(this, args.concat(handler));\n      if (result === errorObject) {\n        subject.error(errorObject.e);\n      }\n    }\n\n    self.add(subject.subscribe(subscriber));\n  }\n}\n\ninterface DispatchNextArg<T> {\n  subject: AsyncSubject<T>;\n  value: T;\n}\nfunction dispatchNext<T>(arg: DispatchNextArg<T>) {\n  const { value, subject } = arg;\n  subject.next(value);\n  subject.complete();\n}\n\ninterface DispatchErrorArg<T> {\n  subject: AsyncSubject<T>;\n  err: any;\n}\nfunction dispatchError<T>(arg: DispatchErrorArg<T>) {\n  const { err, subject } = arg;\n  subject.error(err);\n}\n","import {  BoundCallbackObservable  } from './BoundCallbackObservable';\n\nexport const bindCallback = BoundCallbackObservable.create;","import { Observable } from '../../Observable';\nimport { bindCallback as staticBindCallback } from '../../observable/bindCallback';\n\nObservable.bindCallback = staticBindCallback;\n\ndeclare module '../../Observable' {\n  namespace Observable {\n    export let bindCallback: typeof staticBindCallback;\n  }\n}\n","import { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { Scheduler } from '../Scheduler';\nimport { tryCatch } from '../util/tryCatch';\nimport { errorObject } from '../util/errorObject';\nimport { AsyncSubject } from '../AsyncSubject';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class BoundNodeCallbackObservable<T> extends Observable<T> {\n  subject: AsyncSubject<T>;\n\n  /* tslint:disable:max-line-length */\n  static create<R>(callbackFunc: (callback: (err: any, result: R) => any) => any, selector?: void, scheduler?: Scheduler): () => Observable<R>;\n  static create<T, R>(callbackFunc: (v1: T, callback: (err: any, result: R) => any) => any, selector?: void, scheduler?: Scheduler): (v1: T) => Observable<R>;\n  static create<T, T2, R>(callbackFunc: (v1: T, v2: T2, callback: (err: any, result: R) => any) => any, selector?: void, scheduler?: Scheduler): (v1: T, v2: T2) => Observable<R>;\n  static create<T, T2, T3, R>(callbackFunc: (v1: T, v2: T2, v3: T3, callback: (err: any, result: R) => any) => any, selector?: void, scheduler?: Scheduler): (v1: T, v2: T2, v3: T3) => Observable<R>;\n  static create<T, T2, T3, T4, R>(callbackFunc: (v1: T, v2: T2, v3: T3, v4: T4, callback: (err: any, result: R) => any) => any, selector?: void, scheduler?: Scheduler): (v1: T, v2: T2, v3: T3, v4: T4) => Observable<R>;\n  static create<T, T2, T3, T4, T5, R>(callbackFunc: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5, callback: (err: any, result: R) => any) => any, selector?: void, scheduler?: Scheduler): (v1: T, v2: T2, v3: T3, v4: T4, v5: T5) => Observable<R>;\n  static create<T, T2, T3, T4, T5, T6, R>(callbackFunc: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5, v6: T6, callback: (err: any, result: R) => any) => any, selector?: void, scheduler?: Scheduler): (v1: T, v2: T2, v3: T3, v4: T4, v5: T5, v6: T6) => Observable<R>;\n  static create<T>(callbackFunc: Function, selector?: void, scheduler?: Scheduler): (...args: any[]) => Observable<T>;\n  static create<T>(callbackFunc: Function, selector?: (...args: any[]) => T, scheduler?: Scheduler): (...args: any[]) => Observable<T>;\n  /* tslint:enable:max-line-length */\n\n  /**\n   * Converts a Node.js-style callback API to a function that returns an\n   * Observable.\n   *\n   * <span class=\"informal\">It's just like {@link bindCallback}, but the\n   * callback is expected to be of type `callback(error, result)`.</span>\n   *\n   * `bindNodeCallback` is not an operator because its input and output are not\n   * Observables. The input is a function `func` with some parameters, but the\n   * last parameter must be a callback function that `func` calls when it is\n   * done. The callback function is expected to follow Node.js conventions,\n   * where the first argument to the callback is an error, while remaining\n   * arguments are the callback result. The output of `bindNodeCallback` is a\n   * function that takes the same parameters as `func`, except the last one (the\n   * callback). When the output function is called with arguments, it will\n   * return an Observable where the results will be delivered to.\n   *\n   * @example <caption>Read a file from the filesystem and get the data as an Observable</caption>\n   * import * as fs from 'fs';\n   * var readFileAsObservable = Rx.Observable.bindNodeCallback(fs.readFile);\n   * var result = readFileAsObservable('./roadNames.txt', 'utf8');\n   * result.subscribe(x => console.log(x), e => console.error(e));\n   *\n   * @see {@link bindCallback}\n   * @see {@link from}\n   * @see {@link fromPromise}\n   *\n   * @param {function} func Function with a callback as the last parameter.\n   * @param {function} selector A function which takes the arguments from the\n   * callback and maps those a value to emit on the output Observable.\n   * @param {Scheduler} [scheduler] The scheduler on which to schedule the\n   * callbacks.\n   * @return {function(...params: *): Observable} A function which returns the\n   * Observable that delivers the same values the Node.js callback would\n   * deliver.\n   * @static true\n   * @name bindNodeCallback\n   * @owner Observable\n   */\n  static create<T>(func: Function,\n                   selector: Function | void = undefined,\n                   scheduler?: Scheduler): (...args: any[]) => Observable<T> {\n    return (...args: any[]): Observable<T> => {\n      return new BoundNodeCallbackObservable<T>(func, <any>selector, args, scheduler);\n    };\n  }\n\n  constructor(private callbackFunc: Function,\n              private selector: Function,\n              private args: any[],\n              public scheduler: Scheduler) {\n    super();\n  }\n\n  protected _subscribe(subscriber: Subscriber<T | T[]>): Subscription {\n    const callbackFunc = this.callbackFunc;\n    const args = this.args;\n    const scheduler = this.scheduler;\n    let subject = this.subject;\n\n    if (!scheduler) {\n      if (!subject) {\n        subject = this.subject = new AsyncSubject<T>();\n        const handler = function handlerFn(...innerArgs: any[]) {\n          const source = (<any>handlerFn).source;\n          const { selector, subject } = source;\n          const err = innerArgs.shift();\n\n          if (err) {\n            subject.error(err);\n          } else if (selector) {\n            const result = tryCatch(selector).apply(this, innerArgs);\n            if (result === errorObject) {\n              subject.error(errorObject.e);\n            } else {\n              subject.next(result);\n              subject.complete();\n            }\n          } else {\n            subject.next(innerArgs.length === 1 ? innerArgs[0] : innerArgs);\n            subject.complete();\n          }\n        };\n        // use named function instance to avoid closure.\n        (<any>handler).source = this;\n\n        const result = tryCatch(callbackFunc).apply(this, args.concat(handler));\n        if (result === errorObject) {\n          subject.error(errorObject.e);\n        }\n      }\n      return subject.subscribe(subscriber);\n    } else {\n      return scheduler.schedule(dispatch, 0, { source: this, subscriber });\n    }\n  }\n}\n\nfunction dispatch<T>(state: { source: BoundNodeCallbackObservable<T>, subscriber: Subscriber<T> }) {\n  const self = (<Subscription> this);\n  const { source, subscriber } = state;\n  // XXX: cast to `any` to access to the private field in `source`.\n  const { callbackFunc, args, scheduler } = source as any;\n  let subject = source.subject;\n\n  if (!subject) {\n    subject = source.subject = new AsyncSubject<T>();\n\n    const handler = function handlerFn(...innerArgs: any[]) {\n      const source = (<any>handlerFn).source;\n      const { selector, subject } = source;\n      const err = innerArgs.shift();\n\n      if (err) {\n        subject.error(err);\n      } else if (selector) {\n        const result = tryCatch(selector).apply(this, innerArgs);\n        if (result === errorObject) {\n          self.add(scheduler.schedule(dispatchError, 0, { err: errorObject.e, subject }));\n        } else {\n          self.add(scheduler.schedule(dispatchNext, 0, { value: result, subject }));\n        }\n      } else {\n        const value = innerArgs.length === 1 ? innerArgs[0] : innerArgs;\n        self.add(scheduler.schedule(dispatchNext, 0, { value, subject }));\n      }\n    };\n    // use named function to pass values in without closure\n    (<any>handler).source = source;\n\n    const result = tryCatch(callbackFunc).apply(this, args.concat(handler));\n    if (result === errorObject) {\n      subject.error(errorObject.e);\n    }\n  }\n\n  self.add(subject.subscribe(subscriber));\n}\n\ninterface DispatchNextArg<T> {\n  subject: AsyncSubject<T>;\n  value: T;\n}\nfunction dispatchNext<T>(arg: DispatchNextArg<T>) {\n  const { value, subject } = arg;\n  subject.next(value);\n  subject.complete();\n}\n\ninterface DispatchErrorArg<T> {\n  subject: AsyncSubject<T>;\n  err: any;\n}\nfunction dispatchError<T>(arg: DispatchErrorArg<T>) {\n  const { err, subject } = arg;\n  subject.error(err);\n}\n","import {  BoundNodeCallbackObservable  } from './BoundNodeCallbackObservable';\n\nexport const bindNodeCallback = BoundNodeCallbackObservable.create;","import { Observable } from '../../Observable';\nimport { bindNodeCallback as staticBindNodeCallback } from '../../observable/bindNodeCallback';\n\nObservable.bindNodeCallback = staticBindNodeCallback;\n\ndeclare module '../../Observable' {\n  namespace Observable {\n    export let bindNodeCallback: typeof staticBindNodeCallback;\n  }\n}","import {  Observable, ObservableInput  } from '../Observable';\nimport {  Scheduler  } from '../Scheduler';\nimport {  isScheduler  } from '../util/isScheduler';\nimport {  isArray  } from '../util/isArray';\nimport {  ArrayObservable  } from './ArrayObservable';\nimport {  CombineLatestOperator  } from '../operator/combineLatest';\n\n/* tslint:disable:max-line-length */\nexport function combineLatest<T, T2>(v1: ObservableInput<T>, v2: ObservableInput<T2>, scheduler?: Scheduler): Observable<[T, T2]>;\nexport function combineLatest<T, T2, T3>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, scheduler?: Scheduler): Observable<[T, T2, T3]>;\nexport function combineLatest<T, T2, T3, T4>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, scheduler?: Scheduler): Observable<[T, T2, T3, T4]>;\nexport function combineLatest<T, T2, T3, T4, T5>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, scheduler?: Scheduler): Observable<[T, T2, T3, T4, T5]>;\nexport function combineLatest<T, T2, T3, T4, T5, T6>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>, scheduler?: Scheduler): Observable<[T, T2, T3, T4, T5, T6]>;\n\nexport function combineLatest<T, R>(v1: ObservableInput<T>, project: (v1: T) => R, scheduler?: Scheduler): Observable<R>;\nexport function combineLatest<T, T2, R>(v1: ObservableInput<T>, v2: ObservableInput<T2>, project: (v1: T, v2: T2) => R, scheduler?: Scheduler): Observable<R>;\nexport function combineLatest<T, T2, T3, R>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, project: (v1: T, v2: T2, v3: T3) => R, scheduler?: Scheduler): Observable<R>;\nexport function combineLatest<T, T2, T3, T4, R>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, project: (v1: T, v2: T2, v3: T3, v4: T4) => R, scheduler?: Scheduler): Observable<R>;\nexport function combineLatest<T, T2, T3, T4, T5, R>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, project: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5) => R, scheduler?: Scheduler): Observable<R>;\nexport function combineLatest<T, T2, T3, T4, T5, T6, R>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>, project: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5, v6: T6) => R, scheduler?: Scheduler): Observable<R>;\n\nexport function combineLatest<T>(array: ObservableInput<T>[], scheduler?: Scheduler): Observable<T[]>;\nexport function combineLatest<R>(array: ObservableInput<any>[], scheduler?: Scheduler): Observable<R>;\nexport function combineLatest<T, R>(array: ObservableInput<T>[], project: (...values: Array<T>) => R, scheduler?: Scheduler): Observable<R>;\nexport function combineLatest<R>(array: ObservableInput<any>[], project: (...values: Array<any>) => R, scheduler?: Scheduler): Observable<R>;\nexport function combineLatest<T>(...observables: Array<ObservableInput<T> | Scheduler>): Observable<T[]>;\nexport function combineLatest<T, R>(...observables: Array<ObservableInput<T> | ((...values: Array<T>) => R) | Scheduler>): Observable<R>;\nexport function combineLatest<R>(...observables: Array<ObservableInput<any> | ((...values: Array<any>) => R) | Scheduler>): Observable<R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Combines multiple Observables to create an Observable whose values are\n * calculated from the latest values of each of its input Observables.\n *\n * <span class=\"informal\">Whenever any input Observable emits a value, it\n * computes a formula using the latest values from all the inputs, then emits\n * the output of that formula.</span>\n *\n * <img src=\"./img/combineLatest.png\" width=\"100%\">\n *\n * `combineLatest` combines the values from all the Observables passed as\n * arguments. This is done by subscribing to each Observable, in order, and\n * collecting an array of each of the most recent values any time any of the\n * input Observables emits, then either taking that array and passing it as\n * arguments to an optional `project` function and emitting the return value of\n * that, or just emitting the array of recent values directly if there is no\n * `project` function.\n *\n * @example <caption>Dynamically calculate the Body-Mass Index from an Observable of weight and one for height</caption>\n * var weight = Rx.Observable.of(70, 72, 76, 79, 75);\n * var height = Rx.Observable.of(1.76, 1.77, 1.78);\n * var bmi = Rx.Observable.combineLatest(weight, height, (w, h) => w / (h * h));\n * bmi.subscribe(x => console.log('BMI is ' + x));\n *\n * @see {@link combineAll}\n * @see {@link merge}\n * @see {@link withLatestFrom}\n *\n * @param {Observable} observable1 An input Observable to combine with the\n * source Observable.\n * @param {Observable} observable2 An input Observable to combine with the\n * source Observable. More than one input Observables may be given as argument.\n * @param {function} [project] An optional function to project the values from\n * the combined latest values into a new value on the output Observable.\n * @param {Scheduler} [scheduler=null] The Scheduler to use for subscribing to\n * each input Observable.\n * @return {Observable} An Observable of projected values from the most recent\n * values from each input Observable, or an array of the most recent values from\n * each input Observable.\n * @static true\n * @name combineLatest\n * @owner Observable\n */\nexport function combineLatest<T, R>(...observables: Array<any | ObservableInput<any> |\n                                                    Array<ObservableInput<any>> |\n                                                    (((...values: Array<any>) => R)) |\n                                                    Scheduler>): Observable<R> {\n  let project: (...values: Array<any>) => R =  null;\n  let scheduler: Scheduler = null;\n\n  if (isScheduler(observables[observables.length - 1])) {\n    scheduler = <Scheduler>observables.pop();\n  }\n\n  if (typeof observables[observables.length - 1] === 'function') {\n    project = <(...values: Array<any>) => R>observables.pop();\n  }\n\n  // if the first and only other argument besides the resultSelector is an array\n  // assume it's been called with `combineLatest([obs1, obs2, obs3], project)`\n  if (observables.length === 1 && isArray(observables[0])) {\n    observables = <Array<Observable<any>>>observables[0];\n  }\n\n  return new ArrayObservable(observables, scheduler).lift(new CombineLatestOperator<T, R>(project));\n}","import { Observable } from '../../Observable';\nimport { combineLatest as combineLatestStatic } from '../../observable/combineLatest';\n\nObservable.combineLatest = combineLatestStatic;\n\ndeclare module '../../Observable' {\n  namespace Observable {\n    export let combineLatest: typeof combineLatestStatic;\n  }\n}","import {  concatStatic  } from '../operator/concat';\n\nexport const concat = concatStatic;","import { Observable } from '../../Observable';\nimport { concat as concatStatic } from '../../observable/concat';\n\nObservable.concat = concatStatic;\n\ndeclare module '../../Observable' {\n  namespace Observable {\n    export let concat: typeof concatStatic;\n  }\n}","import { Observable, SubscribableOrPromise } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\n\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OuterSubscriber } from '../OuterSubscriber';\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class DeferObservable<T> extends Observable<T> {\n\n  /**\n   * Creates an Observable that, on subscribe, calls an Observable factory to\n   * make an Observable for each new Observer.\n   *\n   * <span class=\"informal\">Creates the Observable lazily, that is, only when it\n   * is subscribed.\n   * </span>\n   *\n   * <img src=\"./img/defer.png\" width=\"100%\">\n   *\n   * `defer` allows you to create the Observable only when the Observer\n   * subscribes, and create a fresh Observable for each Observer. It waits until\n   * an Observer subscribes to it, and then it generates an Observable,\n   * typically with an Observable factory function. It does this afresh for each\n   * subscriber, so although each subscriber may think it is subscribing to the\n   * same Observable, in fact each subscriber gets its own individual\n   * Observable.\n   *\n   * @example <caption>Subscribe to either an Observable of clicks or an Observable of interval, at random</caption>\n   * var clicksOrInterval = Rx.Observable.defer(function () {\n   *   if (Math.random() > 0.5) {\n   *     return Rx.Observable.fromEvent(document, 'click');\n   *   } else {\n   *     return Rx.Observable.interval(1000);\n   *   }\n   * });\n   * clicksOrInterval.subscribe(x => console.log(x));\n   *\n   * @see {@link create}\n   *\n   * @param {function(): Observable|Promise} observableFactory The Observable\n   * factory function to invoke for each Observer that subscribes to the output\n   * Observable. May also return a Promise, which will be converted on the fly\n   * to an Observable.\n   * @return {Observable} An Observable whose Observers' subscriptions trigger\n   * an invocation of the given Observable factory function.\n   * @static true\n   * @name defer\n   * @owner Observable\n   */\n  static create<T>(observableFactory: () => SubscribableOrPromise<T> | void): Observable<T> {\n    return new DeferObservable(observableFactory);\n  }\n\n  constructor(private observableFactory: () => SubscribableOrPromise<T> | void) {\n    super();\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>): Subscription {\n    return new DeferSubscriber(subscriber, this.observableFactory);\n  }\n}\n\nclass DeferSubscriber<T> extends OuterSubscriber<T, T> {\n  constructor(destination: Subscriber<T>,\n              private factory: () => SubscribableOrPromise<T> | void) {\n    super(destination);\n    this.tryDefer();\n  }\n\n  private tryDefer(): void {\n    try {\n      this._callFactory();\n    } catch (err) {\n      this._error(err);\n    }\n  }\n\n  private _callFactory(): void {\n    const result = this.factory();\n    if (result) {\n      this.add(subscribeToResult(this, result));\n    }\n  }\n}\n","import {  DeferObservable  } from './DeferObservable';\n\nexport const defer = DeferObservable.create;","import { Observable } from '../../Observable';\nimport { defer as staticDefer } from '../../observable/defer';\n\nObservable.defer = staticDefer;\n\ndeclare module '../../Observable' {\n  namespace Observable {\n    export let defer: typeof staticDefer;\n  }\n}","import {  EmptyObservable  } from './EmptyObservable';\n\nexport const empty = EmptyObservable.create;","import { Observable } from '../../Observable';\nimport { empty as staticEmpty } from '../../observable/empty';\n\nObservable.empty = staticEmpty;\n\ndeclare module '../../Observable' {\n  namespace Observable {\n    export let empty: typeof staticEmpty;\n  }\n}","import { Observable, SubscribableOrPromise } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { EmptyObservable } from './EmptyObservable';\nimport { isArray } from '../util/isArray';\n\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class ForkJoinObservable<T> extends Observable<T> {\n  constructor(private sources: Array<SubscribableOrPromise<any>>,\n              private resultSelector?: (...values: Array<any>) => T) {\n    super();\n  }\n\n  /* tslint:disable:max-line-length */\n  static create<T, T2>(v1: SubscribableOrPromise<T>, v2: SubscribableOrPromise<T2>): Observable<[T, T2]>;\n  static create<T, T2, T3>(v1: SubscribableOrPromise<T>, v2: SubscribableOrPromise<T2>, v3: SubscribableOrPromise<T3>): Observable<[T, T2, T3]>;\n  static create<T, T2, T3, T4>(v1: SubscribableOrPromise<T>, v2: SubscribableOrPromise<T2>, v3: SubscribableOrPromise<T3>, v4: SubscribableOrPromise<T4>): Observable<[T, T2, T3, T4]>;\n  static create<T, T2, T3, T4, T5>(v1: SubscribableOrPromise<T>, v2: SubscribableOrPromise<T2>, v3: SubscribableOrPromise<T3>, v4: SubscribableOrPromise<T4>, v5: SubscribableOrPromise<T5>): Observable<[T, T2, T3, T4, T5]>;\n  static create<T, T2, T3, T4, T5, T6>(v1: SubscribableOrPromise<T>, v2: SubscribableOrPromise<T2>, v3: SubscribableOrPromise<T3>, v4: SubscribableOrPromise<T4>, v5: SubscribableOrPromise<T5>, v6: SubscribableOrPromise<T6>): Observable<[T, T2, T3, T4, T5, T6]>;\n  static create<T, T2, R>(v1: SubscribableOrPromise<T>, v2: SubscribableOrPromise<T2>, project: (v1: T, v2: T2) => R): Observable<R>;\n  static create<T, T2, T3, R>(v1: SubscribableOrPromise<T>, v2: SubscribableOrPromise<T2>, v3: SubscribableOrPromise<T3>, project: (v1: T, v2: T2, v3: T3) => R): Observable<R>;\n  static create<T, T2, T3, T4, R>(v1: SubscribableOrPromise<T>, v2: SubscribableOrPromise<T2>, v3: SubscribableOrPromise<T3>, v4: SubscribableOrPromise<T4>, project: (v1: T, v2: T2, v3: T3, v4: T4) => R): Observable<R>;\n  static create<T, T2, T3, T4, T5, R>(v1: SubscribableOrPromise<T>, v2: SubscribableOrPromise<T2>, v3: SubscribableOrPromise<T3>, v4: SubscribableOrPromise<T4>, v5: SubscribableOrPromise<T5>, project: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5) => R): Observable<R>;\n  static create<T, T2, T3, T4, T5, T6, R>(v1: SubscribableOrPromise<T>, v2: SubscribableOrPromise<T2>, v3: SubscribableOrPromise<T3>, v4: SubscribableOrPromise<T4>, v5: SubscribableOrPromise<T5>, v6: SubscribableOrPromise<T6>, project: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5, v6: T6) => R): Observable<R>;\n  static create<T>(sources: SubscribableOrPromise<T>[]): Observable<T[]>;\n  static create<R>(sources: SubscribableOrPromise<any>[]): Observable<R>;\n  static create<T, R>(sources: SubscribableOrPromise<T>[], project: (...values: Array<T>) => R): Observable<R>;\n  static create<R>(sources: SubscribableOrPromise<any>[], project: (...values: Array<any>) => R): Observable<R>;\n  static create<T>(...sources: SubscribableOrPromise<T>[]): Observable<T[]>;\n  static create<R>(...sources: SubscribableOrPromise<any>[]): Observable<R>;\n  /* tslint:enable:max-line-length */\n  /**\n   * @param sources\n   * @return {any}\n   * @static true\n   * @name forkJoin\n   * @owner Observable\n   */\n  static create<T>(...sources: Array<SubscribableOrPromise<any> |\n                                  Array<SubscribableOrPromise<any>> |\n                                  ((...values: Array<any>) => any)>): Observable<T> {\n    if (sources === null || arguments.length === 0) {\n      return new EmptyObservable<T>();\n    }\n\n    let resultSelector: (...values: Array<any>) => any = null;\n    if (typeof sources[sources.length - 1] === 'function') {\n      resultSelector = <(...values: Array<any>) => any>sources.pop();\n    }\n\n    // if the first and only other argument besides the resultSelector is an array\n    // assume it's been called with `forkJoin([obs1, obs2, obs3], resultSelector)`\n    if (sources.length === 1 && isArray(sources[0])) {\n      sources = <Array<SubscribableOrPromise<any>>>sources[0];\n    }\n\n    if (sources.length === 0) {\n      return new EmptyObservable<T>();\n    }\n\n    return new ForkJoinObservable(<Array<SubscribableOrPromise<any>>>sources, resultSelector);\n  }\n\n  protected _subscribe(subscriber: Subscriber<any>): Subscription {\n    return new ForkJoinSubscriber(subscriber, this.sources, this.resultSelector);\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass ForkJoinSubscriber<T> extends OuterSubscriber<T, T> {\n  private completed = 0;\n  private total: number;\n  private values: any[];\n  private haveValues = 0;\n\n  constructor(destination: Subscriber<T>,\n              private sources: Array<SubscribableOrPromise<any>>,\n              private resultSelector?: (...values: Array<any>) => T) {\n    super(destination);\n\n    const len = sources.length;\n    this.total = len;\n    this.values = new Array(len);\n\n    for (let i = 0; i < len; i++) {\n      const source = sources[i];\n      const innerSubscription = subscribeToResult(this, source, null, i);\n\n      if (innerSubscription) {\n        (<any> innerSubscription).outerIndex = i;\n        this.add(innerSubscription);\n      }\n    }\n  }\n\n  notifyNext(outerValue: any, innerValue: T,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, T>): void {\n    this.values[outerIndex] = innerValue;\n    if (!(<any>innerSub)._hasValue) {\n      (<any>innerSub)._hasValue = true;\n      this.haveValues++;\n    }\n  }\n\n  notifyComplete(innerSub: InnerSubscriber<T, T>): void {\n    const destination = this.destination;\n    const { haveValues, resultSelector, values } = this;\n    const len = values.length;\n\n    if (!(<any>innerSub)._hasValue) {\n      destination.complete();\n      return;\n    }\n\n    this.completed++;\n\n    if (this.completed !== len) {\n      return;\n    }\n\n    if (haveValues === len) {\n      const value = resultSelector ? resultSelector.apply(this, values) : values;\n      destination.next(value);\n    }\n\n    destination.complete();\n  }\n}","import {  ForkJoinObservable  } from './ForkJoinObservable';\n\nexport const forkJoin = ForkJoinObservable.create;","import { Observable } from '../../Observable';\nimport { forkJoin as staticForkJoin } from '../../observable/forkJoin';\n\nObservable.forkJoin = staticForkJoin;\n\ndeclare module '../../Observable' {\n  namespace Observable {\n    export let forkJoin: typeof staticForkJoin;\n  }\n}","import {  FromObservable  } from './FromObservable';\n\nexport const from = FromObservable.create;","import { Observable } from '../../Observable';\nimport { from as staticFrom } from '../../observable/from';\n\nObservable.from = staticFrom;\n\ndeclare module '../../Observable' {\n  namespace Observable {\n    export let from: typeof staticFrom;\n  }\n}","import { Observable } from '../Observable';\nimport { tryCatch } from '../util/tryCatch';\nimport { isFunction } from '../util/isFunction';\nimport { errorObject } from '../util/errorObject';\nimport { Subscription } from '../Subscription';\nimport { Subscriber } from '../Subscriber';\n\nexport type NodeStyleEventEmmitter = {\n  addListener: (eventName: string, handler: Function) => void;\n  removeListener: (eventName: string, handler: Function) => void;\n};\nfunction isNodeStyleEventEmmitter(sourceObj: any): sourceObj is NodeStyleEventEmmitter {\n  return !!sourceObj && typeof sourceObj.addListener === 'function' && typeof sourceObj.removeListener === 'function';\n}\n\nexport type JQueryStyleEventEmitter = {\n  on: (eventName: string, handler: Function) => void;\n  off: (eventName: string, handler: Function) => void;\n};\nfunction isJQueryStyleEventEmitter(sourceObj: any): sourceObj is JQueryStyleEventEmitter {\n  return !!sourceObj && typeof sourceObj.on === 'function' && typeof sourceObj.off === 'function';\n}\n\nfunction isNodeList(sourceObj: any): sourceObj is NodeList {\n  return !!sourceObj && sourceObj.toString() === '[object NodeList]';\n}\n\nfunction isHTMLCollection(sourceObj: any): sourceObj is HTMLCollection {\n  return !!sourceObj && sourceObj.toString() === '[object HTMLCollection]';\n}\n\nfunction isEventTarget(sourceObj: any): sourceObj is EventTarget {\n  return !!sourceObj && typeof sourceObj.addEventListener === 'function' && typeof sourceObj.removeEventListener === 'function';\n}\n\nexport type EventTargetLike = EventTarget | NodeStyleEventEmmitter | JQueryStyleEventEmitter | NodeList | HTMLCollection;\n\nexport type EventListenerOptions = {\n  capture?: boolean;\n  passive?: boolean;\n  once?: boolean;\n} | boolean;\n\nexport type SelectorMethodSignature<T> = (...args: Array<any>) => T;\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class FromEventObservable<T, R> extends Observable<T> {\n\n  /* tslint:disable:max-line-length */\n  static create<T>(target: EventTargetLike, eventName: string): Observable<T>;\n  static create<T>(target: EventTargetLike, eventName: string, selector: SelectorMethodSignature<T>): Observable<T>;\n  static create<T>(target: EventTargetLike, eventName: string, options: EventListenerOptions): Observable<T>;\n  static create<T>(target: EventTargetLike, eventName: string, options: EventListenerOptions, selector: SelectorMethodSignature<T>): Observable<T>;\n  /* tslint:enable:max-line-length */\n\n  /**\n   * Creates an Observable that emits events of a specific type coming from the\n   * given event target.\n   *\n   * <span class=\"informal\">Creates an Observable from DOM events, or Node\n   * EventEmitter events or others.</span>\n   *\n   * <img src=\"./img/fromEvent.png\" width=\"100%\">\n   *\n   * Creates an Observable by attaching an event listener to an \"event target\",\n   * which may be an object with `addEventListener` and `removeEventListener`,\n   * a Node.js EventEmitter, a jQuery style EventEmitter, a NodeList from the\n   * DOM, or an HTMLCollection from the DOM. The event handler is attached when\n   * the output Observable is subscribed, and removed when the Subscription is\n   * unsubscribed.\n   *\n   * @example <caption>Emits clicks happening on the DOM document</caption>\n   * var clicks = Rx.Observable.fromEvent(document, 'click');\n   * clicks.subscribe(x => console.log(x));\n   *\n   * @see {@link from}\n   * @see {@link fromEventPattern}\n   *\n   * @param {EventTargetLike} target The DOMElement, event target, Node.js\n   * EventEmitter, NodeList or HTMLCollection to attach the event handler to.\n   * @param {string} eventName The event name of interest, being emitted by the\n   * `target`.\n   * @parm {EventListenerOptions} [options] Options to pass through to addEventListener\n   * @param {SelectorMethodSignature<T>} [selector] An optional function to\n   * post-process results. It takes the arguments from the event handler and\n   * should return a single value.\n   * @return {Observable<T>}\n   * @static true\n   * @name fromEvent\n   * @owner Observable\n   */\n  static create<T>(target: EventTargetLike,\n                   eventName: string,\n                   options?: EventListenerOptions,\n                   selector?: SelectorMethodSignature<T>): Observable<T> {\n    if (isFunction(options)) {\n      selector = <any>options;\n      options = undefined;\n    }\n    return new FromEventObservable(target, eventName, selector, options);\n  }\n\n  constructor(private sourceObj: EventTargetLike,\n              private eventName: string,\n              private selector?: SelectorMethodSignature<T>,\n              private options?: EventListenerOptions) {\n    super();\n  }\n\n  private static setupSubscription<T>(sourceObj: EventTargetLike,\n                                      eventName: string,\n                                      handler: Function,\n                                      subscriber: Subscriber<T>,\n                                      options?: EventListenerOptions) {\n    let unsubscribe: () => void;\n    if (isNodeList(sourceObj) || isHTMLCollection(sourceObj)) {\n      for (let i = 0, len = sourceObj.length; i < len; i++) {\n        FromEventObservable.setupSubscription(sourceObj[i], eventName, handler, subscriber, options);\n      }\n    } else if (isEventTarget(sourceObj)) {\n      const source = sourceObj;\n      sourceObj.addEventListener(eventName, <EventListener>handler, <boolean>options);\n      unsubscribe = () => source.removeEventListener(eventName, <EventListener>handler);\n    } else if (isJQueryStyleEventEmitter(sourceObj)) {\n      const source = sourceObj;\n      sourceObj.on(eventName, handler);\n      unsubscribe = () => source.off(eventName, handler);\n    } else if (isNodeStyleEventEmmitter(sourceObj)) {\n      const source = sourceObj;\n      sourceObj.addListener(eventName, handler);\n      unsubscribe = () => source.removeListener(eventName, handler);\n    }\n\n    subscriber.add(new Subscription(unsubscribe));\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>) {\n    const sourceObj = this.sourceObj;\n    const eventName = this.eventName;\n    const options = this.options;\n    const selector = this.selector;\n    let handler = selector ? (...args: any[]) => {\n      let result = tryCatch(selector)(...args);\n      if (result === errorObject) {\n        subscriber.error(errorObject.e);\n      } else {\n        subscriber.next(result);\n      }\n    } : (e: any) => subscriber.next(e);\n\n    FromEventObservable.setupSubscription(sourceObj, eventName, handler, subscriber, options);\n  }\n}\n","import {  FromEventObservable  } from './FromEventObservable';\n\nexport const fromEvent = FromEventObservable.create;","import { Observable } from '../../Observable';\nimport { fromEvent as staticFromEvent } from '../../observable/fromEvent';\n\nObservable.fromEvent = staticFromEvent;\n\ndeclare module '../../Observable' {\n  namespace Observable {\n    export let fromEvent: typeof staticFromEvent;\n  }\n}","import { Observable } from '../Observable';\nimport { Subscription } from '../Subscription';\nimport { Subscriber } from '../Subscriber';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class FromEventPatternObservable<T, R> extends Observable<T> {\n\n  /**\n   * Creates an Observable from an API based on addHandler/removeHandler\n   * functions.\n   *\n   * <span class=\"informal\">Converts any addHandler/removeHandler API to an\n   * Observable.</span>\n   *\n   * <img src=\"./img/fromEventPattern.png\" width=\"100%\">\n   *\n   * Creates an Observable by using the `addHandler` and `removeHandler`\n   * functions to add and remove the handlers, with an optional selector\n   * function to project the event arguments to a result. The `addHandler` is\n   * called when the output Observable is subscribed, and `removeHandler` is\n   * called when the Subscription is unsubscribed.\n   *\n   * @example <caption>Emits clicks happening on the DOM document</caption>\n   * function addClickHandler(handler) {\n   *   document.addEventListener('click', handler);\n   * }\n   *  \n   * function removeClickHandler(handler) {\n   *   document.removeEventListener('click', handler);\n   * }\n   *  \n   * var clicks = Rx.Observable.fromEventPattern(\n   *   addClickHandler,\n   *   removeClickHandler\n   * );\n   * clicks.subscribe(x => console.log(x));\n   *\n   * @see {@link from}\n   * @see {@link fromEvent}\n   *\n   * @param {function(handler: Function): any} addHandler A function that takes\n   * a `handler` function as argument and attaches it somehow to the actual\n   * source of events.\n   * @param {function(handler: Function): void} removeHandler A function that\n   * takes a `handler` function as argument and removes it in case it was\n   * previously attached using `addHandler`.\n   * @param {function(...args: any): T} [selector] An optional function to\n   * post-process results. It takes the arguments from the event handler and\n   * should return a single value.\n   * @return {Observable<T>}\n   * @static true\n   * @name fromEventPattern\n   * @owner Observable\n   */\n  static create<T>(addHandler: (handler: Function) => any,\n                   removeHandler: (handler: Function) => void,\n                   selector?: (...args: Array<any>) => T) {\n    return new FromEventPatternObservable(addHandler, removeHandler, selector);\n  }\n\n  constructor(private addHandler: (handler: Function) => any,\n              private removeHandler: (handler: Function) => void,\n              private selector?: (...args: Array<any>) => T) {\n    super();\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>) {\n    const removeHandler = this.removeHandler;\n\n    const handler = !!this.selector ? (...args: Array<any>) => {\n      this._callSelector(subscriber, args);\n    } : function(e: any) { subscriber.next(e); };\n\n    this._callAddHandler(handler, subscriber);\n    subscriber.add(new Subscription(() => {\n      //TODO: determine whether or not to forward to error handler\n      removeHandler(handler);\n    }));\n  }\n\n  private _callSelector(subscriber: Subscriber<T>, args: Array<any>): void {\n    try {\n      const result: T = this.selector(...args);\n      subscriber.next(result);\n    }\n    catch (e) {\n      subscriber.error(e);\n    }\n  }\n\n  private _callAddHandler(handler: (e: any) => void, errorSubscriber: Subscriber<T>): void {\n    try {\n      this.addHandler(handler);\n    }\n    catch (e) {\n      errorSubscriber.error(e);\n    }\n  }\n}","import {  FromEventPatternObservable  } from './FromEventPatternObservable';\n\nexport const fromEventPattern = FromEventPatternObservable.create;","import { Observable } from '../../Observable';\nimport { fromEventPattern as staticFromEventPattern } from '../../observable/fromEventPattern';\n\nObservable.fromEventPattern = staticFromEventPattern;\n\ndeclare module '../../Observable' {\n  namespace Observable {\n    export let fromEventPattern: typeof staticFromEventPattern;\n  }\n}","import {  PromiseObservable  } from './PromiseObservable';\n\nexport const fromPromise = PromiseObservable.create;","import { Observable } from '../../Observable';\nimport { fromPromise as staticFromPromise } from '../../observable/fromPromise';\n\nObservable.fromPromise = staticFromPromise;\n\ndeclare module '../../Observable' {\n  namespace Observable {\n    export let fromPromise: typeof staticFromPromise;\n  }\n}","import { Scheduler } from '../Scheduler';\nimport { Action } from '../scheduler/Action';\nimport { Observable } from '../Observable' ;\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { isScheduler } from '../util/isScheduler';\n\nconst selfSelector = <T>(value: T) => value;\n\nexport type ConditionFunc<S> = (state: S) => boolean;\nexport type IterateFunc<S> = (state: S) => S;\nexport type ResultFunc<S, T> = (state: S) => T;\n\ninterface SchedulerState<T, S> {\n  needIterate?: boolean;\n  state: S;\n  subscriber: Subscriber<T>;\n  condition?: ConditionFunc<S>;\n  iterate: IterateFunc<S>;\n  resultSelector: ResultFunc<S, T>;\n}\n\nexport interface GenerateBaseOptions<S> {\n  /**\n   * Inital state.\n  */\n  initialState: S;\n  /**\n   * Condition function that accepts state and returns boolean.\n   * When it returns false, the generator stops.\n   * If not specified, a generator never stops.\n  */\n  condition?: ConditionFunc<S>;\n  /**\n   * Iterate function that accepts state and returns new state.\n   */\n  iterate: IterateFunc<S>;\n  /**\n   * Scheduler to use for generation process.\n   * By default, a generator starts immediately.\n  */\n  scheduler?: Scheduler;\n}\n\nexport interface GenerateOptions<T, S> extends GenerateBaseOptions<S> {\n  /**\n   * Result selection function that accepts state and returns a value to emit.\n   */\n  resultSelector: ResultFunc<S, T>;\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class GenerateObservable<T, S> extends Observable<T> {\n  constructor(private initialState: S,\n              private condition: ConditionFunc<S>,\n              private iterate: IterateFunc<S>,\n              private resultSelector: ResultFunc<S, T>,\n              private scheduler?: Scheduler) {\n      super();\n  }\n\n  /**\n   * Generates an observable sequence by running a state-driven loop\n   * producing the sequence's elements, using the specified scheduler\n   * to send out observer messages.\n   *\n   * <img src=\"./img/generate.png\" width=\"100%\">\n   *\n   * @example <caption>Produces sequence of 0, 1, 2, ... 9, then completes.</caption>\n   * var res = Rx.Observable.generate(0, x => x < 10, x => x + 1, x => x);\n   *\n   * @example <caption>Using asap scheduler, produces sequence of 2, 3, 5, then completes.</caption>\n   * var res = Rx.Observable.generate(1, x => x < 5, x => x * 2, x => x + 1, Rx.Scheduler.asap);\n   *\n   * @see {@link from}\n   * @see {@link create}\n   *\n   * @param {S} initialState Initial state.\n   * @param {function (state: S): boolean} condition Condition to terminate generation (upon returning false).\n   * @param {function (state: S): S} iterate Iteration step function.\n   * @param {function (state: S): T} resultSelector Selector function for results produced in the sequence.\n   * @param {Scheduler} [scheduler] A {@link Scheduler} on which to run the generator loop. If not provided, defaults to emit immediately.\n   * @returns {Observable<T>} The generated sequence.\n   */\n  static create<T, S>(initialState: S,\n                      condition: ConditionFunc<S>,\n                      iterate: IterateFunc<S>,\n                      resultSelector: ResultFunc<S, T>,\n                      scheduler?: Scheduler): Observable<T>\n\n  /**\n   * Generates an observable sequence by running a state-driven loop\n   * producing the sequence's elements, using the specified scheduler\n   * to send out observer messages.\n   * The overload uses state as an emitted value.\n   *\n   * <img src=\"./img/generate.png\" width=\"100%\">\n   *\n   * @example <caption>Produces sequence of 0, 1, 2, ... 9, then completes.</caption>\n   * var res = Rx.Observable.generate(0, x => x < 10, x => x + 1);\n   *\n   * @example <caption>Using asap scheduler, produces sequence of 1, 2, 4, then completes.</caption>\n   * var res = Rx.Observable.generate(1, x => x < 5, x => x * 2, Rx.Scheduler.asap);\n   *\n   * @see {@link from}\n   * @see {@link create}\n   *\n   * @param {S} initialState Initial state.\n   * @param {function (state: S): boolean} condition Condition to terminate generation (upon returning false).\n   * @param {function (state: S): S} iterate Iteration step function.\n   * @param {Scheduler} [scheduler] A {@link Scheduler} on which to run the generator loop. If not provided, defaults to emit immediately.\n   * @returns {Observable<S>} The generated sequence.\n   */\n  static create<S>(initialState: S,\n                   condition: ConditionFunc<S>,\n                   iterate: IterateFunc<S>,\n                   scheduler?: Scheduler): Observable<S>\n\n  /**\n   * Generates an observable sequence by running a state-driven loop\n   * producing the sequence's elements, using the specified scheduler\n   * to send out observer messages.\n   * The overload accepts options object that might contain inital state, iterate,\n   * condition and scheduler.\n   *\n   * <img src=\"./img/generate.png\" width=\"100%\">\n   *\n   * @example <caption>Produces sequence of 0, 1, 2, ... 9, then completes.</caption>\n   * var res = Rx.Observable.generate({\n   *   initialState: 0,\n   *   condition: x => x < 10,\n   *   iterate: x => x + 1\n   * });\n   *\n   * @see {@link from}\n   * @see {@link create}\n   *\n   * @param {GenerateBaseOptions<S>} options Object that must contain initialState, iterate and might contain condition and scheduler.\n   * @returns {Observable<S>} The generated sequence.\n   */\n  static create<S>(options: GenerateBaseOptions<S>): Observable<S>\n\n  /**\n   * Generates an observable sequence by running a state-driven loop\n   * producing the sequence's elements, using the specified scheduler\n   * to send out observer messages.\n   * The overload accepts options object that might contain inital state, iterate,\n   * condition, result selector and scheduler.\n   *\n   * <img src=\"./img/generate.png\" width=\"100%\">\n   *\n   * @example <caption>Produces sequence of 0, 1, 2, ... 9, then completes.</caption>\n   * var res = Rx.Observable.generate({\n   *   initialState: 0,\n   *   condition: x => x < 10,\n   *   iterate: x => x + 1,\n   *   resultSelector: x => x\n   * });\n   *\n   * @see {@link from}\n   * @see {@link create}\n   *\n   * @param {GenerateOptions<T, S>} options Object that must contain initialState, iterate, resultSelector and might contain condition and scheduler.\n   * @returns {Observable<T>} The generated sequence.\n   */\n  static create<T, S>(options: GenerateOptions<T, S>): Observable<T>\n\n  static create<T, S>(initialStateOrOptions: S | GenerateOptions<T, S>,\n                      condition?: ConditionFunc<S>,\n                      iterate?: IterateFunc<S>,\n                      resultSelectorOrObservable?: (ResultFunc<S, T>) | Scheduler,\n                      scheduler?: Scheduler): Observable<T> {\n    if (arguments.length == 1) {\n      return new GenerateObservable<T, S>(\n        (<GenerateOptions<T, S>>initialStateOrOptions).initialState,\n        (<GenerateOptions<T, S>>initialStateOrOptions).condition,\n        (<GenerateOptions<T, S>>initialStateOrOptions).iterate,\n        (<GenerateOptions<T, S>>initialStateOrOptions).resultSelector || selfSelector,\n        (<GenerateOptions<T, S>>initialStateOrOptions).scheduler);\n    }\n\n    if (resultSelectorOrObservable === undefined || isScheduler(resultSelectorOrObservable)) {\n      return new GenerateObservable<T, S>(\n        <S>initialStateOrOptions,\n        condition,\n        iterate,\n        selfSelector,\n        <Scheduler>resultSelectorOrObservable);\n    }\n\n    return new GenerateObservable<T, S>(\n      <S>initialStateOrOptions,\n      condition,\n      iterate,\n      <ResultFunc<S, T>>resultSelectorOrObservable,\n      <Scheduler>scheduler);\n  }\n\n  protected _subscribe(subscriber: Subscriber<any>): Subscription | Function | void {\n    let state = this.initialState;\n    if (this.scheduler) {\n      return this.scheduler.schedule<SchedulerState<T, S>>(GenerateObservable.dispatch, 0, {\n        subscriber,\n        iterate: this.iterate,\n        condition: this.condition,\n        resultSelector: this.resultSelector,\n        state });\n    }\n    const { condition, resultSelector, iterate } = this;\n    do {\n      if (condition) {\n        let conditionResult: boolean;\n        try {\n          conditionResult = condition(state);\n        } catch (err) {\n          subscriber.error(err);\n          return;\n        }\n        if (!conditionResult) {\n          subscriber.complete();\n          break;\n        }\n      }\n      let value: T;\n      try {\n        value = resultSelector(state);\n      } catch (err) {\n        subscriber.error(err);\n        return;\n      }\n      subscriber.next(value);\n      if (subscriber.closed) {\n        break;\n      }\n      try {\n        state = iterate(state);\n      } catch (err) {\n        subscriber.error(err);\n        return;\n      }\n    } while (true);\n  }\n\n  private static dispatch<T, S>(state: SchedulerState<T, S>): Subscription | void {\n    const { subscriber, condition } = state;\n    if (subscriber.closed) {\n      return;\n    }\n    if (state.needIterate) {\n      try {\n        state.state = state.iterate(state.state);\n      } catch (err) {\n        subscriber.error(err);\n        return;\n      }\n    } else {\n      state.needIterate = true;\n    }\n    if (condition) {\n      let conditionResult: boolean;\n      try {\n        conditionResult = condition(state.state);\n      } catch (err) {\n        subscriber.error(err);\n        return;\n      }\n      if (!conditionResult) {\n        subscriber.complete();\n        return;\n      }\n      if (subscriber.closed) {\n        return;\n      }\n    }\n    let value: T;\n    try {\n      value = state.resultSelector(state.state);\n    } catch (err) {\n      subscriber.error(err);\n      return;\n    }\n    if (subscriber.closed) {\n      return;\n    }\n    subscriber.next(value);\n    if (subscriber.closed) {\n      return;\n    }\n    return (<Action<SchedulerState<T, S>>><any>this).schedule(state);\n  }\n}\n","import { Observable } from '../../Observable';\nimport { GenerateObservable } from '../../observable/GenerateObservable';\n\nObservable.generate = GenerateObservable.create;\n\ndeclare module '../../Observable' {\n  namespace Observable {\n    export let generate: typeof GenerateObservable.create;\n  }\n}","import { Observable, SubscribableOrPromise } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { TeardownLogic } from '../Subscription';\n\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OuterSubscriber } from '../OuterSubscriber';\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class IfObservable<T, R> extends Observable<T> {\n\n  static create<T, R>(condition: () => boolean | void,\n                      thenSource?: SubscribableOrPromise<T> | void,\n                      elseSource?: SubscribableOrPromise<R> | void): Observable<T|R> {\n    return new IfObservable(condition, thenSource, elseSource);\n  }\n\n  constructor(private condition: () => boolean | void,\n              private thenSource?: SubscribableOrPromise<T> | void,\n              private elseSource?: SubscribableOrPromise<R> | void) {\n    super();\n  }\n\n  protected _subscribe(subscriber: Subscriber<T|R>): TeardownLogic {\n    const { condition, thenSource, elseSource } = this;\n\n    return new IfSubscriber(subscriber, condition, thenSource, elseSource);\n  }\n}\n\nclass IfSubscriber<T, R> extends OuterSubscriber<T, T> {\n  constructor(destination: Subscriber<T>,\n              private condition: () => boolean | void,\n              private thenSource?: SubscribableOrPromise<T> | void,\n              private elseSource?: SubscribableOrPromise<R> | void) {\n    super(destination);\n    this.tryIf();\n  }\n\n  private tryIf(): void {\n    const { condition, thenSource, elseSource } = this;\n\n    let result: boolean;\n    try {\n      result = <boolean>condition();\n      const source = result ? thenSource : elseSource;\n\n      if (source) {\n        this.add(subscribeToResult(this, source));\n      } else {\n        this._complete();\n      }\n    } catch (err) {\n      this._error(err);\n    }\n  }\n}\n","import {  IfObservable  } from './IfObservable';\n\nexport const _if = IfObservable.create;","import { Observable } from '../../Observable';\nimport { _if } from '../../observable/if';\n\nObservable.if = _if;","import { Subscriber } from '../Subscriber';\nimport { isNumeric } from '../util/isNumeric';\nimport { Scheduler } from '../Scheduler';\nimport { Observable } from '../Observable';\nimport { async } from '../scheduler/async';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class IntervalObservable extends Observable<number> {\n  /**\n   * Creates an Observable that emits sequential numbers every specified\n   * interval of time, on a specified Scheduler.\n   *\n   * <span class=\"informal\">Emits incremental numbers periodically in time.\n   * </span>\n   *\n   * <img src=\"./img/interval.png\" width=\"100%\">\n   *\n   * `interval` returns an Observable that emits an infinite sequence of\n   * ascending integers, with a constant interval of time of your choosing\n   * between those emissions. The first emission is not sent immediately, but\n   * only after the first period has passed. By default, this operator uses the\n   * `async` Scheduler to provide a notion of time, but you may pass any\n   * Scheduler to it.\n   *\n   * @example <caption>Emits ascending numbers, one every second (1000ms)</caption>\n   * var numbers = Rx.Observable.interval(1000);\n   * numbers.subscribe(x => console.log(x));\n   *\n   * @see {@link timer}\n   * @see {@link delay}\n   *\n   * @param {number} [period=0] The interval size in milliseconds (by default)\n   * or the time unit determined by the scheduler's clock.\n   * @param {Scheduler} [scheduler=async] The Scheduler to use for scheduling\n   * the emission of values, and providing a notion of \"time\".\n   * @return {Observable} An Observable that emits a sequential number each time\n   * interval.\n   * @static true\n   * @name interval\n   * @owner Observable\n   */\n  static create(period: number = 0,\n                scheduler: Scheduler = async): Observable<number> {\n    return new IntervalObservable(period, scheduler);\n  }\n\n  static dispatch(state: any): void {\n    const { index, subscriber, period } = state;\n\n    subscriber.next(index);\n\n    if (subscriber.closed) {\n      return;\n    }\n\n    state.index += 1;\n\n    (<any> this).schedule(state, period);\n  }\n\n  constructor(private period: number = 0,\n              private scheduler: Scheduler = async) {\n    super();\n    if (!isNumeric(period) || period < 0) {\n      this.period = 0;\n    }\n    if (!scheduler || typeof scheduler.schedule !== 'function') {\n      this.scheduler = async;\n    }\n  }\n\n  protected _subscribe(subscriber: Subscriber<number>) {\n    const index = 0;\n    const period = this.period;\n    const scheduler = this.scheduler;\n\n    subscriber.add(scheduler.schedule(IntervalObservable.dispatch, period, {\n      index, subscriber, period\n    }));\n  }\n}\n","import {  IntervalObservable  } from './IntervalObservable';\n\nexport const interval = IntervalObservable.create;","import { Observable } from '../../Observable';\nimport { interval as staticInterval } from '../../observable/interval';\n\nObservable.interval = staticInterval;\n\ndeclare module '../../Observable' {\n  namespace Observable {\n    export let interval: typeof staticInterval;\n  }\n}","import {  mergeStatic  } from '../operator/merge';\n\nexport const merge = mergeStatic;","import { Observable } from '../../Observable';\nimport { merge as mergeStatic } from '../../observable/merge';\n\nObservable.merge = mergeStatic;\n\ndeclare module '../../Observable' {\n  namespace Observable {\n    export let merge: typeof mergeStatic;\n  }\n}","import { Observable } from '../../Observable';\nimport { raceStatic } from '../../operator/race';\n\nObservable.race = raceStatic;\n\ndeclare module '../../Observable' {\n  namespace Observable {\n    export let race: typeof raceStatic;\n  }\n}","import { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { noop } from '../util/noop';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class NeverObservable<T> extends Observable<T> {\n  /**\n   * Creates an Observable that emits no items to the Observer.\n   *\n   * <span class=\"informal\">An Observable that never emits anything.</span>\n   *\n   * <img src=\"./img/never.png\" width=\"100%\">\n   *\n   * This static operator is useful for creating a simple Observable that emits\n   * neither values nor errors nor the completion notification. It can be used\n   * for testing purposes or for composing with other Observables. Please not\n   * that by never emitting a complete notification, this Observable keeps the\n   * subscription from being disposed automatically. Subscriptions need to be\n   * manually disposed.\n   *\n   * @example <caption>Emit the number 7, then never emit anything else (not even complete).</caption>\n   * function info() {\n   *   console.log('Will not be called');\n   * }\n   * var result = Rx.Observable.never().startWith(7);\n   * result.subscribe(x => console.log(x), info, info);\n   *\n   * @see {@link create}\n   * @see {@link empty}\n   * @see {@link of}\n   * @see {@link throw}\n   *\n   * @return {Observable} A \"never\" Observable: never emits anything.\n   * @static true\n   * @name never\n   * @owner Observable\n   */\n  static create<T>() {\n    return new NeverObservable<T>();\n  }\n\n  constructor() {\n    super();\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>): void {\n    noop();\n  }\n}\n","import {  NeverObservable  } from './NeverObservable';\n\nexport const never = NeverObservable.create;","import { Observable } from '../../Observable';\nimport { never as staticNever } from '../../observable/never';\n\nObservable.never = staticNever;\n\ndeclare module '../../Observable' {\n  namespace Observable {\n    export let never: typeof staticNever;\n  }\n}","import {  ArrayObservable  } from './ArrayObservable';\n\nexport const of = ArrayObservable.of;","import { Observable } from '../../Observable';\nimport { of as staticOf } from '../../observable/of';\n\nObservable.of = staticOf;\n\ndeclare module '../../Observable' {\n  namespace Observable {\n    export let of: typeof staticOf; //formOf an iceberg!\n  }\n}","import { Observable } from '../../Observable';\r\nimport { onErrorResumeNextStatic } from '../../operator/onErrorResumeNext';\r\n\r\nObservable.onErrorResumeNext = onErrorResumeNextStatic;\r\n\r\ndeclare module '../../Observable' {\r\n  namespace Observable {\r\n    export let onErrorResumeNext: typeof onErrorResumeNextStatic;\r\n  }\r\n}","import { Scheduler } from '../Scheduler';\r\nimport { Observable } from '../Observable';\r\nimport { Subscriber } from '../Subscriber';\r\nimport { TeardownLogic } from '../Subscription';\r\n\r\ninterface PairsContext<T> {\r\n  obj: Object;\r\n  keys: Array<string>;\r\n  length: number;\r\n  index: number;\r\n  subscriber: Subscriber<Array<string | T>>;\r\n}\r\n\r\nfunction dispatch<T>(state: PairsContext<T>) {\r\n  const {obj, keys, length, index, subscriber} = state;\r\n\r\n  if (index === length) {\r\n    subscriber.complete();\r\n    return;\r\n  }\r\n\r\n  const key = keys[index];\r\n  subscriber.next([key, obj[key]]);\r\n\r\n  state.index = index + 1;\r\n\r\n  (<any> this).schedule(state);\r\n}\r\n\r\n/**\r\n * We need this JSDoc comment for affecting ESDoc.\r\n * @extends {Ignored}\r\n * @hide true\r\n */\r\nexport class PairsObservable<T> extends Observable<Array<string | T>> {\r\n  private keys: Array<string>;\r\n\r\n  /**\r\n   * Convert an object into an observable sequence of [key, value] pairs\r\n   * using an optional Scheduler to enumerate the object.\r\n   *\r\n   * @example <caption>Converts a javascript object to an Observable</caption>\r\n   * var obj = {\r\n   *   foo: 42,\r\n   *   bar: 56,\r\n   *   baz: 78\r\n   * };\r\n   *\r\n   * var source = Rx.Observable.pairs(obj);\r\n   *\r\n   * var subscription = source.subscribe(\r\n   *   function (x) {\r\n   *     console.log('Next: %s', x);\r\n   *   },\r\n   *   function (err) {\r\n   *     console.log('Error: %s', err);\r\n   *   },\r\n   *   function () {\r\n   *     console.log('Completed');\r\n   *   });\r\n   *\r\n   * @param {Object} obj The object to inspect and turn into an\r\n   * Observable sequence.\r\n   * @param {Scheduler} [scheduler] An optional Scheduler to run the\r\n   * enumeration of the input sequence on.\r\n   * @returns {(Observable<Array<string | T>>)} An observable sequence of\r\n   * [key, value] pairs from the object.\r\n   */\r\n  static create<T>(obj: Object, scheduler?: Scheduler): Observable<Array<string | T>> {\r\n    return new PairsObservable<T>(obj, scheduler);\r\n  }\r\n\r\n  constructor(private obj: Object, private scheduler?: Scheduler) {\r\n    super();\r\n    this.keys = Object.keys(obj);\r\n  }\r\n\r\n  protected _subscribe(subscriber: Subscriber<Array<string | T>>): TeardownLogic {\r\n    const {keys, scheduler} = this;\r\n    const length = keys.length;\r\n\r\n    if (scheduler) {\r\n      return scheduler.schedule(dispatch, 0, {\r\n        obj: this.obj, keys, length, index: 0, subscriber\r\n      });\r\n    } else {\r\n      for (let idx = 0; idx < length; idx++) {\r\n        const key = keys[idx];\r\n        subscriber.next([key, this.obj[key]]);\r\n      }\r\n      subscriber.complete();\r\n    }\r\n  }\r\n}","import {  PairsObservable  } from './PairsObservable';\r\n\r\nexport const pairs = PairsObservable.create;","import { Observable } from '../../Observable';\r\nimport { pairs as staticPairs } from '../../observable/pairs';\r\n\r\nObservable.pairs = staticPairs;\r\n\r\ndeclare module '../../Observable' {\r\n  namespace Observable {\r\n    export let pairs: typeof staticPairs;\r\n  }\r\n}","import { Scheduler } from '../Scheduler';\nimport { Observable } from '../Observable';\nimport { TeardownLogic } from '../Subscription';\nimport { Subscriber } from '../Subscriber';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class RangeObservable extends Observable<number> {\n\n  /**\n   * Creates an Observable that emits a sequence of numbers within a specified\n   * range.\n   *\n   * <span class=\"informal\">Emits a sequence of numbers in a range.</span>\n   *\n   * <img src=\"./img/range.png\" width=\"100%\">\n   *\n   * `range` operator emits a range of sequential integers, in order, where you\n   * select the `start` of the range and its `length`. By default, uses no\n   * Scheduler and just delivers the notifications synchronously, but may use\n   * an optional Scheduler to regulate those deliveries.\n   *\n   * @example <caption>Emits the numbers 1 to 10</caption>\n   * var numbers = Rx.Observable.range(1, 10);\n   * numbers.subscribe(x => console.log(x));\n   *\n   * @see {@link timer}\n   * @see {@link interval}\n   *\n   * @param {number} [start=0] The value of the first integer in the sequence.\n   * @param {number} [count=0] The number of sequential integers to generate.\n   * @param {Scheduler} [scheduler] A {@link Scheduler} to use for scheduling\n   * the emissions of the notifications.\n   * @return {Observable} An Observable of numbers that emits a finite range of\n   * sequential integers.\n   * @static true\n   * @name range\n   * @owner Observable\n   */\n  static create(start: number = 0,\n                count: number = 0,\n                scheduler?: Scheduler): Observable<number> {\n    return new RangeObservable(start, count, scheduler);\n  }\n\n  static dispatch(state: any) {\n\n    const { start, index, count, subscriber } = state;\n\n    if (index >= count) {\n      subscriber.complete();\n      return;\n    }\n\n    subscriber.next(start);\n\n    if (subscriber.closed) {\n      return;\n    }\n\n    state.index = index + 1;\n    state.start = start + 1;\n\n    (<any> this).schedule(state);\n  }\n\n  private start: number;\n  private _count: number;\n  private scheduler: Scheduler;\n\n  constructor(start: number,\n              count: number,\n              scheduler?: Scheduler) {\n    super();\n    this.start = start;\n    this._count = count;\n    this.scheduler = scheduler;\n  }\n\n  protected _subscribe(subscriber: Subscriber<number>): TeardownLogic {\n    let index = 0;\n    let start = this.start;\n    const count = this._count;\n    const scheduler = this.scheduler;\n\n    if (scheduler) {\n      return scheduler.schedule(RangeObservable.dispatch, 0, {\n        index, count, start, subscriber\n      });\n    } else {\n      do {\n        if (index++ >= count) {\n          subscriber.complete();\n          break;\n        }\n        subscriber.next(start++);\n        if (subscriber.closed) {\n          break;\n        }\n      } while (true);\n    }\n  }\n}\n","import {  RangeObservable  } from './RangeObservable';\n\nexport const range = RangeObservable.create;","import { Observable } from '../../Observable';\nimport { range as staticRange } from '../../observable/range';\n\nObservable.range = staticRange;\n\ndeclare module '../../Observable' {\n  namespace Observable {\n    export let range: typeof staticRange;\n  }\n}","import { Observable, SubscribableOrPromise } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { AnonymousSubscription, TeardownLogic } from '../Subscription';\n\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OuterSubscriber } from '../OuterSubscriber';\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class UsingObservable<T> extends Observable<T> {\n\n  static create<T>(resourceFactory: () => AnonymousSubscription | void,\n                   observableFactory: (resource: AnonymousSubscription) => SubscribableOrPromise<T> | void): Observable<T> {\n    return new UsingObservable<T>(resourceFactory, observableFactory);\n  }\n\n  constructor(private resourceFactory: () => AnonymousSubscription | void,\n              private observableFactory: (resource: AnonymousSubscription) => SubscribableOrPromise<T> | void) {\n    super();\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>): TeardownLogic {\n    const { resourceFactory, observableFactory } = this;\n\n    let resource: AnonymousSubscription;\n\n    try {\n      resource = <AnonymousSubscription>resourceFactory();\n      return new UsingSubscriber(subscriber, resource, observableFactory);\n    } catch (err) {\n      subscriber.error(err);\n    }\n  }\n}\n\nclass UsingSubscriber<T> extends OuterSubscriber<T, T> {\n  constructor(destination: Subscriber<T>,\n              private resource: AnonymousSubscription,\n              private observableFactory: (resource: AnonymousSubscription) => SubscribableOrPromise<T> | void) {\n    super(destination);\n    destination.add(resource);\n    this.tryUse();\n  }\n\n  private tryUse(): void {\n    try {\n      const source = this.observableFactory.call(this, this.resource);\n      if (source) {\n        this.add(subscribeToResult(this, source));\n      }\n    } catch (err) {\n      this._error(err);\n    }\n  }\n}","import {  UsingObservable  } from './UsingObservable';\n\nexport const using = UsingObservable.create;","import { Observable } from '../../Observable';\nimport { using as staticUsing } from '../../observable/using';\n\nObservable.using = staticUsing;\n\ndeclare module '../../Observable' {\n  namespace Observable {\n    export let using: typeof staticUsing;\n  }\n}","import { Scheduler } from '../Scheduler';\nimport { Observable } from '../Observable';\nimport { TeardownLogic } from '../Subscription';\n\nexport interface DispatchArg {\n  error: any;\n  subscriber: any;\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class ErrorObservable extends Observable<any> {\n\n  /**\n   * Creates an Observable that emits no items to the Observer and immediately\n   * emits an error notification.\n   *\n   * <span class=\"informal\">Just emits 'error', and nothing else.\n   * </span>\n   *\n   * <img src=\"./img/throw.png\" width=\"100%\">\n   *\n   * This static operator is useful for creating a simple Observable that only\n   * emits the error notification. It can be used for composing with other\n   * Observables, such as in a {@link mergeMap}.\n   *\n   * @example <caption>Emit the number 7, then emit an error.</caption>\n   * var result = Rx.Observable.throw(new Error('oops!')).startWith(7);\n   * result.subscribe(x => console.log(x), e => console.error(e));\n   *\n   * @example <caption>Map and flattens numbers to the sequence 'a', 'b', 'c', but throw an error for 13</caption>\n   * var interval = Rx.Observable.interval(1000);\n   * var result = interval.mergeMap(x =>\n   *   x === 13 ?\n   *     Rx.Observable.throw('Thirteens are bad') :\n   *     Rx.Observable.of('a', 'b', 'c')\n   * );\n   * result.subscribe(x => console.log(x), e => console.error(e));\n   *\n   * @see {@link create}\n   * @see {@link empty}\n   * @see {@link never}\n   * @see {@link of}\n   *\n   * @param {any} error The particular Error to pass to the error notification.\n   * @param {Scheduler} [scheduler] A {@link Scheduler} to use for scheduling\n   * the emission of the error notification.\n   * @return {Observable} An error Observable: emits only the error notification\n   * using the given error argument.\n   * @static true\n   * @name throw\n   * @owner Observable\n   */\n  static create<T>(error: any, scheduler?: Scheduler) {\n    return new ErrorObservable(error, scheduler);\n  }\n\n  static dispatch(arg: DispatchArg) {\n    const { error, subscriber } = arg;\n    subscriber.error(error);\n  }\n\n  constructor(public error: any, private scheduler?: Scheduler) {\n    super();\n  }\n\n  protected _subscribe(subscriber: any): TeardownLogic {\n    const error = this.error;\n    const scheduler = this.scheduler;\n\n    if (scheduler) {\n      return scheduler.schedule(ErrorObservable.dispatch, 0, {\n        error, subscriber\n      });\n    } else {\n      subscriber.error(error);\n    }\n  }\n}\n","import {  ErrorObservable  } from './ErrorObservable';\n\nexport const _throw = ErrorObservable.create;","import { Observable } from '../../Observable';\nimport { _throw } from '../../observable/throw';\n\nObservable.throw = _throw;","import { isNumeric } from '../util/isNumeric';\nimport { Scheduler } from '../Scheduler';\nimport { Observable } from '../Observable';\nimport { async } from '../scheduler/async';\nimport { isScheduler } from '../util/isScheduler';\nimport { isDate } from '../util/isDate';\nimport { TeardownLogic } from '../Subscription';\nimport { Subscriber } from '../Subscriber';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class TimerObservable extends Observable<number> {\n\n  /**\n   * Creates an Observable that starts emitting after an `initialDelay` and\n   * emits ever increasing numbers after each `period` of time thereafter.\n   *\n   * <span class=\"informal\">Its like {@link interval}, but you can specify when\n   * should the emissions start.</span>\n   *\n   * <img src=\"./img/timer.png\" width=\"100%\">\n   *\n   * `timer` returns an Observable that emits an infinite sequence of ascending\n   * integers, with a constant interval of time, `period` of your choosing\n   * between those emissions. The first emission happens after the specified\n   * `initialDelay`. The initial delay may be a {@link Date}. By default, this\n   * operator uses the `async` Scheduler to provide a notion of time, but you\n   * may pass any Scheduler to it. If `period` is not specified, the output\n   * Observable emits only one value, `0`. Otherwise, it emits an infinite\n   * sequence.\n   *\n   * @example <caption>Emits ascending numbers, one every second (1000ms), starting after 3 seconds</caption>\n   * var numbers = Rx.Observable.timer(3000, 1000);\n   * numbers.subscribe(x => console.log(x));\n   *\n   * @example <caption>Emits one number after five seconds</caption>\n   * var numbers = Rx.Observable.timer(5000);\n   * numbers.subscribe(x => console.log(x));\n   *\n   * @see {@link interval}\n   * @see {@link delay}\n   *\n   * @param {number|Date} initialDelay The initial delay time to wait before\n   * emitting the first value of `0`.\n   * @param {number} [period] The period of time between emissions of the\n   * subsequent numbers.\n   * @param {Scheduler} [scheduler=async] The Scheduler to use for scheduling\n   * the emission of values, and providing a notion of \"time\".\n   * @return {Observable} An Observable that emits a `0` after the\n   * `initialDelay` and ever increasing numbers after each `period` of time\n   * thereafter.\n   * @static true\n   * @name timer\n   * @owner Observable\n   */\n  static create(initialDelay: number | Date = 0,\n                period?: number | Scheduler,\n                scheduler?: Scheduler): Observable<number> {\n    return new TimerObservable(initialDelay, period, scheduler);\n  }\n\n  static dispatch(state: any) {\n\n    const { index, period, subscriber } = state;\n    const action = (<any> this);\n\n    subscriber.next(index);\n\n    if (subscriber.closed) {\n      return;\n    } else if (period === -1) {\n      return subscriber.complete();\n    }\n\n    state.index = index + 1;\n    action.schedule(state, period);\n  }\n\n  private period: number = -1;\n  private dueTime: number = 0;\n  private scheduler: Scheduler;\n\n  constructor(dueTime: number | Date = 0,\n              period?: number | Scheduler,\n              scheduler?: Scheduler) {\n    super();\n\n    if (isNumeric(period)) {\n      this.period = Number(period) < 1 && 1 || Number(period);\n    } else if (isScheduler(period)) {\n      scheduler = <Scheduler> period;\n    }\n\n    if (!isScheduler(scheduler)) {\n      scheduler = async;\n    }\n\n    this.scheduler = scheduler;\n    this.dueTime = isDate(dueTime) ?\n      (+dueTime - this.scheduler.now()) :\n      (<number> dueTime);\n  }\n\n  protected _subscribe(subscriber: Subscriber<number>): TeardownLogic {\n    const index = 0;\n    const { period, dueTime, scheduler } = this;\n\n    return scheduler.schedule(TimerObservable.dispatch, dueTime, {\n      index, period, subscriber\n    });\n  }\n}\n","import {  TimerObservable  } from './TimerObservable';\n\nexport const timer = TimerObservable.create;","import { Observable } from '../../Observable';\nimport { timer as staticTimer } from '../../observable/timer';\n\nObservable.timer = staticTimer;\n\ndeclare module '../../Observable' {\n  namespace Observable {\n    export let timer: typeof staticTimer;\n  }\n}","import {  zipStatic  } from '../operator/zip';\n\nexport const zip = zipStatic;","import { Observable } from '../../Observable';\nimport { zip as zipStatic } from '../../observable/zip';\n\nObservable.zip = zipStatic;\n\ndeclare module '../../Observable' {\n  namespace Observable {\n    export let zip: typeof zipStatic;\n  }\n}","import {  AjaxObservable, AjaxCreationMethod  } from './AjaxObservable';\n\nexport const ajax: AjaxCreationMethod = AjaxObservable.create;","import { Observable } from '../../../Observable';\nimport { ajax as staticAjax } from '../../../observable/dom/ajax';\nimport { AjaxCreationMethod } from '../../../observable/dom/AjaxObservable';\n\nObservable.ajax = staticAjax;\n\ndeclare module '../../../Observable' {\n  namespace Observable {\n    export let ajax: AjaxCreationMethod;\n  }\n}","import { root } from './root';\n\nconst Object = root.Object;\n\nif (typeof (<any>Object).assign != 'function') {\n  (function () {\n    (<any>Object).assign = function assignPolyfill(target: Object, ...sources: Array<Object>): Object {\n      if (target === undefined || target === null) {\n        throw new TypeError('cannot convert undefined or null to object');\n      }\n\n      const output = Object(target);\n      const len = sources.length;\n      for (let index = 0; index < len; index++) {\n        let source = sources[index];\n        if (source !== undefined && source !== null) {\n          for (let key in source) {\n            if (source.hasOwnProperty(key)) {\n              output[key] = source[key];\n            }\n          }\n        }\n      }\n\n      return output;\n    };\n  })();\n}\n\nexport const assign: (target: Object, ...sources: Array<Object>) => Object = Object.assign;","import { Subject, AnonymousSubject } from '../../Subject';\nimport { Subscriber } from '../../Subscriber';\nimport { Observable } from '../../Observable';\nimport { Subscription } from '../../Subscription';\nimport { Operator } from '../../Operator';\nimport { root } from '../../util/root';\nimport { ReplaySubject } from '../../ReplaySubject';\nimport { Observer, NextObserver } from '../../Observer';\nimport { tryCatch } from '../../util/tryCatch';\nimport { errorObject } from '../../util/errorObject';\nimport { assign } from '../../util/assign';\n\nexport interface WebSocketSubjectConfig {\n  url: string;\n  protocol?: string | Array<string>;\n  resultSelector?: <T>(e: MessageEvent) => T;\n  openObserver?: NextObserver<Event>;\n  closeObserver?: NextObserver<CloseEvent>;\n  closingObserver?: NextObserver<void>;\n  WebSocketCtor?: { new(url: string, protocol?: string|Array<string>): WebSocket };\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class WebSocketSubject<T> extends AnonymousSubject<T> {\n\n  url: string;\n  protocol: string|Array<string>;\n  socket: WebSocket;\n  openObserver: NextObserver<Event>;\n  closeObserver: NextObserver<CloseEvent>;\n  closingObserver: NextObserver<void>;\n  WebSocketCtor: { new(url: string, protocol?: string|Array<string>): WebSocket };\n\n  private _output: Subject<T>;\n\n  resultSelector(e: MessageEvent) {\n    return JSON.parse(e.data);\n  }\n\n  /**\n   * @param urlConfigOrSource\n   * @return {WebSocketSubject}\n   * @static true\n   * @name webSocket\n   * @owner Observable\n   */\n  static create<T>(urlConfigOrSource: string | WebSocketSubjectConfig): WebSocketSubject<T> {\n    return new WebSocketSubject<T>(urlConfigOrSource);\n  }\n\n  constructor(urlConfigOrSource: string | WebSocketSubjectConfig | Observable<T>, destination?: Observer<T>) {\n    if (urlConfigOrSource instanceof Observable) {\n      super(destination, <Observable<T>> urlConfigOrSource);\n    } else {\n      super();\n      this.WebSocketCtor = root.WebSocket;\n      this._output = new Subject<T>();\n      if (typeof urlConfigOrSource === 'string') {\n        this.url = urlConfigOrSource;\n      } else {\n        // WARNING: config object could override important members here.\n        assign(this, urlConfigOrSource);\n      }\n      if (!this.WebSocketCtor) {\n        throw new Error('no WebSocket constructor can be found');\n      }\n      this.destination = new ReplaySubject();\n    }\n  }\n\n  lift<R>(operator: Operator<T, R>): WebSocketSubject<R> {\n    const sock = new WebSocketSubject<R>(this, <any> this.destination);\n    sock.operator = operator;\n    return sock;\n  }\n\n  // TODO: factor this out to be a proper Operator/Subscriber implementation and eliminate closures\n  multiplex(subMsg: () => any, unsubMsg: () => any, messageFilter: (value: T) => boolean) {\n    const self = this;\n    return new Observable((observer: Observer<any>) => {\n      const result = tryCatch(subMsg)();\n      if (result === errorObject) {\n        observer.error(errorObject.e);\n      } else {\n        self.next(result);\n      }\n\n      let subscription = self.subscribe(x => {\n        const result = tryCatch(messageFilter)(x);\n        if (result === errorObject) {\n          observer.error(errorObject.e);\n        } else if (result) {\n          observer.next(x);\n        }\n      },\n        err => observer.error(err),\n        () => observer.complete());\n\n      return () => {\n        const result = tryCatch(unsubMsg)();\n        if (result === errorObject) {\n          observer.error(errorObject.e);\n        } else {\n          self.next(result);\n        }\n        subscription.unsubscribe();\n      };\n    });\n  }\n\n  private _connectSocket() {\n    const { WebSocketCtor } = this;\n    const observer = this._output;\n\n    let socket: WebSocket = null;\n    try {\n      socket = this.protocol ?\n        new WebSocketCtor(this.url, this.protocol) :\n        new WebSocketCtor(this.url);\n      this.socket = socket;\n    } catch (e) {\n      observer.error(e);\n      return;\n    }\n\n    const subscription = new Subscription(() => {\n      this.socket = null;\n      if (socket && socket.readyState === 1) {\n        socket.close();\n      }\n    });\n\n    socket.onopen = (e: Event) => {\n      const openObserver = this.openObserver;\n      if (openObserver) {\n        openObserver.next(e);\n      }\n\n      const queue = this.destination;\n\n      this.destination = Subscriber.create(\n        (x) => socket.readyState === 1 && socket.send(x),\n        (e) => {\n          const closingObserver = this.closingObserver;\n          if (closingObserver) {\n            closingObserver.next(undefined);\n          }\n          if (e && e.code) {\n            socket.close(e.code, e.reason);\n          } else {\n            observer.error(new TypeError('WebSocketSubject.error must be called with an object with an error code, ' +\n              'and an optional reason: { code: number, reason: string }'));\n          }\n          this.destination = new ReplaySubject();\n          this.socket = null;\n        },\n        ( ) => {\n          const closingObserver = this.closingObserver;\n          if (closingObserver) {\n            closingObserver.next(undefined);\n          }\n          socket.close();\n          this.destination = new ReplaySubject();\n          this.socket = null;\n        }\n      );\n\n      if (queue && queue instanceof ReplaySubject) {\n        subscription.add((<ReplaySubject<T>>queue).subscribe(this.destination));\n      }\n    };\n\n    socket.onerror = (e: Event) => observer.error(e);\n\n    socket.onclose = (e: CloseEvent) => {\n      const closeObserver = this.closeObserver;\n      if (closeObserver) {\n        closeObserver.next(e);\n      }\n      if (e.wasClean) {\n        observer.complete();\n      } else {\n        observer.error(e);\n      }\n    };\n\n    socket.onmessage = (e: MessageEvent) => {\n      const result = tryCatch(this.resultSelector)(e);\n      if (result === errorObject) {\n        observer.error(errorObject.e);\n      } else {\n        observer.next(result);\n      }\n    };\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>): Subscription {\n    const { source } = this;\n    if (source) {\n      return source.subscribe(subscriber);\n    }\n    if (!this.socket) {\n      this._connectSocket();\n    }\n    let subscription = new Subscription();\n    subscription.add(this._output.subscribe(subscriber));\n    subscription.add(() => {\n      const { socket } = this;\n      if (this._output.observers.length === 0 && socket && socket.readyState === 1) {\n        socket.close();\n        this.socket = null;\n      }\n    });\n    return subscription;\n  }\n\n  unsubscribe() {\n    const { source, socket } = this;\n    if (socket && socket.readyState === 1) {\n      socket.close();\n      this.socket = null;\n    }\n    super.unsubscribe();\n    if (!source) {\n      this.destination = new ReplaySubject();\n    }\n  }\n}\n","import {  WebSocketSubject  } from './WebSocketSubject';\n\nexport const webSocket = WebSocketSubject.create;","import { Observable } from '../../../Observable';\nimport { webSocket as staticWebSocket } from '../../../observable/dom/webSocket';\n\nObservable.webSocket = staticWebSocket;\n\ndeclare module '../../../Observable' {\n  namespace Observable {\n    export let webSocket: typeof staticWebSocket;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\n\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n\n/**\n * Buffers the source Observable values until `closingNotifier` emits.\n *\n * <span class=\"informal\">Collects values from the past as an array, and emits\n * that array only when another Observable emits.</span>\n *\n * <img src=\"./img/buffer.png\" width=\"100%\">\n *\n * Buffers the incoming Observable values until the given `closingNotifier`\n * Observable emits a value, at which point it emits the buffer on the output\n * Observable and starts a new buffer internally, awaiting the next time\n * `closingNotifier` emits.\n *\n * @example <caption>On every click, emit array of most recent interval events</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var interval = Rx.Observable.interval(1000);\n * var buffered = interval.buffer(clicks);\n * buffered.subscribe(x => console.log(x));\n *\n * @see {@link bufferCount}\n * @see {@link bufferTime}\n * @see {@link bufferToggle}\n * @see {@link bufferWhen}\n * @see {@link window}\n *\n * @param {Observable<any>} closingNotifier An Observable that signals the\n * buffer to be emitted on the output Observable.\n * @return {Observable<T[]>} An Observable of buffers, which are arrays of\n * values.\n * @method buffer\n * @owner Observable\n */\nexport function buffer<T>(closingNotifier: Observable<any>): Observable<T[]> {\n  return this.lift(new BufferOperator<T>(closingNotifier));\n}\n\nexport interface BufferSignature<T> {\n  (closingNotifier: Observable<any>): Observable<T[]>;\n}\n\nclass BufferOperator<T> implements Operator<T, T[]> {\n\n  constructor(private closingNotifier: Observable<any>) {\n  }\n\n  call(subscriber: Subscriber<T[]>, source: any): any {\n    return source._subscribe(new BufferSubscriber(subscriber, this.closingNotifier));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass BufferSubscriber<T> extends OuterSubscriber<T, any> {\n  private buffer: T[] = [];\n\n  constructor(destination: Subscriber<T[]>, closingNotifier: Observable<any>) {\n    super(destination);\n    this.add(subscribeToResult(this, closingNotifier));\n  }\n\n  protected _next(value: T) {\n    this.buffer.push(value);\n  }\n\n  notifyNext(outerValue: T, innerValue: any,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, any>): void {\n    const buffer = this.buffer;\n    this.buffer = [];\n    this.destination.next(buffer);\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { buffer, BufferSignature } from '../../operator/buffer';\n\nObservable.prototype.buffer = buffer;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    buffer: BufferSignature<T>;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\n\n/**\n * Buffers the source Observable values until the size hits the maximum\n * `bufferSize` given.\n *\n * <span class=\"informal\">Collects values from the past as an array, and emits\n * that array only when its size reaches `bufferSize`.</span>\n *\n * <img src=\"./img/bufferCount.png\" width=\"100%\">\n *\n * Buffers a number of values from the source Observable by `bufferSize` then\n * emits the buffer and clears it, and starts a new buffer each\n * `startBufferEvery` values. If `startBufferEvery` is not provided or is\n * `null`, then new buffers are started immediately at the start of the source\n * and when each buffer closes and is emitted.\n *\n * @example <caption>Emit the last two click events as an array</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var buffered = clicks.bufferCount(2);\n * buffered.subscribe(x => console.log(x));\n *\n * @example <caption>On every click, emit the last two click events as an array</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var buffered = clicks.bufferCount(2, 1);\n * buffered.subscribe(x => console.log(x));\n *\n * @see {@link buffer}\n * @see {@link bufferTime}\n * @see {@link bufferToggle}\n * @see {@link bufferWhen}\n * @see {@link pairwise}\n * @see {@link windowCount}\n *\n * @param {number} bufferSize The maximum size of the buffer emitted.\n * @param {number} [startBufferEvery] Interval at which to start a new buffer.\n * For example if `startBufferEvery` is `2`, then a new buffer will be started\n * on every other value from the source. A new buffer is started at the\n * beginning of the source by default.\n * @return {Observable<T[]>} An Observable of arrays of buffered values.\n * @method bufferCount\n * @owner Observable\n */\nexport function bufferCount<T>(bufferSize: number, startBufferEvery: number = null): Observable<T[]> {\n  return this.lift(new BufferCountOperator<T>(bufferSize, startBufferEvery));\n}\n\nexport interface BufferCountSignature<T> {\n  (bufferSize: number, startBufferEvery?: number): Observable<T[]>;\n}\n\nclass BufferCountOperator<T> implements Operator<T, T[]> {\n  constructor(private bufferSize: number, private startBufferEvery: number) {\n  }\n\n  call(subscriber: Subscriber<T[]>, source: any): any {\n    return source._subscribe(new BufferCountSubscriber(subscriber, this.bufferSize, this.startBufferEvery));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass BufferCountSubscriber<T> extends Subscriber<T> {\n  private buffers: Array<T[]> = [[]];\n  private count: number = 0;\n\n  constructor(destination: Subscriber<T[]>, private bufferSize: number, private startBufferEvery: number) {\n    super(destination);\n  }\n\n  protected _next(value: T) {\n    const count = (this.count += 1);\n    const destination = this.destination;\n    const bufferSize = this.bufferSize;\n    const startBufferEvery = (this.startBufferEvery == null) ? bufferSize : this.startBufferEvery;\n    const buffers = this.buffers;\n    const len = buffers.length;\n    let remove = -1;\n\n    if (count % startBufferEvery === 0) {\n      buffers.push([]);\n    }\n\n    for (let i = 0; i < len; i++) {\n      const buffer = buffers[i];\n      buffer.push(value);\n      if (buffer.length === bufferSize) {\n        remove = i;\n        destination.next(buffer);\n      }\n    }\n\n    if (remove !== -1) {\n      buffers.splice(remove, 1);\n    }\n  }\n\n  protected _complete() {\n    const destination = this.destination;\n    const buffers = this.buffers;\n    while (buffers.length > 0) {\n      let buffer = buffers.shift();\n      if (buffer.length > 0) {\n        destination.next(buffer);\n      }\n    }\n    super._complete();\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { bufferCount, BufferCountSignature } from '../../operator/bufferCount';\n\nObservable.prototype.bufferCount = bufferCount;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    bufferCount: BufferCountSignature<T>;\n  }\n}","import { Scheduler } from '../Scheduler';\nimport { Action } from '../scheduler/Action';\nimport { Operator } from '../Operator';\nimport { async } from '../scheduler/async';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { isScheduler } from '../util/isScheduler';\n\n/**\n * Buffers the source Observable values for a specific time period.\n *\n * <span class=\"informal\">Collects values from the past as an array, and emits\n * those arrays periodically in time.</span>\n *\n * <img src=\"./img/bufferTime.png\" width=\"100%\">\n *\n * Buffers values from the source for a specific time duration `bufferTimeSpan`.\n * Unless the optional argument `bufferCreationInterval` is given, it emits and\n * resets the buffer every `bufferTimeSpan` milliseconds. If\n * `bufferCreationInterval` is given, this operator opens the buffer every\n * `bufferCreationInterval` milliseconds and closes (emits and resets) the\n * buffer every `bufferTimeSpan` milliseconds. When the optional argument\n * `maxBufferSize` is specified, the buffer will be closed either after\n * `bufferTimeSpan` milliseconds or when it contains `maxBufferSize` elements.\n *\n * @example <caption>Every second, emit an array of the recent click events</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var buffered = clicks.bufferTime(1000);\n * buffered.subscribe(x => console.log(x));\n *\n * @example <caption>Every 5 seconds, emit the click events from the next 2 seconds</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var buffered = clicks.bufferTime(2000, 5000);\n * buffered.subscribe(x => console.log(x));\n *\n * @see {@link buffer}\n * @see {@link bufferCount}\n * @see {@link bufferToggle}\n * @see {@link bufferWhen}\n * @see {@link windowTime}\n *\n * @param {number} bufferTimeSpan The amount of time to fill each buffer array.\n * @param {number} [bufferCreationInterval] The interval at which to start new\n * buffers.\n * @param {number} [maxBufferSize] The maximum buffer size.\n * @param {Scheduler} [scheduler=async] The scheduler on which to schedule the\n * intervals that determine buffer boundaries.\n * @return {Observable<T[]>} An observable of arrays of buffered values.\n * @method bufferTime\n * @owner Observable\n */\nexport function bufferTime<T>(bufferTimeSpan: number): Observable<T[]> {\n  let length: number = arguments.length;\n\n  let scheduler: Scheduler = async;\n  if (isScheduler(arguments[arguments.length - 1])) {\n    scheduler = arguments[arguments.length - 1];\n    length--;\n  }\n\n  let bufferCreationInterval: number = null;\n  if (length >= 2) {\n    bufferCreationInterval = arguments[1];\n  }\n\n  let maxBufferSize: number = Number.POSITIVE_INFINITY;\n  if (length >= 3) {\n    maxBufferSize = arguments[2];\n  }\n\n  return this.lift(new BufferTimeOperator<T>(bufferTimeSpan, bufferCreationInterval, maxBufferSize, scheduler));\n}\n\nexport interface BufferTimeSignature<T> {\n  (bufferTimeSpan: number, scheduler?: Scheduler): Observable<T[]>;\n  (bufferTimeSpan: number, bufferCreationInterval: number, scheduler?: Scheduler): Observable<T[]>;\n  (bufferTimeSpan: number, bufferCreationInterval: number, maxBufferSize: number, scheduler?: Scheduler): Observable<T[]>;\n}\n\nclass BufferTimeOperator<T> implements Operator<T, T[]> {\n  constructor(private bufferTimeSpan: number,\n              private bufferCreationInterval: number,\n              private maxBufferSize: number,\n              private scheduler: Scheduler) {\n  }\n\n  call(subscriber: Subscriber<T[]>, source: any): any {\n    return source._subscribe(new BufferTimeSubscriber(\n      subscriber, this.bufferTimeSpan, this.bufferCreationInterval, this.maxBufferSize, this.scheduler\n    ));\n  }\n}\n\nclass Context<T> {\n  buffer: T[] = [];\n  closeAction: Subscription;\n}\n\ntype CreationState<T> = {\n  bufferTimeSpan: number;\n  bufferCreationInterval: number,\n  subscriber: BufferTimeSubscriber<T>;\n  scheduler: Scheduler;\n};\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass BufferTimeSubscriber<T> extends Subscriber<T> {\n  private contexts: Array<Context<T>> = [];\n  private timespanOnly: boolean;\n\n  constructor(destination: Subscriber<T[]>,\n              private bufferTimeSpan: number,\n              private bufferCreationInterval: number,\n              private maxBufferSize: number,\n              private scheduler: Scheduler) {\n    super(destination);\n    const context = this.openContext();\n    this.timespanOnly = bufferCreationInterval == null || bufferCreationInterval < 0;\n    if (this.timespanOnly) {\n      const timeSpanOnlyState = { subscriber: this, context, bufferTimeSpan };\n      this.add(context.closeAction = scheduler.schedule(dispatchBufferTimeSpanOnly, bufferTimeSpan, timeSpanOnlyState));\n    } else {\n      const closeState = { subscriber: this, context };\n      const creationState: CreationState<T> = { bufferTimeSpan, bufferCreationInterval, subscriber: this, scheduler };\n      this.add(context.closeAction = scheduler.schedule(dispatchBufferClose, bufferTimeSpan, closeState));\n      this.add(scheduler.schedule(dispatchBufferCreation, bufferCreationInterval, creationState));\n    }\n  }\n\n  protected _next(value: T) {\n    const contexts = this.contexts;\n    const len = contexts.length;\n    let filledBufferContext: Context<T>;\n    for (let i = 0; i < len; i++) {\n      const context = contexts[i];\n      const buffer = context.buffer;\n      buffer.push(value);\n      if (buffer.length == this.maxBufferSize) {\n        filledBufferContext = context;\n      }\n    }\n\n    if (filledBufferContext) {\n      this.onBufferFull(filledBufferContext);\n    }\n  }\n\n  protected _error(err: any) {\n    this.contexts.length = 0;\n    super._error(err);\n  }\n\n  protected _complete() {\n    const { contexts, destination } = this;\n    while (contexts.length > 0) {\n      const context = contexts.shift();\n      destination.next(context.buffer);\n    }\n    super._complete();\n  }\n\n  protected _unsubscribe() {\n    this.contexts = null;\n  }\n\n  protected onBufferFull(context: Context<T>) {\n    this.closeContext(context);\n    const closeAction = context.closeAction;\n    closeAction.unsubscribe();\n    this.remove(closeAction);\n\n    if (this.timespanOnly) {\n      context = this.openContext();\n      const bufferTimeSpan = this.bufferTimeSpan;\n      const timeSpanOnlyState = { subscriber: this, context, bufferTimeSpan };\n      this.add(context.closeAction = this.scheduler.schedule(dispatchBufferTimeSpanOnly, bufferTimeSpan, timeSpanOnlyState));\n    }\n  }\n\n  openContext(): Context<T> {\n    const context: Context<T> = new Context<T>();\n    this.contexts.push(context);\n    return context;\n  }\n\n  closeContext(context: Context<T>) {\n    this.destination.next(context.buffer);\n    const contexts = this.contexts;\n\n    const spliceIndex = contexts ? contexts.indexOf(context) : -1;\n    if (spliceIndex >= 0) {\n      contexts.splice(contexts.indexOf(context), 1);\n    }\n  }\n}\n\nfunction dispatchBufferTimeSpanOnly(state: any) {\n  const subscriber: BufferTimeSubscriber<any> = state.subscriber;\n\n  const prevContext = state.context;\n  if (prevContext) {\n    subscriber.closeContext(prevContext);\n  }\n\n  if (!subscriber.closed) {\n    state.context = subscriber.openContext();\n    state.context.closeAction = (<any>this).schedule(state, state.bufferTimeSpan);\n  }\n}\n\ninterface DispatchArg<T> {\n  subscriber: BufferTimeSubscriber<T>;\n  context: Context<T>;\n}\n\nfunction dispatchBufferCreation<T>(state: CreationState<T>) {\n  const { bufferCreationInterval, bufferTimeSpan, subscriber, scheduler } = state;\n  const context = subscriber.openContext();\n  const action = <Action<CreationState<T>>>this;\n  if (!subscriber.closed) {\n    subscriber.add(context.closeAction = scheduler.schedule<DispatchArg<T>>(dispatchBufferClose, bufferTimeSpan, { subscriber, context }));\n    action.schedule(state, bufferCreationInterval);\n  }\n}\n\nfunction dispatchBufferClose<T>(arg: DispatchArg<T>) {\n  const { subscriber, context } = arg;\n  subscriber.closeContext(context);\n}\n","\nimport { Observable } from '../../Observable';\nimport { bufferTime, BufferTimeSignature } from '../../operator/bufferTime';\n\nObservable.prototype.bufferTime = bufferTime;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    bufferTime: BufferTimeSignature<T>;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable, SubscribableOrPromise } from '../Observable';\nimport { Subscription } from '../Subscription';\n\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\n\n/**\n * Buffers the source Observable values starting from an emission from\n * `openings` and ending when the output of `closingSelector` emits.\n *\n * <span class=\"informal\">Collects values from the past as an array. Starts\n * collecting only when `opening` emits, and calls the `closingSelector`\n * function to get an Observable that tells when to close the buffer.</span>\n *\n * <img src=\"./img/bufferToggle.png\" width=\"100%\">\n *\n * Buffers values from the source by opening the buffer via signals from an\n * Observable provided to `openings`, and closing and sending the buffers when\n * a Subscribable or Promise returned by the `closingSelector` function emits.\n *\n * @example <caption>Every other second, emit the click events from the next 500ms</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var openings = Rx.Observable.interval(1000);\n * var buffered = clicks.bufferToggle(openings, i =>\n *   i % 2 ? Rx.Observable.interval(500) : Rx.Observable.empty()\n * );\n * buffered.subscribe(x => console.log(x));\n *\n * @see {@link buffer}\n * @see {@link bufferCount}\n * @see {@link bufferTime}\n * @see {@link bufferWhen}\n * @see {@link windowToggle}\n *\n * @param {SubscribableOrPromise<O>} openings A Subscribable or Promise of notifications to start new\n * buffers.\n * @param {function(value: O): SubscribableOrPromise} closingSelector A function that takes\n * the value emitted by the `openings` observable and returns a Subscribable or Promise,\n * which, when it emits, signals that the associated buffer should be emitted\n * and cleared.\n * @return {Observable<T[]>} An observable of arrays of buffered values.\n * @method bufferToggle\n * @owner Observable\n */\nexport function bufferToggle<T, O>(openings: SubscribableOrPromise<O>,\n                                   closingSelector: (value: O) => SubscribableOrPromise<any>): Observable<T[]> {\n  return this.lift(new BufferToggleOperator<T, O>(openings, closingSelector));\n}\n\nexport interface BufferToggleSignature<T> {\n  <O>(openings: SubscribableOrPromise<O>, closingSelector: (value: O) => SubscribableOrPromise<any>): Observable<T[]>;\n}\n\nclass BufferToggleOperator<T, O> implements Operator<T, T[]> {\n\n  constructor(private openings: SubscribableOrPromise<O>,\n              private closingSelector: (value: O) => SubscribableOrPromise<any>) {\n  }\n\n  call(subscriber: Subscriber<T[]>, source: any): any {\n    return source._subscribe(new BufferToggleSubscriber(subscriber, this.openings, this.closingSelector));\n  }\n}\n\ninterface BufferContext<T> {\n  buffer: T[];\n  subscription: Subscription;\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass BufferToggleSubscriber<T, O> extends OuterSubscriber<T, O> {\n  private contexts: Array<BufferContext<T>> = [];\n\n  constructor(destination: Subscriber<T[]>,\n              private openings: SubscribableOrPromise<O>,\n              private closingSelector: (value: O) => SubscribableOrPromise<any> | void) {\n    super(destination);\n    this.add(subscribeToResult(this, openings));\n  }\n\n  protected _next(value: T): void {\n    const contexts = this.contexts;\n    const len = contexts.length;\n    for (let i = 0; i < len; i++) {\n      contexts[i].buffer.push(value);\n    }\n  }\n\n  protected _error(err: any): void {\n    const contexts = this.contexts;\n    while (contexts.length > 0) {\n      const context = contexts.shift();\n      context.subscription.unsubscribe();\n      context.buffer = null;\n      context.subscription = null;\n    }\n    this.contexts = null;\n    super._error(err);\n  }\n\n  protected _complete(): void {\n    const contexts = this.contexts;\n    while (contexts.length > 0) {\n      const context = contexts.shift();\n      this.destination.next(context.buffer);\n      context.subscription.unsubscribe();\n      context.buffer = null;\n      context.subscription = null;\n    }\n    this.contexts = null;\n    super._complete();\n  }\n\n  notifyNext(outerValue: any, innerValue: O,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, O>): void {\n    outerValue ? this.closeBuffer(outerValue) : this.openBuffer(innerValue);\n  }\n\n  notifyComplete(innerSub: InnerSubscriber<T, O>): void {\n    this.closeBuffer((<any> innerSub).context);\n  }\n\n  private openBuffer(value: O): void {\n    try {\n      const closingSelector = this.closingSelector;\n      const closingNotifier = closingSelector.call(this, value);\n      if (closingNotifier) {\n        this.trySubscribe(closingNotifier);\n      }\n    } catch (err) {\n      this._error(err);\n    }\n  }\n\n  private closeBuffer(context: BufferContext<T>): void {\n    const contexts = this.contexts;\n\n    if (contexts && context) {\n      const { buffer, subscription } = context;\n      this.destination.next(buffer);\n      contexts.splice(contexts.indexOf(context), 1);\n      this.remove(subscription);\n      subscription.unsubscribe();\n    }\n  }\n\n  private trySubscribe(closingNotifier: any): void {\n    const contexts = this.contexts;\n\n    const buffer: Array<T> = [];\n    const subscription = new Subscription();\n    const context = { buffer, subscription };\n    contexts.push(context);\n\n    const innerSubscription = subscribeToResult(this, closingNotifier, <any>context);\n\n    if (!innerSubscription || innerSubscription.closed) {\n      this.closeBuffer(context);\n    } else {\n      (<any> innerSubscription).context = context;\n\n      this.add(innerSubscription);\n      subscription.add(innerSubscription);\n    }\n  }\n}","\nimport { Observable } from '../../Observable';\nimport { bufferToggle, BufferToggleSignature } from '../../operator/bufferToggle';\n\nObservable.prototype.bufferToggle = bufferToggle;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    bufferToggle: BufferToggleSignature<T>;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { Subscription } from '../Subscription';\nimport { tryCatch } from '../util/tryCatch';\nimport { errorObject } from '../util/errorObject';\n\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n\n/**\n * Buffers the source Observable values, using a factory function of closing\n * Observables to determine when to close, emit, and reset the buffer.\n *\n * <span class=\"informal\">Collects values from the past as an array. When it\n * starts collecting values, it calls a function that returns an Observable that\n * tells when to close the buffer and restart collecting.</span>\n *\n * <img src=\"./img/bufferWhen.png\" width=\"100%\">\n *\n * Opens a buffer immediately, then closes the buffer when the observable\n * returned by calling `closingSelector` function emits a value. When it closes\n * the buffer, it immediately opens a new buffer and repeats the process.\n *\n * @example <caption>Emit an array of the last clicks every [1-5] random seconds</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var buffered = clicks.bufferWhen(() =>\n *   Rx.Observable.interval(1000 + Math.random() * 4000)\n * );\n * buffered.subscribe(x => console.log(x));\n *\n * @see {@link buffer}\n * @see {@link bufferCount}\n * @see {@link bufferTime}\n * @see {@link bufferToggle}\n * @see {@link windowWhen}\n *\n * @param {function(): Observable} closingSelector A function that takes no\n * arguments and returns an Observable that signals buffer closure.\n * @return {Observable<T[]>} An observable of arrays of buffered values.\n * @method bufferWhen\n * @owner Observable\n */\nexport function bufferWhen<T>(closingSelector: () => Observable<any>): Observable<T[]> {\n  return this.lift(new BufferWhenOperator<T>(closingSelector));\n}\n\nexport interface BufferWhenSignature<T> {\n  (closingSelector: () => Observable<any>): Observable<T[]>;\n}\n\nclass BufferWhenOperator<T> implements Operator<T, T[]> {\n\n  constructor(private closingSelector: () => Observable<any>) {\n  }\n\n  call(subscriber: Subscriber<T[]>, source: any): any {\n    return source._subscribe(new BufferWhenSubscriber(subscriber, this.closingSelector));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass BufferWhenSubscriber<T> extends OuterSubscriber<T, any> {\n  private buffer: T[];\n  private subscribing: boolean = false;\n  private closingSubscription: Subscription;\n\n  constructor(destination: Subscriber<T[]>, private closingSelector: () => Observable<any>) {\n    super(destination);\n    this.openBuffer();\n  }\n\n  protected _next(value: T) {\n    this.buffer.push(value);\n  }\n\n  protected _complete() {\n    const buffer = this.buffer;\n    if (buffer) {\n      this.destination.next(buffer);\n    }\n    super._complete();\n  }\n\n  protected _unsubscribe() {\n    this.buffer = null;\n    this.subscribing = false;\n  }\n\n  notifyNext(outerValue: T, innerValue: any,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, any>): void {\n    this.openBuffer();\n  }\n\n  notifyComplete(): void {\n    if (this.subscribing) {\n      this.complete();\n    } else {\n      this.openBuffer();\n    }\n  }\n\n  openBuffer() {\n\n    let { closingSubscription } = this;\n\n    if (closingSubscription) {\n      this.remove(closingSubscription);\n      closingSubscription.unsubscribe();\n    }\n\n    const buffer = this.buffer;\n    if (this.buffer) {\n      this.destination.next(buffer);\n    }\n\n    this.buffer = [];\n\n    const closingNotifier = tryCatch(this.closingSelector)();\n\n    if (closingNotifier === errorObject) {\n      this.error(errorObject.e);\n    } else {\n      closingSubscription = new Subscription();\n      this.closingSubscription = closingSubscription;\n      this.add(closingSubscription);\n      this.subscribing = true;\n      closingSubscription.add(subscribeToResult(this, closingNotifier));\n      this.subscribing = false;\n    }\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { bufferWhen, BufferWhenSignature } from '../../operator/bufferWhen';\n\nObservable.prototype.bufferWhen = bufferWhen;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    bufferWhen: BufferWhenSignature<T>;\n  }\n}","import { Observable } from '../Observable';\nimport { Scheduler } from '../Scheduler';\nimport { ReplaySubject } from '../ReplaySubject';\nimport { Observer } from '../Observer';\nimport { Subscription } from '../Subscription';\n\n/**\n * @param bufferSize\n * @param windowTime\n * @param scheduler\n * @return {Observable<any>}\n * @method cache\n * @owner Observable\n */\nexport function cache<T>(bufferSize: number = Number.POSITIVE_INFINITY,\n                         windowTime: number = Number.POSITIVE_INFINITY,\n                         scheduler?: Scheduler): Observable<T> {\n  let subject: ReplaySubject<T>;\n  let source = this;\n  let refs = 0;\n  let outerSub: Subscription;\n\n  const getSubject = () => {\n    subject = new ReplaySubject<T>(bufferSize, windowTime, scheduler);\n    return subject;\n  };\n\n  return new Observable<T>((observer: Observer<T>) => {\n    if (!subject) {\n      subject = getSubject();\n      outerSub = source.subscribe(\n        (value: T) => subject.next(value),\n        (err: any) => {\n          let s = subject;\n          subject = null;\n          s.error(err);\n        },\n        () => subject.complete()\n      );\n    }\n\n    refs++;\n\n    if (!subject) {\n      subject = getSubject();\n    }\n    let innerSub = subject.subscribe(observer);\n\n    return () => {\n      refs--;\n      if (innerSub) {\n        innerSub.unsubscribe();\n      }\n      if (refs === 0) {\n        outerSub.unsubscribe();\n      }\n    };\n  });\n}\n\nexport interface CacheSignature<T> {\n  (bufferSize?: number, windowTime?: number, scheduler?: Scheduler): Observable<T>;\n}\n","\nimport { Observable } from '../../Observable';\nimport { cache, CacheSignature } from '../../operator/cache';\n\nObservable.prototype.cache = cache;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    cache: CacheSignature<T>;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable, ObservableInput } from '../Observable';\n\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n\n/**\n * Catches errors on the observable to be handled by returning a new observable or throwing an error.\n * @param {function} selector a function that takes as arguments `err`, which is the error, and `caught`, which\n *  is the source observable, in case you'd like to \"retry\" that observable by returning it again. Whatever observable\n *  is returned by the `selector` will be used to continue the observable chain.\n * @return {Observable} an observable that originates from either the source or the observable returned by the\n *  catch `selector` function.\n * @method catch\n * @owner Observable\n */\nexport function _catch<T, R>(selector: (err: any, caught: Observable<T>) => ObservableInput<R>): Observable<R> {\n  const operator = new CatchOperator(selector);\n  const caught = this.lift(operator);\n  return (operator.caught = caught);\n}\n\nexport interface CatchSignature<T> {\n  <R>(selector: (err: any, caught: Observable<T>) => ObservableInput<R>): Observable<R>;\n}\n\nclass CatchOperator<T, R> implements Operator<T, R> {\n  caught: Observable<T>;\n\n  constructor(private selector: (err: any, caught: Observable<T>) => ObservableInput<T | R>) {\n  }\n\n  call(subscriber: Subscriber<R>, source: any): any {\n    return source._subscribe(new CatchSubscriber(subscriber, this.selector, this.caught));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass CatchSubscriber<T, R> extends OuterSubscriber<T, R> {\n  constructor(destination: Subscriber<any>,\n              private selector: (err: any, caught: Observable<T>) => ObservableInput<T | R>,\n              private caught: Observable<T>) {\n    super(destination);\n  }\n\n  // NOTE: overriding `error` instead of `_error` because we don't want\n  // to have this flag this subscriber as `isStopped`.\n  error(err: any) {\n    if (!this.isStopped) {\n      let result: any;\n\n      try {\n        result = this.selector(err, this.caught);\n      } catch (err) {\n        this.destination.error(err);\n        return;\n      }\n\n      this.unsubscribe();\n      (<any>this.destination).remove(this);\n      subscribeToResult(this, result);\n    }\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { _catch, CatchSignature } from '../../operator/catch';\n\nObservable.prototype.catch = _catch;\nObservable.prototype._catch = _catch;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    catch: CatchSignature<T>;\n    _catch: CatchSignature<T>;\n  }\n}","import { CombineLatestOperator } from './combineLatest';\nimport { Observable } from '../Observable';\n\n/**\n * Converts a higher-order Observable into a first-order Observable by waiting\n * for the outer Observable to complete, then applying {@link combineLatest}.\n *\n * <span class=\"informal\">Flattens an Observable-of-Observables by applying\n * {@link combineLatest} when the Observable-of-Observables completes.</span>\n *\n * <img src=\"./img/combineAll.png\" width=\"100%\">\n *\n * Takes an Observable of Observables, and collects all Observables from it.\n * Once the outer Observable completes, it subscribes to all collected\n * Observables and combines their values using the {@link combineLatest}\n * strategy, such that:\n * - Every time an inner Observable emits, the output Observable emits.\n * - When the returned observable emits, it emits all of the latest values by:\n *   - If a `project` function is provided, it is called with each recent value\n *     from each inner Observable in whatever order they arrived, and the result\n *     of the `project` function is what is emitted by the output Observable.\n *   - If there is no `project` function, an array of all of the most recent\n *     values is emitted by the output Observable.\n *\n * @example <caption>Map two click events to a finite interval Observable, then apply combineAll</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var higherOrder = clicks.map(ev =>\n *   Rx.Observable.interval(Math.random()*2000).take(3)\n * ).take(2);\n * var result = higherOrder.combineAll();\n * result.subscribe(x => console.log(x));\n *\n * @see {@link combineLatest}\n * @see {@link mergeAll}\n *\n * @param {function} [project] An optional function to map the most recent\n * values from each inner Observable into a new result. Takes each of the most\n * recent values from each collected inner Observable as arguments, in order.\n * @return {Observable} An Observable of projected results or arrays of recent\n * values.\n * @method combineAll\n * @owner Observable\n */\nexport function combineAll<R>(project?: (...values: Array<any>) => R): Observable<R> {\n  return this.lift(new CombineLatestOperator(project));\n}\n\nexport interface CombineAllSignature<T> {\n  <R>(project?: (...values: Array<T>) => R): Observable<R>;\n}\n","\nimport { Observable } from '../../Observable';\nimport { combineAll, CombineAllSignature } from '../../operator/combineAll';\n\nObservable.prototype.combineAll = combineAll;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    combineAll: CombineAllSignature<T>;\n  }\n}","import { Observable, ObservableInput } from '../Observable';\nimport { ArrayObservable } from '../observable/ArrayObservable';\nimport { isArray } from '../util/isArray';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nconst none = {};\n\n/**\n * Combines multiple Observables to create an Observable whose values are\n * calculated from the latest values of each of its input Observables.\n *\n * <span class=\"informal\">Whenever any input Observable emits a value, it\n * computes a formula using the latest values from all the inputs, then emits\n * the output of that formula.</span>\n *\n * <img src=\"./img/combineLatest.png\" width=\"100%\">\n *\n * `combineLatest` combines the values from this Observable with values from\n * Observables passed as arguments. This is done by subscribing to each\n * Observable, in order, and collecting an array of each of the most recent\n * values any time any of the input Observables emits, then either taking that\n * array and passing it as arguments to an optional `project` function and\n * emitting the return value of that, or just emitting the array of recent\n * values directly if there is no `project` function.\n *\n * @example <caption>Dynamically calculate the Body-Mass Index from an Observable of weight and one for height</caption>\n * var weight = Rx.Observable.of(70, 72, 76, 79, 75);\n * var height = Rx.Observable.of(1.76, 1.77, 1.78);\n * var bmi = weight.combineLatest(height, (w, h) => w / (h * h));\n * bmi.subscribe(x => console.log('BMI is ' + x));\n *\n * @see {@link combineAll}\n * @see {@link merge}\n * @see {@link withLatestFrom}\n *\n * @param {Observable} other An input Observable to combine with the source\n * Observable. More than one input Observables may be given as argument.\n * @param {function} [project] An optional function to project the values from\n * the combined latest values into a new value on the output Observable.\n * @return {Observable} An Observable of projected values from the most recent\n * values from each input Observable, or an array of the most recent values from\n * each input Observable.\n * @method combineLatest\n * @owner Observable\n */\nexport function combineLatest<T, R>(...observables: Array<ObservableInput<any> |\n                                                       Array<ObservableInput<any>> |\n                                                       ((...values: Array<any>) => R)>): Observable<R> {\n  let project: (...values: Array<any>) => R = null;\n  if (typeof observables[observables.length - 1] === 'function') {\n    project = <(...values: Array<any>) => R>observables.pop();\n  }\n\n  // if the first and only other argument besides the resultSelector is an array\n  // assume it's been called with `combineLatest([obs1, obs2, obs3], project)`\n  if (observables.length === 1 && isArray(observables[0])) {\n    observables = <any>observables[0];\n  }\n\n  observables.unshift(this);\n\n  return new ArrayObservable(observables).lift(new CombineLatestOperator(project));\n}\n\n/* tslint:disable:max-line-length */\nexport interface CombineLatestSignature<T> {\n  <R>(project: (v1: T) => R): Observable<R>;\n  <T2, R>(v2: ObservableInput<T2>, project: (v1: T, v2: T2) => R): Observable<R>;\n  <T2, T3, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, project: (v1: T, v2: T2, v3: T3) => R): Observable<R>;\n  <T2, T3, T4, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, project: (v1: T, v2: T2, v3: T3, v4: T4) => R): Observable<R>;\n  <T2, T3, T4, T5, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, project: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5) => R): Observable<R>;\n  <T2, T3, T4, T5, T6, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>, project: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5, v6: T6) => R): Observable<R>;\n\n  <T2>(v2: ObservableInput<T2>): Observable<[T, T2]>;\n  <T2, T3>(v2: ObservableInput<T2>, v3: ObservableInput<T3>): Observable<[T, T2, T3]>;\n  <T2, T3, T4>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>): Observable<[T, T2, T3, T4]>;\n  <T2, T3, T4, T5>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>): Observable<[T, T2, T3, T4, T5]>;\n  <T2, T3, T4, T5, T6>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>): Observable<[T, T2, T3, T4, T5, T6]>;\n\n  <R>(...observables: Array<ObservableInput<T> | ((...values: Array<T>) => R)>): Observable<R>;\n  <R>(array: ObservableInput<T>[]): Observable<Array<T>>;\n  <TOther, R>(array: ObservableInput<TOther>[], project: (v1: T, ...values: Array<TOther>) => R): Observable<R>;\n}\n/* tslint:enable:max-line-length */\n\nexport class CombineLatestOperator<T, R> implements Operator<T, R> {\n  constructor(private project?: (...values: Array<any>) => R) {\n  }\n\n  call(subscriber: Subscriber<R>, source: any): any {\n    return source._subscribe(new CombineLatestSubscriber(subscriber, this.project));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class CombineLatestSubscriber<T, R> extends OuterSubscriber<T, R> {\n  private active: number = 0;\n  private values: any[] = [];\n  private observables: any[] = [];\n  private toRespond: number;\n\n  constructor(destination: Subscriber<R>, private project?: (...values: Array<any>) => R) {\n    super(destination);\n  }\n\n  protected _next(observable: any) {\n    this.values.push(none);\n    this.observables.push(observable);\n  }\n\n  protected _complete() {\n    const observables = this.observables;\n    const len = observables.length;\n    if (len === 0) {\n      this.destination.complete();\n    } else {\n      this.active = len;\n      this.toRespond = len;\n      for (let i = 0; i < len; i++) {\n        const observable = observables[i];\n        this.add(subscribeToResult(this, observable, observable, i));\n      }\n    }\n  }\n\n  notifyComplete(unused: Subscriber<R>): void {\n    if ((this.active -= 1) === 0) {\n      this.destination.complete();\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: R,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    const values = this.values;\n    const oldVal = values[outerIndex];\n    const toRespond = !this.toRespond\n      ? 0\n      : oldVal === none ? --this.toRespond : this.toRespond;\n    values[outerIndex] = innerValue;\n\n    if (toRespond === 0) {\n      if (this.project) {\n        this._tryProject(values);\n      } else {\n        this.destination.next(values.slice());\n      }\n    }\n  }\n\n  private _tryProject(values: any[]) {\n    let result: any;\n    try {\n      result = this.project.apply(this, values);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    this.destination.next(result);\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { combineLatest, CombineLatestSignature } from '../../operator/combineLatest';\n\nObservable.prototype.combineLatest = combineLatest;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    combineLatest: CombineLatestSignature<T>;\n  }\n}","\nimport { Observable } from '../../Observable';\nimport { concat, ConcatSignature } from '../../operator/concat';\n\nObservable.prototype.concat = concat;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    concat: ConcatSignature<T>;\n  }\n}","import { Subscribable } from '../Observable';\nimport { MergeAllOperator } from './mergeAll';\n\n/**\n * Converts a higher-order Observable into a first-order Observable by\n * concatenating the inner Observables in order.\n *\n * <span class=\"informal\">Flattens an Observable-of-Observables by putting one\n * inner Observable after the other.</span>\n *\n * <img src=\"./img/concatAll.png\" width=\"100%\">\n *\n * Joins every Observable emitted by the source (a higher-order Observable), in\n * a serial fashion. It subscribes to each inner Observable only after the\n * previous inner Observable has completed, and merges all of their values into\n * the returned observable.\n *\n * __Warning:__ If the source Observable emits Observables quickly and\n * endlessly, and the inner Observables it emits generally complete slower than\n * the source emits, you can run into memory issues as the incoming Observables\n * collect in an unbounded buffer.\n *\n * Note: `concatAll` is equivalent to `mergeAll` with concurrency parameter set\n * to `1`.\n *\n * @example <caption>For each click event, tick every second from 0 to 3, with no concurrency</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var higherOrder = clicks.map(ev => Rx.Observable.interval(1000).take(4));\n * var firstOrder = higherOrder.concatAll();\n * firstOrder.subscribe(x => console.log(x));\n *\n * @see {@link combineAll}\n * @see {@link concat}\n * @see {@link concatMap}\n * @see {@link concatMapTo}\n * @see {@link exhaust}\n * @see {@link mergeAll}\n * @see {@link switch}\n * @see {@link zipAll}\n *\n * @return {Observable} An Observable emitting values from all the inner\n * Observables concatenated.\n * @method concatAll\n * @owner Observable\n */\nexport function concatAll<T>(): T {\n  return this.lift(new MergeAllOperator<T>(1));\n}\n\nexport interface ConcatAllSignature<T> {\n  (): T;\n  <R>(): Subscribable<R>;\n}\n","\nimport { Observable } from '../../Observable';\nimport { concatAll, ConcatAllSignature } from '../../operator/concatAll';\n\nObservable.prototype.concatAll = concatAll;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    concatAll: ConcatAllSignature<T>;\n  }\n}","import { MergeMapOperator } from './mergeMap';\nimport { Observable, ObservableInput } from '../Observable';\n\n/**\n * Projects each source value to an Observable which is merged in the output\n * Observable, in a serialized fashion waiting for each one to complete before\n * merging the next.\n *\n * <span class=\"informal\">Maps each value to an Observable, then flattens all of\n * these inner Observables using {@link concatAll}.</span>\n *\n * <img src=\"./img/concatMap.png\" width=\"100%\">\n *\n * Returns an Observable that emits items based on applying a function that you\n * supply to each item emitted by the source Observable, where that function\n * returns an (so-called \"inner\") Observable. Each new inner Observable is\n * concatenated with the previous inner Observable.\n *\n * __Warning:__ if source values arrive endlessly and faster than their\n * corresponding inner Observables can complete, it will result in memory issues\n * as inner Observables amass in an unbounded buffer waiting for their turn to\n * be subscribed to.\n *\n * Note: `concatMap` is equivalent to `mergeMap` with concurrency parameter set\n * to `1`.\n *\n * @example <caption>For each click event, tick every second from 0 to 3, with no concurrency</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.concatMap(ev => Rx.Observable.interval(1000).take(4));\n * result.subscribe(x => console.log(x));\n *\n * @see {@link concat}\n * @see {@link concatAll}\n * @see {@link concatMapTo}\n * @see {@link exhaustMap}\n * @see {@link mergeMap}\n * @see {@link switchMap}\n *\n * @param {function(value: T, ?index: number): Observable} project A function\n * that, when applied to an item emitted by the source Observable, returns an\n * Observable.\n * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]\n * A function to produce the value on the output Observable based on the values\n * and the indices of the source (outer) emission and the inner Observable\n * emission. The arguments passed to this function are:\n * - `outerValue`: the value that came from the source\n * - `innerValue`: the value that came from the projected Observable\n * - `outerIndex`: the \"index\" of the value that came from the source\n * - `innerIndex`: the \"index\" of the value from the projected Observable\n * @return {Observable} an observable of values merged from the projected\n * Observables as they were subscribed to, one at a time. Optionally, these\n * values may have been projected from a passed `projectResult` argument.\n * @return {Observable} An Observable that emits the result of applying the\n * projection function (and the optional `resultSelector`) to each item emitted\n * by the source Observable and taking values from each projected inner\n * Observable sequentially.\n * @method concatMap\n * @owner Observable\n */\nexport function concatMap<T, I, R>(project: (value: T, index: number) =>  ObservableInput<I>,\n                                   resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R) {\n  return this.lift(new MergeMapOperator(project, resultSelector, 1));\n}\n\nexport interface ConcatMapSignature<T> {\n  <R>(project: (value: T, index: number) =>  ObservableInput<R>): Observable<R>;\n  <I, R>(project: (value: T, index: number) =>  ObservableInput<I>,\n         resultSelector: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R): Observable<R>;\n}\n","\nimport { Observable } from '../../Observable';\nimport { concatMap, ConcatMapSignature } from '../../operator/concatMap';\n\nObservable.prototype.concatMap = concatMap;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    concatMap: ConcatMapSignature<T>;\n  }\n}","import { Observable, ObservableInput } from '../Observable';\nimport { MergeMapToOperator } from './mergeMapTo';\n\n/**\n * Projects each source value to the same Observable which is merged multiple\n * times in a serialized fashion on the output Observable.\n *\n * <span class=\"informal\">It's like {@link concatMap}, but maps each value\n * always to the same inner Observable.</span>\n *\n * <img src=\"./img/concatMapTo.png\" width=\"100%\">\n *\n * Maps each source value to the given Observable `innerObservable` regardless\n * of the source value, and then flattens those resulting Observables into one\n * single Observable, which is the output Observable. Each new `innerObservable`\n * instance emitted on the output Observable is concatenated with the previous\n * `innerObservable` instance.\n *\n * __Warning:__ if source values arrive endlessly and faster than their\n * corresponding inner Observables can complete, it will result in memory issues\n * as inner Observables amass in an unbounded buffer waiting for their turn to\n * be subscribed to.\n *\n * Note: `concatMapTo` is equivalent to `mergeMapTo` with concurrency parameter\n * set to `1`.\n *\n * @example <caption>For each click event, tick every second from 0 to 3, with no concurrency</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.concatMapTo(Rx.Observable.interval(1000).take(4));\n * result.subscribe(x => console.log(x));\n *\n * @see {@link concat}\n * @see {@link concatAll}\n * @see {@link concatMap}\n * @see {@link mergeMapTo}\n * @see {@link switchMapTo}\n *\n * @param {Observable} innerObservable An Observable to replace each value from\n * the source Observable.\n * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]\n * A function to produce the value on the output Observable based on the values\n * and the indices of the source (outer) emission and the inner Observable\n * emission. The arguments passed to this function are:\n * - `outerValue`: the value that came from the source\n * - `innerValue`: the value that came from the projected Observable\n * - `outerIndex`: the \"index\" of the value that came from the source\n * - `innerIndex`: the \"index\" of the value from the projected Observable\n * @return {Observable} An observable of values merged together by joining the\n * passed observable with itself, one after the other, for each value emitted\n * from the source.\n * @method concatMapTo\n * @owner Observable\n */\nexport function concatMapTo<T, I, R>(innerObservable: Observable<I>,\n                                     resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R): Observable<R> {\n  return this.lift(new MergeMapToOperator(innerObservable, resultSelector, 1));\n}\n\nexport interface ConcatMapToSignature<T> {\n  <R>(observable: ObservableInput<R>): Observable<R>;\n  <I, R>(observable: ObservableInput<I>,\n         resultSelector: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R): Observable<R>;\n}\n","\nimport { Observable } from '../../Observable';\nimport { concatMapTo, ConcatMapToSignature } from '../../operator/concatMapTo';\n\nObservable.prototype.concatMapTo = concatMapTo;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    concatMapTo: ConcatMapToSignature<T>;\n  }\n}","import { Observable } from '../Observable';\nimport { Operator } from '../Operator';\nimport { Observer } from '../Observer';\nimport { Subscriber } from '../Subscriber';\n\n/**\n * Counts the number of emissions on the source and emits that number when the\n * source completes.\n *\n * <span class=\"informal\">Tells how many values were emitted, when the source\n * completes.</span>\n *\n * <img src=\"./img/count.png\" width=\"100%\">\n *\n * `count` transforms an Observable that emits values into an Observable that\n * emits a single value that represents the number of values emitted by the\n * source Observable. If the source Observable terminates with an error, `count`\n * will pass this error notification along without emitting an value first. If\n * the source Observable does not terminate at all, `count` will neither emit\n * a value nor terminate. This operator takes an optional `predicate` function\n * as argument, in which case the output emission will represent the number of\n * source values that matched `true` with the `predicate`.\n *\n * @example <caption>Counts how many seconds have passed before the first click happened</caption>\n * var seconds = Rx.Observable.interval(1000);\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var secondsBeforeClick = seconds.takeUntil(clicks);\n * var result = secondsBeforeClick.count();\n * result.subscribe(x => console.log(x));\n *\n * @example <caption>Counts how many odd numbers are there between 1 and 7</caption>\n * var numbers = Rx.Observable.range(1, 7);\n * var result = numbers.count(i => i % 2 === 1);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link max}\n * @see {@link min}\n * @see {@link reduce}\n *\n * @param {function(value: T, i: number, source: Observable<T>): boolean} [predicate] A\n * boolean function to select what values are to be counted. It is provided with\n * arguments of:\n * - `value`: the value from the source Observable.\n * - `index`: the (zero-based) \"index\" of the value from the source Observable.\n * - `source`: the source Observable instance itself.\n * @return {Observable} An Observable of one number that represents the count as\n * described above.\n * @method count\n * @owner Observable\n */\nexport function count<T>(predicate?: (value: T, index: number, source: Observable<T>) => boolean): Observable<number> {\n  return this.lift(new CountOperator(predicate, this));\n}\n\nexport interface CountSignature<T> {\n  (predicate?: (value: T, index: number, source: Observable<T>) => boolean): Observable<number>;\n}\n\nclass CountOperator<T> implements Operator<T, number> {\n  constructor(private predicate?: (value: T, index: number, source: Observable<T>) => boolean,\n              private source?: Observable<T>) {\n  }\n\n  call(subscriber: Subscriber<number>, source: any): any {\n    return source._subscribe(new CountSubscriber(subscriber, this.predicate, this.source));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass CountSubscriber<T> extends Subscriber<T> {\n  private count: number = 0;\n  private index: number = 0;\n\n  constructor(destination: Observer<number>,\n              private predicate?: (value: T, index: number, source: Observable<T>) => boolean,\n              private source?: Observable<T>) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    if (this.predicate) {\n      this._tryPredicate(value);\n    } else {\n      this.count++;\n    }\n  }\n\n  private _tryPredicate(value: T) {\n    let result: any;\n\n    try {\n      result = this.predicate(value, this.index++, this.source);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n\n    if (result) {\n      this.count++;\n    }\n  }\n\n  protected _complete(): void {\n    this.destination.next(this.count);\n    this.destination.complete();\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { count, CountSignature } from '../../operator/count';\n\nObservable.prototype.count = count;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    count: CountSignature<T>;\n  }\n}","import { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Notification } from '../Notification';\n\n/**\n * Converts an Observable of {@link Notification} objects into the emissions\n * that they represent.\n *\n * <span class=\"informal\">Unwraps {@link Notification} objects as actual `next`,\n * `error` and `complete` emissions. The opposite of {@link materialize}.</span>\n *\n * <img src=\"./img/dematerialize.png\" width=\"100%\">\n *\n * `dematerialize` is assumed to operate an Observable that only emits\n * {@link Notification} objects as `next` emissions, and does not emit any\n * `error`. Such Observable is the output of a `materialize` operation. Those\n * notifications are then unwrapped using the metadata they contain, and emitted\n * as `next`, `error`, and `complete` on the output Observable.\n *\n * Use this operator in conjunction with {@link materialize}.\n *\n * @example <caption>Convert an Observable of Notifications to an actual Observable</caption>\n * var notifA = new Rx.Notification('N', 'A');\n * var notifB = new Rx.Notification('N', 'B');\n * var notifE = new Rx.Notification('E', void 0,\n *   new TypeError('x.toUpperCase is not a function')\n * );\n * var materialized = Rx.Observable.of(notifA, notifB, notifE);\n * var upperCase = materialized.dematerialize();\n * upperCase.subscribe(x => console.log(x), e => console.error(e));\n *\n * @see {@link Notification}\n * @see {@link materialize}\n *\n * @return {Observable} An Observable that emits items and notifications\n * embedded in Notification objects emitted by the source Observable.\n * @method dematerialize\n * @owner Observable\n */\nexport function dematerialize<T>(): Observable<any> {\n  return this.lift(new DeMaterializeOperator());\n}\n\nexport interface DematerializeSignature<T> {\n  <R>(): Observable<R>;\n}\n\nclass DeMaterializeOperator<T extends Notification<any>, R> implements Operator<T, R> {\n  call(subscriber: Subscriber<any>, source: any): any {\n    return source._subscribe(new DeMaterializeSubscriber(subscriber));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass DeMaterializeSubscriber<T extends Notification<any>> extends Subscriber<T> {\n  constructor(destination: Subscriber<any>) {\n    super(destination);\n  }\n\n  protected _next(value: T) {\n    value.observe(this.destination);\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { dematerialize, DematerializeSignature } from '../../operator/dematerialize';\n\nObservable.prototype.dematerialize = dematerialize;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    dematerialize: DematerializeSignature<T>;\n  }\n}","import { Operator } from '../Operator';\nimport { Observable, SubscribableOrPromise } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription, TeardownLogic } from '../Subscription';\n\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n\n/**\n * Emits a value from the source Observable only after a particular time span\n * determined by another Observable has passed without another source emission.\n *\n * <span class=\"informal\">It's like {@link debounceTime}, but the time span of\n * emission silence is determined by a second Observable.</span>\n *\n * <img src=\"./img/debounce.png\" width=\"100%\">\n *\n * `debounce` delays values emitted by the source Observable, but drops previous\n * pending delayed emissions if a new value arrives on the source Observable.\n * This operator keeps track of the most recent value from the source\n * Observable, and spawns a duration Observable by calling the\n * `durationSelector` function. The value is emitted only when the duration\n * Observable emits a value or completes, and if no other value was emitted on\n * the source Observable since the duration Observable was spawned. If a new\n * value appears before the duration Observable emits, the previous value will\n * be dropped and will not be emitted on the output Observable.\n *\n * Like {@link debounceTime}, this is a rate-limiting operator, and also a\n * delay-like operator since output emissions do not necessarily occur at the\n * same time as they did on the source Observable.\n *\n * @example <caption>Emit the most recent click after a burst of clicks</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.debounce(() => Rx.Observable.interval(1000));\n * result.subscribe(x => console.log(x));\n *\n * @see {@link audit}\n * @see {@link debounceTime}\n * @see {@link delayWhen}\n * @see {@link throttle}\n *\n * @param {function(value: T): Observable|Promise} durationSelector A function\n * that receives a value from the source Observable, for computing the timeout\n * duration for each source value, returned as an Observable or a Promise.\n * @return {Observable} An Observable that delays the emissions of the source\n * Observable by the specified duration Observable returned by\n * `durationSelector`, and may drop some values if they occur too frequently.\n * @method debounce\n * @owner Observable\n */\nexport function debounce<T>(durationSelector: (value: T) => SubscribableOrPromise<number>): Observable<T> {\n  return this.lift(new DebounceOperator(durationSelector));\n}\n\nexport interface DebounceSignature<T> {\n  (durationSelector: (value: T) => SubscribableOrPromise<number>): Observable<T>;\n}\n\nclass DebounceOperator<T> implements Operator<T, T> {\n  constructor(private durationSelector: (value: T) => SubscribableOrPromise<number>) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source._subscribe(new DebounceSubscriber(subscriber, this.durationSelector));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass DebounceSubscriber<T, R> extends OuterSubscriber<T, R> {\n  private value: T;\n  private hasValue: boolean = false;\n  private durationSubscription: Subscription = null;\n\n  constructor(destination: Subscriber<R>,\n              private durationSelector: (value: T) => SubscribableOrPromise<number>) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    try {\n      const result = this.durationSelector.call(this, value);\n\n      if (result) {\n        this._tryNext(value, result);\n      }\n    } catch (err) {\n      this.destination.error(err);\n    }\n  }\n\n  protected _complete(): void {\n    this.emitValue();\n    this.destination.complete();\n  }\n\n  private _tryNext(value: T, duration: SubscribableOrPromise<number>): void {\n    let subscription = this.durationSubscription;\n    this.value = value;\n    this.hasValue = true;\n    if (subscription) {\n      subscription.unsubscribe();\n      this.remove(subscription);\n    }\n\n    subscription = subscribeToResult(this, duration);\n    if (!subscription.closed) {\n      this.add(this.durationSubscription = subscription);\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: R,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    this.emitValue();\n  }\n\n  notifyComplete(): void {\n    this.emitValue();\n  }\n\n  emitValue(): void {\n    if (this.hasValue) {\n      const value = this.value;\n      const subscription = this.durationSubscription;\n      if (subscription) {\n        this.durationSubscription = null;\n        subscription.unsubscribe();\n        this.remove(subscription);\n      }\n      this.value = null;\n      this.hasValue = false;\n      super._next(value);\n    }\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { debounce, DebounceSignature } from '../../operator/debounce';\n\nObservable.prototype.debounce = debounce;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    debounce: DebounceSignature<T>;\n  }\n}","import { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Scheduler } from '../Scheduler';\nimport { Subscription, TeardownLogic } from '../Subscription';\nimport { async } from '../scheduler/async';\n\n/**\n * Emits a value from the source Observable only after a particular time span\n * has passed without another source emission.\n *\n * <span class=\"informal\">It's like {@link delay}, but passes only the most\n * recent value from each burst of emissions.</span>\n *\n * <img src=\"./img/debounceTime.png\" width=\"100%\">\n *\n * `debounceTime` delays values emitted by the source Observable, but drops\n * previous pending delayed emissions if a new value arrives on the source\n * Observable. This operator keeps track of the most recent value from the\n * source Observable, and emits that only when `dueTime` enough time has passed\n * without any other value appearing on the source Observable. If a new value\n * appears before `dueTime` silence occurs, the previous value will be dropped\n * and will not be emitted on the output Observable.\n *\n * This is a rate-limiting operator, because it is impossible for more than one\n * value to be emitted in any time window of duration `dueTime`, but it is also\n * a delay-like operator since output emissions do not occur at the same time as\n * they did on the source Observable. Optionally takes a {@link Scheduler} for\n * managing timers.\n *\n * @example <caption>Emit the most recent click after a burst of clicks</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.debounceTime(1000);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link auditTime}\n * @see {@link debounce}\n * @see {@link delay}\n * @see {@link sampleTime}\n * @see {@link throttleTime}\n *\n * @param {number} dueTime The timeout duration in milliseconds (or the time\n * unit determined internally by the optional `scheduler`) for the window of\n * time required to wait for emission silence before emitting the most recent\n * source value.\n * @param {Scheduler} [scheduler=async] The {@link Scheduler} to use for\n * managing the timers that handle the timeout for each value.\n * @return {Observable} An Observable that delays the emissions of the source\n * Observable by the specified `dueTime`, and may drop some values if they occur\n * too frequently.\n * @method debounceTime\n * @owner Observable\n */\nexport function debounceTime<T>(dueTime: number, scheduler: Scheduler = async): Observable<T> {\n  return this.lift(new DebounceTimeOperator(dueTime, scheduler));\n}\n\nexport interface DebounceTimeSignature<T> {\n  (dueTime: number, scheduler?: Scheduler): Observable<T>;\n}\n\nclass DebounceTimeOperator<T> implements Operator<T, T> {\n  constructor(private dueTime: number, private scheduler: Scheduler) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source._subscribe(new DebounceTimeSubscriber(subscriber, this.dueTime, this.scheduler));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass DebounceTimeSubscriber<T> extends Subscriber<T> {\n  private debouncedSubscription: Subscription = null;\n  private lastValue: T = null;\n  private hasValue: boolean = false;\n\n  constructor(destination: Subscriber<T>,\n              private dueTime: number,\n              private scheduler: Scheduler) {\n    super(destination);\n  }\n\n  protected _next(value: T) {\n    this.clearDebounce();\n    this.lastValue = value;\n    this.hasValue = true;\n    this.add(this.debouncedSubscription = this.scheduler.schedule(dispatchNext, this.dueTime, this));\n  }\n\n  protected _complete() {\n    this.debouncedNext();\n    this.destination.complete();\n  }\n\n  debouncedNext(): void {\n    this.clearDebounce();\n\n    if (this.hasValue) {\n      this.destination.next(this.lastValue);\n      this.lastValue = null;\n      this.hasValue = false;\n    }\n  }\n\n  private clearDebounce(): void {\n    const debouncedSubscription = this.debouncedSubscription;\n\n    if (debouncedSubscription !== null) {\n      this.remove(debouncedSubscription);\n      debouncedSubscription.unsubscribe();\n      this.debouncedSubscription = null;\n    }\n  }\n}\n\nfunction dispatchNext(subscriber: DebounceTimeSubscriber<any>) {\n  subscriber.debouncedNext();\n}\n","\nimport { Observable } from '../../Observable';\nimport { debounceTime, DebounceTimeSignature } from '../../operator/debounceTime';\n\nObservable.prototype.debounceTime = debounceTime;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    debounceTime: DebounceTimeSignature<T>;\n  }\n}","import { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\n\n/**\n * Emits a given value if the source Observable completes without emitting any\n * `next` value, otherwise mirrors the source Observable.\n *\n * <span class=\"informal\">If the source Observable turns out to be empty, then\n * this operator will emit a default value.</span>\n *\n * <img src=\"./img/defaultIfEmpty.png\" width=\"100%\">\n *\n * `defaultIfEmpty` emits the values emitted by the source Observable or a\n * specified default value if the source Observable is empty (completes without\n * having emitted any `next` value).\n *\n * @example <caption>If no clicks happen in 5 seconds, then emit \"no clicks\"</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var clicksBeforeFive = clicks.takeUntil(Rx.Observable.interval(5000));\n * var result = clicksBeforeFive.defaultIfEmpty('no clicks');\n * result.subscribe(x => console.log(x));\n *\n * @see {@link empty}\n * @see {@link last}\n *\n * @param {any} [defaultValue=null] The default value used if the source\n * Observable is empty.\n * @return {Observable} An Observable that emits either the specified\n * `defaultValue` if the source Observable emits no items, or the values emitted\n * by the source Observable.\n * @method defaultIfEmpty\n * @owner Observable\n */\nexport function defaultIfEmpty<T, R>(defaultValue: R = null): Observable<T | R> {\n  return this.lift(new DefaultIfEmptyOperator(defaultValue));\n}\n\nexport interface DefaultIfEmptySignature<T> {\n  (defaultValue?: T): Observable<T>;\n  <R>(defaultValue?: R): Observable<T | R>;\n}\n\nclass DefaultIfEmptyOperator<T, R> implements Operator<T, T | R> {\n\n  constructor(private defaultValue: R) {\n  }\n\n  call(subscriber: Subscriber<T | R>, source: any): any {\n    return source._subscribe(new DefaultIfEmptySubscriber(subscriber, this.defaultValue));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass DefaultIfEmptySubscriber<T, R> extends Subscriber<T> {\n  private isEmpty: boolean = true;\n\n  constructor(destination: Subscriber<T | R>, private defaultValue: R) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    this.isEmpty = false;\n    this.destination.next(value);\n  }\n\n  protected _complete(): void {\n    if (this.isEmpty) {\n      this.destination.next(this.defaultValue);\n    }\n    this.destination.complete();\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { defaultIfEmpty, DefaultIfEmptySignature } from '../../operator/defaultIfEmpty';\n\nObservable.prototype.defaultIfEmpty = defaultIfEmpty;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    defaultIfEmpty: DefaultIfEmptySignature<T>;\n  }\n}","import { async } from '../scheduler/async';\nimport { isDate } from '../util/isDate';\nimport { Operator } from '../Operator';\nimport { Scheduler } from '../Scheduler';\nimport { Subscriber } from '../Subscriber';\nimport { Notification } from '../Notification';\nimport { Observable } from '../Observable';\nimport { TeardownLogic } from '../Subscription';\n\n/**\n * Delays the emission of items from the source Observable by a given timeout or\n * until a given Date.\n *\n * <span class=\"informal\">Time shifts each item by some specified amount of\n * milliseconds.</span>\n *\n * <img src=\"./img/delay.png\" width=\"100%\">\n *\n * If the delay argument is a Number, this operator time shifts the source\n * Observable by that amount of time expressed in milliseconds. The relative\n * time intervals between the values are preserved.\n *\n * If the delay argument is a Date, this operator time shifts the start of the\n * Observable execution until the given date occurs.\n *\n * @example <caption>Delay each click by one second</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var delayedClicks = clicks.delay(1000); // each click emitted after 1 second\n * delayedClicks.subscribe(x => console.log(x));\n *\n * @example <caption>Delay all clicks until a future date happens</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var date = new Date('March 15, 2050 12:00:00'); // in the future\n * var delayedClicks = clicks.delay(date); // click emitted only after that date\n * delayedClicks.subscribe(x => console.log(x));\n *\n * @see {@link debounceTime}\n * @see {@link delayWhen}\n *\n * @param {number|Date} delay The delay duration in milliseconds (a `number`) or\n * a `Date` until which the emission of the source items is delayed.\n * @param {Scheduler} [scheduler=async] The Scheduler to use for\n * managing the timers that handle the time-shift for each item.\n * @return {Observable} An Observable that delays the emissions of the source\n * Observable by the specified timeout or Date.\n * @method delay\n * @owner Observable\n */\nexport function delay<T>(delay: number|Date,\n                         scheduler: Scheduler = async): Observable<T> {\n  const absoluteDelay = isDate(delay);\n  const delayFor = absoluteDelay ? (+delay - scheduler.now()) : Math.abs(<number>delay);\n  return this.lift(new DelayOperator(delayFor, scheduler));\n}\n\nexport interface DelaySignature<T> {\n  (delay: number | Date, scheduler?: Scheduler): Observable<T>;\n}\n\nclass DelayOperator<T> implements Operator<T, T> {\n  constructor(private delay: number,\n              private scheduler: Scheduler) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source._subscribe(new DelaySubscriber(subscriber, this.delay, this.scheduler));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass DelaySubscriber<T> extends Subscriber<T> {\n  private queue: Array<any> = [];\n  private active: boolean = false;\n  private errored: boolean = false;\n\n  private static dispatch(state: any): void {\n    const source = state.source;\n    const queue = source.queue;\n    const scheduler = state.scheduler;\n    const destination = state.destination;\n\n    while (queue.length > 0 && (queue[0].time - scheduler.now()) <= 0) {\n      queue.shift().notification.observe(destination);\n    }\n\n    if (queue.length > 0) {\n      const delay = Math.max(0, queue[0].time - scheduler.now());\n      (<any> this).schedule(state, delay);\n    } else {\n      source.active = false;\n    }\n  }\n\n  constructor(destination: Subscriber<T>,\n              private delay: number,\n              private scheduler: Scheduler) {\n    super(destination);\n  }\n\n  private _schedule(scheduler: Scheduler): void {\n    this.active = true;\n    this.add(scheduler.schedule(DelaySubscriber.dispatch, this.delay, {\n      source: this, destination: this.destination, scheduler: scheduler\n    }));\n  }\n\n  private scheduleNotification(notification: Notification<any>): void {\n    if (this.errored === true) {\n      return;\n    }\n\n    const scheduler = this.scheduler;\n    const message = new DelayMessage(scheduler.now() + this.delay, notification);\n    this.queue.push(message);\n\n    if (this.active === false) {\n      this._schedule(scheduler);\n    }\n  }\n\n  protected _next(value: T) {\n    this.scheduleNotification(Notification.createNext(value));\n  }\n\n  protected _error(err: any) {\n    this.errored = true;\n    this.queue = [];\n    this.destination.error(err);\n  }\n\n  protected _complete() {\n    this.scheduleNotification(Notification.createComplete());\n  }\n}\n\nclass DelayMessage<T> {\n  constructor(private time: number,\n              private notification: any) {\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { delay, DelaySignature } from '../../operator/delay';\n\nObservable.prototype.delay = delay;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    delay: DelaySignature<T>;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { Subscription, TeardownLogic } from '../Subscription';\n\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n\n/**\n * Delays the emission of items from the source Observable by a given time span\n * determined by the emissions of another Observable.\n *\n * <span class=\"informal\">It's like {@link delay}, but the time span of the\n * delay duration is determined by a second Observable.</span>\n *\n * <img src=\"./img/delayWhen.png\" width=\"100%\">\n *\n * `delayWhen` time shifts each emitted value from the source Observable by a\n * time span determined by another Observable. When the source emits a value,\n * the `delayDurationSelector` function is called with the source value as\n * argument, and should return an Observable, called the \"duration\" Observable.\n * The source value is emitted on the output Observable only when the duration\n * Observable emits a value or completes.\n *\n * Optionally, `delayWhen` takes a second argument, `subscriptionDelay`, which\n * is an Observable. When `subscriptionDelay` emits its first value or\n * completes, the source Observable is subscribed to and starts behaving like\n * described in the previous paragraph. If `subscriptionDelay` is not provided,\n * `delayWhen` will subscribe to the source Observable as soon as the output\n * Observable is subscribed.\n *\n * @example <caption>Delay each click by a random amount of time, between 0 and 5 seconds</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var delayedClicks = clicks.delayWhen(event =>\n *   Rx.Observable.interval(Math.random() * 5000)\n * );\n * delayedClicks.subscribe(x => console.log(x));\n *\n * @see {@link debounce}\n * @see {@link delay}\n *\n * @param {function(value: T): Observable} delayDurationSelector A function that\n * returns an Observable for each value emitted by the source Observable, which\n * is then used to delay the emission of that item on the output Observable\n * until the Observable returned from this function emits a value.\n * @param {Observable} subscriptionDelay An Observable that triggers the\n * subscription to the source Observable once it emits any value.\n * @return {Observable} An Observable that delays the emissions of the source\n * Observable by an amount of time specified by the Observable returned by\n * `delayDurationSelector`.\n * @method delayWhen\n * @owner Observable\n */\nexport function delayWhen<T>(delayDurationSelector: (value: T) => Observable<any>,\n                             subscriptionDelay?: Observable<any>): Observable<T> {\n  if (subscriptionDelay) {\n    return new SubscriptionDelayObservable(this, subscriptionDelay)\n            .lift(new DelayWhenOperator(delayDurationSelector));\n  }\n  return this.lift(new DelayWhenOperator(delayDurationSelector));\n}\n\nexport interface DelayWhenSignature<T> {\n  (delayDurationSelector: (value: T) => Observable<any>, subscriptionDelay?: Observable<any>): Observable<T>;\n}\n\nclass DelayWhenOperator<T> implements Operator<T, T> {\n  constructor(private delayDurationSelector: (value: T) => Observable<any>) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source._subscribe(new DelayWhenSubscriber(subscriber, this.delayDurationSelector));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass DelayWhenSubscriber<T, R> extends OuterSubscriber<T, R> {\n  private completed: boolean = false;\n  private delayNotifierSubscriptions: Array<Subscription> = [];\n  private values: Array<T> = [];\n\n  constructor(destination: Subscriber<T>,\n              private delayDurationSelector: (value: T) => Observable<any>) {\n    super(destination);\n  }\n\n  notifyNext(outerValue: T, innerValue: any,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    this.destination.next(outerValue);\n    this.removeSubscription(innerSub);\n    this.tryComplete();\n  }\n\n  notifyError(error: any, innerSub: InnerSubscriber<T, R>): void {\n    this._error(error);\n  }\n\n  notifyComplete(innerSub: InnerSubscriber<T, R>): void {\n    const value = this.removeSubscription(innerSub);\n    if (value) {\n      this.destination.next(value);\n    }\n    this.tryComplete();\n  }\n\n  protected _next(value: T): void {\n    try {\n      const delayNotifier = this.delayDurationSelector(value);\n      if (delayNotifier) {\n        this.tryDelay(delayNotifier, value);\n      }\n    } catch (err) {\n        this.destination.error(err);\n    }\n  }\n\n  protected _complete(): void {\n    this.completed = true;\n    this.tryComplete();\n  }\n\n  private removeSubscription(subscription: InnerSubscriber<T, R>): T {\n    subscription.unsubscribe();\n\n    const subscriptionIdx = this.delayNotifierSubscriptions.indexOf(subscription);\n    let value: T = null;\n\n    if (subscriptionIdx !== -1) {\n      value = this.values[subscriptionIdx];\n      this.delayNotifierSubscriptions.splice(subscriptionIdx, 1);\n      this.values.splice(subscriptionIdx, 1);\n    }\n\n    return value;\n  }\n\n  private tryDelay(delayNotifier: Observable<any>, value: T): void {\n    const notifierSubscription = subscribeToResult(this, delayNotifier, value);\n    this.add(notifierSubscription);\n\n    this.delayNotifierSubscriptions.push(notifierSubscription);\n    this.values.push(value);\n  }\n\n  private tryComplete(): void {\n    if (this.completed && this.delayNotifierSubscriptions.length === 0) {\n      this.destination.complete();\n    }\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SubscriptionDelayObservable<T> extends Observable<T> {\n  constructor(protected source: Observable<T>, private subscriptionDelay: Observable<any>) {\n    super();\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>) {\n    this.subscriptionDelay.subscribe(new SubscriptionDelaySubscriber(subscriber, this.source));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SubscriptionDelaySubscriber<T> extends Subscriber<T> {\n  private sourceSubscribed: boolean = false;\n\n  constructor(private parent: Subscriber<T>, private source: Observable<T>) {\n    super();\n  }\n\n  protected _next(unused: any) {\n    this.subscribeToSource();\n  }\n\n  protected _error(err: any) {\n    this.unsubscribe();\n    this.parent.error(err);\n  }\n\n  protected _complete() {\n    this.subscribeToSource();\n  }\n\n  private subscribeToSource(): void {\n    if (!this.sourceSubscribed) {\n      this.sourceSubscribed = true;\n      this.unsubscribe();\n      this.source.subscribe(this.parent);\n    }\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { delayWhen, DelayWhenSignature } from '../../operator/delayWhen';\n\nObservable.prototype.delayWhen = delayWhen;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    delayWhen: DelayWhenSignature<T>;\n  }\n}","import { Observable } from '../../Observable';\nimport { distinct, DistinctSignature } from '../../operator/distinct';\n\nObservable.prototype.distinct = distinct;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    distinct: DistinctSignature<T>;\n  }\n}","import { Observable } from '../Observable';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { TeardownLogic } from '../Subscription';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n\n/**\n * Returns an Observable that emits all items emitted by the source Observable that are distinct by comparison from previous items.\n * If a comparator function is provided, then it will be called for each item to test for whether or not that value should be emitted.\n * If a comparator function is not provided, an equality check is used by default.\n * As the internal HashSet of this operator grows larger and larger, care should be taken in the domain of inputs this operator may see.\n * An optional parameter is also provided such that an Observable can be provided to queue the internal HashSet to flush the values it holds.\n * @param {function} [compare] optional comparison function called to test if an item is distinct from previous items in the source.\n * @param {Observable} [flushes] optional Observable for flushing the internal HashSet of the operator.\n * @return {Observable} an Observable that emits items from the source Observable with distinct values.\n * @method distinct\n * @owner Observable\n */\nexport function distinct<T>(compare?: (x: T, y: T) => boolean, flushes?: Observable<any>): Observable<T> {\n  return this.lift(new DistinctOperator(compare, flushes));\n}\n\nexport interface DistinctSignature<T> {\n  (compare?: (x: T, y: T) => boolean, flushes?: Observable<any>): Observable<T>;\n}\n\nclass DistinctOperator<T> implements Operator<T, T> {\n  constructor(private compare: (x: T, y: T) => boolean, private flushes: Observable<any>) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source._subscribe(new DistinctSubscriber(subscriber, this.compare, this.flushes));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class DistinctSubscriber<T> extends OuterSubscriber<T, T> {\n  private values: Array<T> = [];\n\n  constructor(destination: Subscriber<T>, compare: (x: T, y: T) => boolean, flushes: Observable<any>) {\n    super(destination);\n    if (typeof compare === 'function') {\n      this.compare = compare;\n    }\n\n    if (flushes) {\n      this.add(subscribeToResult(this, flushes));\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: T,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, T>): void {\n    this.values.length = 0;\n  }\n\n  notifyError(error: any, innerSub: InnerSubscriber<T, T>): void {\n    this._error(error);\n  }\n\n  protected _next(value: T): void {\n    let found = false;\n    const values = this.values;\n    const len = values.length;\n    try {\n      for (let i = 0; i < len; i++) {\n        if (this.compare(values[i], value)) {\n          found = true;\n          return;\n        }\n      }\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    this.values.push(value);\n    this.destination.next(value);\n  }\n\n  private compare(x: T, y: T): boolean {\n    return x === y;\n  }\n}\n","import { distinct } from './distinct';\nimport { Observable } from '../Observable';\n\n/**\n * Returns an Observable that emits all items emitted by the source Observable that are distinct by comparison from previous items,\n * using a property accessed by using the key provided to check if the two items are distinct.\n * If a comparator function is provided, then it will be called for each item to test for whether or not that value should be emitted.\n * If a comparator function is not provided, an equality check is used by default.\n * As the internal HashSet of this operator grows larger and larger, care should be taken in the domain of inputs this operator may see.\n * An optional parameter is also provided such that an Observable can be provided to queue the internal HashSet to flush the values it holds.\n * @param {string} key string key for object property lookup on each item.\n * @param {function} [compare] optional comparison function called to test if an item is distinct from previous items in the source.\n * @param {Observable} [flushes] optional Observable for flushing the internal HashSet of the operator.\n * @return {Observable} an Observable that emits items from the source Observable with distinct values.\n * @method distinctKey\n * @owner Observable\n */\nexport function distinctKey<T>(key: string, compare?: (x: T, y: T) => boolean, flushes?: Observable<any>): Observable<T> {\n  return distinct.call(this, function(x: T, y: T) {\n    if (compare) {\n      return compare(x[key], y[key]);\n    }\n    return x[key] === y[key];\n  }, flushes);\n}\n\nexport interface DistinctKeySignature<T> {\n  (key: string): Observable<T>;\n  <K>(key: string, compare: (x: K, y: K) => boolean, flushes?: Observable<any>): Observable<T>;\n}\n","import { Observable } from '../../Observable';\nimport { distinctKey, DistinctKeySignature } from '../../operator/distinctKey';\n\nObservable.prototype.distinctKey = distinctKey;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    distinctKey: DistinctKeySignature<T>;\n  }\n}","\nimport { Observable } from '../../Observable';\nimport { distinctUntilChanged, DistinctUntilChangedSignature } from '../../operator/distinctUntilChanged';\n\nObservable.prototype.distinctUntilChanged = distinctUntilChanged;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    distinctUntilChanged: DistinctUntilChangedSignature<T>;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { tryCatch } from '../util/tryCatch';\nimport { errorObject } from '../util/errorObject';\nimport { Observable } from '../Observable';\nimport { TeardownLogic } from '../Subscription';\n\n/**\n * Returns an Observable that emits all items emitted by the source Observable that are distinct by comparison from the previous item.\n * If a comparator function is provided, then it will be called for each item to test for whether or not that value should be emitted.\n * If a comparator function is not provided, an equality check is used by default.\n * @param {function} [compare] optional comparison function called to test if an item is distinct from the previous item in the source.\n * @return {Observable} an Observable that emits items from the source Observable with distinct values.\n * @method distinctUntilChanged\n * @owner Observable\n */\nexport function distinctUntilChanged<T, K>(compare?: (x: K, y: K) => boolean, keySelector?: (x: T) => K): Observable<T> {\n  return this.lift(new DistinctUntilChangedOperator<T, K>(compare, keySelector));\n}\n\nexport interface DistinctUntilChangedSignature<T> {\n (compare?: (x: T, y: T) => boolean): Observable<T>;\n <K>(compare: (x: K, y: K) => boolean, keySelector: (x: T) => K): Observable<T>;\n}\n\nclass DistinctUntilChangedOperator<T, K> implements Operator<T, T> {\n  constructor(private compare: (x: K, y: K) => boolean,\n              private keySelector: (x: T) => K) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source._subscribe(new DistinctUntilChangedSubscriber(subscriber, this.compare, this.keySelector));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass DistinctUntilChangedSubscriber<T, K> extends Subscriber<T> {\n  private key: K;\n  private hasKey: boolean = false;\n\n  constructor(destination: Subscriber<T>,\n              compare: (x: K, y: K) => boolean,\n              private keySelector: (x: T) => K) {\n    super(destination);\n    if (typeof compare === 'function') {\n      this.compare = compare;\n    }\n  }\n\n  private compare(x: any, y: any): boolean {\n    return x === y;\n  }\n\n  protected _next(value: T): void {\n\n    const keySelector = this.keySelector;\n    let key: any = value;\n\n    if (keySelector) {\n      key = tryCatch(this.keySelector)(value);\n      if (key === errorObject) {\n        return this.destination.error(errorObject.e);\n      }\n    }\n\n    let result: any = false;\n\n    if (this.hasKey) {\n      result = tryCatch(this.compare)(this.key, key);\n      if (result === errorObject) {\n        return this.destination.error(errorObject.e);\n      }\n    } else {\n      this.hasKey = true;\n    }\n\n    if (Boolean(result) === false) {\n      this.key = key;\n      this.destination.next(value);\n    }\n  }\n}\n","import { distinctUntilChanged } from './distinctUntilChanged';\nimport { Observable } from '../Observable';\n\n/**\n * Returns an Observable that emits all items emitted by the source Observable that are distinct by comparison from the previous item,\n * using a property accessed by using the key provided to check if the two items are distinct.\n * If a comparator function is provided, then it will be called for each item to test for whether or not that value should be emitted.\n * If a comparator function is not provided, an equality check is used by default.\n * @param {string} key string key for object property lookup on each item.\n * @param {function} [compare] optional comparison function called to test if an item is distinct from the previous item in the source.\n * @return {Observable} an Observable that emits items from the source Observable with distinct values based on the key specified.\n * @method distinctUntilKeyChanged\n * @owner Observable\n */\nexport function distinctUntilKeyChanged<T>(key: string, compare?: (x: T, y: T) => boolean): Observable<T> {\n  return distinctUntilChanged.call(this, function(x: T, y: T) {\n    if (compare) {\n      return compare(x[key], y[key]);\n    }\n    return x[key] === y[key];\n  });\n}\n\nexport interface DistinctUntilKeyChangedSignature<T> {\n  (key: string): Observable<T>;\n  <K>(key: string, compare: (x: K, y: K) => boolean): Observable<T>;\n}","\nimport { Observable } from '../../Observable';\nimport { distinctUntilKeyChanged, DistinctUntilKeyChangedSignature } from '../../operator/distinctUntilKeyChanged';\n\nObservable.prototype.distinctUntilKeyChanged = distinctUntilKeyChanged;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    distinctUntilKeyChanged: DistinctUntilKeyChangedSignature<T>;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { PartialObserver } from '../Observer';\nimport { TeardownLogic } from '../Subscription';\n\n/**\n * Perform a side effect for every emission on the source Observable, but return\n * an Observable that is identical to the source.\n *\n * <span class=\"informal\">Intercepts each emission on the source and runs a\n * function, but returns an output which is identical to the source.</span>\n *\n * <img src=\"./img/do.png\" width=\"100%\">\n *\n * Returns a mirrored Observable of the source Observable, but modified so that\n * the provided Observer is called to perform a side effect for every value,\n * error, and completion emitted by the source. Any errors that are thrown in\n * the aforementioned Observer or handlers are safely sent down the error path\n * of the output Observable.\n *\n * This operator is useful for debugging your Observables for the correct values\n * or performing other side effects.\n *\n * Note: this is different to a `subscribe` on the Observable. If the Observable\n * returned by `do` is not subscribed, the side effects specified by the\n * Observer will never happen. `do` therefore simply spies on existing\n * execution, it does not trigger an execution to happen like `subscribe` does.\n *\n * @example <caption>Map every every click to the clientX position of that click, while also logging the click event</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var positions = clicks\n *   .do(ev => console.log(ev))\n *   .map(ev => ev.clientX);\n * positions.subscribe(x => console.log(x));\n *\n * @see {@link map}\n * @see {@link subscribe}\n *\n * @param {Observer|function} [nextOrObserver] A normal Observer object or a\n * callback for `next`.\n * @param {function} [error] Callback for errors in the source.\n * @param {function} [complete] Callback for the completion of the source.\n * @return {Observable} An Observable identical to the source, but runs the\n * specified Observer or callback(s) for each item.\n * @method do\n * @name do\n * @owner Observable\n */\nexport function _do<T>(nextOrObserver?: PartialObserver<T> | ((x: T) => void),\n                       error?: (e: any) => void,\n                       complete?: () => void): Observable<T> {\n  return this.lift(new DoOperator(nextOrObserver, error, complete));\n}\n\nexport interface DoSignature<T> {\n  (next: (x: T) => void, error?: (e: any) => void, complete?: () => void): Observable<T>;\n  (observer: PartialObserver<T>): Observable<T>;\n}\n\nclass DoOperator<T> implements Operator<T, T> {\n  constructor(private nextOrObserver?: PartialObserver<T> | ((x: T) => void),\n              private error?: (e: any) => void,\n              private complete?: () => void) {\n  }\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source._subscribe(new DoSubscriber(subscriber, this.nextOrObserver, this.error, this.complete));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass DoSubscriber<T> extends Subscriber<T> {\n\n  private safeSubscriber: Subscriber<T>;\n\n  constructor(destination: Subscriber<T>,\n              nextOrObserver?: PartialObserver<T> | ((x: T) => void),\n              error?: (e: any) => void,\n              complete?: () => void) {\n    super(destination);\n\n    const safeSubscriber = new Subscriber<T>(nextOrObserver, error, complete);\n    safeSubscriber.syncErrorThrowable = true;\n    this.add(safeSubscriber);\n    this.safeSubscriber = safeSubscriber;\n  }\n\n  protected _next(value: T): void {\n    const { safeSubscriber } = this;\n    safeSubscriber.next(value);\n    if (safeSubscriber.syncErrorThrown) {\n      this.destination.error(safeSubscriber.syncErrorValue);\n    } else {\n      this.destination.next(value);\n    }\n  }\n\n  protected _error(err: any): void {\n    const { safeSubscriber } = this;\n    safeSubscriber.error(err);\n    if (safeSubscriber.syncErrorThrown) {\n      this.destination.error(safeSubscriber.syncErrorValue);\n    } else {\n      this.destination.error(err);\n    }\n  }\n\n  protected _complete(): void {\n    const { safeSubscriber } = this;\n    safeSubscriber.complete();\n    if (safeSubscriber.syncErrorThrown) {\n      this.destination.error(safeSubscriber.syncErrorValue);\n    } else {\n      this.destination.complete();\n    }\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { _do, DoSignature } from '../../operator/do';\n\nObservable.prototype.do = _do;\nObservable.prototype._do = _do;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    do: DoSignature<T>;\n    _do: DoSignature<T>;\n  }\n}","import { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription, TeardownLogic } from '../Subscription';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n\n/**\n * Converts a higher-order Observable into a first-order Observable by dropping\n * inner Observables while the previous inner Observable has not yet completed.\n *\n * <span class=\"informal\">Flattens an Observable-of-Observables by dropping the\n * next inner Observables while the current inner is still executing.</span>\n *\n * <img src=\"./img/exhaust.png\" width=\"100%\">\n *\n * `exhaust` subscribes to an Observable that emits Observables, also known as a\n * higher-order Observable. Each time it observes one of these emitted inner\n * Observables, the output Observable begins emitting the items emitted by that\n * inner Observable. So far, it behaves like {@link mergeAll}. However,\n * `exhaust` ignores every new inner Observable if the previous Observable has\n * not yet completed. Once that one completes, it will accept and flatten the\n * next inner Observable and repeat this process.\n *\n * @example <caption>Run a finite timer for each click, only if there is no currently active timer</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var higherOrder = clicks.map((ev) => Rx.Observable.interval(1000));\n * var result = higherOrder.exhaust();\n * result.subscribe(x => console.log(x));\n *\n * @see {@link combineAll}\n * @see {@link concatAll}\n * @see {@link switch}\n * @see {@link mergeAll}\n * @see {@link exhaustMap}\n * @see {@link zipAll}\n *\n * @return {Observable} Returns an Observable that takes a source of Observables\n * and propagates the first observable exclusively until it completes before\n * subscribing to the next.\n * @method exhaust\n * @owner Observable\n */\nexport function exhaust<T>(): Observable<T> {\n  return this.lift(new SwitchFirstOperator<T>());\n}\n\nexport interface SwitchFirstSignature<T> {\n  (): T;\n}\n\nclass SwitchFirstOperator<T> implements Operator<T, T> {\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source._subscribe(new SwitchFirstSubscriber(subscriber));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SwitchFirstSubscriber<T> extends OuterSubscriber<T, T> {\n  private hasCompleted: boolean = false;\n  private hasSubscription: boolean = false;\n\n  constructor(destination: Subscriber<T>) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    if (!this.hasSubscription) {\n      this.hasSubscription = true;\n      this.add(subscribeToResult(this, value));\n    }\n  }\n\n  protected _complete(): void {\n    this.hasCompleted = true;\n    if (!this.hasSubscription) {\n      this.destination.complete();\n    }\n  }\n\n  notifyComplete(innerSub: Subscription): void {\n    this.remove(innerSub);\n    this.hasSubscription = false;\n    if (this.hasCompleted) {\n      this.destination.complete();\n    }\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { exhaust, SwitchFirstSignature } from '../../operator/exhaust';\n\nObservable.prototype.exhaust = exhaust;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    exhaust: SwitchFirstSignature<T>;\n  }\n}","import { Operator } from '../Operator';\nimport { Observable, ObservableInput } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n\n/**\n * Projects each source value to an Observable which is merged in the output\n * Observable only if the previous projected Observable has completed.\n *\n * <span class=\"informal\">Maps each value to an Observable, then flattens all of\n * these inner Observables using {@link exhaust}.</span>\n *\n * <img src=\"./img/exhaustMap.png\" width=\"100%\">\n *\n * Returns an Observable that emits items based on applying a function that you\n * supply to each item emitted by the source Observable, where that function\n * returns an (so-called \"inner\") Observable. When it projects a source value to\n * an Observable, the output Observable begins emitting the items emitted by\n * that projected Observable. However, `exhaustMap` ignores every new projected\n * Observable if the previous projected Observable has not yet completed. Once\n * that one completes, it will accept and flatten the next projected Observable\n * and repeat this process.\n *\n * @example <caption>Run a finite timer for each click, only if there is no currently active timer</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.exhaustMap((ev) => Rx.Observable.interval(1000));\n * result.subscribe(x => console.log(x));\n *\n * @see {@link concatMap}\n * @see {@link exhaust}\n * @see {@link mergeMap}\n * @see {@link switchMap}\n *\n * @param {function(value: T, ?index: number): Observable} project A function\n * that, when applied to an item emitted by the source Observable, returns an\n * Observable.\n * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]\n * A function to produce the value on the output Observable based on the values\n * and the indices of the source (outer) emission and the inner Observable\n * emission. The arguments passed to this function are:\n * - `outerValue`: the value that came from the source\n * - `innerValue`: the value that came from the projected Observable\n * - `outerIndex`: the \"index\" of the value that came from the source\n * - `innerIndex`: the \"index\" of the value from the projected Observable\n * @return {Observable} An Observable containing projected Observables\n * of each item of the source, ignoring projected Observables that start before\n * their preceding Observable has completed.\n * @method exhaustMap\n * @owner Observable\n */\nexport function exhaustMap<T, I, R>(project: (value: T, index: number) => ObservableInput<I>,\n                                    resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R): Observable<R> {\n  return this.lift(new SwitchFirstMapOperator(project, resultSelector));\n}\n\nexport interface SwitchFirstMapSignature<T> {\n  <R>(project: (value: T, index: number) => ObservableInput<R>): Observable<R>;\n  <I, R>(project: (value: T, index: number) => ObservableInput<I>,\n         resultSelector: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R): Observable<R>;\n}\n\nclass SwitchFirstMapOperator<T, I, R> implements Operator<T, R> {\n  constructor(private project: (value: T, index: number) => ObservableInput<I>,\n              private resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R) {\n  }\n\n  call(subscriber: Subscriber<R>, source: any): any {\n    return source._subscribe(new SwitchFirstMapSubscriber(subscriber, this.project, this.resultSelector));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SwitchFirstMapSubscriber<T, I, R> extends OuterSubscriber<T, I> {\n  private hasSubscription: boolean = false;\n  private hasCompleted: boolean = false;\n  private index: number = 0;\n\n  constructor(destination: Subscriber<R>,\n              private project: (value: T, index: number) => ObservableInput<I>,\n              private resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    if (!this.hasSubscription) {\n      this.tryNext(value);\n    }\n  }\n\n  private tryNext(value: T): void {\n    const index = this.index++;\n    const destination = this.destination;\n    try {\n      const result = this.project(value, index);\n      this.hasSubscription = true;\n      this.add(subscribeToResult(this, result, value, index));\n    } catch (err) {\n      destination.error(err);\n    }\n  }\n\n  protected _complete(): void {\n    this.hasCompleted = true;\n    if (!this.hasSubscription) {\n      this.destination.complete();\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: I,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, I>): void {\n    const { resultSelector, destination } = this;\n    if (resultSelector) {\n      this.trySelectResult(outerValue, innerValue, outerIndex, innerIndex);\n    } else {\n      destination.next(innerValue);\n    }\n  }\n\n  private trySelectResult(outerValue: T, innerValue: I,\n                          outerIndex: number, innerIndex: number): void {\n    const { resultSelector, destination } = this;\n    try {\n      const result = resultSelector(outerValue, innerValue, outerIndex, innerIndex);\n      destination.next(result);\n    } catch (err) {\n      destination.error(err);\n    }\n  }\n\n  notifyError(err: any): void {\n    this.destination.error(err);\n  }\n\n  notifyComplete(innerSub: Subscription): void {\n    this.remove(innerSub);\n\n    this.hasSubscription = false;\n    if (this.hasCompleted) {\n      this.destination.complete();\n    }\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { exhaustMap, SwitchFirstMapSignature } from '../../operator/exhaustMap';\n\nObservable.prototype.exhaustMap = exhaustMap;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    exhaustMap: SwitchFirstMapSignature<T>;\n  }\n}","import { Observable } from '../Observable';\nimport { Scheduler } from '../Scheduler';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { tryCatch } from '../util/tryCatch';\nimport { errorObject } from '../util/errorObject';\nimport { Subscription } from '../Subscription';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n\n/**\n * Recursively projects each source value to an Observable which is merged in\n * the output Observable.\n *\n * <span class=\"informal\">It's similar to {@link mergeMap}, but applies the\n * projection function to every source value as well as every output value.\n * It's recursive.</span>\n *\n * <img src=\"./img/expand.png\" width=\"100%\">\n *\n * Returns an Observable that emits items based on applying a function that you\n * supply to each item emitted by the source Observable, where that function\n * returns an Observable, and then merging those resulting Observables and\n * emitting the results of this merger. *Expand* will re-emit on the output\n * Observable every source value. Then, each output value is given to the\n * `project` function which returns an inner Observable to be merged on the\n * output Observable. Those output values resulting from the projection are also\n * given to the `project` function to produce new output values. This is how\n * *expand* behaves recursively.\n *\n * @example <caption>Start emitting the powers of two on every click, at most 10 of them</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var powersOfTwo = clicks\n *   .mapTo(1)\n *   .expand(x => Rx.Observable.of(2 * x).delay(1000))\n *   .take(10);\n * powersOfTwo.subscribe(x => console.log(x));\n *\n * @see {@link mergeMap}\n * @see {@link mergeScan}\n *\n * @param {function(value: T, index: number) => Observable} project A function\n * that, when applied to an item emitted by the source or the output Observable,\n * returns an Observable.\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of input\n * Observables being subscribed to concurrently.\n * @param {Scheduler} [scheduler=null] The Scheduler to use for subscribing to\n * each projected inner Observable.\n * @return {Observable} An Observable that emits the source values and also\n * result of applying the projection function to each value emitted on the\n * output Observable and and merging the results of the Observables obtained\n * from this transformation.\n * @method expand\n * @owner Observable\n */\nexport function expand<T, R>(project: (value: T, index: number) => Observable<R>,\n                             concurrent: number = Number.POSITIVE_INFINITY,\n                             scheduler: Scheduler = undefined): Observable<R> {\n  concurrent = (concurrent || 0) < 1 ? Number.POSITIVE_INFINITY : concurrent;\n\n  return this.lift(new ExpandOperator(project, concurrent, scheduler));\n}\n\nexport interface ExpandSignature<T> {\n  (project: (value: T, index: number) => Observable<T>, concurrent?: number, scheduler?: Scheduler): Observable<T>;\n  <R>(project: (value: T, index: number) => Observable<R>, concurrent?: number, scheduler?: Scheduler): Observable<R>;\n}\n\nexport class ExpandOperator<T, R> implements Operator<T, R> {\n  constructor(private project: (value: T, index: number) => Observable<R>,\n              private concurrent: number,\n              private scheduler: Scheduler) {\n  }\n\n  call(subscriber: Subscriber<R>, source: any): any {\n    return source._subscribe(new ExpandSubscriber(subscriber, this.project, this.concurrent, this.scheduler));\n  }\n}\n\ninterface DispatchArg<T, R> {\n  subscriber: ExpandSubscriber<T, R>;\n  result: Observable<R>;\n  value: any;\n  index: number;\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class ExpandSubscriber<T, R> extends OuterSubscriber<T, R> {\n  private index: number = 0;\n  private active: number = 0;\n  private hasCompleted: boolean = false;\n  private buffer: any[];\n\n  constructor(destination: Subscriber<R>,\n              private project: (value: T, index: number) => Observable<R>,\n              private concurrent: number,\n              private scheduler: Scheduler) {\n    super(destination);\n    if (concurrent < Number.POSITIVE_INFINITY) {\n      this.buffer = [];\n    }\n  }\n\n  private static dispatch<T, R>(arg: DispatchArg<T, R>): void {\n    const {subscriber, result, value, index} = arg;\n    subscriber.subscribeToProjection(result, value, index);\n  }\n\n  protected _next(value: any): void {\n    const destination = this.destination;\n\n    if (destination.closed) {\n      this._complete();\n      return;\n    }\n\n    const index = this.index++;\n    if (this.active < this.concurrent) {\n      destination.next(value);\n      let result = tryCatch(this.project)(value, index);\n      if (result === errorObject) {\n        destination.error(errorObject.e);\n      } else if (!this.scheduler) {\n        this.subscribeToProjection(result, value, index);\n      } else {\n        const state: DispatchArg<T, R> = { subscriber: this, result, value, index };\n        this.add(this.scheduler.schedule(ExpandSubscriber.dispatch, 0, state));\n      }\n    } else {\n      this.buffer.push(value);\n    }\n  }\n\n  private subscribeToProjection(result: any, value: T, index: number): void {\n    this.active++;\n    this.add(subscribeToResult<T, R>(this, result, value, index));\n  }\n\n  protected _complete(): void {\n    this.hasCompleted = true;\n    if (this.hasCompleted && this.active === 0) {\n      this.destination.complete();\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: R,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    this._next(innerValue);\n  }\n\n  notifyComplete(innerSub: Subscription): void {\n    const buffer = this.buffer;\n    this.remove(innerSub);\n    this.active--;\n    if (buffer && buffer.length > 0) {\n      this._next(buffer.shift());\n    }\n    if (this.hasCompleted && this.active === 0) {\n      this.destination.complete();\n    }\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { expand, ExpandSignature } from '../../operator/expand';\n\nObservable.prototype.expand = expand;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    expand: ExpandSignature<T>;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { ArgumentOutOfRangeError } from '../util/ArgumentOutOfRangeError';\nimport { Observable } from '../Observable';\nimport { TeardownLogic } from '../Subscription';\n\n/**\n * Emits the single value at the specified `index` in a sequence of emissions\n * from the source Observable.\n *\n * <span class=\"informal\">Emits only the i-th value, then completes.</span>\n *\n * <img src=\"./img/elementAt.png\" width=\"100%\">\n *\n * `elementAt` returns an Observable that emits the item at the specified\n * `index` in the source Observable, or a default value if that `index` is out\n * of range and the `default` argument is provided. If the `default` argument is\n * not given and the `index` is out of range, the output Observable will emit an\n * `ArgumentOutOfRangeError` error.\n *\n * @example <caption>Emit only the third click event</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.elementAt(2);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link first}\n * @see {@link last}\n * @see {@link skip}\n * @see {@link single}\n * @see {@link take}\n *\n * @throws {ArgumentOutOfRangeError} When using `elementAt(i)`, it delivers an\n * ArgumentOutOrRangeError to the Observer's `error` callback if `i < 0` or the\n * Observable has completed before emitting the i-th `next` notification.\n *\n * @param {number} index Is the number `i` for the i-th source emission that has\n * happened since the subscription, starting from the number `0`.\n * @param {T} [defaultValue] The default value returned for missing indices.\n * @return {Observable} An Observable that emits a single item, if it is found.\n * Otherwise, will emit the default value if given. If not, then emits an error.\n * @method elementAt\n * @owner Observable\n */\nexport function elementAt<T>(index: number, defaultValue?: T): Observable<T> {\n  return this.lift(new ElementAtOperator(index, defaultValue));\n}\n\nexport interface ElementAtSignature<T> {\n  (index: number, defaultValue?: T): Observable<T>;\n}\n\nclass ElementAtOperator<T> implements Operator<T, T> {\n\n  constructor(private index: number, private defaultValue?: T) {\n    if (index < 0) {\n      throw new ArgumentOutOfRangeError;\n    }\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source._subscribe(new ElementAtSubscriber(subscriber, this.index, this.defaultValue));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass ElementAtSubscriber<T> extends Subscriber<T> {\n\n  constructor(destination: Subscriber<T>, private index: number, private defaultValue?: T) {\n    super(destination);\n  }\n\n  protected _next(x: T) {\n    if (this.index-- === 0) {\n      this.destination.next(x);\n      this.destination.complete();\n    }\n  }\n\n  protected _complete() {\n    const destination = this.destination;\n    if (this.index >= 0) {\n      if (typeof this.defaultValue !== 'undefined') {\n        destination.next(this.defaultValue);\n      } else {\n        destination.error(new ArgumentOutOfRangeError);\n      }\n    }\n    destination.complete();\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { elementAt, ElementAtSignature } from '../../operator/elementAt';\n\nObservable.prototype.elementAt = elementAt;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    elementAt: ElementAtSignature<T>;\n  }\n}","\nimport { Observable } from '../../Observable';\nimport { filter, FilterSignature } from '../../operator/filter';\n\nObservable.prototype.filter = filter;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    filter: FilterSignature<T>;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription, TeardownLogic } from '../Subscription';\nimport { Observable } from '../Observable';\n\n/**\n * Returns an Observable that mirrors the source Observable, but will call a specified function when\n * the source terminates on complete or error.\n * @param {function} callback function to be called when source terminates.\n * @return {Observable} an Observable that mirrors the source, but will call the specified function on termination.\n * @method finally\n * @owner Observable\n */\nexport function _finally<T>(callback: () => void): Observable<T> {\n  return this.lift(new FinallyOperator(callback));\n}\n\nexport interface FinallySignature<T> {\n  (callback: () => void): Observable<T>;\n}\n\nclass FinallyOperator<T> implements Operator<T, T> {\n  constructor(private callback: () => void) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source._subscribe(new FinallySubscriber(subscriber, this.callback));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass FinallySubscriber<T> extends Subscriber<T> {\n  constructor(destination: Subscriber<T>, callback: () => void) {\n    super(destination);\n    this.add(new Subscription(callback));\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { _finally, FinallySignature } from '../../operator/finally';\n\nObservable.prototype.finally = _finally;\nObservable.prototype._finally = _finally;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    finally: FinallySignature<T>;\n    _finally: FinallySignature<T>;\n  }\n}","\nimport { Observable } from '../../Observable';\nimport { find, FindSignature } from '../../operator/find';\n\nObservable.prototype.find = find;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    find: FindSignature<T>;\n  }\n}","import { Observable } from '../Observable';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\n\n/**\n * Emits only the first value emitted by the source Observable that meets some\n * condition.\n *\n * <span class=\"informal\">Finds the first value that passes some test and emits\n * that.</span>\n *\n * <img src=\"./img/find.png\" width=\"100%\">\n *\n * `find` searches for the first item in the source Observable that matches the\n * specified condition embodied by the `predicate`, and returns the first\n * occurrence in the source. Unlike {@link first}, the `predicate` is required\n * in `find`, and does not emit an error if a valid value is not found.\n *\n * @example <caption>Find and emit the first click that happens on a DIV element</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.find(ev => ev.target.tagName === 'DIV');\n * result.subscribe(x => console.log(x));\n *\n * @see {@link filter}\n * @see {@link first}\n * @see {@link findIndex}\n * @see {@link take}\n *\n * @param {function(value: T, index: number, source: Observable<T>): boolean} predicate\n * A function called with each item to test for condition matching.\n * @param {any} [thisArg] An optional argument to determine the value of `this`\n * in the `predicate` function.\n * @return {Observable<T>} An Observable of the first item that matches the\n * condition.\n * @method find\n * @owner Observable\n */\nexport function find<T>(predicate: (value: T, index: number, source: Observable<T>) => boolean,\n                        thisArg?: any): Observable<T> {\n  if (typeof predicate !== 'function') {\n    throw new TypeError('predicate is not a function');\n  }\n  return this.lift(new FindValueOperator(predicate, this, false, thisArg));\n}\n\nexport interface FindSignature<T> {\n  (predicate: (value: T, index: number, source: Observable<T>) => boolean, thisArg?: any): Observable<T>;\n}\n\nexport class FindValueOperator<T> implements Operator<T, T> {\n  constructor(private predicate: (value: T, index: number, source: Observable<T>) => boolean,\n              private source: Observable<T>,\n              private yieldIndex: boolean,\n              private thisArg?: any) {\n  }\n\n  call(observer: Subscriber<T>, source: any): any {\n    return source._subscribe(new FindValueSubscriber(observer, this.predicate, this.source, this.yieldIndex, this.thisArg));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class FindValueSubscriber<T> extends Subscriber<T> {\n  private index: number = 0;\n\n  constructor(destination: Subscriber<T>,\n              private predicate: (value: T, index: number, source: Observable<T>) => boolean,\n              private source: Observable<T>,\n              private yieldIndex: boolean,\n              private thisArg?: any) {\n    super(destination);\n  }\n\n  private notifyComplete(value: any): void {\n    const destination = this.destination;\n\n    destination.next(value);\n    destination.complete();\n  }\n\n  protected _next(value: T): void {\n    const { predicate, thisArg } = this;\n    const index = this.index++;\n    try {\n      const result = predicate.call(thisArg || this, value, index, this.source);\n      if (result) {\n        this.notifyComplete(this.yieldIndex ? index : value);\n      }\n    } catch (err) {\n      this.destination.error(err);\n    }\n  }\n\n  protected _complete(): void {\n    this.notifyComplete(this.yieldIndex ? -1 : undefined);\n  }\n}\n","import { Observable } from '../Observable';\nimport { FindValueOperator } from './find';\n\n/**\n * Emits only the index of the first value emitted by the source Observable that\n * meets some condition.\n *\n * <span class=\"informal\">It's like {@link find}, but emits the index of the\n * found value, not the value itself.</span>\n *\n * <img src=\"./img/findIndex.png\" width=\"100%\">\n *\n * `findIndex` searches for the first item in the source Observable that matches\n * the specified condition embodied by the `predicate`, and returns the\n * (zero-based) index of the first occurrence in the source. Unlike\n * {@link first}, the `predicate` is required in `findIndex`, and does not emit\n * an error if a valid value is not found.\n *\n * @example <caption>Emit the index of first click that happens on a DIV element</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.findIndex(ev => ev.target.tagName === 'DIV');\n * result.subscribe(x => console.log(x));\n *\n * @see {@link filter}\n * @see {@link find}\n * @see {@link first}\n * @see {@link take}\n *\n * @param {function(value: T, index: number, source: Observable<T>): boolean} predicate\n * A function called with each item to test for condition matching.\n * @param {any} [thisArg] An optional argument to determine the value of `this`\n * in the `predicate` function.\n * @return {Observable} An Observable of the index of the first item that\n * matches the condition.\n * @method find\n * @owner Observable\n */\nexport function findIndex<T>(predicate: (value: T, index: number, source: Observable<T>) => boolean,\n                             thisArg?: any): Observable<number> {\n  return this.lift(new FindValueOperator(predicate, this, true, thisArg));\n}\n\nexport interface FindIndexSignature<T> {\n  (predicate: (value: T, index: number, source: Observable<T>) => boolean, thisArg?: any): Observable<number>;\n}\n","\nimport { Observable } from '../../Observable';\nimport { findIndex, FindIndexSignature } from '../../operator/findIndex';\n\nObservable.prototype.findIndex = findIndex;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    findIndex: FindIndexSignature<T>;\n  }\n}","import { Observable } from '../Observable';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { EmptyError } from '../util/EmptyError';\n\n/**\n * Emits only the first value (or the first value that meets some condition)\n * emitted by the source Observable.\n *\n * <span class=\"informal\">Emits only the first value. Or emits only the first\n * value that passes some test.</span>\n *\n * <img src=\"./img/first.png\" width=\"100%\">\n *\n * If called with no arguments, `first` emits the first value of the source\n * Observable, then completes. If called with a `predicate` function, `first`\n * emits the first value of the source that matches the specified condition. It\n * may also take a `resultSelector` function to produce the output value from\n * the input value, and a `defaultValue` to emit in case the source completes\n * before it is able to emit a valid value. Throws an error if `defaultValue`\n * was not provided and a matching element is not found.\n *\n * @example <caption>Emit only the first click that happens on the DOM</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.first();\n * result.subscribe(x => console.log(x));\n *\n * @example <caption>Emits the first click that happens on a DIV</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.first(ev => ev.target.tagName === 'DIV');\n * result.subscribe(x => console.log(x));\n *\n * @see {@link filter}\n * @see {@link find}\n * @see {@link take}\n *\n * @throws {EmptyError} Delivers an EmptyError to the Observer's `error`\n * callback if the Observable completes before any `next` notification was sent.\n *\n * @param {function(value: T, index: number, source: Observable<T>): boolean} [predicate]\n * An optional function called with each item to test for condition matching.\n * @param {function(value: T, index: number): R} [resultSelector] A function to\n * produce the value on the output Observable based on the values\n * and the indices of the source Observable. The arguments passed to this\n * function are:\n * - `value`: the value that was emitted on the source.\n * - `index`: the \"index\" of the value from the source.\n * @param {R} [defaultValue] The default value emitted in case no valid value\n * was found on the source.\n * @return {Observable<T|R>} an Observable of the first item that matches the\n * condition.\n * @method first\n * @owner Observable\n */\nexport function first<T, R>(predicate?: (value: T, index: number, source: Observable<T>) => boolean,\n                            resultSelector?: (value: T, index: number) => R,\n                            defaultValue?: R): Observable<T | R> {\n  return this.lift(new FirstOperator(predicate, resultSelector, defaultValue, this));\n}\n\nexport interface FirstSignature<T> {\n  (predicate?: (value: T, index: number, source: Observable<T>) => boolean): Observable<T>;\n  (predicate: (value: T, index: number, source: Observable<T>) => boolean, resultSelector: void, defaultValue?: T): Observable<T>;\n  <R>(predicate?: (value: T, index: number, source: Observable<T>) => boolean, resultSelector?: (value: T, index: number) => R,\n      defaultValue?: R): Observable<R>;\n}\n\nclass FirstOperator<T, R> implements Operator<T, R> {\n  constructor(private predicate?: (value: T, index: number, source: Observable<T>) => boolean,\n              private resultSelector?: (value: T, index: number) => R,\n              private defaultValue?: any,\n              private source?: Observable<T>) {\n  }\n\n  call(observer: Subscriber<R>, source: any): any {\n    return source._subscribe(new FirstSubscriber(observer, this.predicate, this.resultSelector, this.defaultValue, this.source));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass FirstSubscriber<T, R> extends Subscriber<T> {\n  private index: number = 0;\n  private hasCompleted: boolean = false;\n\n  constructor(destination: Subscriber<R>,\n              private predicate?: (value: T, index: number, source: Observable<T>) => boolean,\n              private resultSelector?: (value: T, index: number) => R,\n              private defaultValue?: any,\n              private source?: Observable<T>) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    const index = this.index++;\n    if (this.predicate) {\n      this._tryPredicate(value, index);\n    } else {\n      this._emit(value, index);\n    }\n  }\n\n  private _tryPredicate(value: T, index: number) {\n    let result: any;\n    try {\n      result = this.predicate(value, index, this.source);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    if (result) {\n      this._emit(value, index);\n    }\n  }\n\n  private _emit(value: any, index: number) {\n    if (this.resultSelector) {\n      this._tryResultSelector(value, index);\n      return;\n    }\n    this._emitFinal(value);\n  }\n\n  private _tryResultSelector(value: T, index: number) {\n    let result: any;\n    try {\n      result = this.resultSelector(value, index);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    this._emitFinal(result);\n  }\n\n  private _emitFinal(value: any) {\n    const destination = this.destination;\n    destination.next(value);\n    destination.complete();\n    this.hasCompleted = true;\n  }\n\n  protected _complete(): void {\n    const destination = this.destination;\n    if (!this.hasCompleted && typeof this.defaultValue !== 'undefined') {\n      destination.next(this.defaultValue);\n      destination.complete();\n    } else if (!this.hasCompleted) {\n      destination.error(new EmptyError);\n    }\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { first, FirstSignature } from '../../operator/first';\n\nObservable.prototype.first = <any>first;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    first: FirstSignature<T>;\n  }\n}","export class MapPolyfill {\n  public size = 0;\n  private _values: any[] = [];\n  private _keys: any[] = [];\n\n  get(key: any) {\n    const i = this._keys.indexOf(key);\n    return i === -1 ? undefined : this._values[i];\n  }\n\n  set(key: any, value: any) {\n    const i = this._keys.indexOf(key);\n    if (i === -1) {\n      this._keys.push(key);\n      this._values.push(value);\n      this.size++;\n    } else {\n      this._values[i] = value;\n    }\n    return this;\n  }\n\n  delete(key: any): boolean {\n    const i = this._keys.indexOf(key);\n    if (i === -1) { return false; }\n    this._values.splice(i, 1);\n    this._keys.splice(i, 1);\n    this.size--;\n    return true;\n  }\n\n  clear(): void {\n    this._keys.length = 0;\n    this._values.length = 0;\n    this.size = 0;\n  }\n\n  forEach(cb: Function, thisArg: any): void {\n    for (let i = 0; i < this.size; i++) {\n      cb.call(thisArg, this._values[i], this._keys[i]);\n    }\n  }\n}","import { root } from './root';\nimport { MapPolyfill } from './MapPolyfill';\n\nexport const Map = root.Map || (() => MapPolyfill)();","export class FastMap {\n  private values: Object = {};\n\n  delete(key: string): boolean {\n    this.values[key] = null;\n    return true;\n  }\n\n  set(key: string, value: any): FastMap {\n    this.values[key] = value;\n    return this;\n  }\n\n  get(key: string): any {\n    return this.values[key];\n  }\n\n  forEach(cb: (value: any, key: any) => void, thisArg?: any): void {\n    const values = this.values;\n    for (let key in values) {\n      if (values.hasOwnProperty(key) && values[key] !== null) {\n        cb.call(thisArg, values[key], key);\n      }\n    }\n  }\n\n  clear(): void {\n    this.values = {};\n  }\n}","import { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { Observable } from '../Observable';\nimport { Operator } from '../Operator';\nimport { Subject } from '../Subject';\nimport { Map } from '../util/Map';\nimport { FastMap } from '../util/FastMap';\n\n/**\n * Groups the items emitted by an Observable according to a specified criterion,\n * and emits these grouped items as `GroupedObservables`, one\n * {@link GroupedObservable} per group.\n *\n * <img src=\"./img/groupBy.png\" width=\"100%\">\n *\n * @param {function(value: T): K} keySelector a function that extracts the key\n * for each item.\n * @param {function(value: T): R} [elementSelector] a function that extracts the\n * return element for each item.\n * @param {function(grouped: GroupedObservable<K,R>): Observable<any>} [durationSelector]\n * a function that returns an Observable to determine how long each group should\n * exist.\n * @return {Observable<GroupedObservable<K,R>>} an Observable that emits\n * GroupedObservables, each of which corresponds to a unique key value and each\n * of which emits those items from the source Observable that share that key\n * value.\n * @method groupBy\n * @owner Observable\n */\nexport function groupBy<T, K, R>(keySelector: (value: T) => K,\n                                 elementSelector?: (value: T) => R,\n                                 durationSelector?: (grouped: GroupedObservable<K, R>) => Observable<any>): Observable<GroupedObservable<K, R>> {\n  return this.lift(new GroupByOperator(this, keySelector, elementSelector, durationSelector));\n}\n\n/* tslint:disable:max-line-length */\nexport interface GroupBySignature<T> {\n  <K>(keySelector: (value: T) => K): Observable<GroupedObservable<K, T>>;\n  <K>(keySelector: (value: T) => K, elementSelector: void, durationSelector: (grouped: GroupedObservable<K, T>) => Observable<any>): Observable<GroupedObservable<K, T>>;\n  <K, R>(keySelector: (value: T) => K, elementSelector?: (value: T) => R, durationSelector?: (grouped: GroupedObservable<K, R>) => Observable<any>): Observable<GroupedObservable<K, R>>;\n}\n/* tslint:enable:max-line-length */\n\nexport interface RefCountSubscription {\n  count: number;\n  unsubscribe: () => void;\n  closed: boolean;\n  attemptedToUnsubscribe: boolean;\n}\n\nclass GroupByOperator<T, K, R> implements Operator<T, GroupedObservable<K, R>> {\n  constructor(public source: Observable<T>,\n              private keySelector: (value: T) => K,\n              private elementSelector?: (value: T) => R,\n              private durationSelector?: (grouped: GroupedObservable<K, R>) => Observable<any>) {\n  }\n\n  call(subscriber: Subscriber<GroupedObservable<K, R>>, source: any): any {\n    return source._subscribe(new GroupBySubscriber(\n      subscriber, this.keySelector, this.elementSelector, this.durationSelector\n    ));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass GroupBySubscriber<T, K, R> extends Subscriber<T> implements RefCountSubscription {\n  private groups: Map<K, Subject<T|R>> = null;\n  public attemptedToUnsubscribe: boolean = false;\n  public count: number = 0;\n\n  constructor(destination: Subscriber<GroupedObservable<K, R>>,\n              private keySelector: (value: T) => K,\n              private elementSelector?: (value: T) => R,\n              private durationSelector?: (grouped: GroupedObservable<K, R>) => Observable<any>) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    let key: K;\n    try {\n      key = this.keySelector(value);\n    } catch (err) {\n      this.error(err);\n      return;\n    }\n\n    this._group(value, key);\n  }\n\n  private _group(value: T, key: K) {\n    let groups = this.groups;\n\n    if (!groups) {\n      groups = this.groups = typeof key === 'string' ? new FastMap() : new Map();\n    }\n\n    let group = groups.get(key);\n\n    let element: R;\n    if (this.elementSelector) {\n      try {\n        element = this.elementSelector(value);\n      } catch (err) {\n        this.error(err);\n      }\n    } else {\n      element = <any>value;\n    }\n\n    if (!group) {\n      groups.set(key, group = new Subject<R>());\n      const groupedObservable = new GroupedObservable(key, group, this);\n      this.destination.next(groupedObservable);\n      if (this.durationSelector) {\n        let duration: any;\n        try {\n          duration = this.durationSelector(new GroupedObservable<K, R>(key, <Subject<R>>group));\n        } catch (err) {\n          this.error(err);\n          return;\n        }\n        this.add(duration.subscribe(new GroupDurationSubscriber(key, group, this)));\n      }\n    }\n\n    if (!group.closed) {\n      group.next(element);\n    }\n  }\n\n  protected _error(err: any): void {\n    const groups = this.groups;\n    if (groups) {\n      groups.forEach((group, key) => {\n        group.error(err);\n      });\n\n      groups.clear();\n    }\n    this.destination.error(err);\n  }\n\n  protected _complete(): void {\n    const groups = this.groups;\n    if (groups) {\n      groups.forEach((group, key) => {\n        group.complete();\n      });\n\n      groups.clear();\n    }\n    this.destination.complete();\n  }\n\n  removeGroup(key: K): void {\n    this.groups.delete(key);\n  }\n\n  unsubscribe() {\n    if (!this.closed && !this.attemptedToUnsubscribe) {\n      this.attemptedToUnsubscribe = true;\n      if (this.count === 0) {\n        super.unsubscribe();\n      }\n    }\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass GroupDurationSubscriber<K, T> extends Subscriber<T> {\n  constructor(private key: K,\n              private group: Subject<T>,\n              private parent: GroupBySubscriber<any, K, T>) {\n    super();\n  }\n\n  protected _next(value: T): void {\n    this._complete();\n  }\n\n  protected _error(err: any): void {\n    const group = this.group;\n    if (!group.closed) {\n      group.error(err);\n    }\n    this.parent.removeGroup(this.key);\n  }\n\n  protected _complete(): void {\n    const group = this.group;\n    if (!group.closed) {\n      group.complete();\n    }\n    this.parent.removeGroup(this.key);\n  }\n}\n\n/**\n * An Observable representing values belonging to the same group represented by\n * a common key. The values emitted by a GroupedObservable come from the source\n * Observable. The common key is available as the field `key` on a\n * GroupedObservable instance.\n *\n * @class GroupedObservable<K, T>\n */\nexport class GroupedObservable<K, T> extends Observable<T> {\n  constructor(public key: K,\n              private groupSubject: Subject<T>,\n              private refCountSubscription?: RefCountSubscription) {\n    super();\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>) {\n    const subscription = new Subscription();\n    const {refCountSubscription, groupSubject} = this;\n    if (refCountSubscription && !refCountSubscription.closed) {\n      subscription.add(new InnerRefCountSubscription(refCountSubscription));\n    }\n    subscription.add(groupSubject.subscribe(subscriber));\n    return subscription;\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass InnerRefCountSubscription extends Subscription {\n  constructor(private parent: RefCountSubscription) {\n    super();\n    parent.count++;\n  }\n\n  unsubscribe() {\n    const parent = this.parent;\n    if (!parent.closed && !this.closed) {\n      super.unsubscribe();\n      parent.count -= 1;\n      if (parent.count === 0 && parent.attemptedToUnsubscribe) {\n        parent.unsubscribe();\n      }\n    }\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { groupBy, GroupBySignature } from '../../operator/groupBy';\n\nObservable.prototype.groupBy = <any>groupBy;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    groupBy: GroupBySignature<T>;\n  }\n}","/* tslint:disable:no-empty */\nexport function noop() { }\n","import { Observable } from '../Observable';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { noop } from '../util/noop';\n\n/**\n * Ignores all items emitted by the source Observable and only passes calls of `complete` or `error`.\n *\n * <img src=\"./img/ignoreElements.png\" width=\"100%\">\n *\n * @return {Observable} an empty Observable that only calls `complete`\n * or `error`, based on which one is called by the source Observable.\n * @method ignoreElements\n * @owner Observable\n */\nexport function ignoreElements<T>(): Observable<T> {\n  return this.lift(new IgnoreElementsOperator());\n};\n\nexport interface IgnoreElementsSignature<T> {\n  (): Observable<T>;\n}\n\nclass IgnoreElementsOperator<T, R> implements Operator<T, R> {\n  call(subscriber: Subscriber<R>, source: any): any {\n    return source._subscribe(new IgnoreElementsSubscriber(subscriber));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass IgnoreElementsSubscriber<T> extends Subscriber<T> {\n  protected _next(unused: T): void {\n    noop();\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { ignoreElements, IgnoreElementsSignature } from '../../operator/ignoreElements';\n\nObservable.prototype.ignoreElements = ignoreElements;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    ignoreElements: IgnoreElementsSignature<T>;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\n\n/**\n * If the source Observable is empty it returns an Observable that emits true, otherwise it emits false.\n *\n * <img src=\"./img/isEmpty.png\" width=\"100%\">\n *\n * @return {Observable} an Observable that emits a Boolean.\n * @method isEmpty\n * @owner Observable\n */\nexport function isEmpty(): Observable<boolean> {\n  return this.lift(new IsEmptyOperator());\n}\n\nexport interface IsEmptySignature<T> {\n  (): Observable<boolean>;\n}\n\nclass IsEmptyOperator implements Operator<any, boolean> {\n  call (observer: Subscriber<boolean>, source: any): any {\n    return source._subscribe(new IsEmptySubscriber(observer));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass IsEmptySubscriber extends Subscriber<any> {\n  constructor(destination: Subscriber<boolean>) {\n    super(destination);\n  }\n\n  private notifyComplete(isEmpty: boolean): void {\n    const destination = this.destination;\n\n    destination.next(isEmpty);\n    destination.complete();\n  }\n\n  protected _next(value: boolean) {\n    this.notifyComplete(false);\n  }\n\n  protected _complete() {\n    this.notifyComplete(true);\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { isEmpty, IsEmptySignature } from '../../operator/isEmpty';\n\nObservable.prototype.isEmpty = isEmpty;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    isEmpty: IsEmptySignature<T>;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable, SubscribableOrPromise } from '../Observable';\nimport { Subscription, TeardownLogic } from '../Subscription';\n\nimport { tryCatch } from '../util/tryCatch';\nimport { errorObject } from '../util/errorObject';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n\n/**\n * Ignores source values for a duration determined by another Observable, then\n * emits the most recent value from the source Observable, then repeats this\n * process.\n *\n * <span class=\"informal\">It's like {@link auditTime}, but the silencing\n * duration is determined by a second Observable.</span>\n *\n * <img src=\"./img/audit.png\" width=\"100%\">\n *\n * `audit` is similar to `throttle`, but emits the last value from the silenced\n * time window, instead of the first value. `audit` emits the most recent value\n * from the source Observable on the output Observable as soon as its internal\n * timer becomes disabled, and ignores source values while the timer is enabled.\n * Initially, the timer is disabled. As soon as the first source value arrives,\n * the timer is enabled by calling the `durationSelector` function with the\n * source value, which returns the \"duration\" Observable. When the duration\n * Observable emits a value or completes, the timer is disabled, then the most\n * recent source value is emitted on the output Observable, and this process\n * repeats for the next source value.\n *\n * @example <caption>Emit clicks at a rate of at most one click per second</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.audit(ev => Rx.Observable.interval(1000));\n * result.subscribe(x => console.log(x));\n *\n * @see {@link auditTime}\n * @see {@link debounce}\n * @see {@link delayWhen}\n * @see {@link sample}\n * @see {@link throttle}\n *\n * @param {function(value: T): Observable|Promise} durationSelector A function\n * that receives a value from the source Observable, for computing the silencing\n * duration, returned as an Observable or a Promise.\n * @return {Observable<T>} An Observable that performs rate-limiting of\n * emissions from the source Observable.\n * @method audit\n * @owner Observable\n */\nexport function audit<T>(durationSelector: (value: T) => SubscribableOrPromise<any>): Observable<T> {\n  return this.lift(new AuditOperator(durationSelector));\n}\n\nexport interface AuditSignature<T> {\n  (durationSelector: (value: T) => SubscribableOrPromise<any>): Observable<T>;\n}\n\nclass AuditOperator<T> implements Operator<T, T> {\n  constructor(private durationSelector: (value: T) => SubscribableOrPromise<any>) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source._subscribe(new AuditSubscriber<T, T>(subscriber, this.durationSelector));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass AuditSubscriber<T, R> extends OuterSubscriber<T, R> {\n\n  private value: T;\n  private hasValue: boolean = false;\n  private throttled: Subscription;\n\n  constructor(destination: Subscriber<T>,\n              private durationSelector: (value: T) => SubscribableOrPromise<any>) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    this.value = value;\n    this.hasValue = true;\n    if (!this.throttled) {\n      const duration = tryCatch(this.durationSelector)(value);\n      if (duration === errorObject) {\n        this.destination.error(errorObject.e);\n      } else {\n        this.add(this.throttled = subscribeToResult(this, duration));\n      }\n    }\n  }\n\n  clearThrottle() {\n    const { value, hasValue, throttled } = this;\n    if (throttled) {\n      this.remove(throttled);\n      this.throttled = null;\n      throttled.unsubscribe();\n    }\n    if (hasValue) {\n      this.value = null;\n      this.hasValue = false;\n      this.destination.next(value);\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: R, outerIndex: number, innerIndex: number): void {\n    this.clearThrottle();\n  }\n\n  notifyComplete(): void {\n    this.clearThrottle();\n  }\n}\n","import { Observable } from '../../Observable';\nimport { audit, AuditSignature } from '../../operator/audit';\n\nObservable.prototype.audit = audit;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    audit: AuditSignature<T>;\n  }\n}","import { async } from '../scheduler/async';\nimport { Operator } from '../Operator';\nimport { Scheduler } from '../Scheduler';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { Subscription, TeardownLogic } from '../Subscription';\n\n/**\n * Ignores source values for `duration` milliseconds, then emits the most recent\n * value from the source Observable, then repeats this process.\n *\n * <span class=\"informal\">When it sees a source values, it ignores that plus\n * the next ones for `duration` milliseconds, and then it emits the most recent\n * value from the source.</span>\n *\n * <img src=\"./img/auditTime.png\" width=\"100%\">\n *\n * `auditTime` is similar to `throttleTime`, but emits the last value from the\n * silenced time window, instead of the first value. `auditTime` emits the most\n * recent value from the source Observable on the output Observable as soon as\n * its internal timer becomes disabled, and ignores source values while the\n * timer is enabled. Initially, the timer is disabled. As soon as the first\n * source value arrives, the timer is enabled. After `duration` milliseconds (or\n * the time unit determined internally by the optional `scheduler`) has passed,\n * the timer is disabled, then the most recent source value is emitted on the\n * output Observable, and this process repeats for the next source value.\n * Optionally takes a {@link Scheduler} for managing timers.\n *\n * @example <caption>Emit clicks at a rate of at most one click per second</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.auditTime(1000);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link audit}\n * @see {@link debounceTime}\n * @see {@link delay}\n * @see {@link sampleTime}\n * @see {@link throttleTime}\n *\n * @param {number} duration Time to wait before emitting the most recent source\n * value, measured in milliseconds or the time unit determined internally\n * by the optional `scheduler`.\n * @param {Scheduler} [scheduler=async] The {@link Scheduler} to use for\n * managing the timers that handle the rate-limiting behavior.\n * @return {Observable<T>} An Observable that performs rate-limiting of\n * emissions from the source Observable.\n * @method auditTime\n * @owner Observable\n */\nexport function auditTime<T>(duration: number, scheduler: Scheduler = async): Observable<T> {\n  return this.lift(new AuditTimeOperator(duration, scheduler));\n}\n\nexport interface AuditTimeSignature<T> {\n  (duration: number, scheduler?: Scheduler): Observable<T>;\n}\n\nclass AuditTimeOperator<T> implements Operator<T, T> {\n  constructor(private duration: number,\n              private scheduler: Scheduler) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source._subscribe(new AuditTimeSubscriber(subscriber, this.duration, this.scheduler));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass AuditTimeSubscriber<T> extends Subscriber<T> {\n\n  private value: T;\n  private hasValue: boolean = false;\n  private throttled: Subscription;\n\n  constructor(destination: Subscriber<T>,\n              private duration: number,\n              private scheduler: Scheduler) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    this.value = value;\n    this.hasValue = true;\n    if (!this.throttled) {\n      this.add(this.throttled = this.scheduler.schedule(dispatchNext, this.duration, this));\n    }\n  }\n\n  clearThrottle(): void {\n    const { value, hasValue, throttled } = this;\n    if (throttled) {\n      this.remove(throttled);\n      this.throttled = null;\n      throttled.unsubscribe();\n    }\n    if (hasValue) {\n      this.value = null;\n      this.hasValue = false;\n      this.destination.next(value);\n    }\n  }\n}\n\nfunction dispatchNext<T>(subscriber: AuditTimeSubscriber<T>): void {\n  subscriber.clearThrottle();\n}\n","import { Observable } from '../../Observable';\nimport { auditTime, AuditTimeSignature } from '../../operator/auditTime';\n\nObservable.prototype.auditTime = auditTime;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    auditTime: AuditTimeSignature<T>;\n  }\n}","import { Observable } from '../Observable';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { EmptyError } from '../util/EmptyError';\n\n/**\n * Returns an Observable that emits only the last item emitted by the source Observable.\n * It optionally takes a predicate function as a parameter, in which case, rather than emitting\n * the last item from the source Observable, the resulting Observable will emit the last item\n * from the source Observable that satisfies the predicate.\n *\n * <img src=\"./img/last.png\" width=\"100%\">\n *\n * @throws {EmptyError} Delivers an EmptyError to the Observer's `error`\n * callback if the Observable completes before any `next` notification was sent.\n * @param {function} predicate - the condition any source emitted item has to satisfy.\n * @return {Observable} an Observable that emits only the last item satisfying the given condition\n * from the source, or an NoSuchElementException if no such items are emitted.\n * @throws - Throws if no items that match the predicate are emitted by the source Observable.\n * @method last\n * @owner Observable\n */\nexport function last<T, R>(predicate?: (value: T, index: number, source: Observable<T>) => boolean,\n                           resultSelector?: (value: T, index: number) => R | void,\n                           defaultValue?: R): Observable<T | R> {\n  return this.lift(new LastOperator(predicate, resultSelector, defaultValue, this));\n}\n\nexport interface LastSignature<T> {\n  (predicate?: (value: T, index: number, source: Observable<T>) => boolean): Observable<T>;\n  (predicate: (value: T, index: number, source: Observable<T>) => boolean, resultSelector: void, defaultValue?: T): Observable<T>;\n  <R>(predicate?: (value: T, index: number, source: Observable<T>) => boolean, resultSelector?: (value: T, index: number) => R,\n      defaultValue?: R): Observable<R>;\n}\n\nclass LastOperator<T, R> implements Operator<T, R> {\n  constructor(private predicate?: (value: T, index: number, source: Observable<T>) => boolean,\n              private resultSelector?: (value: T, index: number) => R,\n              private defaultValue?: any,\n              private source?: Observable<T>) {\n  }\n\n  call(observer: Subscriber<R>, source: any): any {\n    return source._subscribe(new LastSubscriber(observer, this.predicate, this.resultSelector, this.defaultValue, this.source));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass LastSubscriber<T, R> extends Subscriber<T> {\n  private lastValue: T | R;\n  private hasValue: boolean = false;\n  private index: number = 0;\n\n  constructor(destination: Subscriber<R>,\n              private predicate?: (value: T, index: number, source: Observable<T>) => boolean,\n              private resultSelector?: (value: T, index: number) => R,\n              private defaultValue?: any,\n              private source?: Observable<T>) {\n    super(destination);\n    if (typeof defaultValue !== 'undefined') {\n      this.lastValue = defaultValue;\n      this.hasValue = true;\n    }\n  }\n\n  protected _next(value: T): void {\n    const index = this.index++;\n    if (this.predicate) {\n      this._tryPredicate(value, index);\n    } else {\n      if (this.resultSelector) {\n        this._tryResultSelector(value, index);\n        return;\n      }\n      this.lastValue = value;\n      this.hasValue = true;\n    }\n  }\n\n  private _tryPredicate(value: T, index: number) {\n    let result: any;\n    try {\n      result = this.predicate(value, index, this.source);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    if (result) {\n      if (this.resultSelector) {\n        this._tryResultSelector(value, index);\n        return;\n      }\n      this.lastValue = value;\n      this.hasValue = true;\n    }\n  }\n\n  private _tryResultSelector(value: T, index: number) {\n    let result: any;\n    try {\n      result = this.resultSelector(value, index);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    this.lastValue = result;\n    this.hasValue = true;\n  }\n\n  protected _complete(): void {\n    const destination = this.destination;\n    if (this.hasValue) {\n      destination.next(this.lastValue);\n      destination.complete();\n    } else {\n      destination.error(new EmptyError);\n    }\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { last, LastSignature } from '../../operator/last';\n\nObservable.prototype.last = <any>last;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    last: LastSignature<T>;\n  }\n}","import { Observable } from '../Observable';\n\n/**\n * @param func\n * @return {Observable<R>}\n * @method let\n * @owner Observable\n */\nexport function letProto<T, R>(func: (selector: Observable<T>) => Observable<R>): Observable<R> {\n  return func(this);\n}\n\nexport interface LetSignature<T> {\n  <R>(func: (selector: Observable<T>) => Observable<R>): Observable<R>;\n}\n","\nimport { Observable } from '../../Observable';\nimport { letProto, LetSignature } from '../../operator/let';\n\nObservable.prototype.let = letProto;\nObservable.prototype.letBind = letProto;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    let: LetSignature<T>;\n    letBind: LetSignature<T>;\n  }\n}","import { Operator } from '../Operator';\nimport { Observer } from '../Observer';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\n\n/**\n * Returns an Observable that emits whether or not every item of the source satisfies the condition specified.\n * @param {function} predicate a function for determining if an item meets a specified condition.\n * @param {any} [thisArg] optional object to use for `this` in the callback\n * @return {Observable} an Observable of booleans that determines if all items of the source Observable meet the condition specified.\n * @method every\n * @owner Observable\n */\nexport function every<T>(predicate: (value: T, index: number, source: Observable<T>) => boolean,\n                         thisArg?: any): Observable<boolean> {\n  return this.lift(new EveryOperator(predicate, thisArg, this));\n}\n\nexport interface EverySignature<T> {\n  (predicate: (value: T, index: number, source: Observable<T>) => boolean, thisArg?: any): Observable<boolean>;\n}\n\nclass EveryOperator<T> implements Operator<T, boolean> {\n  constructor(private predicate: (value: T, index: number, source: Observable<T>) => boolean,\n              private thisArg?: any,\n              private source?: Observable<T>) {\n  }\n\n  call(observer: Subscriber<boolean>, source: any): any {\n    return source._subscribe(new EverySubscriber(observer, this.predicate, this.thisArg, this.source));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass EverySubscriber<T> extends Subscriber<T> {\n  private index: number = 0;\n\n  constructor(destination: Observer<boolean>,\n              private predicate: (value: T, index: number, source: Observable<T>) => boolean,\n              private thisArg: any,\n              private source?: Observable<T>) {\n    super(destination);\n    this.thisArg = thisArg || this;\n  }\n\n  private notifyComplete(everyValueMatch: boolean): void {\n    this.destination.next(everyValueMatch);\n    this.destination.complete();\n  }\n\n  protected _next(value: T): void {\n    let result = false;\n    try {\n      result = this.predicate.call(this.thisArg, value, this.index++, this.source);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n\n    if (!result) {\n      this.notifyComplete(false);\n    }\n  }\n\n  protected _complete(): void {\n    this.notifyComplete(true);\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { every, EverySignature } from '../../operator/every';\n\nObservable.prototype.every = every;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    every: EverySignature<T>;\n  }\n}","\nimport { Observable } from '../../Observable';\nimport { map, MapSignature } from '../../operator/map';\n\nObservable.prototype.map = map;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    map: MapSignature<T>;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\n\n/**\n * Emits the given constant value on the output Observable every time the source\n * Observable emits a value.\n *\n * <span class=\"informal\">Like {@link map}, but it maps every source value to\n * the same output value every time.</span>\n *\n * <img src=\"./img/mapTo.png\" width=\"100%\">\n *\n * Takes a constant `value` as argument, and emits that whenever the source\n * Observable emits a value. In other words, ignores the actual source value,\n * and simply uses the emission moment to know when to emit the given `value`.\n *\n * @example <caption>Map every every click to the string 'Hi'</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var greetings = clicks.mapTo('Hi');\n * greetings.subscribe(x => console.log(x));\n *\n * @see {@link map}\n *\n * @param {any} value The value to map each source value to.\n * @return {Observable} An Observable that emits the given `value` every time\n * the source Observable emits something.\n * @method mapTo\n * @owner Observable\n */\nexport function mapTo<T, R>(value: R): Observable<R> {\n  return this.lift(new MapToOperator(value));\n}\n\nexport interface MapToSignature<T> {\n  <R>(value: R): Observable<R>;\n}\n\nclass MapToOperator<T, R> implements Operator<T, R> {\n\n  value: R;\n\n  constructor(value: R) {\n    this.value = value;\n  }\n\n  call(subscriber: Subscriber<R>, source: any): any {\n    return source._subscribe(new MapToSubscriber(subscriber, this.value));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass MapToSubscriber<T, R> extends Subscriber<T> {\n\n  value: R;\n\n  constructor(destination: Subscriber<R>, value: R) {\n    super(destination);\n    this.value = value;\n  }\n\n  protected _next(x: T) {\n    this.destination.next(this.value);\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { mapTo, MapToSignature } from '../../operator/mapTo';\n\nObservable.prototype.mapTo = mapTo;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    mapTo: MapToSignature<T>;\n  }\n}","import { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Notification } from '../Notification';\n\n/**\n * Represents all of the notifications from the source Observable as `next`\n * emissions marked with their original types within {@link Notification}\n * objects.\n *\n * <span class=\"informal\">Wraps `next`, `error` and `complete` emissions in\n * {@link Notification} objects, emitted as `next` on the output Observable.\n * </span>\n *\n * <img src=\"./img/materialize.png\" width=\"100%\">\n *\n * `materialize` returns an Observable that emits a `next` notification for each\n * `next`, `error`, or `complete` emission of the source Observable. When the\n * source Observable emits `complete`, the output Observable will emit `next` as\n * a Notification of type \"complete\", and then it will emit `complete` as well.\n * When the source Observable emits `error`, the output will emit `next` as a\n * Notification of type \"error\", and then `complete`.\n *\n * This operator is useful for producing metadata of the source Observable, to\n * be consumed as `next` emissions. Use it in conjunction with\n * {@link dematerialize}.\n *\n * @example <caption>Convert a faulty Observable to an Observable of Notifications</caption>\n * var letters = Rx.Observable.of('a', 'b', 13, 'd');\n * var upperCase = letters.map(x => x.toUpperCase());\n * var materialized = upperCase.materialize();\n * materialized.subscribe(x => console.log(x));\n *\n * @see {@link Notification}\n * @see {@link dematerialize}\n *\n * @return {Observable<Notification<T>>} An Observable that emits\n * {@link Notification} objects that wrap the original emissions from the source\n * Observable with metadata.\n * @method materialize\n * @owner Observable\n */\nexport function materialize<T>(): Observable<Notification<T>> {\n  return this.lift(new MaterializeOperator());\n}\n\nexport interface MaterializeSignature<T> {\n  (): Observable<Notification<T>>;\n}\n\nclass MaterializeOperator<T> implements Operator<T, Notification<T>> {\n  call(subscriber: Subscriber<Notification<T>>, source: any): any {\n    return source._subscribe(new MaterializeSubscriber(subscriber));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass MaterializeSubscriber<T> extends Subscriber<T> {\n  constructor(destination: Subscriber<Notification<T>>) {\n    super(destination);\n  }\n\n  protected _next(value: T) {\n    this.destination.next(Notification.createNext(value));\n  }\n\n  protected _error(err: any) {\n    const destination = this.destination;\n    destination.next(Notification.createError(err));\n    destination.complete();\n  }\n\n  protected _complete() {\n    const destination = this.destination;\n    destination.next(Notification.createComplete());\n    destination.complete();\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { materialize, MaterializeSignature } from '../../operator/materialize';\n\nObservable.prototype.materialize = materialize;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    materialize: MaterializeSignature<T>;\n  }\n}","import { Observable } from '../Observable';\nimport { ReduceOperator } from './reduce';\n\n/**\n * The Max operator operates on an Observable that emits numbers (or items that can be evaluated as numbers),\n * and when source Observable completes it emits a single item: the item with the largest number.\n *\n * <img src=\"./img/max.png\" width=\"100%\">\n *\n * @param {Function} optional comparer function that it will use instead of its default to compare the value of two\n * items.\n * @return {Observable} an Observable that emits item with the largest number.\n * @method max\n * @owner Observable\n */\nexport function max<T>(comparer?: (x: T, y: T) => number): Observable<T> {\n  const max: (x: T, y: T) => T = (typeof comparer === 'function')\n    ? (x, y) => comparer(x, y) > 0 ? x : y\n    : (x, y) => x > y ? x : y;\n  return this.lift(new ReduceOperator(max));\n}\n\nexport interface MaxSignature<T> {\n  (comparer?: (x: T, y: T) => number): Observable<T>;\n}\n","\nimport { Observable } from '../../Observable';\nimport { max, MaxSignature } from '../../operator/max';\n\nObservable.prototype.max = max;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    max: MaxSignature<T>;\n  }\n}","import { Observable, ObservableInput } from '../Observable';\nimport { Scheduler } from '../Scheduler';\nimport { ArrayObservable } from '../observable/ArrayObservable';\nimport { MergeAllOperator } from './mergeAll';\nimport { isScheduler } from '../util/isScheduler';\n\n/**\n * Creates an output Observable which concurrently emits all values from every\n * given input Observable.\n *\n * <span class=\"informal\">Flattens multiple Observables together by blending\n * their values into one Observable.</span>\n *\n * <img src=\"./img/merge.png\" width=\"100%\">\n *\n * `merge` subscribes to each given input Observable (either the source or an\n * Observable given as argument), and simply forwards (without doing any\n * transformation) all the values from all the input Observables to the output\n * Observable. The output Observable only completes once all input Observables\n * have completed. Any error delivered by an input Observable will be immediately\n * emitted on the output Observable.\n *\n * @example <caption>Merge together two Observables: 1s interval and clicks</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var timer = Rx.Observable.interval(1000);\n * var clicksOrTimer = clicks.merge(timer);\n * clicksOrTimer.subscribe(x => console.log(x));\n *\n * @example <caption>Merge together 3 Observables, but only 2 run concurrently</caption>\n * var timer1 = Rx.Observable.interval(1000).take(10);\n * var timer2 = Rx.Observable.interval(2000).take(6);\n * var timer3 = Rx.Observable.interval(500).take(10);\n * var concurrent = 2; // the argument\n * var merged = timer1.merge(timer2, timer3, concurrent);\n * merged.subscribe(x => console.log(x));\n *\n * @see {@link mergeAll}\n * @see {@link mergeMap}\n * @see {@link mergeMapTo}\n * @see {@link mergeScan}\n *\n * @param {Observable} other An input Observable to merge with the source\n * Observable. More than one input Observables may be given as argument.\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of input\n * Observables being subscribed to concurrently.\n * @param {Scheduler} [scheduler=null] The Scheduler to use for managing\n * concurrency of input Observables.\n * @return {Observable} an Observable that emits items that are the result of\n * every input Observable.\n * @method merge\n * @owner Observable\n */\nexport function merge<T, R>(...observables: Array<ObservableInput<any> | Scheduler | number>): Observable<R> {\n  observables.unshift(this);\n  return mergeStatic.apply(this, observables);\n}\n\n/* tslint:disable:max-line-length */\nexport interface MergeSignature<T> {\n  (scheduler?: Scheduler): Observable<T>;\n  (concurrent?: number, scheduler?: Scheduler): Observable<T>;\n  <T2>(v2: ObservableInput<T2>, scheduler?: Scheduler): Observable<T | T2>;\n  <T2>(v2: ObservableInput<T2>, concurrent?: number, scheduler?: Scheduler): Observable<T | T2>;\n  <T2, T3>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, scheduler?: Scheduler): Observable<T | T2 | T3>;\n  <T2, T3>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, concurrent?: number, scheduler?: Scheduler): Observable<T | T2 | T3>;\n  <T2, T3, T4>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, scheduler?: Scheduler): Observable<T | T2 | T3 | T4>;\n  <T2, T3, T4>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, concurrent?: number, scheduler?: Scheduler): Observable<T | T2 | T3 | T4>;\n  <T2, T3, T4, T5>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, scheduler?: Scheduler): Observable<T | T2 | T3 | T4 | T5>;\n  <T2, T3, T4, T5>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, concurrent?: number, scheduler?: Scheduler): Observable<T | T2 | T3 | T4 | T5>;\n  <T2, T3, T4, T5, T6>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>, scheduler?: Scheduler): Observable<T | T2 | T3 | T4 | T5 | T6>;\n  <T2, T3, T4, T5, T6>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>, concurrent?: number, scheduler?: Scheduler): Observable<T | T2 | T3 | T4 | T5 | T6>;\n  (...observables: Array<ObservableInput<T> | Scheduler | number>): Observable<T>;\n  <R>(...observables: Array<ObservableInput<any> | Scheduler | number>): Observable<R>;\n}\n/* tslint:enable:max-line-length */\n\n/* tslint:disable:max-line-length */\nexport function mergeStatic<T>(v1: ObservableInput<T>, scheduler?: Scheduler): Observable<T>;\nexport function mergeStatic<T>(v1: ObservableInput<T>, concurrent?: number, scheduler?: Scheduler): Observable<T>;\nexport function mergeStatic<T, T2>(v1: ObservableInput<T>, v2: ObservableInput<T2>, scheduler?: Scheduler): Observable<T | T2>;\nexport function mergeStatic<T, T2>(v1: ObservableInput<T>, v2: ObservableInput<T2>, concurrent?: number, scheduler?: Scheduler): Observable<T | T2>;\nexport function mergeStatic<T, T2, T3>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, scheduler?: Scheduler): Observable<T | T2 | T3>;\nexport function mergeStatic<T, T2, T3>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, concurrent?: number, scheduler?: Scheduler): Observable<T | T2 | T3>;\nexport function mergeStatic<T, T2, T3, T4>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, scheduler?: Scheduler): Observable<T | T2 | T3 | T4>;\nexport function mergeStatic<T, T2, T3, T4>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, concurrent?: number, scheduler?: Scheduler): Observable<T | T2 | T3 | T4>;\nexport function mergeStatic<T, T2, T3, T4, T5>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, scheduler?: Scheduler): Observable<T | T2 | T3 | T4 | T5>;\nexport function mergeStatic<T, T2, T3, T4, T5>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, concurrent?: number, scheduler?: Scheduler): Observable<T | T2 | T3 | T4 | T5>;\nexport function mergeStatic<T, T2, T3, T4, T5, T6>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>, scheduler?: Scheduler): Observable<T | T2 | T3 | T4 | T5 | T6>;\nexport function mergeStatic<T, T2, T3, T4, T5, T6>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>, concurrent?: number, scheduler?: Scheduler): Observable<T | T2 | T3 | T4 | T5 | T6>;\nexport function mergeStatic<T>(...observables: (ObservableInput<T> | Scheduler | number)[]): Observable<T>;\nexport function mergeStatic<T, R>(...observables: (ObservableInput<any> | Scheduler | number)[]): Observable<R>;\n/* tslint:enable:max-line-length */\n/**\n * Creates an output Observable which concurrently emits all values from every\n * given input Observable.\n *\n * <span class=\"informal\">Flattens multiple Observables together by blending\n * their values into one Observable.</span>\n *\n * <img src=\"./img/merge.png\" width=\"100%\">\n *\n * `merge` subscribes to each given input Observable (as arguments), and simply\n * forwards (without doing any transformation) all the values from all the input\n * Observables to the output Observable. The output Observable only completes\n * once all input Observables have completed. Any error delivered by an input\n * Observable will be immediately emitted on the output Observable.\n *\n * @example <caption>Merge together two Observables: 1s interval and clicks</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var timer = Rx.Observable.interval(1000);\n * var clicksOrTimer = Rx.Observable.merge(clicks, timer);\n * clicksOrTimer.subscribe(x => console.log(x));\n *\n * @example <caption>Merge together 3 Observables, but only 2 run concurrently</caption>\n * var timer1 = Rx.Observable.interval(1000).take(10);\n * var timer2 = Rx.Observable.interval(2000).take(6);\n * var timer3 = Rx.Observable.interval(500).take(10);\n * var concurrent = 2; // the argument\n * var merged = Rx.Observable.merge(timer1, timer2, timer3, concurrent);\n * merged.subscribe(x => console.log(x));\n *\n * @see {@link mergeAll}\n * @see {@link mergeMap}\n * @see {@link mergeMapTo}\n * @see {@link mergeScan}\n *\n * @param {Observable} input1 An input Observable to merge with others.\n * @param {Observable} input2 An input Observable to merge with others.\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of input\n * Observables being subscribed to concurrently.\n * @param {Scheduler} [scheduler=null] The Scheduler to use for managing\n * concurrency of input Observables.\n * @return {Observable} an Observable that emits items that are the result of\n * every input Observable.\n * @static true\n * @name merge\n * @owner Observable\n */\nexport function mergeStatic<T, R>(...observables: Array<ObservableInput<any> | Scheduler | number>): Observable<R> {\n let concurrent = Number.POSITIVE_INFINITY;\n let scheduler: Scheduler = null;\n  let last: any = observables[observables.length - 1];\n  if (isScheduler(last)) {\n    scheduler = <Scheduler>observables.pop();\n    if (observables.length > 1 && typeof observables[observables.length - 1] === 'number') {\n      concurrent = <number>observables.pop();\n    }\n  } else if (typeof last === 'number') {\n    concurrent = <number>observables.pop();\n  }\n\n  if (observables.length === 1) {\n    return <Observable<R>>observables[0];\n  }\n\n  return new ArrayObservable(<any>observables, scheduler).lift(new MergeAllOperator<R>(concurrent));\n}\n","\nimport { Observable } from '../../Observable';\nimport { merge, MergeSignature } from '../../operator/merge';\n\nObservable.prototype.merge = merge;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    merge: MergeSignature<T>;\n  }\n}","\nimport { Observable } from '../../Observable';\nimport { mergeAll, MergeAllSignature } from '../../operator/mergeAll';\n\nObservable.prototype.mergeAll = mergeAll;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    mergeAll: MergeAllSignature<T>;\n  }\n}","import { Observable, ObservableInput } from '../Observable';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\n\n/**\n * Projects each source value to an Observable which is merged in the output\n * Observable.\n *\n * <span class=\"informal\">Maps each value to an Observable, then flattens all of\n * these inner Observables using {@link mergeAll}.</span>\n *\n * <img src=\"./img/mergeMap.png\" width=\"100%\">\n *\n * Returns an Observable that emits items based on applying a function that you\n * supply to each item emitted by the source Observable, where that function\n * returns an Observable, and then merging those resulting Observables and\n * emitting the results of this merger.\n *\n * @example <caption>Map and flatten each letter to an Observable ticking every 1 second</caption>\n * var letters = Rx.Observable.of('a', 'b', 'c');\n * var result = letters.mergeMap(x =>\n *   Rx.Observable.interval(1000).map(i => x+i)\n * );\n * result.subscribe(x => console.log(x));\n *\n * @see {@link concatMap}\n * @see {@link exhaustMap}\n * @see {@link merge}\n * @see {@link mergeAll}\n * @see {@link mergeMapTo}\n * @see {@link mergeScan}\n * @see {@link switchMap}\n *\n * @param {function(value: T, ?index: number): Observable} project A function\n * that, when applied to an item emitted by the source Observable, returns an\n * Observable.\n * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]\n * A function to produce the value on the output Observable based on the values\n * and the indices of the source (outer) emission and the inner Observable\n * emission. The arguments passed to this function are:\n * - `outerValue`: the value that came from the source\n * - `innerValue`: the value that came from the projected Observable\n * - `outerIndex`: the \"index\" of the value that came from the source\n * - `innerIndex`: the \"index\" of the value from the projected Observable\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of input\n * Observables being subscribed to concurrently.\n * @return {Observable} An Observable that emits the result of applying the\n * projection function (and the optional `resultSelector`) to each item emitted\n * by the source Observable and merging the results of the Observables obtained\n * from this transformation.\n * @method mergeMap\n * @owner Observable\n */\nexport function mergeMap<T, I, R>(project: (value: T, index: number) => ObservableInput<I>,\n                                  resultSelector?: ((outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R) | number,\n                                  concurrent: number = Number.POSITIVE_INFINITY): Observable<R> {\n  if (typeof resultSelector === 'number') {\n    concurrent = <number>resultSelector;\n    resultSelector = null;\n  }\n  return this.lift(new MergeMapOperator(project, <any>resultSelector, concurrent));\n}\n\nexport interface MergeMapSignature<T> {\n  <R>(project: (value: T, index: number) => ObservableInput<R>, concurrent?: number): Observable<R>;\n  <I, R>(project: (value: T, index: number) => ObservableInput<I>,\n         resultSelector: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R,\n         concurrent?: number): Observable<R>;\n}\n\nexport class MergeMapOperator<T, I, R> implements Operator<T, I> {\n  constructor(private project: (value: T, index: number) => ObservableInput<I>,\n              private resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R,\n              private concurrent: number = Number.POSITIVE_INFINITY) {\n  }\n\n  call(observer: Subscriber<I>, source: any): any {\n    return source._subscribe(new MergeMapSubscriber(\n      observer, this.project, this.resultSelector, this.concurrent\n    ));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class MergeMapSubscriber<T, I, R> extends OuterSubscriber<T, I> {\n  private hasCompleted: boolean = false;\n  private buffer: T[] = [];\n  private active: number = 0;\n  protected index: number = 0;\n\n  constructor(destination: Subscriber<I>,\n              private project: (value: T, index: number) => ObservableInput<I>,\n              private resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R,\n              private concurrent: number = Number.POSITIVE_INFINITY) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    if (this.active < this.concurrent) {\n      this._tryNext(value);\n    } else {\n      this.buffer.push(value);\n    }\n  }\n\n  protected _tryNext(value: T) {\n    let result: ObservableInput<I>;\n    const index = this.index++;\n    try {\n      result = this.project(value, index);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    this.active++;\n    this._innerSub(result, value, index);\n  }\n\n  private _innerSub(ish: ObservableInput<I>, value: T, index: number): void {\n    this.add(subscribeToResult<T, I>(this, ish, value, index));\n  }\n\n  protected _complete(): void {\n    this.hasCompleted = true;\n    if (this.active === 0 && this.buffer.length === 0) {\n      this.destination.complete();\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: I,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, I>): void {\n    if (this.resultSelector) {\n      this._notifyResultSelector(outerValue, innerValue, outerIndex, innerIndex);\n    } else {\n      this.destination.next(innerValue);\n    }\n  }\n\n  private _notifyResultSelector(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) {\n    let result: R;\n    try {\n      result = this.resultSelector(outerValue, innerValue, outerIndex, innerIndex);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    this.destination.next(result);\n  }\n\n  notifyComplete(innerSub: Subscription): void {\n    const buffer = this.buffer;\n    this.remove(innerSub);\n    this.active--;\n    if (buffer.length > 0) {\n      this._next(buffer.shift());\n    } else if (this.active === 0 && this.hasCompleted) {\n      this.destination.complete();\n    }\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { mergeMap, MergeMapSignature } from '../../operator/mergeMap';\n\nObservable.prototype.mergeMap = <any>mergeMap;\nObservable.prototype.flatMap = <any>mergeMap;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    flatMap: MergeMapSignature<T>;\n    mergeMap: MergeMapSignature<T>;\n  }\n}","import { Observable, ObservableInput } from '../Observable';\nimport { Operator } from '../Operator';\nimport { PartialObserver } from '../Observer';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n\n/**\n * Projects each source value to the same Observable which is merged multiple\n * times in the output Observable.\n *\n * <span class=\"informal\">It's like {@link mergeMap}, but maps each value always\n * to the same inner Observable.</span>\n *\n * <img src=\"./img/mergeMapTo.png\" width=\"100%\">\n *\n * Maps each source value to the given Observable `innerObservable` regardless\n * of the source value, and then merges those resulting Observables into one\n * single Observable, which is the output Observable.\n *\n * @example <caption>For each click event, start an interval Observable ticking every 1 second</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.mergeMapTo(Rx.Observable.interval(1000));\n * result.subscribe(x => console.log(x));\n *\n * @see {@link concatMapTo}\n * @see {@link merge}\n * @see {@link mergeAll}\n * @see {@link mergeMap}\n * @see {@link mergeScan}\n * @see {@link switchMapTo}\n *\n * @param {Observable} innerObservable An Observable to replace each value from\n * the source Observable.\n * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]\n * A function to produce the value on the output Observable based on the values\n * and the indices of the source (outer) emission and the inner Observable\n * emission. The arguments passed to this function are:\n * - `outerValue`: the value that came from the source\n * - `innerValue`: the value that came from the projected Observable\n * - `outerIndex`: the \"index\" of the value that came from the source\n * - `innerIndex`: the \"index\" of the value from the projected Observable\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of input\n * Observables being subscribed to concurrently.\n * @return {Observable} An Observable that emits items from the given\n * `innerObservable` (and optionally transformed through `resultSelector`) every\n * time a value is emitted on the source Observable.\n * @method mergeMapTo\n * @owner Observable\n */\nexport function mergeMapTo<T, I, R>(innerObservable: Observable<I>,\n                                    resultSelector?: ((outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R) | number,\n                                    concurrent: number = Number.POSITIVE_INFINITY): Observable<R> {\n  if (typeof resultSelector === 'number') {\n    concurrent = <number>resultSelector;\n    resultSelector = null;\n  }\n  return this.lift(new MergeMapToOperator(innerObservable, <any>resultSelector, concurrent));\n}\n\nexport interface MergeMapToSignature<T> {\n  <R>(observable: ObservableInput<R>, concurrent?: number): Observable<R>;\n  <I, R>(observable: ObservableInput<I>,\n         resultSelector: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R,\n         concurrent?: number): Observable<R>;\n}\n\n// TODO: Figure out correct signature here: an Operator<Observable<T>, R>\n//       needs to implement call(observer: Subscriber<R>): Subscriber<Observable<T>>\nexport class MergeMapToOperator<T, I, R> implements Operator<Observable<T>, R> {\n  constructor(private ish: ObservableInput<I>,\n              private resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R,\n              private concurrent: number = Number.POSITIVE_INFINITY) {\n  }\n\n  call(observer: Subscriber<R>, source: any): any {\n    return source._subscribe(new MergeMapToSubscriber(observer, this.ish, this.resultSelector, this.concurrent));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class MergeMapToSubscriber<T, I, R> extends OuterSubscriber<T, I> {\n  private hasCompleted: boolean = false;\n  private buffer: T[] = [];\n  private active: number = 0;\n  protected index: number = 0;\n\n  constructor(destination: Subscriber<R>,\n              private ish: ObservableInput<I>,\n              private resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R,\n              private concurrent: number = Number.POSITIVE_INFINITY) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    if (this.active < this.concurrent) {\n      const resultSelector = this.resultSelector;\n      const index = this.index++;\n      const ish = this.ish;\n      const destination = this.destination;\n\n      this.active++;\n      this._innerSub(ish, destination, resultSelector, value, index);\n    } else {\n      this.buffer.push(value);\n    }\n  }\n\n  private _innerSub(ish: ObservableInput<I>,\n                    destination: PartialObserver<I>,\n                    resultSelector: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R,\n                    value: T,\n                    index: number): void {\n    this.add(subscribeToResult<T, I>(this, ish, value, index));\n  }\n\n  protected _complete(): void {\n    this.hasCompleted = true;\n    if (this.active === 0 && this.buffer.length === 0) {\n      this.destination.complete();\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: I,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, I>): void {\n    const { resultSelector, destination } = this;\n    if (resultSelector) {\n      this.trySelectResult(outerValue, innerValue, outerIndex, innerIndex);\n    } else {\n      destination.next(innerValue);\n    }\n  }\n\n  private trySelectResult(outerValue: T, innerValue: I,\n                          outerIndex: number, innerIndex: number): void {\n    const { resultSelector, destination } = this;\n    let result: R;\n    try {\n      result = resultSelector(outerValue, innerValue, outerIndex, innerIndex);\n    } catch (err) {\n      destination.error(err);\n      return;\n    }\n\n    destination.next(result);\n  }\n\n  notifyError(err: any): void {\n    this.destination.error(err);\n  }\n\n  notifyComplete(innerSub: Subscription): void {\n    const buffer = this.buffer;\n    this.remove(innerSub);\n    this.active--;\n    if (buffer.length > 0) {\n      this._next(buffer.shift());\n    } else if (this.active === 0 && this.hasCompleted) {\n      this.destination.complete();\n    }\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { mergeMapTo, MergeMapToSignature } from '../../operator/mergeMapTo';\n\nObservable.prototype.flatMapTo = <any>mergeMapTo;\nObservable.prototype.mergeMapTo = <any>mergeMapTo;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    flatMapTo: MergeMapToSignature<T>;\n    mergeMapTo: MergeMapToSignature<T>;\n  }\n}","import { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { tryCatch } from '../util/tryCatch';\nimport { errorObject } from '../util/errorObject';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\n\n/**\n * @param project\n * @param seed\n * @param concurrent\n * @return {Observable<R>|WebSocketSubject<T>|Observable<T>}\n * @method mergeScan\n * @owner Observable\n */\nexport function mergeScan<T, R>(project: (acc: R, value: T) => Observable<R>,\n                                seed: R,\n                                concurrent: number = Number.POSITIVE_INFINITY): Observable<R> {\n  return this.lift(new MergeScanOperator(project, seed, concurrent));\n}\n\nexport interface MergeScanSignature<T> {\n  <R>(project: (acc: R, value: T) => Observable<R>, seed: R, concurrent?: number): Observable<R>;\n}\n\nexport class MergeScanOperator<T, R> implements Operator<T, R> {\n  constructor(private project: (acc: R, value: T) => Observable<R>,\n              private seed: R,\n              private concurrent: number) {\n  }\n\n  call(subscriber: Subscriber<R>, source: any): any {\n    return source._subscribe(new MergeScanSubscriber(\n      subscriber, this.project, this.seed, this.concurrent\n    ));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class MergeScanSubscriber<T, R> extends OuterSubscriber<T, R> {\n  private hasValue: boolean = false;\n  private hasCompleted: boolean = false;\n  private buffer: Observable<any>[] = [];\n  private active: number = 0;\n  protected index: number = 0;\n\n  constructor(destination: Subscriber<R>,\n              private project: (acc: R, value: T) => Observable<R>,\n              private acc: R,\n              private concurrent: number) {\n    super(destination);\n  }\n\n  protected _next(value: any): void {\n    if (this.active < this.concurrent) {\n      const index = this.index++;\n      const ish = tryCatch(this.project)(this.acc, value);\n      const destination = this.destination;\n      if (ish === errorObject) {\n        destination.error(errorObject.e);\n      } else {\n        this.active++;\n        this._innerSub(ish, value, index);\n      }\n    } else {\n      this.buffer.push(value);\n    }\n  }\n\n  private _innerSub(ish: any, value: T, index: number): void {\n    this.add(subscribeToResult<T, R>(this, ish, value, index));\n  }\n\n  protected _complete(): void {\n    this.hasCompleted = true;\n    if (this.active === 0 && this.buffer.length === 0) {\n      if (this.hasValue === false) {\n        this.destination.next(this.acc);\n      }\n      this.destination.complete();\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: R,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    const { destination } = this;\n    this.acc = innerValue;\n    this.hasValue = true;\n    destination.next(innerValue);\n  }\n\n  notifyComplete(innerSub: Subscription): void {\n    const buffer = this.buffer;\n    this.remove(innerSub);\n    this.active--;\n    if (buffer.length > 0) {\n      this._next(buffer.shift());\n    } else if (this.active === 0 && this.hasCompleted) {\n      if (this.hasValue === false) {\n        this.destination.next(this.acc);\n      }\n      this.destination.complete();\n    }\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { mergeScan, MergeScanSignature } from '../../operator/mergeScan';\n\nObservable.prototype.mergeScan = mergeScan;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    mergeScan: MergeScanSignature<T>;\n  }\n}","import { Observable } from '../Observable';\nimport { ReduceOperator } from './reduce';\n\n/**\n * The Min operator operates on an Observable that emits numbers (or items that can be evaluated as numbers),\n * and when source Observable completes it emits a single item: the item with the smallest number.\n *\n * <img src=\"./img/min.png\" width=\"100%\">\n *\n * @param {Function} optional comparer function that it will use instead of its default to compare the value of two items.\n * @return {Observable<R>} an Observable that emits item with the smallest number.\n * @method min\n * @owner Observable\n */\nexport function min<T>(comparer?: (x: T, y: T) => number): Observable<T> {\n  const min: (x: T, y: T) => T = (typeof comparer === 'function')\n    ? (x, y) => comparer(x, y) < 0 ? x : y\n    : (x, y) => x < y ? x : y;\n  return this.lift(new ReduceOperator(min));\n}\n\nexport interface MinSignature<T> {\n  (comparer?: (x: T, y: T) => number): Observable<T>;\n}\n","\nimport { Observable } from '../../Observable';\nimport { min, MinSignature } from '../../operator/min';\n\nObservable.prototype.min = min;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    min: MinSignature<T>;\n  }\n}","\nimport { Observable } from '../../Observable';\nimport { multicast, MulticastSignature } from '../../operator/multicast';\n\nObservable.prototype.multicast = <any>multicast;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    multicast: MulticastSignature<T>;\n  }\n}","\nimport { Observable } from '../../Observable';\nimport { observeOn, ObserveOnSignature } from '../../operator/observeOn';\n\nObservable.prototype.observeOn = observeOn;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    observeOn: ObserveOnSignature<T>;\n  }\n}","import { root } from '../util/root';\nimport { Scheduler } from '../Scheduler';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { TeardownLogic } from '../Subscription';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class PromiseObservable<T> extends Observable<T> {\n\n  public value: T;\n\n  /**\n   * Converts a Promise to an Observable.\n   *\n   * <span class=\"informal\">Returns an Observable that just emits the Promise's\n   * resolved value, then completes.</span>\n   *\n   * Converts an ES2015 Promise or a Promises/A+ spec compliant Promise to an\n   * Observable. If the Promise resolves with a value, the output Observable\n   * emits that resolved value as a `next`, and then completes. If the Promise\n   * is rejected, then the output Observable emits the corresponding Error.\n   *\n   * @example <caption>Convert the Promise returned by Fetch to an Observable</caption>\n   * var result = Rx.Observable.fromPromise(fetch('http://myserver.com/'));\n   * result.subscribe(x => console.log(x), e => console.error(e));\n   *\n   * @see {@link bindCallback}\n   * @see {@link from}\n   *\n   * @param {Promise<T>} promise The promise to be converted.\n   * @param {Scheduler} [scheduler] An optional Scheduler to use for scheduling\n   * the delivery of the resolved value (or the rejection).\n   * @return {Observable<T>} An Observable which wraps the Promise.\n   * @static true\n   * @name fromPromise\n   * @owner Observable\n   */\n  static create<T>(promise: Promise<T>, scheduler?: Scheduler): Observable<T> {\n    return new PromiseObservable(promise, scheduler);\n  }\n\n  constructor(private promise: Promise<T>, private scheduler?: Scheduler) {\n    super();\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>): TeardownLogic {\n    const promise = this.promise;\n    const scheduler = this.scheduler;\n\n    if (scheduler == null) {\n      if (this._isScalar) {\n        if (!subscriber.closed) {\n          subscriber.next(this.value);\n          subscriber.complete();\n        }\n      } else {\n        promise.then(\n          (value) => {\n            this.value = value;\n            this._isScalar = true;\n            if (!subscriber.closed) {\n              subscriber.next(value);\n              subscriber.complete();\n            }\n          },\n          (err) => {\n            if (!subscriber.closed) {\n              subscriber.error(err);\n            }\n          }\n        )\n        .then(null, err => {\n          // escape the promise trap, throw unhandled errors\n          root.setTimeout(() => { throw err; });\n        });\n      }\n    } else {\n      if (this._isScalar) {\n        if (!subscriber.closed) {\n          return scheduler.schedule(dispatchNext, 0, { value: this.value, subscriber });\n        }\n      } else {\n        promise.then(\n          (value) => {\n            this.value = value;\n            this._isScalar = true;\n            if (!subscriber.closed) {\n              subscriber.add(scheduler.schedule(dispatchNext, 0, { value, subscriber }));\n            }\n          },\n          (err) => {\n            if (!subscriber.closed) {\n              subscriber.add(scheduler.schedule(dispatchError, 0, { err, subscriber }));\n            }\n          })\n          .then(null, (err) => {\n            // escape the promise trap, throw unhandled errors\n            root.setTimeout(() => { throw err; });\n          });\n      }\n    }\n  }\n}\n\ninterface DispatchNextArg<T> {\n  subscriber: Subscriber<T>;\n  value: T;\n}\nfunction dispatchNext<T>(arg: DispatchNextArg<T>) {\n  const { value, subscriber } = arg;\n  if (!subscriber.closed) {\n    subscriber.next(value);\n    subscriber.complete();\n  }\n}\n\ninterface DispatchErrorArg<T> {\n  subscriber: Subscriber<T>;\n  err: any;\n}\nfunction dispatchError<T>(arg: DispatchErrorArg<T>) {\n  const { err, subscriber } = arg;\n  if (!subscriber.closed) {\n    subscriber.error(err);\n  }\n}\n","import { root } from '../util/root';\nimport { Scheduler } from '../Scheduler';\nimport { Observable } from '../Observable';\nimport { $$iterator } from '../symbol/iterator';\nimport { TeardownLogic } from '../Subscription';\nimport { Subscriber } from '../Subscriber';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class IteratorObservable<T> extends Observable<T> {\n  private iterator: any;\n\n  static create<T>(iterator: any, scheduler?: Scheduler) {\n    return new IteratorObservable(iterator, scheduler);\n  }\n\n  static dispatch(state: any) {\n\n    const { index, hasError, iterator, subscriber } = state;\n\n    if (hasError) {\n      subscriber.error(state.error);\n      return;\n    }\n\n    let result = iterator.next();\n    if (result.done) {\n      subscriber.complete();\n      return;\n    }\n\n    subscriber.next(result.value);\n    state.index = index + 1;\n\n    if (subscriber.closed) {\n      return;\n    }\n\n    (<any> this).schedule(state);\n  }\n\n  constructor(iterator: any, private scheduler?: Scheduler) {\n    super();\n\n    if (iterator == null) {\n      throw new Error('iterator cannot be null.');\n    }\n\n    this.iterator = getIterator(iterator);\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>): TeardownLogic {\n\n    let index = 0;\n    const { iterator, scheduler } = this;\n\n    if (scheduler) {\n      return scheduler.schedule(IteratorObservable.dispatch, 0, {\n        index, iterator, subscriber\n      });\n    } else {\n      do {\n        let result = iterator.next();\n        if (result.done) {\n          subscriber.complete();\n          break;\n        } else {\n          subscriber.next(result.value);\n        }\n        if (subscriber.closed) {\n          break;\n        }\n      } while (true);\n    }\n  }\n}\n\nclass StringIterator {\n  constructor(private str: string,\n              private idx: number = 0,\n              private len: number = str.length) {\n  }\n  [$$iterator]() { return (this); }\n  next() {\n    return this.idx < this.len ? {\n        done: false,\n        value: this.str.charAt(this.idx++)\n    } : {\n        done: true,\n        value: undefined\n    };\n  }\n}\n\nclass ArrayIterator {\n  constructor(private arr: Array<any>,\n              private idx: number = 0,\n              private len: number = toLength(arr)) {\n  }\n  [$$iterator]() { return this; }\n  next() {\n    return this.idx < this.len ? {\n        done: false,\n        value: this.arr[this.idx++]\n    } : {\n        done: true,\n        value: undefined\n    };\n  }\n}\n\nfunction getIterator(obj: any) {\n  const i = obj[$$iterator];\n  if (!i && typeof obj === 'string') {\n    return new StringIterator(obj);\n  }\n  if (!i && obj.length !== undefined) {\n    return new ArrayIterator(obj);\n  }\n  if (!i) {\n    throw new TypeError('object is not iterable');\n  }\n  return obj[$$iterator]();\n}\n\nconst maxSafeInteger = Math.pow(2, 53) - 1;\n\nfunction toLength(o: any) {\n  let len = +o.length;\n  if (isNaN(len)) {\n      return 0;\n  }\n  if (len === 0 || !numberIsFinite(len)) {\n      return len;\n  }\n  len = sign(len) * Math.floor(Math.abs(len));\n  if (len <= 0) {\n      return 0;\n  }\n  if (len > maxSafeInteger) {\n      return maxSafeInteger;\n  }\n  return len;\n}\n\nfunction numberIsFinite(value: any) {\n  return typeof value === 'number' && root.isFinite(value);\n}\n\nfunction sign(value: any) {\n  let valueAsNumber = +value;\n  if (valueAsNumber === 0) {\n    return valueAsNumber;\n  }\n  if (isNaN(valueAsNumber)) {\n    return valueAsNumber;\n  }\n  return valueAsNumber < 0 ? -1 : 1;\n}\n","import { Scheduler } from '../Scheduler';\nimport { Observable } from '../Observable';\nimport { ScalarObservable } from './ScalarObservable';\nimport { EmptyObservable } from './EmptyObservable';\nimport { Subscriber } from '../Subscriber';\nimport { TeardownLogic } from '../Subscription';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class ArrayLikeObservable<T> extends Observable<T> {\n\n  static create<T>(arrayLike: ArrayLike<T>, scheduler?: Scheduler): Observable<T> {\n    const length = arrayLike.length;\n    if (length === 0) {\n      return new EmptyObservable<T>();\n    } else if (length === 1) {\n      return new ScalarObservable<T>(<any>arrayLike[0], scheduler);\n    } else {\n      return new ArrayLikeObservable(arrayLike, scheduler);\n    }\n  }\n\n  static dispatch(state: any) {\n    const { arrayLike, index, length, subscriber } = state;\n\n    if (subscriber.closed) {\n      return;\n    }\n\n    if (index >= length) {\n      subscriber.complete();\n      return;\n    }\n\n    subscriber.next(arrayLike[index]);\n\n    state.index = index + 1;\n\n    (<any> this).schedule(state);\n  }\n\n  // value used if Array has one value and _isScalar\n  private value: any;\n\n  constructor(private arrayLike: ArrayLike<T>, private scheduler?: Scheduler) {\n    super();\n    if (!scheduler && arrayLike.length === 1) {\n      this._isScalar = true;\n      this.value = arrayLike[0];\n    }\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>): TeardownLogic {\n    let index = 0;\n    const { arrayLike, scheduler } = this;\n    const length = arrayLike.length;\n\n    if (scheduler) {\n      return scheduler.schedule(ArrayLikeObservable.dispatch, 0, {\n        arrayLike, index, length, subscriber\n      });\n    } else {\n      for (let i = 0; i < length && !subscriber.closed; i++) {\n        subscriber.next(arrayLike[i]);\n      }\n      subscriber.complete();\n    }\n  }\n}\n","import { isArray } from '../util/isArray';\nimport { isPromise } from '../util/isPromise';\nimport { PromiseObservable } from './PromiseObservable';\nimport { IteratorObservable } from'./IteratorObservable';\nimport { ArrayObservable } from './ArrayObservable';\nimport { ArrayLikeObservable } from './ArrayLikeObservable';\n\nimport { Scheduler } from '../Scheduler';\nimport { $$iterator } from '../symbol/iterator';\nimport { Observable, ObservableInput } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { ObserveOnSubscriber } from '../operator/observeOn';\nimport { $$observable } from '../symbol/observable';\n\nconst isArrayLike = (<T>(x: any): x is ArrayLike<T> => x && typeof x.length === 'number');\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class FromObservable<T> extends Observable<T> {\n  constructor(private ish: ObservableInput<T>, private scheduler?: Scheduler) {\n    super(null);\n  }\n\n  static create<T>(ish: ObservableInput<T>, scheduler?: Scheduler): Observable<T>;\n  static create<T, R>(ish: ArrayLike<T>, scheduler?: Scheduler): Observable<R>;\n\n  /**\n   * Creates an Observable from an Array, an array-like object, a Promise, an\n   * iterable object, or an Observable-like object.\n   *\n   * <span class=\"informal\">Converts almost anything to an Observable.</span>\n   *\n   * <img src=\"./img/from.png\" width=\"100%\">\n   *\n   * Convert various other objects and data types into Observables. `from`\n   * converts a Promise or an array-like or an\n   * [iterable](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols#iterable)\n   * object into an Observable that emits the items in that promise or array or\n   * iterable. A String, in this context, is treated as an array of characters.\n   * Observable-like objects (contains a function named with the ES2015 Symbol\n   * for Observable) can also be converted through this operator.\n   *\n   * @example <caption>Converts an array to an Observable</caption>\n   * var array = [10, 20, 30];\n   * var result = Rx.Observable.from(array);\n   * result.subscribe(x => console.log(x));\n   *\n   * @example <caption>Convert an infinite iterable (from a generator) to an Observable</caption>\n   * function* generateDoubles(seed) {\n   *   var i = seed;\n   *   while (true) {\n   *     yield i;\n   *     i = 2 * i; // double it\n   *   }\n   * }\n   *  \n   * var iterator = generateDoubles(3);\n   * var result = Rx.Observable.from(iterator).take(10);\n   * result.subscribe(x => console.log(x));\n   *\n   * @see {@link create}\n   * @see {@link fromEvent}\n   * @see {@link fromEventPattern}\n   * @see {@link fromPromise}\n   *  \n   * @param {ObservableInput<T>} ish A subscribable object, a Promise, an\n   * Observable-like, an Array, an iterable or an array-like object to be\n   * converted.\n   * @param {Scheduler} [scheduler] The scheduler on which to schedule the\n   * emissions of values.\n   * @return {Observable<T>} The Observable whose values are originally from the\n   * input object that was converted.\n   * @static true\n   * @name from\n   * @owner Observable\n   */\n  static create<T>(ish: ObservableInput<T>, scheduler?: Scheduler): Observable<T> {\n    if (ish != null) {\n      if (typeof ish[$$observable] === 'function') {\n        if (ish instanceof Observable && !scheduler) {\n          return ish;\n        }\n        return new FromObservable<T>(ish, scheduler);\n      } else if (isArray(ish)) {\n        return new ArrayObservable<T>(ish, scheduler);\n      } else if (isPromise(ish)) {\n        return new PromiseObservable<T>(ish, scheduler);\n      } else if (typeof ish[$$iterator] === 'function' || typeof ish === 'string') {\n        return new IteratorObservable<T>(ish, scheduler);\n      } else if (isArrayLike(ish)) {\n        return new ArrayLikeObservable(ish, scheduler);\n      }\n    }\n\n    throw new TypeError((ish !== null && typeof ish || ish) + ' is not observable');\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>) {\n    const ish = this.ish;\n    const scheduler = this.scheduler;\n    if (scheduler == null) {\n      return ish[$$observable]().subscribe(subscriber);\n    } else {\n      return ish[$$observable]().subscribe(new ObserveOnSubscriber(subscriber, scheduler, 0));\n    }\n  }\n}\n","import { Observable, ObservableInput } from '../Observable';\r\nimport { FromObservable } from '../observable/FromObservable';\r\nimport { Operator } from '../Operator';\r\nimport { Subscriber } from '../Subscriber';\r\nimport { isArray } from '../util/isArray';\r\nimport { OuterSubscriber } from '../OuterSubscriber';\r\nimport { InnerSubscriber } from '../InnerSubscriber';\r\nimport { subscribeToResult } from '../util/subscribeToResult';\r\n\r\nexport function onErrorResumeNext<T, R>(...nextSources: Array<ObservableInput<any> |\r\n                                                       Array<ObservableInput<any>> |\r\n                                                       ((...values: Array<any>) => R)>): Observable<R> {\r\n  if (nextSources.length === 1 && isArray(nextSources[0])) {\r\n    nextSources = <Array<Observable<any>>>nextSources[0];\r\n  }\r\n\r\n  return this.lift(new OnErrorResumeNextOperator<T, R>(nextSources));\r\n}\r\n\r\n/* tslint:disable:max-line-length */\r\nexport interface OnErrorResumeNextSignature<T> {\r\n  <R>(v: ObservableInput<R>): Observable<R>;\r\n  <T2, T3, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>): Observable<R>;\r\n  <T2, T3, T4, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>): Observable<R>;\r\n  <T2, T3, T4, T5, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>): Observable<R>;\r\n  <T2, T3, T4, T5, T6, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>): Observable<R>;\r\n\r\n  <R>(...observables: Array<ObservableInput<any> | ((...values: Array<any>) => R)>): Observable<R>;\r\n  <R>(array: ObservableInput<any>[]): Observable<R>;\r\n}\r\n/* tslint:enable:max-line-length */\r\n\r\n/* tslint:disable:max-line-length */\r\nexport function onErrorResumeNextStatic<R>(v: ObservableInput<R>): Observable<R>;\r\nexport function onErrorResumeNextStatic<T2, T3, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>): Observable<R>;\r\nexport function onErrorResumeNextStatic<T2, T3, T4, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>): Observable<R>;\r\nexport function onErrorResumeNextStatic<T2, T3, T4, T5, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>): Observable<R>;\r\nexport function onErrorResumeNextStatic<T2, T3, T4, T5, T6, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>): Observable<R>;\r\n\r\nexport function onErrorResumeNextStatic<R>(...observables: Array<ObservableInput<any> | ((...values: Array<any>) => R)>): Observable<R>;\r\nexport function onErrorResumeNextStatic<R>(array: ObservableInput<any>[]): Observable<R>;\r\n/* tslint:enable:max-line-length */\r\n\r\nexport function onErrorResumeNextStatic<T, R>(...nextSources: Array<ObservableInput<any> |\r\n                                                              Array<ObservableInput<any>> |\r\n                                                              ((...values: Array<any>) => R)>): Observable<R> {\r\n  let source: ObservableInput<any> = null;\r\n\r\n  if (nextSources.length === 1 && isArray(nextSources[0])) {\r\n    nextSources = <Array<ObservableInput<any>>>nextSources[0];\r\n  }\r\n  source = nextSources.shift();\r\n\r\n  return new FromObservable(source, null).lift(new OnErrorResumeNextOperator<T, R>(nextSources));\r\n}\r\n\r\nclass OnErrorResumeNextOperator<T, R> implements Operator<T, R> {\r\n  constructor(private nextSources: Array<ObservableInput<any>>) {\r\n  }\r\n\r\n  call(subscriber: Subscriber<R>, source: any): any {\r\n    return source._subscribe(new OnErrorResumeNextSubscriber(subscriber, this.nextSources));\r\n  }\r\n}\r\n\r\nclass OnErrorResumeNextSubscriber<T, R> extends OuterSubscriber<T, R> {\r\n  constructor(protected destination: Subscriber<T>,\r\n              private nextSources: Array<ObservableInput<any>>) {\r\n    super(destination);\r\n  }\r\n\r\n  notifyError(error: any, innerSub: InnerSubscriber<T, any>): void {\r\n    this.subscribeToNextSource();\r\n  }\r\n\r\n  notifyComplete(innerSub: InnerSubscriber<T, any>): void {\r\n    this.subscribeToNextSource();\r\n  }\r\n\r\n  protected _error(err: any): void {\r\n    this.subscribeToNextSource();\r\n  }\r\n\r\n  protected _complete(): void {\r\n    this.subscribeToNextSource();\r\n  }\r\n\r\n  private subscribeToNextSource(): void {\r\n    const next = this.nextSources.shift();\r\n    if (next) {\r\n      this.add(subscribeToResult(this, next));\r\n    } else {\r\n      this.destination.complete();\r\n    }\r\n  }\r\n}","import { Observable } from '../../Observable';\r\nimport { onErrorResumeNext, OnErrorResumeNextSignature } from '../../operator/onErrorResumeNext';\r\n\r\nObservable.prototype.onErrorResumeNext = onErrorResumeNext;\r\n\r\ndeclare module '../../Observable' {\r\n  interface Observable<T> {\r\n    onErrorResumeNext: OnErrorResumeNextSignature<T>;\r\n  }\r\n}","import { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\n\n/**\n * Groups pairs of consecutive emissions together and emits them as an array of\n * two values.\n *\n * <span class=\"informal\">Puts the current value and previous value together as\n * an array, and emits that.</span>\n *\n * <img src=\"./img/pairwise.png\" width=\"100%\">\n *\n * The Nth emission from the source Observable will cause the output Observable\n * to emit an array [(N-1)th, Nth] of the previous and the current value, as a\n * pair. For this reason, `pairwise` emits on the second and subsequent\n * emissions from the source Observable, but not on the first emission, because\n * there is no previous value in that case.\n *\n * @example <caption>On every click (starting from the second), emit the relative distance to the previous click</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var pairs = clicks.pairwise();\n * var distance = pairs.map(pair => {\n *   var x0 = pair[0].clientX;\n *   var y0 = pair[0].clientY;\n *   var x1 = pair[1].clientX;\n *   var y1 = pair[1].clientY;\n *   return Math.sqrt(Math.pow(x0 - x1, 2) + Math.pow(y0 - y1, 2));\n * });\n * distance.subscribe(x => console.log(x));\n *\n * @see {@link buffer}\n * @see {@link bufferCount}\n *\n * @return {Observable<Array<T>>} An Observable of pairs (as arrays) of\n * consecutive values from the source Observable.\n * @method pairwise\n * @owner Observable\n */\nexport function pairwise<T>(): Observable<[T, T]> {\n  return this.lift(new PairwiseOperator());\n}\n\nexport interface PairwiseSignature<T> {\n  (): Observable<[T, T]>;\n}\n\nclass PairwiseOperator<T> implements Operator<T, [T, T]> {\n  call(subscriber: Subscriber<[T, T]>, source: any): any {\n    return source._subscribe(new PairwiseSubscriber(subscriber));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass PairwiseSubscriber<T> extends Subscriber<T> {\n  private prev: T;\n  private hasPrev: boolean = false;\n\n  constructor(destination: Subscriber<[T, T]>) {\n    super(destination);\n  }\n\n  _next(value: T): void {\n    if (this.hasPrev) {\n      this.destination.next([this.prev, value]);\n    } else {\n      this.hasPrev = true;\n    }\n\n    this.prev = value;\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { pairwise, PairwiseSignature } from '../../operator/pairwise';\n\nObservable.prototype.pairwise = pairwise;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    pairwise: PairwiseSignature<T>;\n  }\n}","export function not(pred: Function, thisArg: any): Function {\n  function notPred(): any {\n    return !((<any> notPred).pred.apply((<any> notPred).thisArg, arguments));\n  }\n  (<any> notPred).pred = pred;\n  (<any> notPred).thisArg = thisArg;\n  return notPred;\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { TeardownLogic } from '../Subscription';\n\n/**\n * Filter items emitted by the source Observable by only emitting those that\n * satisfy a specified predicate.\n *\n * <span class=\"informal\">Like\n * [Array.prototype.filter()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter),\n * it only emits a value from the source if it passes a criterion function.</span>\n *\n * <img src=\"./img/filter.png\" width=\"100%\">\n *\n * Similar to the well-known `Array.prototype.filter` method, this operator\n * takes values from the source Observable, passes them through a `predicate`\n * function and only emits those values that yielded `true`.\n *\n * @example <caption>Emit only click events whose target was a DIV element</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var clicksOnDivs = clicks.filter(ev => ev.target.tagName === 'DIV');\n * clicksOnDivs.subscribe(x => console.log(x));\n *\n * @see {@link distinct}\n * @see {@link distinctKey}\n * @see {@link distinctUntilChanged}\n * @see {@link distinctUntilKeyChanged}\n * @see {@link ignoreElements}\n * @see {@link partition}\n * @see {@link skip}\n *\n * @param {function(value: T, index: number): boolean} predicate A function that\n * evaluates each value emitted by the source Observable. If it returns `true`,\n * the value is emitted, if `false` the value is not passed to the output\n * Observable. The `index` parameter is the number `i` for the i-th source\n * emission that has happened since the subscription, starting from the number\n * `0`.\n * @param {any} [thisArg] An optional argument to determine the value of `this`\n * in the `predicate` function.\n * @return {Observable} An Observable of values from the source that were\n * allowed by the `predicate` function.\n * @method filter\n * @owner Observable\n */\nexport function filter<T>(predicate: (value: T, index: number) => boolean,\n                          thisArg?: any): Observable<T> {\n  return this.lift(new FilterOperator(predicate, thisArg));\n}\n\nexport interface FilterSignature<T> {\n  (predicate: (value: T, index: number) => boolean, thisArg?: any): Observable<T>;\n}\n\nclass FilterOperator<T> implements Operator<T, T> {\n  constructor(private predicate: (value: T, index: number) => boolean,\n              private thisArg?: any) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source._subscribe(new FilterSubscriber(subscriber, this.predicate, this.thisArg));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass FilterSubscriber<T> extends Subscriber<T> {\n\n  count: number = 0;\n\n  constructor(destination: Subscriber<T>,\n              private predicate: (value: T, index: number) => boolean,\n              private thisArg: any) {\n    super(destination);\n    this.predicate = predicate;\n  }\n\n  // the try catch block below is left specifically for\n  // optimization and perf reasons. a tryCatcher is not necessary here.\n  protected _next(value: T) {\n    let result: any;\n    try {\n      result = this.predicate.call(this.thisArg, value, this.count++);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    if (result) {\n      this.destination.next(value);\n    }\n  }\n}\n","import { not } from '../util/not';\nimport { filter } from './filter';\nimport { Observable } from '../Observable';\n\n/**\n * Splits the source Observable into two, one with values that satisfy a\n * predicate, and another with values that don't satisfy the predicate.\n *\n * <span class=\"informal\">It's like {@link filter}, but returns two Observables:\n * one like the output of {@link filter}, and the other with values that did not\n * pass the condition.</span>\n *\n * <img src=\"./img/partition.png\" width=\"100%\">\n *\n * `partition` outputs an array with two Observables that partition the values\n * from the source Observable through the given `predicate` function. The first\n * Observable in that array emits source values for which the predicate argument\n * returns true. The second Observable emits source values for which the\n * predicate returns false. The first behaves like {@link filter} and the second\n * behaves like {@link filter} with the predicate negated.\n *\n * @example <caption>Partition click events into those on DIV elements and those elsewhere</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var parts = clicks.partition(ev => ev.target.tagName === 'DIV');\n * var clicksOnDivs = parts[0];\n * var clicksElsewhere = parts[1];\n * clicksOnDivs.subscribe(x => console.log('DIV clicked: ', x));\n * clicksElsewhere.subscribe(x => console.log('Other clicked: ', x));\n *\n * @see {@link filter}\n *\n * @param {function(value: T, index: number): boolean} predicate A function that\n * evaluates each value emitted by the source Observable. If it returns `true`,\n * the value is emitted on the first Observable in the returned array, if\n * `false` the value is emitted on the second Observable in the array. The\n * `index` parameter is the number `i` for the i-th source emission that has\n * happened since the subscription, starting from the number `0`.\n * @param {any} [thisArg] An optional argument to determine the value of `this`\n * in the `predicate` function.\n * @return {[Observable<T>, Observable<T>]} An array with two Observables: one\n * with values that passed the predicate, and another with values that did not\n * pass the predicate.\n * @method partition\n * @owner Observable\n */\nexport function partition<T>(predicate: (value: T) => boolean, thisArg?: any): [Observable<T>, Observable<T>] {\n  return [\n    filter.call(this, predicate),\n    filter.call(this, not(predicate, thisArg))\n  ];\n}\n\nexport interface PartitionSignature<T> {\n  (predicate: (value: T) => boolean, thisArg?: any): [Observable<T>, Observable<T>];\n}\n","\nimport { Observable } from '../../Observable';\nimport { partition, PartitionSignature } from '../../operator/partition';\n\nObservable.prototype.partition = partition;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    partition: PartitionSignature<T>;\n  }\n}","import { Observable } from '../Observable';\nimport { map } from './map';\n\n/**\n * Maps each source value (an object) to its specified nested property.\n *\n * <span class=\"informal\">Like {@link map}, but meant only for picking one of\n * the nested properties of every emitted object.</span>\n *\n * <img src=\"./img/pluck.png\" width=\"100%\">\n *\n * Given a list of strings describing a path to an object property, retrieves\n * the value of a specified nested property from all values in the source\n * Observable. If a property can't be resolved, it will return `undefined` for\n * that value.\n *\n * @example <caption>Map every every click to the tagName of the clicked target element</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var tagNames = clicks.pluck('target', 'tagName');\n * tagNames.subscribe(x => console.log(x));\n *\n * @see {@link map}\n *\n * @param {...string} properties The nested properties to pluck from each source\n * value (an object).\n * @return {Observable} Returns a new Observable of property values from the\n * source values.\n * @method pluck\n * @owner Observable\n */\nexport function pluck<R>(...properties: string[]): Observable<R> {\n  const length = properties.length;\n  if (length === 0) {\n    throw new Error('list of properties cannot be empty.');\n  }\n  return map.call(this, plucker(properties, length));\n}\n\nexport interface PluckSignature<T> {\n  <R>(...properties: string[]): Observable<R>;\n}\n\nfunction plucker(props: string[], length: number): (x: string) => any {\n  const mapper = (x: string) => {\n    let currentProp = x;\n    for (let i = 0; i < length; i++) {\n      const p = currentProp[props[i]];\n      if (typeof p !== 'undefined') {\n        currentProp = p;\n      } else {\n        return undefined;\n      }\n    }\n    return currentProp;\n  };\n\n  return mapper;\n}\n","\nimport { Observable } from '../../Observable';\nimport { pluck, PluckSignature } from '../../operator/pluck';\n\nObservable.prototype.pluck = pluck;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    pluck: PluckSignature<T>;\n  }\n}","import { Subject } from '../Subject';\nimport { Observable } from '../Observable';\nimport { multicast } from './multicast';\nimport { ConnectableObservable } from '../observable/ConnectableObservable';\n\n/**\n * Returns a ConnectableObservable, which is a variety of Observable that waits until its connect method is called\n * before it begins emitting items to those Observers that have subscribed to it.\n *\n * <img src=\"./img/publish.png\" width=\"100%\">\n *\n * @param {Function} Optional selector function which can use the multicasted source sequence as many times as needed,\n * without causing multiple subscriptions to the source sequence.\n * Subscribers to the given source will receive all notifications of the source from the time of the subscription on.\n * @return a ConnectableObservable that upon connection causes the source Observable to emit items to its Observers.\n * @method publish\n * @owner Observable\n */\nexport function publish<T>(selector?: (source: Observable<T>) => Observable<T>): Observable<T> | ConnectableObservable<T> {\n  return selector ? multicast.call(this, () => new Subject<T>(), selector) :\n                    multicast.call(this, new Subject<T>());\n}\n\nexport type selector<T> = (source: Observable<T>) => Observable<T>;\n\nexport interface PublishSignature<T> {\n  (): ConnectableObservable<T>;\n  (selector: selector<T>): Observable<T>;\n}\n","\nimport { Observable } from '../../Observable';\nimport { publish, PublishSignature } from '../../operator/publish';\n\nObservable.prototype.publish = <any>publish;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    publish: PublishSignature<T>;\n  }\n}","import { BehaviorSubject } from '../BehaviorSubject';\nimport { multicast } from './multicast';\nimport { ConnectableObservable } from '../observable/ConnectableObservable';\n\n/**\n * @param value\n * @return {ConnectableObservable<T>}\n * @method publishBehavior\n * @owner Observable\n */\nexport function publishBehavior<T>(value: T): ConnectableObservable<T> {\n  return multicast.call(this, new BehaviorSubject<T>(value));\n}\n\nexport interface PublishBehaviorSignature<T> {\n  (value: T): ConnectableObservable<T>;\n}\n","\nimport { Observable } from '../../Observable';\nimport { publishBehavior, PublishBehaviorSignature } from '../../operator/publishBehavior';\n\nObservable.prototype.publishBehavior = publishBehavior;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    publishBehavior: PublishBehaviorSignature<T>;\n  }\n}","import { ReplaySubject } from '../ReplaySubject';\nimport { Scheduler } from '../Scheduler';\nimport { multicast } from './multicast';\nimport { ConnectableObservable } from '../observable/ConnectableObservable';\n\n/**\n * @param bufferSize\n * @param windowTime\n * @param scheduler\n * @return {ConnectableObservable<T>}\n * @method publishReplay\n * @owner Observable\n */\nexport function publishReplay<T>(bufferSize: number = Number.POSITIVE_INFINITY,\n                                 windowTime: number = Number.POSITIVE_INFINITY,\n                                 scheduler?: Scheduler): ConnectableObservable<T> {\n  return multicast.call(this, new ReplaySubject<T>(bufferSize, windowTime, scheduler));\n}\n\nexport interface PublishReplaySignature<T> {\n  (bufferSize?: number, windowTime?: number, scheduler?: Scheduler): ConnectableObservable<T>;\n}\n","\nimport { Observable } from '../../Observable';\nimport { publishReplay, PublishReplaySignature } from '../../operator/publishReplay';\n\nObservable.prototype.publishReplay = publishReplay;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    publishReplay: PublishReplaySignature<T>;\n  }\n}","import { AsyncSubject } from '../AsyncSubject';\nimport { multicast } from './multicast';\nimport { ConnectableObservable } from '../observable/ConnectableObservable';\n\n/**\n * @return {ConnectableObservable<T>}\n * @method publishLast\n * @owner Observable\n */\nexport function publishLast<T>(): ConnectableObservable<T> {\n  return multicast.call(this, new AsyncSubject<T>());\n}\n\nexport interface PublishLastSignature<T> {\n  (): ConnectableObservable<T>;\n}\n","\nimport { Observable } from '../../Observable';\nimport { publishLast, PublishLastSignature } from '../../operator/publishLast';\n\nObservable.prototype.publishLast = publishLast;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    publishLast: PublishLastSignature<T>;\n  }\n}","import { Observable } from '../Observable';\nimport { isArray } from '../util/isArray';\nimport { ArrayObservable } from '../observable/ArrayObservable';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription, TeardownLogic } from '../Subscription';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n\n/**\n * Returns an Observable that mirrors the first source Observable to emit an item\n * from the combination of this Observable and supplied Observables\n * @param {...Observables} ...observables sources used to race for which Observable emits first.\n * @return {Observable} an Observable that mirrors the output of the first Observable to emit an item.\n * @method race\n * @owner Observable\n */\nexport function race<T>(...observables: Array<Observable<T> | Array<Observable<T>>>): Observable<T> {\n  // if the only argument is an array, it was most likely called with\n  // `pair([obs1, obs2, ...])`\n  if (observables.length === 1 && isArray(observables[0])) {\n    observables = <Array<Observable<T>>>observables[0];\n  }\n\n  observables.unshift(this);\n  return raceStatic.apply(this, observables);\n}\n\nexport interface RaceSignature<T> {\n  (...observables: Array<Observable<T> | Array<Observable<T>>>): Observable<T>;\n  <R>(...observables: Array<Observable<any> | Array<Observable<T>>>): Observable<R>;\n}\n\n/**\n * Returns an Observable that mirrors the first source Observable to emit an item.\n * @param {...Observables} ...observables sources used to race for which Observable emits first.\n * @return {Observable} an Observable that mirrors the output of the first Observable to emit an item.\n * @static true\n * @name race\n * @owner Observable\n */\nexport function raceStatic<T>(...observables: Array<Observable<T> | Array<Observable<T>>>): Observable<T>;\nexport function raceStatic<T>(...observables: Array<Observable<any> | Array<Observable<any>>>): Observable<T> {\n  // if the only argument is an array, it was most likely called with\n  // `pair([obs1, obs2, ...])`\n  if (observables.length === 1) {\n    if (isArray(observables[0])) {\n      observables = <Array<Observable<any>>>observables[0];\n    } else {\n      return <Observable<any>>observables[0];\n    }\n  }\n\n  return new ArrayObservable<T>(<any>observables).lift(new RaceOperator<T>());\n}\n\nexport class RaceOperator<T> implements Operator<T, T> {\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source._subscribe(new RaceSubscriber(subscriber));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class RaceSubscriber<T> extends OuterSubscriber<T, T> {\n  private hasFirst: boolean = false;\n  private observables: Observable<any>[] = [];\n  private subscriptions: Subscription[] = [];\n\n  constructor(destination: Subscriber<T>) {\n    super(destination);\n  }\n\n  protected _next(observable: any): void {\n    this.observables.push(observable);\n  }\n\n  protected _complete() {\n    const observables = this.observables;\n    const len = observables.length;\n\n    if (len === 0) {\n      this.destination.complete();\n    } else {\n      for (let i = 0; i < len; i++) {\n        let observable = observables[i];\n        let subscription = subscribeToResult(this, observable, observable, i);\n\n        if (this.subscriptions) {\n          this.subscriptions.push(subscription);\n          this.add(subscription);\n        }\n      }\n      this.observables = null;\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: T,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, T>): void {\n    if (!this.hasFirst) {\n      this.hasFirst = true;\n\n      for (let i = 0; i < this.subscriptions.length; i++) {\n        if (i !== outerIndex) {\n          let subscription = this.subscriptions[i];\n\n          subscription.unsubscribe();\n          this.remove(subscription);\n        }\n      }\n\n      this.subscriptions = null;\n    }\n\n    this.destination.next(innerValue);\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { race, RaceSignature } from '../../operator/race';\n\nObservable.prototype.race = race;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    race: RaceSignature<T>;\n  }\n}","import { Observable } from '../Observable';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\n\n/**\n * Applies an accumulator function over the source Observable, and returns the\n * accumulated result when the source completes, given an optional seed value.\n *\n * <span class=\"informal\">Combines together all values emitted on the source,\n * using an accumulator function that knows how to join a new source value into\n * the accumulation from the past.</span>\n *\n * <img src=\"./img/reduce.png\" width=\"100%\">\n *\n * Like\n * [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce),\n * `reduce` applies an `accumulator` function against an accumulation and each\n * value of the source Observable (from the past) to reduce it to a single\n * value, emitted on the output Observable. Note that `reduce` will only emit\n * one value, only when the source Observable completes. It is equivalent to\n * applying operator {@link scan} followed by operator {@link last}.\n *\n * Returns an Observable that applies a specified `accumulator` function to each\n * item emitted by the source Observable. If a `seed` value is specified, then\n * that value will be used as the initial value for the accumulator. If no seed\n * value is specified, the first item of the source is used as the seed.\n *\n * @example <caption>Count the number of click events that happened in 5 seconds</caption>\n * var clicksInFiveSeconds = Rx.Observable.fromEvent(document, 'click')\n *   .takeUntil(Rx.Observable.interval(5000));\n * var ones = clicksInFiveSeconds.mapTo(1);\n * var seed = 0;\n * var count = ones.reduce((acc, one) => acc + one, seed);\n * count.subscribe(x => console.log(x));\n *\n * @see {@link count}\n * @see {@link expand}\n * @see {@link mergeScan}\n * @see {@link scan}\n *\n * @param {function(acc: R, value: T): R} accumulator The accumulator function\n * called on each source value.\n * @param {R} [seed] The initial accumulation value.\n * @return {Observable<R>} An observable of the accumulated values.\n * @return {Observable<R>} An Observable that emits a single value that is the\n * result of accumulating the values emitted by the source Observable.\n * @method reduce\n * @owner Observable\n */\nexport function reduce<T, R>(accumulator: (acc: R, value: T) => R, seed?: R): Observable<R> {\n  return this.lift(new ReduceOperator(accumulator, seed));\n}\n\nexport interface ReduceSignature<T> {\n  (accumulator: (acc: T, value: T, index: number) => T, seed?: T): Observable<T>;\n  (accumulator: (acc: T[], value: T, index: number) => T[], seed?: T[]): Observable<T[]>;\n  <R>(accumulator: (acc: R, value: T, index: number) => R, seed?: R): Observable<R>;\n}\n\nexport class ReduceOperator<T, R> implements Operator<T, R> {\n\n  constructor(private accumulator: (acc: R, value: T) => R, private seed?: R) {\n  }\n\n  call(subscriber: Subscriber<R>, source: any): any {\n    return source._subscribe(new ReduceSubscriber(subscriber, this.accumulator, this.seed));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class ReduceSubscriber<T, R> extends Subscriber<T> {\n\n  acc: T | R;\n  hasSeed: boolean;\n  hasValue: boolean = false;\n\n  constructor(destination: Subscriber<R>,\n              private accumulator: (acc: R, value: T) => R,\n              seed?: R) {\n    super(destination);\n    this.acc = seed;\n    this.accumulator = accumulator;\n    this.hasSeed = typeof seed !== 'undefined';\n  }\n\n  protected _next(value: T) {\n    if (this.hasValue || (this.hasValue = this.hasSeed)) {\n      this._tryReduce(value);\n    } else {\n      this.acc = value;\n      this.hasValue = true;\n    }\n  }\n\n  private _tryReduce(value: T) {\n    let result: any;\n    try {\n      result = this.accumulator(<R>this.acc, value);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    this.acc = result;\n  }\n\n  protected _complete() {\n    if (this.hasValue || this.hasSeed) {\n      this.destination.next(this.acc);\n    }\n    this.destination.complete();\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { reduce, ReduceSignature } from '../../operator/reduce';\n\nObservable.prototype.reduce = reduce;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    reduce: ReduceSignature<T>;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { EmptyObservable } from '../observable/EmptyObservable';\nimport { TeardownLogic } from '../Subscription';\n\n/**\n * Returns an Observable that repeats the stream of items emitted by the source Observable at most count times,\n * on a particular Scheduler.\n *\n * <img src=\"./img/repeat.png\" width=\"100%\">\n *\n * @param {Scheduler} [scheduler] the Scheduler to emit the items on.\n * @param {number} [count] the number of times the source Observable items are repeated, a count of 0 will yield\n * an empty Observable.\n * @return {Observable} an Observable that repeats the stream of items emitted by the source Observable at most\n * count times.\n * @method repeat\n * @owner Observable\n */\nexport function repeat<T>(count: number = -1): Observable<T> {\n  if (count === 0) {\n    return new EmptyObservable<T>();\n  } else if (count < 0) {\n    return this.lift(new RepeatOperator(-1, this));\n  } else {\n    return this.lift(new RepeatOperator(count - 1, this));\n  }\n}\n\nexport interface RepeatSignature<T> {\n  (count?: number): Observable<T>;\n}\n\nclass RepeatOperator<T> implements Operator<T, T> {\n  constructor(private count: number,\n              private source: Observable<T>) {\n  }\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source._subscribe(new RepeatSubscriber(subscriber, this.count, this.source));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass RepeatSubscriber<T> extends Subscriber<T> {\n  constructor(destination: Subscriber<any>,\n              private count: number,\n              private source: Observable<T>) {\n    super(destination);\n  }\n  complete() {\n    if (!this.isStopped) {\n      const { source, count } = this;\n      if (count === 0) {\n        return super.complete();\n      } else if (count > -1) {\n        this.count = count - 1;\n      }\n      this.unsubscribe();\n      this.isStopped = false;\n      this.closed = false;\n      source.subscribe(this);\n    }\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { repeat, RepeatSignature } from '../../operator/repeat';\n\nObservable.prototype.repeat = repeat;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    repeat: RepeatSignature<T>;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { Subject } from '../Subject';\nimport { Subscription, TeardownLogic } from '../Subscription';\nimport { tryCatch } from '../util/tryCatch';\nimport { errorObject } from '../util/errorObject';\n\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n\n/**\n * Returns an Observable that emits the same values as the source observable with the exception of a `complete`.\n * A `complete` will cause the emission of the Throwable that cause the complete to the Observable returned from\n * notificationHandler. If that Observable calls onComplete or `complete` then retry will call `complete` or `error`\n * on the child subscription. Otherwise, this Observable will resubscribe to the source observable, on a particular\n * Scheduler.\n *\n * <img src=\"./img/repeatWhen.png\" width=\"100%\">\n *\n * @param {notificationHandler} receives an Observable of notifications with which a user can `complete` or `error`,\n * aborting the retry.\n * @param {scheduler} the Scheduler on which to subscribe to the source Observable.\n * @return {Observable} the source Observable modified with retry logic.\n * @method repeatWhen\n * @owner Observable\n */\nexport function repeatWhen<T>(notifier: (notifications: Observable<any>) => Observable<any>): Observable<T> {\n  return this.lift(new RepeatWhenOperator(notifier, this));\n}\n\nexport interface RepeatWhenSignature<T> {\n  (notifier: (notifications: Observable<any>) => Observable<any>): Observable<T>;\n}\n\nclass RepeatWhenOperator<T> implements Operator<T, T> {\n  constructor(protected notifier: (notifications: Observable<any>) => Observable<any>,\n              protected source: Observable<T>) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source._subscribe(new RepeatWhenSubscriber(subscriber, this.notifier, this.source));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass RepeatWhenSubscriber<T, R> extends OuterSubscriber<T, R> {\n\n  private notifications: Subject<any>;\n  private retries: Observable<any>;\n  private retriesSubscription: Subscription;\n\n  constructor(destination: Subscriber<R>,\n              private notifier: (notifications: Observable<any>) => Observable<any>,\n              private source: Observable<T>) {\n    super(destination);\n  }\n\n  complete() {\n    if (!this.isStopped) {\n\n      let notifications = this.notifications;\n      let retries: any = this.retries;\n      let retriesSubscription = this.retriesSubscription;\n\n      if (!retries) {\n        notifications = new Subject();\n        retries = tryCatch(this.notifier)(notifications);\n        if (retries === errorObject) {\n          return super.complete();\n        }\n        retriesSubscription = subscribeToResult(this, retries);\n      } else {\n        this.notifications = null;\n        this.retriesSubscription = null;\n      }\n\n      this.unsubscribe();\n      this.closed = false;\n\n      this.notifications = notifications;\n      this.retries = retries;\n      this.retriesSubscription = retriesSubscription;\n\n      notifications.next();\n    }\n  }\n\n  protected _unsubscribe() {\n    const { notifications, retriesSubscription } = this;\n    if (notifications) {\n      notifications.unsubscribe();\n      this.notifications = null;\n    }\n    if (retriesSubscription) {\n      retriesSubscription.unsubscribe();\n      this.retriesSubscription = null;\n    }\n    this.retries = null;\n  }\n\n  notifyNext(outerValue: T, innerValue: R,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n\n    const { notifications, retries, retriesSubscription } = this;\n    this.notifications = null;\n    this.retries = null;\n    this.retriesSubscription = null;\n\n    this.unsubscribe();\n    this.isStopped = false;\n    this.closed = false;\n\n    this.notifications = notifications;\n    this.retries = retries;\n    this.retriesSubscription = retriesSubscription;\n\n    this.source.subscribe(this);\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { repeatWhen, RepeatWhenSignature } from '../../operator/repeatWhen';\n\nObservable.prototype.repeatWhen = repeatWhen;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    repeatWhen: RepeatWhenSignature<T>;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { TeardownLogic } from '../Subscription';\n\n/**\n * Returns an Observable that mirrors the source Observable, resubscribing to it if it calls `error` and the\n * predicate returns true for that specific exception and retry count.\n * If the source Observable calls `error`, this method will resubscribe to the source Observable for a maximum of\n * count resubscriptions (given as a number parameter) rather than propagating the `error` call.\n *\n * <img src=\"./img/retry.png\" width=\"100%\">\n *\n * Any and all items emitted by the source Observable will be emitted by the resulting Observable, even those emitted\n * during failed subscriptions. For example, if an Observable fails at first but emits [1, 2] then succeeds the second\n * time and emits: [1, 2, 3, 4, 5] then the complete stream of emissions and notifications\n * would be: [1, 2, 1, 2, 3, 4, 5, `complete`].\n * @param {number} number of retry attempts before failing.\n * @return {Observable} the source Observable modified with the retry logic.\n * @method retry\n * @owner Observable\n */\nexport function retry<T>(count: number = -1): Observable<T> {\n  return this.lift(new RetryOperator(count, this));\n}\n\nexport interface RetrySignature<T> {\n  (count?: number): Observable<T>;\n}\n\nclass RetryOperator<T> implements Operator<T, T> {\n  constructor(private count: number,\n              private source: Observable<T>) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source._subscribe(new RetrySubscriber(subscriber, this.count, this.source));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass RetrySubscriber<T> extends Subscriber<T> {\n  constructor(destination: Subscriber<any>,\n              private count: number,\n              private source: Observable<T>) {\n    super(destination);\n  }\n  error(err: any) {\n    if (!this.isStopped) {\n      const { source, count } = this;\n      if (count === 0) {\n        return super.error(err);\n      } else if (count > -1) {\n        this.count = count - 1;\n      }\n      this.unsubscribe();\n      this.isStopped = false;\n      this.closed = false;\n      source.subscribe(this);\n    }\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { retry, RetrySignature } from '../../operator/retry';\n\nObservable.prototype.retry = retry;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    retry: RetrySignature<T>;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { Subject } from '../Subject';\nimport { Subscription, TeardownLogic } from '../Subscription';\nimport { tryCatch } from '../util/tryCatch';\nimport { errorObject } from '../util/errorObject';\n\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n\n/**\n * Returns an Observable that emits the same values as the source observable with the exception of an `error`.\n * An `error` will cause the emission of the Throwable that cause the error to the Observable returned from\n * notificationHandler. If that Observable calls onComplete or `error` then retry will call `complete` or `error`\n * on the child subscription. Otherwise, this Observable will resubscribe to the source observable, on a particular\n * Scheduler.\n *\n * <img src=\"./img/retryWhen.png\" width=\"100%\">\n *\n * @param {notificationHandler} receives an Observable of notifications with which a user can `complete` or `error`,\n * aborting the retry.\n * @param {scheduler} the Scheduler on which to subscribe to the source Observable.\n * @return {Observable} the source Observable modified with retry logic.\n * @method retryWhen\n * @owner Observable\n */\nexport function retryWhen<T>(notifier: (errors: Observable<any>) => Observable<any>): Observable<T> {\n  return this.lift(new RetryWhenOperator(notifier, this));\n}\n\nexport interface RetryWhenSignature<T> {\n  (notifier: (errors: Observable<any>) => Observable<any>): Observable<T>;\n}\n\nclass RetryWhenOperator<T> implements Operator<T, T> {\n  constructor(protected notifier: (errors: Observable<any>) => Observable<any>,\n              protected source: Observable<T>) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source._subscribe(new RetryWhenSubscriber(subscriber, this.notifier, this.source));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass RetryWhenSubscriber<T, R> extends OuterSubscriber<T, R> {\n\n  private errors: Subject<any>;\n  private retries: Observable<any>;\n  private retriesSubscription: Subscription;\n\n  constructor(destination: Subscriber<R>,\n              private notifier: (errors: Observable<any>) => Observable<any>,\n              private source: Observable<T>) {\n    super(destination);\n  }\n\n  error(err: any) {\n    if (!this.isStopped) {\n\n      let errors = this.errors;\n      let retries: any = this.retries;\n      let retriesSubscription = this.retriesSubscription;\n\n      if (!retries) {\n        errors = new Subject();\n        retries = tryCatch(this.notifier)(errors);\n        if (retries === errorObject) {\n          return super.error(errorObject.e);\n        }\n        retriesSubscription = subscribeToResult(this, retries);\n      } else {\n        this.errors = null;\n        this.retriesSubscription = null;\n      }\n\n      this.unsubscribe();\n      this.closed = false;\n\n      this.errors = errors;\n      this.retries = retries;\n      this.retriesSubscription = retriesSubscription;\n\n      errors.next(err);\n    }\n  }\n\n  protected _unsubscribe() {\n    const { errors, retriesSubscription } = this;\n    if (errors) {\n      errors.unsubscribe();\n      this.errors = null;\n    }\n    if (retriesSubscription) {\n      retriesSubscription.unsubscribe();\n      this.retriesSubscription = null;\n    }\n    this.retries = null;\n  }\n\n  notifyNext(outerValue: T, innerValue: R,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n\n    const { errors, retries, retriesSubscription } = this;\n    this.errors = null;\n    this.retries = null;\n    this.retriesSubscription = null;\n\n    this.unsubscribe();\n    this.isStopped = false;\n    this.closed = false;\n\n    this.errors = errors;\n    this.retries = retries;\n    this.retriesSubscription = retriesSubscription;\n\n    this.source.subscribe(this);\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { retryWhen, RetryWhenSignature } from '../../operator/retryWhen';\n\nObservable.prototype.retryWhen = retryWhen;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    retryWhen: RetryWhenSignature<T>;\n  }\n}","import { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { TeardownLogic } from '../Subscription';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n\n/**\n * Emits the most recently emitted value from the source Observable whenever\n * another Observable, the `notifier`, emits.\n *\n * <span class=\"informal\">It's like {@link sampleTime}, but samples whenever\n * the `notifier` Observable emits something.</span>\n *\n * <img src=\"./img/sample.png\" width=\"100%\">\n *\n * Whenever the `notifier` Observable emits a value or completes, `sample`\n * looks at the source Observable and emits whichever value it has most recently\n * emitted since the previous sampling, unless the source has not emitted\n * anything since the previous sampling. The `notifier` is subscribed to as soon\n * as the output Observable is subscribed.\n *\n * @example <caption>On every click, sample the most recent \"seconds\" timer</caption>\n * var seconds = Rx.Observable.interval(1000);\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = seconds.sample(clicks);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link audit}\n * @see {@link debounce}\n * @see {@link sampleTime}\n * @see {@link throttle}\n *\n * @param {Observable<any>} notifier The Observable to use for sampling the\n * source Observable.\n * @return {Observable<T>} An Observable that emits the results of sampling the\n * values emitted by the source Observable whenever the notifier Observable\n * emits value or completes.\n * @method sample\n * @owner Observable\n */\nexport function sample<T>(notifier: Observable<any>): Observable<T> {\n  return this.lift(new SampleOperator(notifier));\n}\n\nexport interface SampleSignature<T> {\n  (notifier: Observable<any>): Observable<T>;\n}\n\nclass SampleOperator<T> implements Operator<T, T> {\n  constructor(private notifier: Observable<any>) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source._subscribe(new SampleSubscriber(subscriber, this.notifier));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SampleSubscriber<T, R> extends OuterSubscriber<T, R> {\n  private value: T;\n  private hasValue: boolean = false;\n\n  constructor(destination: Subscriber<any>, notifier: Observable<any>) {\n    super(destination);\n    this.add(subscribeToResult(this, notifier));\n  }\n\n  protected _next(value: T) {\n    this.value = value;\n    this.hasValue = true;\n  }\n\n  notifyNext(outerValue: T, innerValue: R,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    this.emitValue();\n  }\n\n  notifyComplete(): void {\n    this.emitValue();\n  }\n\n  emitValue() {\n    if (this.hasValue) {\n      this.hasValue = false;\n      this.destination.next(this.value);\n    }\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { sample, SampleSignature } from '../../operator/sample';\n\nObservable.prototype.sample = sample;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    sample: SampleSignature<T>;\n  }\n}","import { Observable } from '../Observable';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Scheduler } from '../Scheduler';\nimport { async } from '../scheduler/async';\nimport { TeardownLogic } from '../Subscription';\n\n/**\n * Emits the most recently emitted value from the source Observable within\n * periodic time intervals.\n *\n * <span class=\"informal\">Samples the source Observable at periodic time\n * intervals, emitting what it samples.</span>\n *\n * <img src=\"./img/sampleTime.png\" width=\"100%\">\n *\n * `sampleTime` periodically looks at the source Observable and emits whichever\n * value it has most recently emitted since the previous sampling, unless the\n * source has not emitted anything since the previous sampling. The sampling\n * happens periodically in time every `period` milliseconds (or the time unit\n * defined by the optional `scheduler` argument). The sampling starts as soon as\n * the output Observable is subscribed.\n *\n * @example <caption>Every second, emit the most recent click at most once</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.sampleTime(1000);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link auditTime}\n * @see {@link debounceTime}\n * @see {@link delay}\n * @see {@link sample}\n * @see {@link throttleTime}\n *\n * @param {number} period The sampling period expressed in milliseconds or the\n * time unit determined internally by the optional `scheduler`.\n * @param {Scheduler} [scheduler=async] The {@link Scheduler} to use for\n * managing the timers that handle the sampling.\n * @return {Observable<T>} An Observable that emits the results of sampling the\n * values emitted by the source Observable at the specified time interval.\n * @method sampleTime\n * @owner Observable\n */\nexport function sampleTime<T>(period: number, scheduler: Scheduler = async): Observable<T> {\n  return this.lift(new SampleTimeOperator(period, scheduler));\n}\n\nexport interface SampleTimeSignature<T> {\n  (period: number, scheduler?: Scheduler): Observable<T>;\n}\n\nclass SampleTimeOperator<T> implements Operator<T, T> {\n  constructor(private period: number,\n              private scheduler: Scheduler) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source._subscribe(new SampleTimeSubscriber(subscriber, this.period, this.scheduler));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SampleTimeSubscriber<T> extends Subscriber<T> {\n  lastValue: T;\n  hasValue: boolean = false;\n\n  constructor(destination: Subscriber<T>,\n              private period: number,\n              private scheduler: Scheduler) {\n    super(destination);\n    this.add(scheduler.schedule(dispatchNotification, period, { subscriber: this, period }));\n  }\n\n  protected _next(value: T) {\n    this.lastValue = value;\n    this.hasValue = true;\n  }\n\n  notifyNext() {\n    if (this.hasValue) {\n      this.hasValue = false;\n      this.destination.next(this.lastValue);\n    }\n  }\n}\n\nfunction dispatchNotification<T>(state: any) {\n  let { subscriber, period } = state;\n  subscriber.notifyNext();\n  (<any>this).schedule(state, period);\n}\n","\nimport { Observable } from '../../Observable';\nimport { sampleTime, SampleTimeSignature } from '../../operator/sampleTime';\n\nObservable.prototype.sampleTime = sampleTime;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    sampleTime: SampleTimeSignature<T>;\n  }\n}","import { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\n\n/**\n * Applies an accumulator function over the source Observable, and returns each\n * intermediate result, with an optional seed value.\n *\n * <span class=\"informal\">It's like {@link reduce}, but emits the current\n * accumulation whenever the source emits a value.</span>\n *\n * <img src=\"./img/scan.png\" width=\"100%\">\n *\n * Combines together all values emitted on the source, using an accumulator\n * function that knows how to join a new source value into the accumulation from\n * the past. Is similar to {@link reduce}, but emits the intermediate\n * accumulations.\n *\n * Returns an Observable that applies a specified `accumulator` function to each\n * item emitted by the source Observable. If a `seed` value is specified, then\n * that value will be used as the initial value for the accumulator. If no seed\n * value is specified, the first item of the source is used as the seed.\n *\n * @example <caption>Count the number of click events</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var ones = clicks.mapTo(1);\n * var seed = 0;\n * var count = ones.scan((acc, one) => acc + one, seed);\n * count.subscribe(x => console.log(x));\n *\n * @see {@link expand}\n * @see {@link mergeScan}\n * @see {@link reduce}\n *\n * @param {function(acc: R, value: T, index: number): R} accumulator\n * The accumulator function called on each source value.\n * @param {T|R} [seed] The initial accumulation value.\n * @return {Observable<R>} An observable of the accumulated values.\n * @method scan\n * @owner Observable\n */\nexport function scan<T, R>(accumulator: (acc: R, value: T, index: number) => R, seed?: T | R): Observable<R> {\n  return this.lift(new ScanOperator(accumulator, seed));\n}\n\nclass ScanOperator<T, R> implements Operator<T, R> {\n  constructor(private accumulator: (acc: R, value: T, index: number) => R, private seed?: T | R) {\n  }\n\n  call(subscriber: Subscriber<R>, source: any): any {\n    return source._subscribe(new ScanSubscriber(subscriber, this.accumulator, this.seed));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass ScanSubscriber<T, R> extends Subscriber<T> {\n  private index: number = 0;\n  private accumulatorSet: boolean = false;\n  private _seed: T | R;\n\n  get seed(): T | R {\n    return this._seed;\n  }\n\n  set seed(value: T | R) {\n    this.accumulatorSet = true;\n    this._seed = value;\n  }\n\n  constructor(destination: Subscriber<R>, private accumulator: (acc: R, value: T, index: number) => R, seed?: T | R) {\n    super(destination);\n    this.seed = seed;\n    this.accumulatorSet = typeof seed !== 'undefined';\n  }\n\n  protected _next(value: T): void {\n    if (!this.accumulatorSet) {\n      this.seed = value;\n      this.destination.next(value);\n    } else {\n      return this._tryNext(value);\n    }\n  }\n\n  private _tryNext(value: T): void {\n    const index = this.index++;\n    let result: any;\n    try {\n      result = this.accumulator(<R>this.seed, value, index);\n    } catch (err) {\n      this.destination.error(err);\n    }\n    this.seed = result;\n    this.destination.next(result);\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { ReduceSignature } from '../../operator/reduce';\nimport { scan } from '../../operator/scan';\n\nObservable.prototype.scan = scan;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    scan: ReduceSignature<T>;\n  }\n}","import { Operator } from '../Operator';\nimport { Observer } from '../Observer';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { tryCatch } from '../util/tryCatch';\nimport { errorObject } from '../util/errorObject';\n\nexport interface SequenceEqualSignature<T> {\n  (compareTo: Observable<T>, comparor?: (a: T, b: T) => boolean): Observable<boolean>;\n}\n\n/**\n * Compares all values of two observables in sequence using an optional comparor function\n * and returns an observable of a single boolean value representing whether or not the two sequences\n * are equal.\n *\n * <span class=\"informal\">Checks to see of all values emitted by both observables are equal, in order.</span>\n *\n * <img src=\"./img/sequenceEqual.png\" width=\"100%\">\n *\n * `sequenceEqual` subscribes to two observables and buffers incoming values from each observable. Whenever either\n * observable emits a value, the value is buffered and the buffers are shifted and compared from the bottom\n * up; If any value pair doesn't match, the returned observable will emit `false` and complete. If one of the\n * observables completes, the operator will wait for the other observable to complete; If the other\n * observable emits before completing, the returned observable will emit `false` and complete. If one observable never\n * completes or emits after the other complets, the returned observable will never complete.\n *\n * @example <caption>figure out if the Konami code matches</caption>\n * var code = Observable.from([\n *  \"ArrowUp\",\n *  \"ArrowUp\",\n *  \"ArrowDown\",\n *  \"ArrowDown\",\n *  \"ArrowLeft\",\n *  \"ArrowRight\",\n *  \"ArrowLeft\",\n *  \"ArrowRight\",\n *  \"KeyB\",\n *  \"KeyA\",\n *  \"Enter\" // no start key, clearly.\n * ]);\n *\n * var keys = Rx.Observable.fromEvent(document, 'keyup')\n *  .map(e => e.code);\n * var matches = keys.bufferCount(11, 1)\n *  .mergeMap(\n *    last11 =>\n *      Rx.Observable.from(last11)\n *        .sequenceEqual(code)\n *   );\n * matches.subscribe(matched => console.log('Successful cheat at Contra? ', matched));\n *\n * @see {@link combineLatest}\n * @see {@link zip}\n * @see {@link withLatestFrom}\n *\n * @param {Observable} compareTo the observable sequence to compare the source sequence to.\n * @param {function} [comparor] An optional function to compare each value pair\n * @return {Observable} An Observable of a single boolean value representing whether or not\n * the values emitted by both observables were equal in sequence\n * @method sequenceEqual\n * @owner Observable\n */\nexport function sequenceEqual<T>(compareTo: Observable<T>,\n                                 comparor?: (a: T, b: T) => boolean): Observable<boolean> {\n  return this.lift(new SequenceEqualOperator(compareTo, comparor));\n}\n\nexport class SequenceEqualOperator<T> implements Operator<T, T> {\n  constructor(private compareTo: Observable<T>,\n              private comparor: (a: T, b: T) => boolean) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): any {\n    return source._subscribe(new SequenceEqualSubscriber(subscriber, this.compareTo, this.comparor));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class SequenceEqualSubscriber<T, R> extends Subscriber<T> {\n  private _a: T[] = [];\n  private _b: T[] = [];\n  private _oneComplete = false;\n\n  constructor(destination: Observer<R>,\n              private compareTo: Observable<T>,\n              private comparor: (a: T, b: T) => boolean) {\n    super(destination);\n    this.add(compareTo.subscribe(new SequenceEqualCompareToSubscriber(destination, this)));\n  }\n\n  protected _next(value: T): void {\n    if (this._oneComplete && this._b.length === 0) {\n      this.emit(false);\n    } else {\n      this._a.push(value);\n      this.checkValues();\n    }\n  }\n\n  public _complete(): void {\n    if (this._oneComplete) {\n      this.emit(this._a.length === 0 && this._b.length === 0);\n    } else {\n      this._oneComplete = true;\n    }\n  }\n\n  checkValues() {\n    const { _a, _b, comparor } = this;\n    while (_a.length > 0 && _b.length > 0) {\n      let a = _a.shift();\n      let b = _b.shift();\n      let areEqual = false;\n      if (comparor) {\n        areEqual = tryCatch(comparor)(a, b);\n        if (areEqual === errorObject) {\n          this.destination.error(errorObject.e);\n        }\n      } else {\n        areEqual = a === b;\n      }\n      if (!areEqual) {\n        this.emit(false);\n      }\n    }\n  }\n\n  emit(value: boolean) {\n    const { destination } = this;\n    destination.next(value);\n    destination.complete();\n  }\n\n  nextB(value: T) {\n    if (this._oneComplete && this._a.length === 0) {\n      this.emit(false);\n    } else {\n      this._b.push(value);\n      this.checkValues();\n    }\n  }\n}\n\nclass SequenceEqualCompareToSubscriber<T, R> extends Subscriber<T> {\n  constructor(destination: Observer<R>, private parent: SequenceEqualSubscriber<T, R>) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    this.parent.nextB(value);\n  }\n\n  protected _error(err: any): void {\n    this.parent.error(err);\n  }\n\n  protected _complete(): void {\n    this.parent._complete();\n  }\n}","\nimport { Observable } from '../../Observable';\nimport { sequenceEqual, SequenceEqualSignature } from '../../operator/sequenceEqual';\n\nObservable.prototype.sequenceEqual = sequenceEqual;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    sequenceEqual: SequenceEqualSignature<T>;\n  }\n}","import { Subject } from '../Subject';\nimport { Observable } from '../Observable';\nimport { MulticastObservable } from '../observable/MulticastObservable';\nimport { ConnectableObservable } from '../observable/ConnectableObservable';\n\n/**\n * Returns an Observable that emits the results of invoking a specified selector on items\n * emitted by a ConnectableObservable that shares a single subscription to the underlying stream.\n *\n * <img src=\"./img/multicast.png\" width=\"100%\">\n *\n * @param {Function|Subject} Factory function to create an intermediate subject through\n * which the source sequence's elements will be multicast to the selector function\n * or Subject to push source elements into.\n * @param {Function} Optional selector function that can use the multicasted source stream\n * as many times as needed, without causing multiple subscriptions to the source stream.\n * Subscribers to the given source will receive all notifications of the source from the\n * time of the subscription forward.\n * @return {Observable} an Observable that emits the results of invoking the selector\n * on the items emitted by a `ConnectableObservable` that shares a single subscription to\n * the underlying stream.\n * @method multicast\n * @owner Observable\n */\nexport function multicast<T>(subjectOrSubjectFactory: Subject<T> | (() => Subject<T>),\n                             selector?: (source: Observable<T>) => Observable<T>): Observable<T> | ConnectableObservable<T> {\n  let subjectFactory: () => Subject<T>;\n  if (typeof subjectOrSubjectFactory === 'function') {\n    subjectFactory = <() => Subject<T>>subjectOrSubjectFactory;\n  } else {\n    subjectFactory = function subjectFactory() {\n      return <Subject<T>>subjectOrSubjectFactory;\n    };\n  }\n\n  return !selector ?\n    new ConnectableObservable(this, subjectFactory) :\n    new MulticastObservable(this, subjectFactory, selector);\n}\n\nexport type factoryOrValue<T> = T | (() => T);\nexport type selector<T> = (source: Observable<T>) => Observable<T>;\n\nexport interface MulticastSignature<T> {\n  (subjectOrSubjectFactory: factoryOrValue<Subject<T>>): ConnectableObservable<T>;\n  (SubjectFactory: () => Subject<T>, selector?: selector<T>): Observable<T>;\n}\n","import { Observable } from '../Observable';\nimport { multicast } from './multicast';\nimport { Subject } from '../Subject';\n\nfunction shareSubjectFactory() {\n  return new Subject();\n}\n\n/**\n * Returns a new Observable that multicasts (shares) the original Observable. As long as there is at least one\n * Subscriber this Observable will be subscribed and emitting data. When all subscribers have unsubscribed it will\n * unsubscribe from the source Observable. Because the Observable is multicasting it makes the stream `hot`.\n * This is an alias for .publish().refCount().\n *\n * <img src=\"./img/share.png\" width=\"100%\">\n *\n * @return {Observable<T>} an Observable that upon connection causes the source Observable to emit items to its Observers\n * @method share\n * @owner Observable\n */\nexport function share<T>(): Observable<T> {\n  return multicast.call(this, shareSubjectFactory).refCount();\n};\n\nexport interface ShareSignature<T> {\n  (): Observable<T>;\n}\n","\nimport { Observable } from '../../Observable';\nimport { share, ShareSignature } from '../../operator/share';\n\nObservable.prototype.share = share;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    share: ShareSignature<T>;\n  }\n}","import { Observable } from '../Observable';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observer } from '../Observer';\nimport { EmptyError } from '../util/EmptyError';\nimport { TeardownLogic } from '../Subscription';\n\n/**\n * Returns an Observable that emits the single item emitted by the source Observable that matches a specified\n * predicate, if that Observable emits one such item. If the source Observable emits more than one such item or no\n * such items, notify of an IllegalArgumentException or NoSuchElementException respectively.\n *\n * <img src=\"./img/single.png\" width=\"100%\">\n *\n * @throws {EmptyError} Delivers an EmptyError to the Observer's `error`\n * callback if the Observable completes before any `next` notification was sent.\n * @param {Function} a predicate function to evaluate items emitted by the source Observable.\n * @return {Observable<T>} an Observable that emits the single item emitted by the source Observable that matches\n * the predicate.\n .\n * @method single\n * @owner Observable\n */\nexport function single<T>(predicate?: (value: T, index: number, source: Observable<T>) => boolean): Observable<T> {\n  return this.lift(new SingleOperator(predicate, this));\n}\n\nexport interface SingleSignature<T> {\n  (predicate?: (value: T, index: number, source: Observable<T>) => boolean): Observable<T>;\n}\n\nclass SingleOperator<T> implements Operator<T, T> {\n  constructor(private predicate?: (value: T, index: number, source: Observable<T>) => boolean,\n              private source?: Observable<T>) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source._subscribe(new SingleSubscriber(subscriber, this.predicate, this.source));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SingleSubscriber<T> extends Subscriber<T> {\n  private seenValue: boolean = false;\n  private singleValue: T;\n  private index: number = 0;\n\n  constructor(destination: Observer<T>,\n              private predicate?: (value: T, index: number, source: Observable<T>) => boolean,\n              private source?: Observable<T>) {\n    super(destination);\n  }\n\n  private applySingleValue(value: T): void {\n    if (this.seenValue) {\n      this.destination.error('Sequence contains more than one element');\n    } else {\n      this.seenValue = true;\n      this.singleValue = value;\n    }\n  }\n\n  protected _next(value: T): void {\n    const predicate = this.predicate;\n    this.index++;\n    if (predicate) {\n      this.tryNext(value);\n    } else {\n      this.applySingleValue(value);\n    }\n  }\n\n  private tryNext(value: T): void {\n    try {\n      const result = this.predicate(value, this.index, this.source);\n      if (result) {\n        this.applySingleValue(value);\n      }\n    } catch (err) {\n      this.destination.error(err);\n    }\n  }\n\n  protected _complete(): void {\n    const destination = this.destination;\n\n    if (this.index > 0) {\n      destination.next(this.seenValue ? this.singleValue : undefined);\n      destination.complete();\n    } else {\n      destination.error(new EmptyError);\n    }\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { single, SingleSignature } from '../../operator/single';\n\nObservable.prototype.single = single;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    single: SingleSignature<T>;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { TeardownLogic } from '../Subscription';\n\n/**\n * Returns an Observable that skips `n` items emitted by an Observable.\n *\n * <img src=\"./img/skip.png\" width=\"100%\">\n *\n * @param {Number} the `n` of times, items emitted by source Observable should be skipped.\n * @return {Observable} an Observable that skips values emitted by the source Observable.\n *\n * @method skip\n * @owner Observable\n */\nexport function skip<T>(total: number): Observable<T> {\n  return this.lift(new SkipOperator(total));\n}\n\nexport interface SkipSignature<T> {\n  (total: number): Observable<T>;\n}\n\nclass SkipOperator<T> implements Operator<T, T> {\n  constructor(private total: number) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source._subscribe(new SkipSubscriber(subscriber, this.total));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SkipSubscriber<T> extends Subscriber<T> {\n  count: number = 0;\n\n  constructor(destination: Subscriber<T>, private total: number) {\n    super(destination);\n  }\n\n  protected _next(x: T) {\n    if (++this.count > this.total) {\n      this.destination.next(x);\n    }\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { skip, SkipSignature } from '../../operator/skip';\n\nObservable.prototype.skip = skip;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    skip: SkipSignature<T>;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { TeardownLogic } from '../Subscription';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n\n/**\n * Returns an Observable that skips items emitted by the source Observable until a second Observable emits an item.\n *\n * <img src=\"./img/skipUntil.png\" width=\"100%\">\n *\n * @param {Observable} the second Observable that has to emit an item before the source Observable's elements begin to\n * be mirrored by the resulting Observable.\n * @return {Observable<T>} an Observable that skips items from the source Observable until the second Observable emits\n * an item, then emits the remaining items.\n * @method skipUntil\n * @owner Observable\n */\nexport function skipUntil<T>(notifier: Observable<any>): Observable<T> {\n  return this.lift(new SkipUntilOperator(notifier));\n}\n\nexport interface SkipUntilSignature<T> {\n  (notifier: Observable<any>): Observable<T>;\n}\n\nclass SkipUntilOperator<T> implements Operator<T, T> {\n  constructor(private notifier: Observable<any>) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source._subscribe(new SkipUntilSubscriber(subscriber, this.notifier));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SkipUntilSubscriber<T, R> extends OuterSubscriber<T, R> {\n\n  private hasValue: boolean = false;\n  private isInnerStopped: boolean = false;\n\n  constructor(destination: Subscriber<any>,\n              notifier: Observable<any>) {\n    super(destination);\n    this.add(subscribeToResult(this, notifier));\n  }\n\n  protected _next(value: T) {\n    if (this.hasValue) {\n      super._next(value);\n    }\n  }\n\n  protected _complete() {\n    if (this.isInnerStopped) {\n      super._complete();\n    } else {\n      this.unsubscribe();\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: R,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    this.hasValue = true;\n  }\n\n  notifyComplete(): void {\n    this.isInnerStopped = true;\n    if (this.isStopped) {\n      super._complete();\n    }\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { skipUntil, SkipUntilSignature } from '../../operator/skipUntil';\n\nObservable.prototype.skipUntil = skipUntil;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    skipUntil: SkipUntilSignature<T>;\n  }\n}","import { Observable } from '../Observable';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { TeardownLogic } from '../Subscription';\n\n/**\n * Returns an Observable that skips all items emitted by the source Observable as long as a specified condition holds\n * true, but emits all further source items as soon as the condition becomes false.\n *\n * <img src=\"./img/skipWhile.png\" width=\"100%\">\n *\n * @param {Function} predicate - a function to test each item emitted from the source Observable.\n * @return {Observable<T>} an Observable that begins emitting items emitted by the source Observable when the\n * specified predicate becomes false.\n * @method skipWhile\n * @owner Observable\n */\nexport function skipWhile<T>(predicate: (value: T, index: number) => boolean): Observable<T> {\n  return this.lift(new SkipWhileOperator(predicate));\n}\n\nexport interface SkipWhileSignature<T> {\n  (predicate: (value: T, index: number) => boolean): Observable<T>;\n}\n\nclass SkipWhileOperator<T> implements Operator<T, T> {\n  constructor(private predicate: (value: T, index: number) => boolean) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source._subscribe(new SkipWhileSubscriber(subscriber, this.predicate));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SkipWhileSubscriber<T> extends Subscriber<T> {\n  private skipping: boolean = true;\n  private index: number = 0;\n\n  constructor(destination: Subscriber<T>,\n              private predicate: (value: T, index: number) => boolean) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    const destination = this.destination;\n    if (this.skipping) {\n      this.tryCallPredicate(value);\n    }\n\n    if (!this.skipping) {\n      destination.next(value);\n    }\n  }\n\n  private tryCallPredicate(value: T): void {\n    try {\n      const result = this.predicate(value, this.index++);\n      this.skipping = Boolean(result);\n    } catch (err) {\n      this.destination.error(err);\n    }\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { skipWhile, SkipWhileSignature } from '../../operator/skipWhile';\n\nObservable.prototype.skipWhile = skipWhile;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    skipWhile: SkipWhileSignature<T>;\n  }\n}","import { Observable } from '../Observable';\nimport { Operator } from '../Operator';\nimport { Observer } from '../Observer';\nimport { Subscription } from '../Subscription';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n\n/**\n * Converts a higher-order Observable into a first-order Observable which\n * concurrently delivers all values that are emitted on the inner Observables.\n *\n * <span class=\"informal\">Flattens an Observable-of-Observables.</span>\n *\n * <img src=\"./img/mergeAll.png\" width=\"100%\">\n *\n * `mergeAll` subscribes to an Observable that emits Observables, also known as\n * a higher-order Observable. Each time it observes one of these emitted inner\n * Observables, it subscribes to that and delivers all the values from the\n * inner Observable on the output Observable. The output Observable only\n * completes once all inner Observables have completed. Any error delivered by\n * a inner Observable will be immediately emitted on the output Observable.\n *\n * @example <caption>Spawn a new interval Observable for each click event, and blend their outputs as one Observable</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var higherOrder = clicks.map((ev) => Rx.Observable.interval(1000));\n * var firstOrder = higherOrder.mergeAll();\n * firstOrder.subscribe(x => console.log(x));\n *\n * @example <caption>Count from 0 to 9 every second for each click, but only allow 2 concurrent timers</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var higherOrder = clicks.map((ev) => Rx.Observable.interval(1000).take(10));\n * var firstOrder = higherOrder.mergeAll(2);\n * firstOrder.subscribe(x => console.log(x));\n *\n * @see {@link combineAll}\n * @see {@link concatAll}\n * @see {@link exhaust}\n * @see {@link merge}\n * @see {@link mergeMap}\n * @see {@link mergeMapTo}\n * @see {@link mergeScan}\n * @see {@link switch}\n * @see {@link zipAll}\n *\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of inner\n * Observables being subscribed to concurrently.\n * @return {Observable} An Observable that emits values coming from all the\n * inner Observables emitted by the source Observable.\n * @method mergeAll\n * @owner Observable\n */\nexport function mergeAll<T>(concurrent: number = Number.POSITIVE_INFINITY): T {\n  return this.lift(new MergeAllOperator<T>(concurrent));\n}\n\nexport interface MergeAllSignature<T> {\n  (concurrent?: number): T;\n}\n\nexport class MergeAllOperator<T> implements Operator<Observable<T>, T> {\n  constructor(private concurrent: number) {\n  }\n\n  call(observer: Observer<T>, source: any): any {\n    return source._subscribe(new MergeAllSubscriber(observer, this.concurrent));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class MergeAllSubscriber<T> extends OuterSubscriber<Observable<T>, T> {\n  private hasCompleted: boolean = false;\n  private buffer: Observable<T>[] = [];\n  private active: number = 0;\n\n  constructor(destination: Observer<T>, private concurrent: number) {\n    super(destination);\n  }\n\n  protected _next(observable: Observable<T>) {\n    if (this.active < this.concurrent) {\n      this.active++;\n      this.add(subscribeToResult<Observable<T>, T>(this, observable));\n    } else {\n      this.buffer.push(observable);\n    }\n  }\n\n  protected _complete() {\n    this.hasCompleted = true;\n    if (this.active === 0 && this.buffer.length === 0) {\n      this.destination.complete();\n    }\n  }\n\n  notifyComplete(innerSub: Subscription) {\n    const buffer = this.buffer;\n    this.remove(innerSub);\n    this.active--;\n    if (buffer.length > 0) {\n      this._next(buffer.shift());\n    } else if (this.active === 0 && this.hasCompleted) {\n      this.destination.complete();\n    }\n  }\n}\n","import { Observable, ObservableInput } from '../Observable';\nimport { Scheduler } from '../Scheduler';\nimport { isScheduler } from '../util/isScheduler';\nimport { ArrayObservable } from '../observable/ArrayObservable';\nimport { MergeAllOperator } from './mergeAll';\n\n/**\n * Creates an output Observable which sequentially emits all values from every\n * given input Observable after the current Observable.\n *\n * <span class=\"informal\">Concatenates multiple Observables together by\n * sequentially emitting their values, one Observable after the other.</span>\n *\n * <img src=\"./img/concat.png\" width=\"100%\">\n *\n * Joins this Observable with multiple other Observables by subscribing to them\n * one at a time, starting with the source, and merging their results into the\n * output Observable. Will wait for each Observable to complete before moving\n * on to the next.\n *\n * @example <caption>Concatenate a timer counting from 0 to 3 with a synchronous sequence from 1 to 10</caption>\n * var timer = Rx.Observable.interval(1000).take(4);\n * var sequence = Rx.Observable.range(1, 10);\n * var result = timer.concat(sequence);\n * result.subscribe(x => console.log(x));\n *\n * @example <caption>Concatenate 3 Observables</caption>\n * var timer1 = Rx.Observable.interval(1000).take(10);\n * var timer2 = Rx.Observable.interval(2000).take(6);\n * var timer3 = Rx.Observable.interval(500).take(10);\n * var result = timer1.concat(timer2, timer3);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link concatAll}\n * @see {@link concatMap}\n * @see {@link concatMapTo}\n *\n * @param {Observable} other An input Observable to concatenate after the source\n * Observable. More than one input Observables may be given as argument.\n * @param {Scheduler} [scheduler=null] An optional Scheduler to schedule each\n * Observable subscription on.\n * @return {Observable} All values of each passed Observable merged into a\n * single Observable, in order, in serial fashion.\n * @method concat\n * @owner Observable\n */\nexport function concat<T, R>(...observables: Array<ObservableInput<any> | Scheduler>): Observable<R> {\n  return concatStatic<T, R>(this, ...observables);\n}\n\n/* tslint:disable:max-line-length */\nexport interface ConcatSignature<T> {\n  (scheduler?: Scheduler): Observable<T>;\n  <T2>(v2: ObservableInput<T2>, scheduler?: Scheduler): Observable<T | T2>;\n  <T2, T3>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, scheduler?: Scheduler): Observable<T | T2 | T3>;\n  <T2, T3, T4>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, scheduler?: Scheduler): Observable<T | T2 | T3 | T4>;\n  <T2, T3, T4, T5>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, scheduler?: Scheduler): Observable<T | T2 | T3 | T4 | T5>;\n  <T2, T3, T4, T5, T6>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>, scheduler?: Scheduler): Observable<T | T2 | T3 | T4 | T5 | T6>;\n  (...observables: Array<ObservableInput<T> | Scheduler>): Observable<T>;\n  <R>(...observables: Array<ObservableInput<any> | Scheduler>): Observable<R>;\n}\n/* tslint:enable:max-line-length */\n\n/* tslint:disable:max-line-length */\nexport function concatStatic<T>(v1: ObservableInput<T>, scheduler?: Scheduler): Observable<T>;\nexport function concatStatic<T, T2>(v1: ObservableInput<T>, v2: ObservableInput<T2>, scheduler?: Scheduler): Observable<T | T2>;\nexport function concatStatic<T, T2, T3>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, scheduler?: Scheduler): Observable<T | T2 | T3>;\nexport function concatStatic<T, T2, T3, T4>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, scheduler?: Scheduler): Observable<T | T2 | T3 | T4>;\nexport function concatStatic<T, T2, T3, T4, T5>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, scheduler?: Scheduler): Observable<T | T2 | T3 | T4 | T5>;\nexport function concatStatic<T, T2, T3, T4, T5, T6>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>, scheduler?: Scheduler): Observable<T | T2 | T3 | T4 | T5 | T6>;\nexport function concatStatic<T>(...observables: (ObservableInput<T> | Scheduler)[]): Observable<T>;\nexport function concatStatic<T, R>(...observables: (ObservableInput<any> | Scheduler)[]): Observable<R>;\n/* tslint:enable:max-line-length */\n/**\n * Creates an output Observable which sequentially emits all values from every\n * given input Observable after the current Observable.\n *\n * <span class=\"informal\">Concatenates multiple Observables together by\n * sequentially emitting their values, one Observable after the other.</span>\n *\n * <img src=\"./img/concat.png\" width=\"100%\">\n *\n * Joins multiple Observables together by subscribing to them one at a time and\n * merging their results into the output Observable. Will wait for each\n * Observable to complete before moving on to the next.\n *\n * @example <caption>Concatenate a timer counting from 0 to 3 with a synchronous sequence from 1 to 10</caption>\n * var timer = Rx.Observable.interval(1000).take(4);\n * var sequence = Rx.Observable.range(1, 10);\n * var result = Rx.Observable.concat(timer, sequence);\n * result.subscribe(x => console.log(x));\n *\n * @example <caption>Concatenate 3 Observables</caption>\n * var timer1 = Rx.Observable.interval(1000).take(10);\n * var timer2 = Rx.Observable.interval(2000).take(6);\n * var timer3 = Rx.Observable.interval(500).take(10);\n * var result = Rx.Observable.concat(timer1, timer2, timer3);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link concatAll}\n * @see {@link concatMap}\n * @see {@link concatMapTo}\n *\n * @param {Observable} input1 An input Observable to concatenate with others.\n * @param {Observable} input2 An input Observable to concatenate with others.\n * More than one input Observables may be given as argument.\n * @param {Scheduler} [scheduler=null] An optional Scheduler to schedule each\n * Observable subscription on.\n * @return {Observable} All values of each passed Observable merged into a\n * single Observable, in order, in serial fashion.\n * @static true\n * @name concat\n * @owner Observable\n */\nexport function concatStatic<T, R>(...observables: Array<ObservableInput<any> | Scheduler>): Observable<R> {\n  let scheduler: Scheduler = null;\n  let args = <any[]>observables;\n  if (isScheduler(args[observables.length - 1])) {\n    scheduler = args.pop();\n  }\n\n  return new ArrayObservable(observables, scheduler).lift(new MergeAllOperator<R>(1));\n}\n","import { Scheduler } from '../Scheduler';\nimport { Observable } from '../Observable';\nimport { ArrayObservable } from '../observable/ArrayObservable';\nimport { ScalarObservable } from '../observable/ScalarObservable';\nimport { EmptyObservable } from '../observable/EmptyObservable';\nimport { concatStatic } from './concat';\nimport { isScheduler } from '../util/isScheduler';\n\n/**\n * Returns an Observable that emits the items in a specified Iterable before it begins to emit items emitted by the\n * source Observable.\n *\n * <img src=\"./img/startWith.png\" width=\"100%\">\n *\n * @param {Values} an Iterable that contains the items you want the modified Observable to emit first.\n * @return {Observable} an Observable that emits the items in the specified Iterable and then emits the items\n * emitted by the source Observable.\n * @method startWith\n * @owner Observable\n */\nexport function startWith<T>(...array: Array<T | Scheduler>): Observable<T> {\n  let scheduler = <Scheduler>array[array.length - 1];\n  if (isScheduler(scheduler)) {\n    array.pop();\n  } else {\n    scheduler = null;\n  }\n\n  const len = array.length;\n  if (len === 1) {\n    return concatStatic(new ScalarObservable<T>(<T>array[0], scheduler), <Observable<T>>this);\n  } else if (len > 1) {\n    return concatStatic(new ArrayObservable<T>(<T[]>array, scheduler), <Observable<T>>this);\n  } else {\n    return concatStatic(new EmptyObservable<T>(scheduler), <Observable<T>>this);\n  }\n}\n\nexport interface StartWithSignature<T> {\n  (v1: T, scheduler?: Scheduler): Observable<T>;\n  (v1: T, v2: T, scheduler?: Scheduler): Observable<T>;\n  (v1: T, v2: T, v3: T, scheduler?: Scheduler): Observable<T>;\n  (v1: T, v2: T, v3: T, v4: T, scheduler?: Scheduler): Observable<T>;\n  (v1: T, v2: T, v3: T, v4: T, v5: T, scheduler?: Scheduler): Observable<T>;\n  (v1: T, v2: T, v3: T, v4: T, v5: T, v6: T, scheduler?: Scheduler): Observable<T>;\n  (...array: Array<T | Scheduler>): Observable<T>;\n}\n","\nimport { Observable } from '../../Observable';\nimport { startWith, StartWithSignature } from '../../operator/startWith';\n\nObservable.prototype.startWith = startWith;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    startWith: StartWithSignature<T>;\n  }\n}","import { isArray } from '../util/isArray';\n\nexport function isNumeric(val: any): val is number {\n  // parseFloat NaNs numeric-cast false positives (null|true|false|\"\")\n  // ...but misinterprets leading-number strings, particularly hex literals (\"0x...\")\n  // subtraction forces infinities to NaN\n  // adding 1 corrects loss of precision from parseFloat (#15100)\n  return !isArray(val) && (val - parseFloat(val) + 1) >= 0;\n};\n","import { Scheduler } from '../Scheduler';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { Observable } from '../Observable';\nimport { asap } from '../scheduler/asap';\nimport { isNumeric } from '../util/isNumeric';\n\nexport interface DispatchArg<T> {\n  source: Observable<T>;\n  subscriber: Subscriber<T>;\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class SubscribeOnObservable<T> extends Observable<T> {\n  static create<T>(source: Observable<T>, delay: number = 0, scheduler: Scheduler = asap): Observable<T> {\n    return new SubscribeOnObservable(source, delay, scheduler);\n  }\n\n  static dispatch<T>(arg: DispatchArg<T>): Subscription {\n    const { source, subscriber } = arg;\n    return source.subscribe(subscriber);\n  }\n\n  constructor(public source: Observable<T>,\n              private delayTime: number = 0,\n              private scheduler: Scheduler = asap) {\n    super();\n    if (!isNumeric(delayTime) || delayTime < 0) {\n      this.delayTime = 0;\n    }\n    if (!scheduler || typeof scheduler.schedule !== 'function') {\n      this.scheduler = asap;\n    }\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>) {\n    const delay = this.delayTime;\n    const source = this.source;\n    const scheduler = this.scheduler;\n\n    return scheduler.schedule(SubscribeOnObservable.dispatch, delay, {\n      source, subscriber\n    });\n  }\n}\n","import { Scheduler } from '../Scheduler';\nimport { Observable } from '../Observable';\nimport { SubscribeOnObservable } from '../observable/SubscribeOnObservable';\n\n/**\n * Asynchronously subscribes Observers to this Observable on the specified Scheduler.\n *\n * <img src=\"./img/subscribeOn.png\" width=\"100%\">\n *\n * @param {Scheduler} the Scheduler to perform subscription actions on.\n * @return {Observable<T>} the source Observable modified so that its subscriptions happen on the specified Scheduler\n .\n * @method subscribeOn\n * @owner Observable\n */\nexport function subscribeOn<T>(scheduler: Scheduler, delay: number = 0): Observable<T> {\n  return new SubscribeOnObservable<T>(this, delay, scheduler);\n}\n\nexport interface SubscribeOnSignature<T> {\n  (scheduler: Scheduler, delay?: number): Observable<T>;\n}","\nimport { Observable } from '../../Observable';\nimport { subscribeOn, SubscribeOnSignature } from '../../operator/subscribeOn';\n\nObservable.prototype.subscribeOn = subscribeOn;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    subscribeOn: SubscribeOnSignature<T>;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n\n/**\n * Converts a higher-order Observable into a first-order Observable by\n * subscribing to only the most recently emitted of those inner Observables.\n *\n * <span class=\"informal\">Flattens an Observable-of-Observables by dropping the\n * previous inner Observable once a new one appears.</span>\n *\n * <img src=\"./img/switch.png\" width=\"100%\">\n *\n * `switch` subscribes to an Observable that emits Observables, also known as a\n * higher-order Observable. Each time it observes one of these emitted inner\n * Observables, the output Observable subscribes to the inner Observable and\n * begins emitting the items emitted by that. So far, it behaves\n * like {@link mergeAll}. However, when a new inner Observable is emitted,\n * `switch` unsubscribes from the earlier-emitted inner Observable and\n * subscribes to the new inner Observable and begins emitting items from it. It\n * continues to behave like this for subsequent inner Observables.\n *\n * @example <caption>Rerun an interval Observable on every click event</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * // Each click event is mapped to an Observable that ticks every second\n * var higherOrder = clicks.map((ev) => Rx.Observable.interval(1000));\n * var switched = higherOrder.switch();\n * // The outcome is that `switched` is essentially a timer that restarts\n * // on every click. The interval Observables from older clicks do not merge\n * // with the current interval Observable.\n * switched.subscribe(x => console.log(x));\n *\n * @see {@link combineAll}\n * @see {@link concatAll}\n * @see {@link exhaust}\n * @see {@link mergeAll}\n * @see {@link switchMap}\n * @see {@link switchMapTo}\n * @see {@link zipAll}\n *\n * @return {Observable<T>} An Observable that emits the items emitted by the\n * Observable most recently emitted by the source Observable.\n * @method switch\n * @name switch\n * @owner Observable\n */\nexport function _switch<T>(): T {\n  return this.lift(new SwitchOperator());\n}\n\nexport interface SwitchSignature<T> {\n  (): T;\n}\n\nclass SwitchOperator<T, R> implements Operator<T, R> {\n  call(subscriber: Subscriber<R>, source: any): any {\n    return source._subscribe(new SwitchSubscriber(subscriber));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SwitchSubscriber<T, R> extends OuterSubscriber<T, R> {\n  private active: number = 0;\n  private hasCompleted: boolean = false;\n  innerSubscription: Subscription;\n\n  constructor(destination: Subscriber<R>) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    this.unsubscribeInner();\n    this.active++;\n    this.add(this.innerSubscription = subscribeToResult(this, value));\n  }\n\n  protected _complete(): void {\n    this.hasCompleted = true;\n    if (this.active === 0) {\n      this.destination.complete();\n    }\n  }\n\n  private unsubscribeInner(): void {\n    this.active = this.active > 0 ? this.active - 1 : 0;\n    const innerSubscription = this.innerSubscription;\n    if (innerSubscription) {\n      innerSubscription.unsubscribe();\n      this.remove(innerSubscription);\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: R,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    this.destination.next(innerValue);\n  }\n\n  notifyError(err: any): void {\n    this.destination.error(err);\n  }\n\n  notifyComplete(): void {\n    this.unsubscribeInner();\n    if (this.hasCompleted && this.active === 0) {\n      this.destination.complete();\n    }\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { _switch, SwitchSignature } from '../../operator/switch';\n\nObservable.prototype.switch = _switch;\nObservable.prototype._switch = _switch;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    switch: SwitchSignature<T>;\n    _switch: SwitchSignature<T>;\n  }\n}","import { Operator } from '../Operator';\nimport { Observable, ObservableInput } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n\n/**\n * Projects each source value to an Observable which is merged in the output\n * Observable, emitting values only from the most recently projected Observable.\n *\n * <span class=\"informal\">Maps each value to an Observable, then flattens all of\n * these inner Observables using {@link switch}.</span>\n *\n * <img src=\"./img/switchMap.png\" width=\"100%\">\n *\n * Returns an Observable that emits items based on applying a function that you\n * supply to each item emitted by the source Observable, where that function\n * returns an (so-called \"inner\") Observable. Each time it observes one of these\n * inner Observables, the output Observable begins emitting the items emitted by\n * that inner Observable. When a new inner Observable is emitted, `switchMap`\n * stops emitting items from the earlier-emitted inner Observable and begins\n * emitting items from the new one. It continues to behave like this for\n * subsequent inner Observables.\n *\n * @example <caption>Rerun an interval Observable on every click event</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.switchMap((ev) => Rx.Observable.interval(1000));\n * result.subscribe(x => console.log(x));\n *\n * @see {@link concatMap}\n * @see {@link exhaustMap}\n * @see {@link mergeMap}\n * @see {@link switch}\n * @see {@link switchMapTo}\n *\n * @param {function(value: T, ?index: number): Observable} project A function\n * that, when applied to an item emitted by the source Observable, returns an\n * Observable.\n * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]\n * A function to produce the value on the output Observable based on the values\n * and the indices of the source (outer) emission and the inner Observable\n * emission. The arguments passed to this function are:\n * - `outerValue`: the value that came from the source\n * - `innerValue`: the value that came from the projected Observable\n * - `outerIndex`: the \"index\" of the value that came from the source\n * - `innerIndex`: the \"index\" of the value from the projected Observable\n * @return {Observable} An Observable that emits the result of applying the\n * projection function (and the optional `resultSelector`) to each item emitted\n * by the source Observable and taking only the values from the most recently\n * projected inner Observable.\n * @method switchMap\n * @owner Observable\n */\nexport function switchMap<T, I, R>(project: (value: T, index: number) => ObservableInput<I>,\n                                   resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R): Observable<R> {\n  return this.lift(new SwitchMapOperator(project, resultSelector));\n}\n\nexport interface SwitchMapSignature<T> {\n  <R>(project: (value: T, index: number) => ObservableInput<R>): Observable<R>;\n  <I, R>(project: (value: T, index: number) => ObservableInput<I>,\n         resultSelector: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R): Observable<R>;\n}\n\nclass SwitchMapOperator<T, I, R> implements Operator<T, I> {\n  constructor(private project: (value: T, index: number) => ObservableInput<I>,\n              private resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R) {\n  }\n\n  call(subscriber: Subscriber<I>, source: any): any {\n    return source._subscribe(new SwitchMapSubscriber(subscriber, this.project, this.resultSelector));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SwitchMapSubscriber<T, I, R> extends OuterSubscriber<T, I> {\n  private index: number = 0;\n  private innerSubscription: Subscription;\n\n  constructor(destination: Subscriber<I>,\n              private project: (value: T, index: number) => ObservableInput<I>,\n              private resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R) {\n    super(destination);\n  }\n\n  protected _next(value: T) {\n    let result: ObservableInput<I>;\n    const index = this.index++;\n    try {\n      result = this.project(value, index);\n    } catch (error) {\n      this.destination.error(error);\n      return;\n    }\n    this._innerSub(result, value, index);\n  }\n\n  private _innerSub(result: ObservableInput<I>, value: T, index: number) {\n    const innerSubscription = this.innerSubscription;\n    if (innerSubscription) {\n      innerSubscription.unsubscribe();\n    }\n    this.add(this.innerSubscription = subscribeToResult(this, result, value, index));\n  }\n\n  protected _complete(): void {\n    const {innerSubscription} = this;\n    if (!innerSubscription || innerSubscription.closed) {\n      super._complete();\n    }\n  }\n\n  protected _unsubscribe() {\n    this.innerSubscription = null;\n  }\n\n  notifyComplete(innerSub: Subscription): void {\n    this.remove(innerSub);\n    this.innerSubscription = null;\n    if (this.isStopped) {\n      super._complete();\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: I,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, I>): void {\n    if (this.resultSelector) {\n      this._tryNotifyNext(outerValue, innerValue, outerIndex, innerIndex);\n    } else {\n      this.destination.next(innerValue);\n    }\n  }\n\n  private _tryNotifyNext(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): void {\n    let result: R;\n    try {\n      result = this.resultSelector(outerValue, innerValue, outerIndex, innerIndex);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    this.destination.next(result);\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { switchMap, SwitchMapSignature } from '../../operator/switchMap';\n\nObservable.prototype.switchMap = switchMap;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    switchMap: SwitchMapSignature<T>;\n  }\n}","import { Operator } from '../Operator';\nimport { Observable, ObservableInput } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n\n/**\n * Projects each source value to the same Observable which is flattened multiple\n * times with {@link switch} in the output Observable.\n *\n * <span class=\"informal\">It's like {@link switchMap}, but maps each value\n * always to the same inner Observable.</span>\n *\n * <img src=\"./img/switchMapTo.png\" width=\"100%\">\n *\n * Maps each source value to the given Observable `innerObservable` regardless\n * of the source value, and then flattens those resulting Observables into one\n * single Observable, which is the output Observable. The output Observables\n * emits values only from the most recently emitted instance of\n * `innerObservable`.\n *\n * @example <caption>Rerun an interval Observable on every click event</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.switchMapTo(Rx.Observable.interval(1000));\n * result.subscribe(x => console.log(x));\n *\n * @see {@link concatMapTo}\n * @see {@link switch}\n * @see {@link switchMap}\n * @see {@link mergeMapTo}\n *\n * @param {Observable} innerObservable An Observable to replace each value from\n * the source Observable.\n * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]\n * A function to produce the value on the output Observable based on the values\n * and the indices of the source (outer) emission and the inner Observable\n * emission. The arguments passed to this function are:\n * - `outerValue`: the value that came from the source\n * - `innerValue`: the value that came from the projected Observable\n * - `outerIndex`: the \"index\" of the value that came from the source\n * - `innerIndex`: the \"index\" of the value from the projected Observable\n * @return {Observable} An Observable that emits items from the given\n * `innerObservable` every time a value is emitted on the source Observable.\n * @return {Observable} An Observable that emits items from the given\n * `innerObservable` (and optionally transformed through `resultSelector`) every\n * time a value is emitted on the source Observable, and taking only the values\n * from the most recently projected inner Observable.\n * @method switchMapTo\n * @owner Observable\n */\nexport function switchMapTo<T, I, R>(innerObservable: Observable<I>,\n                                     resultSelector?: (outerValue: T,\n                                                       innerValue: I,\n                                                       outerIndex: number,\n                                                       innerIndex: number) => R): Observable<R> {\n  return this.lift(new SwitchMapToOperator(innerObservable, resultSelector));\n}\n\nexport interface SwitchMapToSignature<T> {\n  <R>(observable: ObservableInput<R>): Observable<R>;\n  <I, R>(observable: ObservableInput<I>,\n         resultSelector: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R): Observable<R>;\n}\n\nclass SwitchMapToOperator<T, I, R> implements Operator<T, I> {\n  constructor(private observable: Observable<I>,\n              private resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R) {\n  }\n\n  call(subscriber: Subscriber<I>, source: any): any {\n    return source._subscribe(new SwitchMapToSubscriber(subscriber, this.observable, this.resultSelector));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SwitchMapToSubscriber<T, I, R> extends OuterSubscriber<T, I> {\n  private index: number = 0;\n  private innerSubscription: Subscription;\n\n  constructor(destination: Subscriber<I>,\n              private inner: Observable<I>,\n              private resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R) {\n    super(destination);\n  }\n\n  protected _next(value: any) {\n    const innerSubscription = this.innerSubscription;\n    if (innerSubscription) {\n      innerSubscription.unsubscribe();\n    }\n    this.add(this.innerSubscription = subscribeToResult(this, this.inner, value, this.index++));\n  }\n\n  protected _complete() {\n    const {innerSubscription} = this;\n    if (!innerSubscription || innerSubscription.closed) {\n      super._complete();\n    }\n  }\n\n  protected _unsubscribe() {\n    this.innerSubscription = null;\n  }\n\n  notifyComplete(innerSub: Subscription) {\n    this.remove(innerSub);\n    this.innerSubscription = null;\n    if (this.isStopped) {\n      super._complete();\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: I,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, I>): void {\n    const { resultSelector, destination } = this;\n    if (resultSelector) {\n      this.tryResultSelector(outerValue, innerValue, outerIndex, innerIndex);\n    } else {\n      destination.next(innerValue);\n    }\n  }\n\n  private tryResultSelector(outerValue: T, innerValue: I,\n                            outerIndex: number, innerIndex: number): void {\n    const { resultSelector, destination } = this;\n    let result: R;\n    try {\n      result = resultSelector(outerValue, innerValue, outerIndex, innerIndex);\n    } catch (err) {\n      destination.error(err);\n      return;\n    }\n\n    destination.next(result);\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { switchMapTo, SwitchMapToSignature } from '../../operator/switchMapTo';\n\nObservable.prototype.switchMapTo = switchMapTo;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    switchMapTo: SwitchMapToSignature<T>;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { ArgumentOutOfRangeError } from '../util/ArgumentOutOfRangeError';\nimport { EmptyObservable } from '../observable/EmptyObservable';\nimport { Observable } from '../Observable';\nimport { TeardownLogic } from '../Subscription';\n\n/**\n * Emits only the first `count` values emitted by the source Observable.\n *\n * <span class=\"informal\">Takes the first `count` values from the source, then\n * completes.</span>\n *\n * <img src=\"./img/take.png\" width=\"100%\">\n *\n * `take` returns an Observable that emits only the first `count` values emitted\n * by the source Observable. If the source emits fewer than `count` values then\n * all of its values are emitted. After that, it completes, regardless if the\n * source completes.\n *\n * @example <caption>Take the first 5 seconds of an infinite 1-second interval Observable</caption>\n * var interval = Rx.Observable.interval(1000);\n * var five = interval.take(5);\n * five.subscribe(x => console.log(x));\n *\n * @see {@link takeLast}\n * @see {@link takeUntil}\n * @see {@link takeWhile}\n * @see {@link skip}\n *\n * @throws {ArgumentOutOfRangeError} When using `take(i)`, it delivers an\n * ArgumentOutOrRangeError to the Observer's `error` callback if `i < 0`.\n *\n * @param {number} count The maximum number of `next` values to emit.\n * @return {Observable<T>} An Observable that emits only the first `count`\n * values emitted by the source Observable, or all of the values from the source\n * if the source emits fewer than `count` values.\n * @method take\n * @owner Observable\n */\nexport function take<T>(count: number): Observable<T> {\n  if (count === 0) {\n    return new EmptyObservable<T>();\n  } else {\n    return this.lift(new TakeOperator(count));\n  }\n}\n\nexport interface TakeSignature<T> {\n  (count: number): Observable<T>;\n}\n\nclass TakeOperator<T> implements Operator<T, T> {\n  constructor(private total: number) {\n    if (this.total < 0) {\n      throw new ArgumentOutOfRangeError;\n    }\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source._subscribe(new TakeSubscriber(subscriber, this.total));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass TakeSubscriber<T> extends Subscriber<T> {\n  private count: number = 0;\n\n  constructor(destination: Subscriber<T>, private total: number) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    const total = this.total;\n    if (++this.count <= total) {\n      this.destination.next(value);\n      if (this.count === total) {\n        this.destination.complete();\n        this.unsubscribe();\n      }\n    }\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { take, TakeSignature } from '../../operator/take';\n\nObservable.prototype.take = take;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    take: TakeSignature<T>;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { ArgumentOutOfRangeError } from '../util/ArgumentOutOfRangeError';\nimport { EmptyObservable } from '../observable/EmptyObservable';\nimport { Observable } from '../Observable';\nimport { TeardownLogic } from '../Subscription';\n\n/**\n * Emits only the last `count` values emitted by the source Observable.\n *\n * <span class=\"informal\">Remembers the latest `count` values, then emits those\n * only when the source completes.</span>\n *\n * <img src=\"./img/takeLast.png\" width=\"100%\">\n *\n * `takeLast` returns an Observable that emits at most the last `count` values\n * emitted by the source Observable. If the source emits fewer than `count`\n * values then all of its values are emitted. This operator must wait until the\n * `complete` notification emission from the source in order to emit the `next`\n * values on the output Observable, because otherwise it is impossible to know\n * whether or not more values will be emitted on the source. For this reason,\n * all values are emitted synchronously, followed by the complete notification.\n *\n * @example <caption>Take the last 3 values of an Observable with many values</caption>\n * var many = Rx.Observable.range(1, 100);\n * var lastThree = many.takeLast(3);\n * lastThree.subscribe(x => console.log(x));\n *\n * @see {@link take}\n * @see {@link takeUntil}\n * @see {@link takeWhile}\n * @see {@link skip}\n *\n * @throws {ArgumentOutOfRangeError} When using `takeLast(i)`, it delivers an\n * ArgumentOutOrRangeError to the Observer's `error` callback if `i < 0`.\n *\n * @param {number} count The maximum number of values to emit from the end of\n * the sequence of values emitted by the source Observable.\n * @return {Observable<T>} An Observable that emits at most the last count\n * values emitted by the source Observable.\n * @method takeLast\n * @owner Observable\n */\nexport function takeLast<T>(count: number): Observable<T> {\n  if (count === 0) {\n    return new EmptyObservable<T>();\n  } else {\n    return this.lift(new TakeLastOperator(count));\n  }\n}\n\nexport interface TakeLastSignature<T> {\n  (count: number): Observable<T>;\n}\n\nclass TakeLastOperator<T> implements Operator<T, T> {\n  constructor(private total: number) {\n    if (this.total < 0) {\n      throw new ArgumentOutOfRangeError;\n    }\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source._subscribe(new TakeLastSubscriber(subscriber, this.total));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass TakeLastSubscriber<T> extends Subscriber<T> {\n  private ring: Array<T> = new Array();\n  private count: number = 0;\n\n  constructor(destination: Subscriber<T>, private total: number) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    const ring = this.ring;\n    const total = this.total;\n    const count = this.count++;\n\n    if (ring.length < total) {\n      ring.push(value);\n    } else {\n      const index = count % total;\n      ring[index] = value;\n    }\n  }\n\n  protected _complete(): void {\n    const destination = this.destination;\n    let count = this.count;\n\n    if (count > 0) {\n      const total = this.count >= this.total ? this.total : this.count;\n      const ring  = this.ring;\n\n      for (let i = 0; i < total; i++) {\n        const idx = (count++) % total;\n        destination.next(ring[idx]);\n      }\n    }\n\n    destination.complete();\n  }\n}\n","import { Observable } from '../../Observable';\nimport { takeLast, TakeLastSignature } from '../../operator/takeLast';\n\nObservable.prototype.takeLast = takeLast;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    takeLast: TakeLastSignature<T>;\n  }\n}","import { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { TeardownLogic } from '../Subscription';\n\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n\n/**\n * Emits the values emitted by the source Observable until a `notifier`\n * Observable emits a value.\n *\n * <span class=\"informal\">Lets values pass until a second Observable,\n * `notifier`, emits something. Then, it completes.</span>\n *\n * <img src=\"./img/takeUntil.png\" width=\"100%\">\n *\n * `takeUntil` subscribes and begins mirroring the source Observable. It also\n * monitors a second Observable, `notifier` that you provide. If the `notifier`\n * emits a value or a complete notification, the output Observable stops\n * mirroring the source Observable and completes.\n *\n * @example <caption>Tick every second until the first click happens</caption>\n * var interval = Rx.Observable.interval(1000);\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = interval.takeUntil(clicks);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link take}\n * @see {@link takeLast}\n * @see {@link takeWhile}\n * @see {@link skip}\n *\n * @param {Observable} notifier The Observable whose first emitted value will\n * cause the output Observable of `takeUntil` to stop emitting values from the\n * source Observable.\n * @return {Observable<T>} An Observable that emits the values from the source\n * Observable until such time as `notifier` emits its first value.\n * @method takeUntil\n * @owner Observable\n */\nexport function takeUntil<T>(notifier: Observable<any>): Observable<T> {\n  return this.lift(new TakeUntilOperator(notifier));\n}\n\nexport interface TakeUntilSignature<T> {\n  (notifier: Observable<any>): Observable<T>;\n}\n\nclass TakeUntilOperator<T> implements Operator<T, T> {\n  constructor(private notifier: Observable<any>) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source._subscribe(new TakeUntilSubscriber(subscriber, this.notifier));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass TakeUntilSubscriber<T, R> extends OuterSubscriber<T, R> {\n\n  constructor(destination: Subscriber<any>,\n              private notifier: Observable<any>) {\n    super(destination);\n    this.add(subscribeToResult(this, notifier));\n  }\n\n  notifyNext(outerValue: T, innerValue: R,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    this.complete();\n  }\n\n  notifyComplete(): void {\n    // noop\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { takeUntil, TakeUntilSignature } from '../../operator/takeUntil';\n\nObservable.prototype.takeUntil = takeUntil;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    takeUntil: TakeUntilSignature<T>;\n  }\n}","import { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { TeardownLogic } from '../Subscription';\n\n/**\n * Emits values emitted by the source Observable so long as each value satisfies\n * the given `predicate`, and then completes as soon as this `predicate` is not\n * satisfied.\n *\n * <span class=\"informal\">Takes values from the source only while they pass the\n * condition given. When the first value does not satisfy, it completes.</span>\n *\n * <img src=\"./img/takeWhile.png\" width=\"100%\">\n *\n * `takeWhile` subscribes and begins mirroring the source Observable. Each value\n * emitted on the source is given to the `predicate` function which returns a\n * boolean, representing a condition to be satisfied by the source values. The\n * output Observable emits the source values until such time as the `predicate`\n * returns false, at which point `takeWhile` stops mirroring the source\n * Observable and completes the output Observable.\n *\n * @example <caption>Emit click events only while the clientX property is greater than 200</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.takeWhile(ev => ev.clientX > 200);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link take}\n * @see {@link takeLast}\n * @see {@link takeUntil}\n * @see {@link skip}\n *\n * @param {function(value: T, index: number): boolean} predicate A function that\n * evaluates a value emitted by the source Observable and returns a boolean.\n * Also takes the (zero-based) index as the second argument.\n * @return {Observable<T>} An Observable that emits the values from the source\n * Observable so long as each value satisfies the condition defined by the\n * `predicate`, then completes.\n * @method takeWhile\n * @owner Observable\n */\nexport function takeWhile<T>(predicate: (value: T, index: number) => boolean): Observable<T> {\n  return this.lift(new TakeWhileOperator(predicate));\n}\n\nexport interface TakeWhileSignature<T> {\n  (predicate: (value: T, index: number) => boolean): Observable<T>;\n}\n\nclass TakeWhileOperator<T> implements Operator<T, T> {\n  constructor(private predicate: (value: T, index: number) => boolean) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source._subscribe(new TakeWhileSubscriber(subscriber, this.predicate));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass TakeWhileSubscriber<T> extends Subscriber<T> {\n  private index: number = 0;\n\n  constructor(destination: Subscriber<T>,\n              private predicate: (value: T, index: number) => boolean) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    const destination = this.destination;\n    let result: boolean;\n    try {\n      result = this.predicate(value, this.index++);\n    } catch (err) {\n      destination.error(err);\n      return;\n    }\n    this.nextOrComplete(value, result);\n  }\n\n  private nextOrComplete(value: T, predicateResult: boolean): void {\n    const destination = this.destination;\n    if (Boolean(predicateResult)) {\n      destination.next(value);\n    } else {\n      destination.complete();\n    }\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { takeWhile, TakeWhileSignature } from '../../operator/takeWhile';\n\nObservable.prototype.takeWhile = takeWhile;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    takeWhile: TakeWhileSignature<T>;\n  }\n}","import { Operator } from '../Operator';\nimport { Observable, SubscribableOrPromise } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription, TeardownLogic } from '../Subscription';\n\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n\n/**\n * Emits a value from the source Observable, then ignores subsequent source\n * values for a duration determined by another Observable, then repeats this\n * process.\n *\n * <span class=\"informal\">It's like {@link throttleTime}, but the silencing\n * duration is determined by a second Observable.</span>\n *\n * <img src=\"./img/throttle.png\" width=\"100%\">\n *\n * `throttle` emits the source Observable values on the output Observable\n * when its internal timer is disabled, and ignores source values when the timer\n * is enabled. Initially, the timer is disabled. As soon as the first source\n * value arrives, it is forwarded to the output Observable, and then the timer\n * is enabled by calling the `durationSelector` function with the source value,\n * which returns the \"duration\" Observable. When the duration Observable emits a\n * value or completes, the timer is disabled, and this process repeats for the\n * next source value.\n *\n * @example <caption>Emit clicks at a rate of at most one click per second</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.throttle(ev => Rx.Observable.interval(1000));\n * result.subscribe(x => console.log(x));\n *\n * @see {@link audit}\n * @see {@link debounce}\n * @see {@link delayWhen}\n * @see {@link sample}\n * @see {@link throttleTime}\n *\n * @param {function(value: T): Observable|Promise} durationSelector A function\n * that receives a value from the source Observable, for computing the silencing\n * duration for each source value, returned as an Observable or a Promise.\n * @return {Observable<T>} An Observable that performs the throttle operation to\n * limit the rate of emissions from the source.\n * @method throttle\n * @owner Observable\n */\nexport function throttle<T>(durationSelector: (value: T) => SubscribableOrPromise<number>): Observable<T> {\n  return this.lift(new ThrottleOperator(durationSelector));\n}\n\nexport interface ThrottleSignature<T> {\n  (durationSelector: (value: T) => SubscribableOrPromise<number>): Observable<T>;\n}\n\nclass ThrottleOperator<T> implements Operator<T, T> {\n  constructor(private durationSelector: (value: T) => SubscribableOrPromise<number>) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source._subscribe(new ThrottleSubscriber(subscriber, this.durationSelector));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass ThrottleSubscriber<T, R> extends OuterSubscriber<T, R> {\n  private throttled: Subscription;\n\n  constructor(protected destination: Subscriber<T>,\n              private durationSelector: (value: T) => SubscribableOrPromise<number>) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    if (!this.throttled) {\n      this.tryDurationSelector(value);\n    }\n  }\n\n  private tryDurationSelector(value: T): void {\n    let duration: SubscribableOrPromise<number> = null;\n    try {\n      duration = this.durationSelector(value);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    this.emitAndThrottle(value, duration);\n  }\n\n  private emitAndThrottle(value: T, duration: SubscribableOrPromise<number>) {\n    this.add(this.throttled = subscribeToResult(this, duration));\n    this.destination.next(value);\n  }\n\n  protected _unsubscribe() {\n    const throttled = this.throttled;\n    if (throttled) {\n      this.remove(throttled);\n      this.throttled = null;\n      throttled.unsubscribe();\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: R,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    this._unsubscribe();\n  }\n\n  notifyComplete(): void {\n    this._unsubscribe();\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { throttle, ThrottleSignature } from '../../operator/throttle';\n\nObservable.prototype.throttle = throttle;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    throttle: ThrottleSignature<T>;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Scheduler } from '../Scheduler';\nimport { Subscription, TeardownLogic } from '../Subscription';\nimport { async } from '../scheduler/async';\nimport { Observable } from '../Observable';\n\n/**\n * Emits a value from the source Observable, then ignores subsequent source\n * values for `duration` milliseconds, then repeats this process.\n *\n * <span class=\"informal\">Lets a value pass, then ignores source values for the\n * next `duration` milliseconds.</span>\n *\n * <img src=\"./img/throttleTime.png\" width=\"100%\">\n *\n * `throttleTime` emits the source Observable values on the output Observable\n * when its internal timer is disabled, and ignores source values when the timer\n * is enabled. Initially, the timer is disabled. As soon as the first source\n * value arrives, it is forwarded to the output Observable, and then the timer\n * is enabled. After `duration` milliseconds (or the time unit determined\n * internally by the optional `scheduler`) has passed, the timer is disabled,\n * and this process repeats for the next source value. Optionally takes a\n * {@link Scheduler} for managing timers.\n *\n * @example <caption>Emit clicks at a rate of at most one click per second</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.throttleTime(1000);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link auditTime}\n * @see {@link debounceTime}\n * @see {@link delay}\n * @see {@link sampleTime}\n * @see {@link throttle}\n *\n * @param {number} duration Time to wait before emitting another value after\n * emitting the last value, measured in milliseconds or the time unit determined\n * internally by the optional `scheduler`.\n * @param {Scheduler} [scheduler=async] The {@link Scheduler} to use for\n * managing the timers that handle the sampling.\n * @return {Observable<T>} An Observable that performs the throttle operation to\n * limit the rate of emissions from the source.\n * @method throttleTime\n * @owner Observable\n */\nexport function throttleTime<T>(duration: number, scheduler: Scheduler = async): Observable<T> {\n  return this.lift(new ThrottleTimeOperator(duration, scheduler));\n}\n\nexport interface ThrottleTimeSignature<T> {\n  (duration: number, scheduler?: Scheduler): Observable<T>;\n}\n\nclass ThrottleTimeOperator<T> implements Operator<T, T> {\n  constructor(private duration: number,\n              private scheduler: Scheduler) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source._subscribe(new ThrottleTimeSubscriber(subscriber, this.duration, this.scheduler));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass ThrottleTimeSubscriber<T> extends Subscriber<T> {\n  private throttled: Subscription;\n\n  constructor(destination: Subscriber<T>,\n              private duration: number,\n              private scheduler: Scheduler) {\n    super(destination);\n  }\n\n  protected _next(value: T) {\n    if (!this.throttled) {\n      this.add(this.throttled = this.scheduler.schedule(dispatchNext, this.duration, { subscriber: this }));\n      this.destination.next(value);\n    }\n  }\n\n  clearThrottle() {\n    const throttled = this.throttled;\n    if (throttled) {\n      throttled.unsubscribe();\n      this.remove(throttled);\n      this.throttled = null;\n    }\n  }\n}\n\ninterface DispatchArg<T> {\n  subscriber: ThrottleTimeSubscriber<T>;\n}\n\nfunction dispatchNext<T>(arg: DispatchArg<T>) {\n  const { subscriber } = arg;\n  subscriber.clearThrottle();\n}\n","\nimport { Observable } from '../../Observable';\nimport { throttleTime, ThrottleTimeSignature } from '../../operator/throttleTime';\n\nObservable.prototype.throttleTime = throttleTime;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    throttleTime: ThrottleTimeSignature<T>;\n  }\n}","\nimport { Observable } from '../../Observable';\nimport { timeInterval, TimeIntervalSignature } from '../../operator/timeInterval';\n\nObservable.prototype.timeInterval = timeInterval;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    timeInterval: TimeIntervalSignature<T>;\n  }\n}","import { async } from '../scheduler/async';\nimport { isDate } from '../util/isDate';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Scheduler } from '../Scheduler';\nimport { Observable } from '../Observable';\nimport { TeardownLogic } from '../Subscription';\n\n/**\n * @param due\n * @param errorToSend\n * @param scheduler\n * @return {Observable<R>|WebSocketSubject<T>|Observable<T>}\n * @method timeout\n * @owner Observable\n */\nexport function timeout<T>(due: number | Date,\n                           errorToSend: any = null,\n                           scheduler: Scheduler = async): Observable<T> {\n  let absoluteTimeout = isDate(due);\n  let waitFor = absoluteTimeout ? (+due - scheduler.now()) : Math.abs(<number>due);\n  return this.lift(new TimeoutOperator(waitFor, absoluteTimeout, errorToSend, scheduler));\n}\n\nexport interface TimeoutSignature<T> {\n  (due: number | Date, errorToSend?: any, scheduler?: Scheduler): Observable<T>;\n}\n\nclass TimeoutOperator<T> implements Operator<T, T> {\n  constructor(private waitFor: number,\n              private absoluteTimeout: boolean,\n              private errorToSend: any,\n              private scheduler: Scheduler) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source._subscribe(new TimeoutSubscriber<T>(\n      subscriber, this.absoluteTimeout, this.waitFor, this.errorToSend, this.scheduler\n    ));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass TimeoutSubscriber<T> extends Subscriber<T> {\n  private index: number = 0;\n  private _previousIndex: number = 0;\n  get previousIndex(): number {\n    return this._previousIndex;\n  }\n  private _hasCompleted: boolean = false;\n  get hasCompleted(): boolean {\n    return this._hasCompleted;\n  }\n\n  constructor(destination: Subscriber<T>,\n              private absoluteTimeout: boolean,\n              private waitFor: number,\n              private errorToSend: any,\n              private scheduler: Scheduler) {\n    super(destination);\n    this.scheduleTimeout();\n  }\n\n  private static dispatchTimeout(state: any): void {\n    const source = state.subscriber;\n    const currentIndex = state.index;\n    if (!source.hasCompleted && source.previousIndex === currentIndex) {\n      source.notifyTimeout();\n    }\n  }\n\n  private scheduleTimeout(): void {\n    let currentIndex = this.index;\n    this.scheduler.schedule(TimeoutSubscriber.dispatchTimeout, this.waitFor, { subscriber: this, index: currentIndex });\n    this.index++;\n    this._previousIndex = currentIndex;\n  }\n\n  protected _next(value: T) {\n    this.destination.next(value);\n\n    if (!this.absoluteTimeout) {\n      this.scheduleTimeout();\n    }\n  }\n\n  protected _error(err: any) {\n    this.destination.error(err);\n    this._hasCompleted = true;\n  }\n\n  protected _complete() {\n    this.destination.complete();\n    this._hasCompleted = true;\n  }\n\n  notifyTimeout() {\n    this.error(this.errorToSend || new Error('timeout'));\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { timeout, TimeoutSignature } from '../../operator/timeout';\n\nObservable.prototype.timeout = timeout;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    timeout: TimeoutSignature<T>;\n  }\n}","export function isDate(value: any): value is Date {\n  return value instanceof Date && !isNaN(+value);\n}\n","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Scheduler } from '../Scheduler';\nimport { async } from '../scheduler/async';\nimport { Subscription, TeardownLogic } from '../Subscription';\nimport { Observable, ObservableInput } from '../Observable';\nimport { isDate } from '../util/isDate';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n\n/**\n * @param due\n * @param withObservable\n * @param scheduler\n * @return {Observable<R>|WebSocketSubject<T>|Observable<T>}\n * @method timeoutWith\n * @owner Observable\n */\nexport function timeoutWith<T, R>(due: number | Date,\n                                  withObservable: ObservableInput<R>,\n                                  scheduler: Scheduler = async): Observable<T | R> {\n  let absoluteTimeout = isDate(due);\n  let waitFor = absoluteTimeout ? (+due - scheduler.now()) : Math.abs(<number>due);\n  return this.lift(new TimeoutWithOperator(waitFor, absoluteTimeout, withObservable, scheduler));\n}\n\nexport interface TimeoutWithSignature<T> {\n  (due: number | Date, withObservable: ObservableInput<T>, scheduler?: Scheduler): Observable<T>;\n  <R>(due: number | Date, withObservable: ObservableInput<R>, scheduler?: Scheduler): Observable<T | R>;\n}\n\nclass TimeoutWithOperator<T> implements Operator<T, T> {\n  constructor(private waitFor: number,\n              private absoluteTimeout: boolean,\n              private withObservable: ObservableInput<any>,\n              private scheduler: Scheduler) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source._subscribe(new TimeoutWithSubscriber(\n      subscriber, this.absoluteTimeout, this.waitFor, this.withObservable, this.scheduler\n    ));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass TimeoutWithSubscriber<T, R> extends OuterSubscriber<T, R> {\n  private timeoutSubscription: Subscription = undefined;\n  private index: number = 0;\n  private _previousIndex: number = 0;\n  get previousIndex(): number {\n    return this._previousIndex;\n  }\n  private _hasCompleted: boolean = false;\n  get hasCompleted(): boolean {\n    return this._hasCompleted;\n  }\n\n  constructor(public destination: Subscriber<T>,\n              private absoluteTimeout: boolean,\n              private waitFor: number,\n              private withObservable: ObservableInput<any>,\n              private scheduler: Scheduler) {\n    super();\n    destination.add(this);\n    this.scheduleTimeout();\n  }\n\n  private static dispatchTimeout(state: any): void {\n    const source = state.subscriber;\n    const currentIndex = state.index;\n    if (!source.hasCompleted && source.previousIndex === currentIndex) {\n      source.handleTimeout();\n    }\n  }\n\n  private scheduleTimeout(): void {\n    let currentIndex = this.index;\n    const timeoutState = { subscriber: this, index: currentIndex };\n    this.scheduler.schedule(TimeoutWithSubscriber.dispatchTimeout, this.waitFor, timeoutState);\n    this.index++;\n    this._previousIndex = currentIndex;\n  }\n\n  protected _next(value: T) {\n    this.destination.next(value);\n    if (!this.absoluteTimeout) {\n      this.scheduleTimeout();\n    }\n  }\n\n  protected _error(err: any) {\n    this.destination.error(err);\n    this._hasCompleted = true;\n  }\n\n  protected _complete() {\n    this.destination.complete();\n    this._hasCompleted = true;\n  }\n\n  handleTimeout(): void {\n    if (!this.closed) {\n      const withObservable = this.withObservable;\n      this.unsubscribe();\n      this.destination.add(this.timeoutSubscription = subscribeToResult(this, withObservable));\n    }\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { timeoutWith, TimeoutWithSignature } from '../../operator/timeoutWith';\n\nObservable.prototype.timeoutWith = timeoutWith;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    timeoutWith: TimeoutWithSignature<T>;\n  }\n}","import { Observable } from '../../Observable';\r\nimport { timestamp, TimestampSignature } from '../../operator/timestamp';\r\n\r\nObservable.prototype.timestamp = timestamp;\r\n\r\ndeclare module '../../Observable' {\r\n  interface Observable<T> {\r\n    timestamp: TimestampSignature<T>;\r\n  }\r\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\n\n/**\n * @return {Observable<any[]>|WebSocketSubject<T>|Observable<T>}\n * @method toArray\n * @owner Observable\n */\nexport function toArray<T>(): Observable<T[]> {\n  return this.lift(new ToArrayOperator());\n}\n\nexport interface ToArraySignature<T> {\n  (): Observable<T[]>;\n}\n\nclass ToArrayOperator<T> implements Operator<T, T[]> {\n  call(subscriber: Subscriber<T[]>, source: any): any {\n    return source._subscribe(new ToArraySubscriber(subscriber));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass ToArraySubscriber<T> extends Subscriber<T> {\n\n  private array: T[] = [];\n\n  constructor(destination: Subscriber<T[]>) {\n    super(destination);\n  }\n\n  protected _next(x: T) {\n    this.array.push(x);\n  }\n\n  protected _complete() {\n    this.destination.next(this.array);\n    this.destination.complete();\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { toArray, ToArraySignature } from '../../operator/toArray';\n\nObservable.prototype.toArray = toArray;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    toArray: ToArraySignature<T>;\n  }\n}","import { root } from '../util/root';\n\n/**\n * @param PromiseCtor\n * @return {Promise<T>}\n * @method toPromise\n * @owner Observable\n */\nexport function toPromise<T>(PromiseCtor?: typeof Promise): Promise<T> {\n  if (!PromiseCtor) {\n    if (root.Rx && root.Rx.config && root.Rx.config.Promise) {\n      PromiseCtor = root.Rx.config.Promise;\n    } else if (root.Promise) {\n      PromiseCtor = root.Promise;\n    }\n  }\n\n  if (!PromiseCtor) {\n    throw new Error('no Promise impl found');\n  }\n\n  return new PromiseCtor((resolve, reject) => {\n    let value: any;\n    this.subscribe((x: T) => value = x, (err: any) => reject(err), () => resolve(value));\n  });\n}\n\nexport interface ToPromiseSignature<T> {\n  (): Promise<T>;\n  (PromiseCtor: typeof Promise): Promise<T>;\n}\n","\nimport { Observable } from '../../Observable';\nimport { toPromise, ToPromiseSignature } from '../../operator/toPromise';\n\nObservable.prototype.toPromise = toPromise;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    toPromise: ToPromiseSignature<T>;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { Subject } from '../Subject';\n\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n\n/**\n * Branch out the source Observable values as a nested Observable whenever\n * `windowBoundaries` emits.\n *\n * <span class=\"informal\">It's like {@link buffer}, but emits a nested Observable\n * instead of an array.</span>\n *\n * <img src=\"./img/window.png\" width=\"100%\">\n *\n * Returns an Observable that emits windows of items it collects from the source\n * Observable. The output Observable emits connected, non-overlapping\n * windows. It emits the current window and opens a new one whenever the\n * Observable `windowBoundaries` emits an item. Because each window is an\n * Observable, the output is a higher-order Observable.\n *\n * @example <caption>In every window of 1 second each, emit at most 2 click events</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var interval = Rx.Observable.interval(1000);\n * var result = clicks.window(interval)\n *   .map(win => win.take(2)) // each window has at most 2 emissions\n *   .mergeAll(); // flatten the Observable-of-Observables\n * result.subscribe(x => console.log(x));\n *\n * @see {@link windowCount}\n * @see {@link windowTime}\n * @see {@link windowToggle}\n * @see {@link windowWhen}\n * @see {@link buffer}\n *\n * @param {Observable<any>} windowBoundaries An Observable that completes the\n * previous window and starts a new window.\n * @return {Observable<Observable<T>>} An Observable of windows, which are\n * Observables emitting values of the source Observable.\n * @method window\n * @owner Observable\n */\nexport function window<T>(windowBoundaries: Observable<any>): Observable<Observable<T>> {\n  return this.lift(new WindowOperator<T>(windowBoundaries));\n}\n\nexport interface WindowSignature<T> {\n  (windowBoundaries: Observable<any>): Observable<Observable<T>>;\n}\n\nclass WindowOperator<T> implements Operator<T, Observable<T>> {\n\n  constructor(private windowBoundaries: Observable<any>) {\n  }\n\n  call(subscriber: Subscriber<Observable<T>>, source: any): any {\n    const windowSubscriber = new WindowSubscriber(subscriber);\n    const sourceSubscription = source._subscribe(windowSubscriber);\n    if (!sourceSubscription.closed) {\n      windowSubscriber.add(subscribeToResult(windowSubscriber, this.windowBoundaries));\n    }\n    return sourceSubscription;\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass WindowSubscriber<T> extends OuterSubscriber<T, any> {\n\n  private window: Subject<T> = new Subject<T>();\n\n  constructor(destination: Subscriber<Observable<T>>) {\n    super(destination);\n    destination.next(this.window);\n  }\n\n  notifyNext(outerValue: T, innerValue: any,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, any>): void {\n    this.openWindow();\n  }\n\n  notifyError(error: any, innerSub: InnerSubscriber<T, any>): void {\n    this._error(error);\n  }\n\n  notifyComplete(innerSub: InnerSubscriber<T, any>): void {\n    this._complete();\n  }\n\n  protected _next(value: T): void {\n    this.window.next(value);\n  }\n\n  protected _error(err: any): void {\n    this.window.error(err);\n    this.destination.error(err);\n  }\n\n  protected _complete(): void {\n    this.window.complete();\n    this.destination.complete();\n  }\n\n  protected _unsubscribe() {\n    this.window = null;\n  }\n\n  private openWindow(): void  {\n    const prevWindow = this.window;\n    if (prevWindow) {\n      prevWindow.complete();\n    }\n    const destination = this.destination;\n    const newWindow = this.window = new Subject<T>();\n    destination.next(newWindow);\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { window, WindowSignature } from '../../operator/window';\n\nObservable.prototype.window = window;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    window: WindowSignature<T>;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { Subject } from '../Subject';\n\n/**\n * Branch out the source Observable values as a nested Observable with each\n * nested Observable emitting at most `windowSize` values.\n *\n * <span class=\"informal\">It's like {@link bufferCount}, but emits a nested\n * Observable instead of an array.</span>\n *\n * <img src=\"./img/windowCount.png\" width=\"100%\">\n *\n * Returns an Observable that emits windows of items it collects from the source\n * Observable. The output Observable emits windows every `startWindowEvery`\n * items, each containing no more than `windowSize` items. When the source\n * Observable completes or encounters an error, the output Observable emits\n * the current window and propagates the notification from the source\n * Observable. If `startWindowEvery` is not provided, then new windows are\n * started immediately at the start of the source and when each window completes\n * with size `windowSize`.\n *\n * @example <caption>Ignore every 3rd click event, starting from the first one</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.windowCount(3)\n *   .map(win => win.skip(1)) // skip first of every 3 clicks\n *   .mergeAll(); // flatten the Observable-of-Observables\n * result.subscribe(x => console.log(x));\n *\n * @example <caption>Ignore every 3rd click event, starting from the third one</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.windowCount(2, 3)\n *   .mergeAll(); // flatten the Observable-of-Observables\n * result.subscribe(x => console.log(x));\n *\n * @see {@link window}\n * @see {@link windowTime}\n * @see {@link windowToggle}\n * @see {@link windowWhen}\n * @see {@link bufferCount}\n *\n * @param {number} windowSize The maximum number of values emitted by each\n * window.\n * @param {number} [startWindowEvery] Interval at which to start a new window.\n * For example if `startWindowEvery` is `2`, then a new window will be started\n * on every other value from the source. A new window is started at the\n * beginning of the source by default.\n * @return {Observable<Observable<T>>} An Observable of windows, which in turn\n * are Observable of values.\n * @method windowCount\n * @owner Observable\n */\nexport function windowCount<T>(windowSize: number,\n                               startWindowEvery: number = 0): Observable<Observable<T>> {\n  return this.lift(new WindowCountOperator<T>(windowSize, startWindowEvery));\n}\n\nexport interface WindowCountSignature<T> {\n  (windowSize: number, startWindowEvery?: number): Observable<Observable<T>>;\n}\n\nclass WindowCountOperator<T> implements Operator<T, Observable<T>> {\n\n  constructor(private windowSize: number,\n              private startWindowEvery: number) {\n  }\n\n  call(subscriber: Subscriber<Observable<T>>, source: any): any {\n    return source._subscribe(new WindowCountSubscriber(subscriber, this.windowSize, this.startWindowEvery));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass WindowCountSubscriber<T> extends Subscriber<T> {\n  private windows: Subject<T>[] = [ new Subject<T>() ];\n  private count: number = 0;\n\n  constructor(protected destination: Subscriber<Observable<T>>,\n              private windowSize: number,\n              private startWindowEvery: number) {\n    super(destination);\n    destination.next(this.windows[0]);\n  }\n\n  protected _next(value: T) {\n    const startWindowEvery = (this.startWindowEvery > 0) ? this.startWindowEvery : this.windowSize;\n    const destination = this.destination;\n    const windowSize = this.windowSize;\n    const windows = this.windows;\n    const len = windows.length;\n\n    for (let i = 0; i < len && !this.closed; i++) {\n      windows[i].next(value);\n    }\n    const c = this.count - windowSize + 1;\n    if (c >= 0 && c % startWindowEvery === 0 && !this.closed) {\n      windows.shift().complete();\n    }\n    if (++this.count % startWindowEvery === 0 && !this.closed) {\n      const window = new Subject<T>();\n      windows.push(window);\n      destination.next(window);\n    }\n  }\n\n  protected _error(err: any) {\n    const windows = this.windows;\n    if (windows) {\n      while (windows.length > 0 && !this.closed) {\n        windows.shift().error(err);\n      }\n    }\n    this.destination.error(err);\n  }\n\n  protected _complete() {\n    const windows = this.windows;\n    if (windows) {\n      while (windows.length > 0 && !this.closed) {\n        windows.shift().complete();\n      }\n    }\n    this.destination.complete();\n  }\n\n  protected _unsubscribe() {\n    this.count = 0;\n    this.windows = null;\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { windowCount, WindowCountSignature } from '../../operator/windowCount';\n\nObservable.prototype.windowCount = windowCount;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    windowCount: WindowCountSignature<T>;\n  }\n}","import { Scheduler } from '../Scheduler';\nimport { Action } from '../scheduler/Action';\nimport { Subject } from '../Subject';\nimport { Operator } from '../Operator';\nimport { async } from '../scheduler/async';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { Subscription } from '../Subscription';\n\n/**\n * Branch out the source Observable values as a nested Observable periodically\n * in time.\n *\n * <span class=\"informal\">It's like {@link bufferTime}, but emits a nested\n * Observable instead of an array.</span>\n *\n * <img src=\"./img/windowTime.png\" width=\"100%\">\n *\n * Returns an Observable that emits windows of items it collects from the source\n * Observable. The output Observable starts a new window periodically, as\n * determined by the `windowCreationInterval` argument. It emits each window\n * after a fixed timespan, specified by the `windowTimeSpan` argument. When the\n * source Observable completes or encounters an error, the output Observable\n * emits the current window and propagates the notification from the source\n * Observable. If `windowCreationInterval` is not provided, the output\n * Observable starts a new window when the previous window of duration\n * `windowTimeSpan` completes.\n *\n * @example <caption>In every window of 1 second each, emit at most 2 click events</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.windowTime(1000)\n *   .map(win => win.take(2)) // each window has at most 2 emissions\n *   .mergeAll(); // flatten the Observable-of-Observables\n * result.subscribe(x => console.log(x));\n *\n * @example <caption>Every 5 seconds start a window 1 second long, and emit at most 2 click events per window</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.windowTime(1000, 5000)\n *   .map(win => win.take(2)) // each window has at most 2 emissions\n *   .mergeAll(); // flatten the Observable-of-Observables\n * result.subscribe(x => console.log(x));\n *\n * @see {@link window}\n * @see {@link windowCount}\n * @see {@link windowToggle}\n * @see {@link windowWhen}\n * @see {@link bufferTime}\n *\n * @param {number} windowTimeSpan The amount of time to fill each window.\n * @param {number} [windowCreationInterval] The interval at which to start new\n * windows.\n * @param {Scheduler} [scheduler=async] The scheduler on which to schedule the\n * intervals that determine window boundaries.\n * @return {Observable<Observable<T>>} An observable of windows, which in turn\n * are Observables.\n * @method windowTime\n * @owner Observable\n */\nexport function windowTime<T>(windowTimeSpan: number,\n                              windowCreationInterval: number = null,\n                              scheduler: Scheduler = async): Observable<Observable<T>> {\n  return this.lift(new WindowTimeOperator<T>(windowTimeSpan, windowCreationInterval, scheduler));\n}\n\nexport interface WindowTimeSignature<T> {\n  (windowTimeSpan: number, windowCreationInterval?: number, scheduler?: Scheduler): Observable<Observable<T>>;\n}\n\nclass WindowTimeOperator<T> implements Operator<T, Observable<T>> {\n\n  constructor(private windowTimeSpan: number,\n              private windowCreationInterval: number,\n              private scheduler: Scheduler) {\n  }\n\n  call(subscriber: Subscriber<Observable<T>>, source: any): any {\n    return source._subscribe(new WindowTimeSubscriber(\n      subscriber, this.windowTimeSpan, this.windowCreationInterval, this.scheduler\n    ));\n  }\n}\n\ninterface CreationState<T> {\n  windowTimeSpan: number;\n  windowCreationInterval: number;\n  subscriber: WindowTimeSubscriber<T>;\n  scheduler: Scheduler;\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass WindowTimeSubscriber<T> extends Subscriber<T> {\n  private windows: Subject<T>[] = [];\n\n  constructor(protected destination: Subscriber<Observable<T>>,\n              private windowTimeSpan: number,\n              private windowCreationInterval: number,\n              private scheduler: Scheduler) {\n    super(destination);\n    if (windowCreationInterval !== null && windowCreationInterval >= 0) {\n      let window = this.openWindow();\n      const closeState = { subscriber: this, window, context: <any>null };\n      const creationState: CreationState<T> = { windowTimeSpan, windowCreationInterval, subscriber: this, scheduler };\n      this.add(scheduler.schedule(dispatchWindowClose, windowTimeSpan, closeState));\n      this.add(scheduler.schedule(dispatchWindowCreation, windowCreationInterval, creationState));\n    } else {\n      let window = this.openWindow();\n      const timeSpanOnlyState = { subscriber: this, window, windowTimeSpan };\n      this.add(scheduler.schedule(dispatchWindowTimeSpanOnly, windowTimeSpan, timeSpanOnlyState));\n    }\n  }\n\n  protected _next(value: T) {\n    const windows = this.windows;\n    const len = windows.length;\n    for (let i = 0; i < len; i++) {\n      const window = windows[i];\n      if (!window.closed) {\n        window.next(value);\n      }\n    }\n  }\n\n  protected _error(err: any) {\n    const windows = this.windows;\n    while (windows.length > 0) {\n      windows.shift().error(err);\n    }\n    this.destination.error(err);\n  }\n\n  protected _complete() {\n    const windows = this.windows;\n    while (windows.length > 0) {\n      const window = windows.shift();\n      if (!window.closed) {\n        window.complete();\n      }\n    }\n    this.destination.complete();\n  }\n\n  openWindow(): Subject<T> {\n    const window = new Subject<T>();\n    this.windows.push(window);\n    const destination = this.destination;\n    destination.next(window);\n    return window;\n  }\n\n  closeWindow(window: Subject<T>) {\n    window.complete();\n    const windows = this.windows;\n    windows.splice(windows.indexOf(window), 1);\n  }\n}\n\ninterface TimeSpanOnlyState<T> {\n  window: Subject<any>;\n  windowTimeSpan: number;\n  subscriber: WindowTimeSubscriber<T>;\n}\n\nfunction dispatchWindowTimeSpanOnly<T>(state: TimeSpanOnlyState<T>) {\n  const { subscriber, windowTimeSpan, window } = state;\n  if (window) {\n    window.complete();\n  }\n  state.window = subscriber.openWindow();\n  (<any>this).schedule(state, windowTimeSpan);\n}\n\ninterface Context<T> {\n  action: Action<CreationState<T>>;\n  subscription: Subscription;\n}\n\ninterface DispatchArg<T> {\n  subscriber: WindowTimeSubscriber<T>;\n  window: Subject<T>;\n  context: Context<T>;\n}\n\nfunction dispatchWindowCreation<T>(state: CreationState<T>) {\n  let { windowTimeSpan, subscriber, scheduler, windowCreationInterval } = state;\n  let window = subscriber.openWindow();\n  let action = <Action<CreationState<T>>>this;\n  let context: Context<T> = { action, subscription: <any>null };\n  const timeSpanState: DispatchArg<T> = { subscriber, window, context };\n  context.subscription = scheduler.schedule(dispatchWindowClose, windowTimeSpan, timeSpanState);\n  action.add(context.subscription);\n  action.schedule(state, windowCreationInterval);\n}\n\nfunction dispatchWindowClose<T>(arg: DispatchArg<T>) {\n  const { subscriber, window, context } = arg;\n  if (context && context.action && context.subscription) {\n    context.action.remove(context.subscription);\n  }\n  subscriber.closeWindow(window);\n}\n","\nimport { Observable } from '../../Observable';\nimport { windowTime, WindowTimeSignature } from '../../operator/windowTime';\n\nObservable.prototype.windowTime = windowTime;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    windowTime: WindowTimeSignature<T>;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { Subject } from '../Subject';\nimport { Subscription } from '../Subscription';\n\nimport { tryCatch } from '../util/tryCatch';\nimport { errorObject } from '../util/errorObject';\n\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n\n/**\n * Branch out the source Observable values as a nested Observable starting from\n * an emission from `openings` and ending when the output of `closingSelector`\n * emits.\n *\n * <span class=\"informal\">It's like {@link bufferToggle}, but emits a nested\n * Observable instead of an array.</span>\n *\n * <img src=\"./img/windowToggle.png\" width=\"100%\">\n *\n * Returns an Observable that emits windows of items it collects from the source\n * Observable. The output Observable emits windows that contain those items\n * emitted by the source Observable between the time when the `openings`\n * Observable emits an item and when the Observable returned by\n * `closingSelector` emits an item.\n *\n * @example <caption>Every other second, emit the click events from the next 500ms</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var openings = Rx.Observable.interval(1000);\n * var result = clicks.windowToggle(openings, i =>\n *   i % 2 ? Rx.Observable.interval(500) : Rx.Observable.empty()\n * ).mergeAll();\n * result.subscribe(x => console.log(x));\n *\n * @see {@link window}\n * @see {@link windowCount}\n * @see {@link windowTime}\n * @see {@link windowWhen}\n * @see {@link bufferToggle}\n *\n * @param {Observable<O>} openings An observable of notifications to start new\n * windows.\n * @param {function(value: O): Observable} closingSelector A function that takes\n * the value emitted by the `openings` observable and returns an Observable,\n * which, when it emits (either `next` or `complete`), signals that the\n * associated window should complete.\n * @return {Observable<Observable<T>>} An observable of windows, which in turn\n * are Observables.\n * @method windowToggle\n * @owner Observable\n */\nexport function windowToggle<T, O>(openings: Observable<O>,\n                                   closingSelector: (openValue: O) => Observable<any>): Observable<Observable<T>> {\n  return this.lift(new WindowToggleOperator<T, O>(openings, closingSelector));\n}\n\nexport interface WindowToggleSignature<T> {\n  <O>(openings: Observable<O>, closingSelector: (openValue: O) => Observable<any>): Observable<Observable<T>>;\n}\n\nclass WindowToggleOperator<T, O> implements Operator<T, Observable<T>> {\n\n  constructor(private openings: Observable<O>,\n              private closingSelector: (openValue: O) => Observable<any>) {\n  }\n\n  call(subscriber: Subscriber<Observable<T>>, source: any): any {\n    return source._subscribe(new WindowToggleSubscriber(\n      subscriber, this.openings, this.closingSelector\n    ));\n  }\n}\n\ninterface WindowContext<T> {\n  window: Subject<T>;\n  subscription: Subscription;\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass WindowToggleSubscriber<T, O> extends OuterSubscriber<T, any> {\n  private contexts: WindowContext<T>[] = [];\n  private openSubscription: Subscription;\n\n  constructor(destination: Subscriber<Observable<T>>,\n              private openings: Observable<O>,\n              private closingSelector: (openValue: O) => Observable<any>) {\n    super(destination);\n    this.add(this.openSubscription = subscribeToResult(this, openings, openings));\n  }\n\n  protected _next(value: T) {\n    const { contexts } = this;\n    if (contexts) {\n      const len = contexts.length;\n      for (let i = 0; i < len; i++) {\n        contexts[i].window.next(value);\n      }\n    }\n  }\n\n  protected _error(err: any) {\n\n    const { contexts } = this;\n    this.contexts = null;\n\n    if (contexts) {\n      const len = contexts.length;\n      let index = -1;\n\n      while (++index < len) {\n        const context = contexts[index];\n        context.window.error(err);\n        context.subscription.unsubscribe();\n      }\n    }\n\n    super._error(err);\n  }\n\n  protected _complete() {\n    const { contexts } = this;\n    this.contexts = null;\n    if (contexts) {\n      const len = contexts.length;\n      let index = -1;\n      while (++index < len) {\n        const context = contexts[index];\n        context.window.complete();\n        context.subscription.unsubscribe();\n      }\n    }\n    super._complete();\n  }\n\n  protected _unsubscribe() {\n    const { contexts } = this;\n    this.contexts = null;\n    if (contexts) {\n      const len = contexts.length;\n      let index = -1;\n      while (++index < len) {\n        const context = contexts[index];\n        context.window.unsubscribe();\n        context.subscription.unsubscribe();\n      }\n    }\n  }\n\n  notifyNext(outerValue: any, innerValue: any,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, any>): void {\n\n    if (outerValue === this.openings) {\n\n      const { closingSelector } = this;\n      const closingNotifier = tryCatch(closingSelector)(innerValue);\n\n      if (closingNotifier === errorObject) {\n        return this.error(errorObject.e);\n      } else {\n        const window = new Subject<T>();\n        const subscription = new Subscription();\n        const context = { window, subscription };\n        this.contexts.push(context);\n        const innerSubscription = subscribeToResult(this, closingNotifier, context);\n\n        if (innerSubscription.closed) {\n          this.closeWindow(this.contexts.length - 1);\n        } else {\n          (<any> innerSubscription).context = context;\n          subscription.add(innerSubscription);\n        }\n\n        this.destination.next(window);\n\n      }\n    } else {\n      this.closeWindow(this.contexts.indexOf(outerValue));\n    }\n  }\n\n  notifyError(err: any): void {\n    this.error(err);\n  }\n\n  notifyComplete(inner: Subscription): void {\n    if (inner !== this.openSubscription) {\n      this.closeWindow(this.contexts.indexOf((<any> inner).context));\n    }\n  }\n\n  private closeWindow(index: number): void {\n    if (index === -1) {\n      return;\n    }\n\n    const { contexts } = this;\n    const context = contexts[index];\n    const { window, subscription } = context;\n    contexts.splice(index, 1);\n    window.complete();\n    subscription.unsubscribe();\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { windowToggle, WindowToggleSignature } from '../../operator/windowToggle';\n\nObservable.prototype.windowToggle = windowToggle;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    windowToggle: WindowToggleSignature<T>;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { Subject } from '../Subject';\nimport { Subscription } from '../Subscription';\n\nimport { tryCatch } from '../util/tryCatch';\nimport { errorObject } from '../util/errorObject';\n\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n\n/**\n * Branch out the source Observable values as a nested Observable using a\n * factory function of closing Observables to determine when to start a new\n * window.\n *\n * <span class=\"informal\">It's like {@link bufferWhen}, but emits a nested\n * Observable instead of an array.</span>\n *\n * <img src=\"./img/windowWhen.png\" width=\"100%\">\n *\n * Returns an Observable that emits windows of items it collects from the source\n * Observable. The output Observable emits connected, non-overlapping windows.\n * It emits the current window and opens a new one whenever the Observable\n * produced by the specified `closingSelector` function emits an item. The first\n * window is opened immediately when subscribing to the output Observable.\n *\n * @example <caption>Emit only the first two clicks events in every window of [1-5] random seconds</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks\n *   .windowWhen(() => Rx.Observable.interval(1000 + Math.random() * 4000))\n *   .map(win => win.take(2)) // each window has at most 2 emissions\n *   .mergeAll(); // flatten the Observable-of-Observables\n * result.subscribe(x => console.log(x));\n *\n * @see {@link window}\n * @see {@link windowCount}\n * @see {@link windowTime}\n * @see {@link windowToggle}\n * @see {@link bufferWhen}\n *\n * @param {function(): Observable} closingSelector A function that takes no\n * arguments and returns an Observable that signals (on either `next` or\n * `complete`) when to close the previous window and start a new one.\n * @return {Observable<Observable<T>>} An observable of windows, which in turn\n * are Observables.\n * @method windowWhen\n * @owner Observable\n */\nexport function windowWhen<T>(closingSelector: () => Observable<any>): Observable<Observable<T>> {\n  return this.lift(new WindowOperator<T>(closingSelector));\n}\n\nexport interface WindowWhenSignature<T> {\n  (closingSelector: () => Observable<any>): Observable<Observable<T>>;\n}\n\nclass WindowOperator<T> implements Operator<T, Observable<T>> {\n  constructor(private closingSelector: () => Observable<any>) {\n  }\n\n  call(subscriber: Subscriber<Observable<T>>, source: any): any {\n    return source._subscribe(new WindowSubscriber(subscriber, this.closingSelector));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass WindowSubscriber<T> extends OuterSubscriber<T, any> {\n  private window: Subject<T>;\n  private closingNotification: Subscription;\n\n  constructor(protected destination: Subscriber<Observable<T>>,\n              private closingSelector: () => Observable<any>) {\n    super(destination);\n    this.openWindow();\n  }\n\n  notifyNext(outerValue: T, innerValue: any,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, any>): void {\n    this.openWindow(innerSub);\n  }\n\n  notifyError(error: any, innerSub: InnerSubscriber<T, any>): void {\n    this._error(error);\n  }\n\n  notifyComplete(innerSub: InnerSubscriber<T, any>): void {\n    this.openWindow(innerSub);\n  }\n\n  protected _next(value: T): void {\n    this.window.next(value);\n  }\n\n  protected _error(err: any): void {\n    this.window.error(err);\n    this.destination.error(err);\n    this.unsubscribeClosingNotification();\n  }\n\n  protected _complete(): void {\n    this.window.complete();\n    this.destination.complete();\n    this.unsubscribeClosingNotification();\n  }\n\n  private unsubscribeClosingNotification(): void {\n    if (this.closingNotification) {\n      this.closingNotification.unsubscribe();\n    }\n  }\n\n  private openWindow(innerSub: InnerSubscriber<T, any> = null): void {\n    if (innerSub) {\n      this.remove(innerSub);\n      innerSub.unsubscribe();\n    }\n\n    const prevWindow = this.window;\n    if (prevWindow) {\n      prevWindow.complete();\n    }\n\n    const window = this.window = new Subject<T>();\n    this.destination.next(window);\n\n    const closingNotifier = tryCatch(this.closingSelector)();\n    if (closingNotifier === errorObject) {\n      const err = errorObject.e;\n      this.destination.error(err);\n      this.window.error(err);\n    } else {\n      this.add(this.closingNotification = subscribeToResult(this, closingNotifier));\n    }\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { windowWhen, WindowWhenSignature } from '../../operator/windowWhen';\n\nObservable.prototype.windowWhen = windowWhen;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    windowWhen: WindowWhenSignature<T>;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable, ObservableInput } from '../Observable';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n\n/**\n * Combines the source Observable with other Observables to create an Observable\n * whose values are calculated from the latest values of each, only when the\n * source emits.\n *\n * <span class=\"informal\">Whenever the source Observable emits a value, it\n * computes a formula using that value plus the latest values from other input\n * Observables, then emits the output of that formula.</span>\n *\n * <img src=\"./img/withLatestFrom.png\" width=\"100%\">\n *\n * `withLatestFrom` combines each value from the source Observable (the\n * instance) with the latest values from the other input Observables only when\n * the source emits a value, optionally using a `project` function to determine\n * the value to be emitted on the output Observable. All input Observables must\n * emit at least one value before the output Observable will emit a value.\n *\n * @example <caption>On every click event, emit an array with the latest timer event plus the click event</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var timer = Rx.Observable.interval(1000);\n * var result = clicks.withLatestFrom(timer);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link combineLatest}\n *\n * @param {Observable} other An input Observable to combine with the source\n * Observable. More than one input Observables may be given as argument.\n * @param {Function} [project] Projection function for combining values\n * together. Receives all values in order of the Observables passed, where the\n * first parameter is a value from the source Observable. (e.g.\n * `a.withLatestFrom(b, c, (a1, b1, c1) => a1 + b1 + c1)`). If this is not\n * passed, arrays will be emitted on the output Observable.\n * @return {Observable} An Observable of projected values from the most recent\n * values from each input Observable, or an array of the most recent values from\n * each input Observable.\n * @method withLatestFrom\n * @owner Observable\n */\nexport function withLatestFrom<T, R>(...args: Array<ObservableInput<any> | ((...values: Array<any>) => R)>): Observable<R> {\n  let project: any;\n  if (typeof args[args.length - 1] === 'function') {\n    project = args.pop();\n  }\n  const observables = <Observable<any>[]>args;\n  return this.lift(new WithLatestFromOperator(observables, project));\n}\n\n/* tslint:disable:max-line-length */\nexport interface WithLatestFromSignature<T> {\n  <R>(project: (v1: T) => R): Observable<R>;\n  <T2, R>(v2: ObservableInput<T2>, project: (v1: T, v2: T2) => R): Observable<R>;\n  <T2, T3, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, project: (v1: T, v2: T2, v3: T3) => R): Observable<R>;\n  <T2, T3, T4, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, project: (v1: T, v2: T2, v3: T3, v4: T4) => R): Observable<R>;\n  <T2, T3, T4, T5, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, project: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5) => R): Observable<R>;\n  <T2, T3, T4, T5, T6, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>, project: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5, v6: T6) => R): Observable<R>;\n\n  <T2>(v2: ObservableInput<T2>): Observable<[T, T2]>;\n  <T2, T3>(v2: ObservableInput<T2>, v3: ObservableInput<T3>): Observable<[T, T2, T3]>;\n  <T2, T3, T4>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>): Observable<[T, T2, T3, T4]>;\n  <T2, T3, T4, T5>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>): Observable<[T, T2, T3, T4, T5]>;\n  <T2, T3, T4, T5, T6>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>): Observable<[T, T2, T3, T4, T5, T6]>;\n\n  <R>(...observables: Array<ObservableInput<any> | ((...values: Array<any>) => R)>): Observable<R>;\n  <R>(array: ObservableInput<any>[]): Observable<R>;\n  <R>(array: ObservableInput<any>[], project: (...values: Array<any>) => R): Observable<R>;\n}\n/* tslint:enable:max-line-length */\n\nclass WithLatestFromOperator<T, R> implements Operator<T, R> {\n  constructor(private observables: Observable<any>[],\n              private project?: (...values: any[]) => Observable<R>) {\n  }\n\n  call(subscriber: Subscriber<R>, source: any): any {\n    return source._subscribe(new WithLatestFromSubscriber(subscriber, this.observables, this.project));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass WithLatestFromSubscriber<T, R> extends OuterSubscriber<T, R> {\n  private values: any[];\n  private toRespond: number[] = [];\n\n  constructor(destination: Subscriber<R>,\n              private observables: Observable<any>[],\n              private project?: (...values: any[]) => Observable<R>) {\n    super(destination);\n    const len = observables.length;\n    this.values = new Array(len);\n\n    for (let i = 0; i < len; i++) {\n      this.toRespond.push(i);\n    }\n\n    for (let i = 0; i < len; i++) {\n      let observable = observables[i];\n      this.add(subscribeToResult<T, R>(this, observable, <any>observable, i));\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: R,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    this.values[outerIndex] = innerValue;\n    const toRespond = this.toRespond;\n    if (toRespond.length > 0) {\n      const found = toRespond.indexOf(outerIndex);\n      if (found !== -1) {\n        toRespond.splice(found, 1);\n      }\n    }\n  }\n\n  notifyComplete() {\n    // noop\n  }\n\n  protected _next(value: T) {\n    if (this.toRespond.length === 0) {\n      const args = [value, ...this.values];\n      if (this.project) {\n        this._tryProject(args);\n      } else {\n        this.destination.next(args);\n      }\n    }\n  }\n\n  private _tryProject(args: any[]) {\n    let result: any;\n    try {\n      result = this.project.apply(this, args);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    this.destination.next(result);\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { withLatestFrom, WithLatestFromSignature } from '../../operator/withLatestFrom';\n\nObservable.prototype.withLatestFrom = withLatestFrom;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    withLatestFrom: WithLatestFromSignature<T>;\n  }\n}","\nimport { Observable } from '../../Observable';\nimport { zipProto, ZipSignature } from '../../operator/zip';\n\nObservable.prototype.zip = zipProto;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    zip: ZipSignature<T>;\n  }\n}","import { Scheduler } from '../Scheduler';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { TeardownLogic } from '../Subscription';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class ScalarObservable<T> extends Observable<T> {\n  static create<T>(value: T, scheduler?: Scheduler): ScalarObservable<T> {\n    return new ScalarObservable(value, scheduler);\n  }\n\n  static dispatch(state: any): void {\n    const { done, value, subscriber } = state;\n\n    if (done) {\n      subscriber.complete();\n      return;\n    }\n\n    subscriber.next(value);\n    if (subscriber.closed) {\n      return;\n    }\n\n    state.done = true;\n    (<any> this).schedule(state);\n  }\n\n  _isScalar: boolean = true;\n\n  constructor(public value: T, private scheduler?: Scheduler) {\n    super();\n    if (scheduler) {\n      this._isScalar = false;\n    }\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>): TeardownLogic {\n    const value = this.value;\n    const scheduler = this.scheduler;\n\n    if (scheduler) {\n      return scheduler.schedule(ScalarObservable.dispatch, 0, {\n        done: false, value, subscriber\n      });\n    } else {\n      subscriber.next(value);\n      if (!subscriber.closed) {\n        subscriber.complete();\n      }\n    }\n  }\n}\n","import { Scheduler } from '../Scheduler';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { TeardownLogic } from '../Subscription';\n\nexport interface DispatchArg<T> {\n  subscriber: Subscriber<T>;\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class EmptyObservable<T> extends Observable<T> {\n\n  /**\n   * Creates an Observable that emits no items to the Observer and immediately\n   * emits a complete notification.\n   *\n   * <span class=\"informal\">Just emits 'complete', and nothing else.\n   * </span>\n   *\n   * <img src=\"./img/empty.png\" width=\"100%\">\n   *\n   * This static operator is useful for creating a simple Observable that only\n   * emits the complete notification. It can be used for composing with other\n   * Observables, such as in a {@link mergeMap}.\n   *\n   * @example <caption>Emit the number 7, then complete.</caption>\n   * var result = Rx.Observable.empty().startWith(7);\n   * result.subscribe(x => console.log(x));\n   *\n   * @example <caption>Map and flatten only odd numbers to the sequence 'a', 'b', 'c'</caption>\n   * var interval = Rx.Observable.interval(1000);\n   * var result = interval.mergeMap(x =>\n   *   x % 2 === 1 ? Rx.Observable.of('a', 'b', 'c') : Rx.Observable.empty()\n   * );\n   * result.subscribe(x => console.log(x));\n   *\n   * @see {@link create}\n   * @see {@link never}\n   * @see {@link of}\n   * @see {@link throw}\n   *\n   * @param {Scheduler} [scheduler] A {@link Scheduler} to use for scheduling\n   * the emission of the complete notification.\n   * @return {Observable} An \"empty\" Observable: emits only the complete\n   * notification.\n   * @static true\n   * @name empty\n   * @owner Observable\n   */\n  static create<T>(scheduler?: Scheduler): Observable<T> {\n    return new EmptyObservable<T>(scheduler);\n  }\n\n  static dispatch<T>(arg: DispatchArg<T>) {\n    const { subscriber } = arg;\n    subscriber.complete();\n  }\n\n  constructor(private scheduler?: Scheduler) {\n    super();\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>): TeardownLogic {\n\n    const scheduler = this.scheduler;\n\n    if (scheduler) {\n      return scheduler.schedule(EmptyObservable.dispatch, 0, { subscriber });\n    } else {\n      subscriber.complete();\n    }\n  }\n}\n","import { Scheduler } from '../Scheduler';\nexport function isScheduler<T>(value: any): value is Scheduler {\n  return value && typeof (<any>value).schedule === 'function';\n}\n","import { Scheduler } from '../Scheduler';\nimport { Observable } from '../Observable';\nimport { ScalarObservable } from './ScalarObservable';\nimport { EmptyObservable } from './EmptyObservable';\nimport { Subscriber } from '../Subscriber';\nimport { isScheduler } from '../util/isScheduler';\nimport { TeardownLogic } from '../Subscription';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class ArrayObservable<T> extends Observable<T> {\n\n  static create<T>(array: T[], scheduler?: Scheduler): Observable<T> {\n    return new ArrayObservable(array, scheduler);\n  }\n\n  static of<T>(item1: T, scheduler?: Scheduler): Observable<T>;\n  static of<T>(item1: T, item2: T, scheduler?: Scheduler): Observable<T>;\n  static of<T>(item1: T, item2: T, item3: T, scheduler?: Scheduler): Observable<T>;\n  static of<T>(item1: T, item2: T, item3: T, item4: T, scheduler?: Scheduler): Observable<T>;\n  static of<T>(item1: T, item2: T, item3: T, item4: T, item5: T, scheduler?: Scheduler): Observable<T>;\n  static of<T>(item1: T, item2: T, item3: T, item4: T, item5: T, item6: T, scheduler?: Scheduler): Observable<T>;\n  static of<T>(...array: Array<T | Scheduler>): Observable<T>;\n  /**\n   * Creates an Observable that emits some values you specify as arguments,\n   * immediately one after the other, and then emits a complete notification.\n   *\n   * <span class=\"informal\">Emits the arguments you provide, then completes.\n   * </span>\n   *\n   * <img src=\"./img/of.png\" width=\"100%\">\n   *\n   * This static operator is useful for creating a simple Observable that only\n   * emits the arguments given, and the complete notification thereafter. It can\n   * be used for composing with other Observables, such as with {@link concat}.\n   * By default, it uses a `null` Scheduler, which means the `next`\n   * notifications are sent synchronously, although with a different Scheduler\n   * it is possible to determine when those notifications will be delivered.\n   *\n   * @example <caption>Emit 10, 20, 30, then 'a', 'b', 'c', then start ticking every second.</caption>\n   * var numbers = Rx.Observable.of(10, 20, 30);\n   * var letters = Rx.Observable.of('a', 'b', 'c');\n   * var interval = Rx.Observable.interval(1000);\n   * var result = numbers.concat(letters).concat(interval);\n   * result.subscribe(x => console.log(x));\n   *\n   * @see {@link create}\n   * @see {@link empty}\n   * @see {@link never}\n   * @see {@link throw}\n   *\n   * @param {...T} values Arguments that represent `next` values to be emitted.\n   * @param {Scheduler} [scheduler] A {@link Scheduler} to use for scheduling\n   * the emissions of the `next` notifications.\n   * @return {Observable<T>} An Observable that emits each given input value.\n   * @static true\n   * @name of\n   * @owner Observable\n   */\n  static of<T>(...array: Array<T | Scheduler>): Observable<T> {\n    let scheduler = <Scheduler>array[array.length - 1];\n    if (isScheduler(scheduler)) {\n      array.pop();\n    } else {\n      scheduler = null;\n    }\n\n    const len = array.length;\n    if (len > 1) {\n      return new ArrayObservable<T>(<any>array, scheduler);\n    } else if (len === 1) {\n      return new ScalarObservable<T>(<any>array[0], scheduler);\n    } else {\n      return new EmptyObservable<T>(scheduler);\n    }\n  }\n\n  static dispatch(state: any) {\n\n    const { array, index, count, subscriber } = state;\n\n    if (index >= count) {\n      subscriber.complete();\n      return;\n    }\n\n    subscriber.next(array[index]);\n\n    if (subscriber.closed) {\n      return;\n    }\n\n    state.index = index + 1;\n\n    (<any> this).schedule(state);\n  }\n\n  // value used if Array has one value and _isScalar\n  value: any;\n\n  constructor(private array: T[], private scheduler?: Scheduler) {\n    super();\n    if (!scheduler && array.length === 1) {\n      this._isScalar = true;\n      this.value = array[0];\n    }\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>): TeardownLogic {\n    let index = 0;\n    const array = this.array;\n    const count = array.length;\n    const scheduler = this.scheduler;\n\n    if (scheduler) {\n      return scheduler.schedule(ArrayObservable.dispatch, 0, {\n        array, index, count, subscriber\n      });\n    } else {\n      for (let i = 0; i < count && !subscriber.closed; i++) {\n        subscriber.next(array[i]);\n      }\n      subscriber.complete();\n    }\n  }\n}\n","import { Subscriber } from './Subscriber';\nimport { InnerSubscriber } from './InnerSubscriber';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class OuterSubscriber<T, R> extends Subscriber<T> {\n  notifyNext(outerValue: T, innerValue: R,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    this.destination.next(innerValue);\n  }\n\n  notifyError(error: any, innerSub: InnerSubscriber<T, R>): void {\n    this.destination.error(error);\n  }\n\n  notifyComplete(innerSub: InnerSubscriber<T, R>): void {\n    this.destination.complete();\n  }\n}\n","export function isPromise<T>(value: any | Promise<T>): value is Promise<T> {\n  return value && typeof (<any>value).subscribe !== 'function' && typeof (value as any).then === 'function';\n}\n","import { Subscriber } from './Subscriber';\nimport { OuterSubscriber } from './OuterSubscriber';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class InnerSubscriber<T, R> extends Subscriber<R> {\n  private index: number = 0;\n\n  constructor(private parent: OuterSubscriber<T, R>, private outerValue: T, private outerIndex: number) {\n    super();\n  }\n\n  protected _next(value: R): void {\n    this.parent.notifyNext(this.outerValue, value, this.outerIndex, this.index++, this);\n  }\n\n  protected _error(error: any): void {\n    this.parent.notifyError(error, this);\n    this.unsubscribe();\n  }\n\n  protected _complete(): void {\n    this.parent.notifyComplete(this);\n    this.unsubscribe();\n  }\n}\n","import { root } from './root';\nimport { isArray } from './isArray';\nimport { isPromise } from './isPromise';\nimport { Subscriber } from '../Subscriber';\nimport { Observable, ObservableInput } from '../Observable';\nimport { $$iterator } from '../symbol/iterator';\nimport { Subscription } from '../Subscription';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { $$observable } from '../symbol/observable';\n\nexport function subscribeToResult<T, R>(outerSubscriber: OuterSubscriber<T, R>,\n                                        result: any,\n                                        outerValue?: T,\n                                        outerIndex?: number): Subscription;\nexport function subscribeToResult<T>(outerSubscriber: OuterSubscriber<any, any>,\n                                     result: ObservableInput<T>,\n                                     outerValue?: T,\n                                     outerIndex?: number): Subscription {\n  let destination: Subscriber<any> = new InnerSubscriber(outerSubscriber, outerValue, outerIndex);\n\n  if (destination.closed) {\n    return null;\n  }\n\n  if (result instanceof Observable) {\n    if (result._isScalar) {\n      destination.next((<any>result).value);\n      destination.complete();\n      return null;\n    } else {\n      return result.subscribe(destination);\n    }\n  }\n\n  if (isArray(result)) {\n    for (let i = 0, len = result.length; i < len && !destination.closed; i++) {\n      destination.next(result[i]);\n    }\n    if (!destination.closed) {\n      destination.complete();\n    }\n  } else if (isPromise(result)) {\n    result.then(\n      (value) => {\n        if (!destination.closed) {\n          destination.next(<any>value);\n          destination.complete();\n        }\n      },\n      (err: any) => destination.error(err)\n    )\n    .then(null, (err: any) => {\n      // Escaping the Promise trap: globally throw unhandled errors\n      root.setTimeout(() => { throw err; });\n    });\n    return destination;\n  } else if (typeof result[$$iterator] === 'function') {\n    const iterator = <any>result[$$iterator]();\n    do {\n      let item = iterator.next();\n      if (item.done) {\n        destination.complete();\n        break;\n      }\n      destination.next(item.value);\n      if (destination.closed) {\n        break;\n      }\n    } while (true);\n  } else if (typeof result[$$observable] === 'function') {\n    const obs = result[$$observable]();\n    if (typeof obs.subscribe !== 'function') {\n      destination.error(new Error('invalid observable'));\n    } else {\n      return obs.subscribe(new InnerSubscriber(outerSubscriber, outerValue, outerIndex));\n    }\n  } else {\n    destination.error(new TypeError('unknown type returned'));\n  }\n  return null;\n}\n","import { Observable, ObservableInput } from '../Observable';\nimport { ArrayObservable } from '../observable/ArrayObservable';\nimport { isArray } from '../util/isArray';\nimport { Operator } from '../Operator';\nimport { PartialObserver } from '../Observer';\nimport { Subscriber } from '../Subscriber';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { $$iterator } from '../symbol/iterator';\n\n/**\n * @param observables\n * @return {Observable<R>}\n * @method zip\n * @owner Observable\n */\nexport function zipProto<R>(...observables: Array<ObservableInput<any> | ((...values: Array<any>) => R)>): Observable<R> {\n  observables.unshift(this);\n  return zipStatic.apply(this, observables);\n}\n\n/* tslint:disable:max-line-length */\nexport interface ZipSignature<T> {\n  <R>(project: (v1: T) => R): Observable<R>;\n  <T2, R>(v2: ObservableInput<T2>, project: (v1: T, v2: T2) => R): Observable<R>;\n  <T2, T3, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, project: (v1: T, v2: T2, v3: T3) => R): Observable<R>;\n  <T2, T3, T4, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, project: (v1: T, v2: T2, v3: T3, v4: T4) => R): Observable<R>;\n  <T2, T3, T4, T5, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, project: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5) => R): Observable<R>;\n  <T2, T3, T4, T5, T6, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>, project: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5, v6: T6) => R): Observable<R>;\n\n  <T2>(v2: ObservableInput<T2>): Observable<[T, T2]>;\n  <T2, T3>(v2: ObservableInput<T2>, v3: ObservableInput<T3>): Observable<[T, T2, T3]>;\n  <T2, T3, T4>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>): Observable<[T, T2, T3, T4]>;\n  <T2, T3, T4, T5>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>): Observable<[T, T2, T3, T4, T5]>;\n  <T2, T3, T4, T5, T6>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>): Observable<[T, T2, T3, T4, T5, T6]>;\n\n  <R>(...observables: Array<ObservableInput<T> | ((...values: Array<T>) => R)>): Observable<R>;\n  <R>(array: Array<ObservableInput<T>>): Observable<R>;\n  <TOther, R>(array: Array<ObservableInput<TOther>>, project: (v1: T, ...values: Array<TOther>) => R): Observable<R>;\n}\n/* tslint:enable:max-line-length */\n\n/* tslint:disable:max-line-length */\nexport function zipStatic<T, T2>(v1: ObservableInput<T>, v2: ObservableInput<T2>): Observable<[T, T2]>;\nexport function zipStatic<T, T2, T3>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>): Observable<[T, T2, T3]>;\nexport function zipStatic<T, T2, T3, T4>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>): Observable<[T, T2, T3, T4]>;\nexport function zipStatic<T, T2, T3, T4, T5>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>): Observable<[T, T2, T3, T4, T5]>;\nexport function zipStatic<T, T2, T3, T4, T5, T6>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>): Observable<[T, T2, T3, T4, T5, T6]>;\n\nexport function zipStatic<T, R>(v1: ObservableInput<T>, project: (v1: T) => R): Observable<R>;\nexport function zipStatic<T, T2, R>(v1: ObservableInput<T>, v2: ObservableInput<T2>, project: (v1: T, v2: T2) => R): Observable<R>;\nexport function zipStatic<T, T2, T3, R>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, project: (v1: T, v2: T2, v3: T3) => R): Observable<R>;\nexport function zipStatic<T, T2, T3, T4, R>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, project: (v1: T, v2: T2, v3: T3, v4: T4) => R): Observable<R>;\nexport function zipStatic<T, T2, T3, T4, T5, R>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, project: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5) => R): Observable<R>;\nexport function zipStatic<T, T2, T3, T4, T5, T6, R>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>, project: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5, v6: T6) => R): Observable<R>;\n\nexport function zipStatic<T>(array: ObservableInput<T>[]): Observable<T[]>;\nexport function zipStatic<R>(array: ObservableInput<any>[]): Observable<R>;\nexport function zipStatic<T, R>(array: ObservableInput<T>[], project: (...values: Array<T>) => R): Observable<R>;\nexport function zipStatic<R>(array: ObservableInput<any>[], project: (...values: Array<any>) => R): Observable<R>;\n\nexport function zipStatic<T>(...observables: Array<ObservableInput<T>>): Observable<T[]>;\nexport function zipStatic<T, R>(...observables: Array<ObservableInput<T> | ((...values: Array<T>) => R)>): Observable<R>;\nexport function zipStatic<R>(...observables: Array<ObservableInput<any> | ((...values: Array<any>) => R)>): Observable<R>;\n/* tslint:enable:max-line-length */\n\n/**\n * @param observables\n * @return {Observable<R>}\n * @static true\n * @name zip\n * @owner Observable\n */\nexport function zipStatic<T, R>(...observables: Array<ObservableInput<any> | ((...values: Array<any>) => R)>): Observable<R> {\n  const project = <((...ys: Array<any>) => R)> observables[observables.length - 1];\n  if (typeof project === 'function') {\n    observables.pop();\n  }\n  return new ArrayObservable(observables).lift(new ZipOperator(project));\n}\n\nexport class ZipOperator<T, R> implements Operator<T, R> {\n\n  project: (...values: Array<any>) => R;\n\n  constructor(project?: (...values: Array<any>) => R) {\n    this.project = project;\n  }\n\n  call(subscriber: Subscriber<R>, source: any): any {\n    return source._subscribe(new ZipSubscriber(subscriber, this.project));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class ZipSubscriber<T, R> extends Subscriber<T> {\n  private index = 0;\n  private values: any;\n  private project: (...values: Array<any>) => R;\n  private iterators: LookAheadIterator<any>[] = [];\n  private active = 0;\n\n  constructor(destination: Subscriber<R>,\n              project?: (...values: Array<any>) => R,\n              values: any = Object.create(null)) {\n    super(destination);\n    this.project = (typeof project === 'function') ? project : null;\n    this.values = values;\n  }\n\n  protected _next(value: any) {\n    const iterators = this.iterators;\n    const index = this.index++;\n    if (isArray(value)) {\n      iterators.push(new StaticArrayIterator(value));\n    } else if (typeof value[$$iterator] === 'function') {\n      iterators.push(new StaticIterator(value[$$iterator]()));\n    } else {\n      iterators.push(new ZipBufferIterator(this.destination, this, value, index));\n    }\n  }\n\n  protected _complete() {\n    const iterators = this.iterators;\n    const len = iterators.length;\n    this.active = len;\n    for (let i = 0; i < len; i++) {\n      let iterator: ZipBufferIterator<any, any> = <any>iterators[i];\n      if (iterator.stillUnsubscribed) {\n        this.add(iterator.subscribe(iterator, i));\n      } else {\n        this.active--; // not an observable\n      }\n    }\n  }\n\n  notifyInactive() {\n    this.active--;\n    if (this.active === 0) {\n      this.destination.complete();\n    }\n  }\n\n  checkIterators() {\n    const iterators = this.iterators;\n    const len = iterators.length;\n    const destination = this.destination;\n\n    // abort if not all of them have values\n    for (let i = 0; i < len; i++) {\n      let iterator = iterators[i];\n      if (typeof iterator.hasValue === 'function' && !iterator.hasValue()) {\n        return;\n      }\n    }\n\n    let shouldComplete = false;\n    const args: any[] = [];\n    for (let i = 0; i < len; i++) {\n      let iterator = iterators[i];\n      let result = iterator.next();\n\n      // check to see if it's completed now that you've gotten\n      // the next value.\n      if (iterator.hasCompleted()) {\n        shouldComplete = true;\n      }\n\n      if (result.done) {\n        destination.complete();\n        return;\n      }\n\n      args.push(result.value);\n    }\n\n    if (this.project) {\n      this._tryProject(args);\n    } else {\n      destination.next(args);\n    }\n\n    if (shouldComplete) {\n      destination.complete();\n    }\n  }\n\n  protected _tryProject(args: any[]) {\n    let result: any;\n    try {\n      result = this.project.apply(this, args);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    this.destination.next(result);\n  }\n}\n\ninterface LookAheadIterator<T> extends Iterator<T> {\n  hasValue(): boolean;\n  hasCompleted(): boolean;\n}\n\nclass StaticIterator<T> implements LookAheadIterator<T> {\n  private nextResult: IteratorResult<T>;\n\n  constructor(private iterator: Iterator<T>) {\n    this.nextResult = iterator.next();\n  }\n\n  hasValue() {\n    return true;\n  }\n\n  next(): IteratorResult<T> {\n    const result = this.nextResult;\n    this.nextResult = this.iterator.next();\n    return result;\n  }\n\n  hasCompleted() {\n    const nextResult = this.nextResult;\n    return nextResult && nextResult.done;\n  }\n}\n\nclass StaticArrayIterator<T> implements LookAheadIterator<T> {\n  private index = 0;\n  private length = 0;\n\n  constructor(private array: T[]) {\n    this.length = array.length;\n  }\n\n  [$$iterator]() {\n    return this;\n  }\n\n  next(value?: any): IteratorResult<T> {\n    const i = this.index++;\n    const array = this.array;\n    return i < this.length ? { value: array[i], done: false } : { value: null, done: true };\n  }\n\n  hasValue() {\n    return this.array.length > this.index;\n  }\n\n  hasCompleted() {\n    return this.array.length === this.index;\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass ZipBufferIterator<T, R> extends OuterSubscriber<T, R> implements LookAheadIterator<T> {\n  stillUnsubscribed = true;\n  buffer: T[] = [];\n  isComplete = false;\n\n  constructor(destination: PartialObserver<T>,\n              private parent: ZipSubscriber<T, R>,\n              private observable: Observable<T>,\n              private index: number) {\n    super(destination);\n  }\n\n  [$$iterator]() {\n    return this;\n  }\n\n  // NOTE: there is actually a name collision here with Subscriber.next and Iterator.next\n  //    this is legit because `next()` will never be called by a subscription in this case.\n  next(): IteratorResult<T> {\n    const buffer = this.buffer;\n    if (buffer.length === 0 && this.isComplete) {\n      return { value: null, done: true };\n    } else {\n      return { value: buffer.shift(), done: false };\n    }\n  }\n\n  hasValue() {\n    return this.buffer.length > 0;\n  }\n\n  hasCompleted() {\n    return this.buffer.length === 0 && this.isComplete;\n  }\n\n  notifyComplete() {\n    if (this.buffer.length > 0) {\n      this.isComplete = true;\n      this.parent.notifyInactive();\n    } else {\n      this.destination.complete();\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: any,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    this.buffer.push(innerValue);\n    this.parent.checkIterators();\n  }\n\n  subscribe(value: any, index: number) {\n    return subscribeToResult<any, any>(this, this.observable, this, index);\n  }\n}\n","import { ZipOperator } from './zip';\nimport { Observable } from '../Observable';\n\n/**\n * @param project\n * @return {Observable<R>|WebSocketSubject<T>|Observable<T>}\n * @method zipAll\n * @owner Observable\n */\nexport function zipAll<T, R>(project?: (...values: Array<any>) => R): Observable<R> {\n  return this.lift(new ZipOperator(project));\n}\n\nexport interface ZipAllSignature<T> {\n  <R>(project?: (...values: Array<T>) => R): Observable<R>;\n}\n","\nimport { Observable } from '../../Observable';\nimport { zipAll, ZipAllSignature } from '../../operator/zipAll';\n\nObservable.prototype.zipAll = zipAll;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    zipAll: ZipAllSignature<T>;\n  }\n}","import { Subject } from './Subject';\nimport { Subscriber } from './Subscriber';\nimport { Subscription } from './Subscription';\n\n/**\n * @class AsyncSubject<T>\n */\nexport class AsyncSubject<T> extends Subject<T> {\n  private value: T = null;\n  private hasNext: boolean = false;\n  private hasCompleted: boolean = false;\n\n  protected _subscribe(subscriber: Subscriber<any>): Subscription {\n    if (this.hasCompleted && this.hasNext) {\n      subscriber.next(this.value);\n      subscriber.complete();\n      return Subscription.EMPTY;\n    } else if (this.hasError) {\n      subscriber.error(this.thrownError);\n      return Subscription.EMPTY;\n    }\n\n    return super._subscribe(subscriber);\n  }\n\n  next(value: T): void {\n    if (!this.hasCompleted) {\n      this.value = value;\n      this.hasNext = true;\n    }\n  }\n\n  complete(): void {\n    this.hasCompleted = true;\n    if (this.hasNext) {\n      super.next(this.value);\n    }\n    super.complete();\n  }\n}\n","import { Observable } from '../Observable';\nimport { Scheduler } from '../Scheduler';\nimport { Operator } from '../Operator';\nimport { PartialObserver } from '../Observer';\nimport { Subscriber } from '../Subscriber';\nimport { Notification } from '../Notification';\nimport { TeardownLogic } from '../Subscription';\n\n/**\n * @see {@link Notification}\n *\n * @param scheduler\n * @param delay\n * @return {Observable<R>|WebSocketSubject<T>|Observable<T>}\n * @method observeOn\n * @owner Observable\n */\nexport function observeOn<T>(scheduler: Scheduler, delay: number = 0): Observable<T> {\n  return this.lift(new ObserveOnOperator(scheduler, delay));\n}\n\nexport interface ObserveOnSignature<T> {\n  (scheduler: Scheduler, delay?: number): Observable<T>;\n}\n\nexport class ObserveOnOperator<T> implements Operator<T, T> {\n  constructor(private scheduler: Scheduler, private delay: number = 0) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source._subscribe(new ObserveOnSubscriber(subscriber, this.scheduler, this.delay));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class ObserveOnSubscriber<T> extends Subscriber<T> {\n  static dispatch(arg: ObserveOnMessage) {\n    const { notification, destination } = arg;\n    notification.observe(destination);\n  }\n\n  constructor(destination: Subscriber<T>,\n              private scheduler: Scheduler,\n              private delay: number = 0) {\n    super(destination);\n  }\n\n  private scheduleMessage(notification: Notification<any>): void {\n     this.add(this.scheduler.schedule(ObserveOnSubscriber.dispatch,\n                                      this.delay,\n                                      new ObserveOnMessage(notification, this.destination)));\n   }\n\n  protected _next(value: T): void {\n    this.scheduleMessage(Notification.createNext(value));\n  }\n\n  protected _error(err: any): void {\n    this.scheduleMessage(Notification.createError(err));\n  }\n\n  protected _complete(): void {\n    this.scheduleMessage(Notification.createComplete());\n  }\n}\n\nexport class ObserveOnMessage {\n  constructor(public notification: Notification<any>,\n              public destination: PartialObserver<any>) {\n  }\n}\n","import { Subject } from './Subject';\nimport { Scheduler } from './Scheduler';\nimport { queue } from './scheduler/queue';\nimport { Subscriber } from './Subscriber';\nimport { Subscription } from './Subscription';\nimport { ObserveOnSubscriber } from './operator/observeOn';\n\n/**\n * @class ReplaySubject<T>\n */\nexport class ReplaySubject<T> extends Subject<T> {\n  private _events: ReplayEvent<T>[] = [];\n  private _bufferSize: number;\n  private _windowTime: number;\n\n  constructor(bufferSize: number = Number.POSITIVE_INFINITY,\n              windowTime: number = Number.POSITIVE_INFINITY,\n              private scheduler?: Scheduler) {\n    super();\n    this._bufferSize = bufferSize < 1 ? 1 : bufferSize;\n    this._windowTime = windowTime < 1 ? 1 : windowTime;\n  }\n\n  next(value: T): void {\n    const now = this._getNow();\n    this._events.push(new ReplayEvent(now, value));\n    this._trimBufferThenGetEvents();\n    super.next(value);\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>): Subscription {\n    const _events = this._trimBufferThenGetEvents();\n    const scheduler = this.scheduler;\n\n    if (scheduler) {\n      subscriber.add(subscriber = new ObserveOnSubscriber<T>(subscriber, scheduler));\n    }\n\n    const len = _events.length;\n    for (let i = 0; i < len && !subscriber.closed; i++) {\n      subscriber.next(_events[i].value);\n    }\n\n    return super._subscribe(subscriber);\n  }\n\n  _getNow(): number {\n    return (this.scheduler || queue).now();\n  }\n\n  private _trimBufferThenGetEvents(): ReplayEvent<T>[] {\n    const now = this._getNow();\n    const _bufferSize = this._bufferSize;\n    const _windowTime = this._windowTime;\n    const _events = this._events;\n\n    let eventsCount = _events.length;\n    let spliceCount = 0;\n\n    // Trim events that fall out of the time window.\n    // Start at the front of the list. Break early once\n    // we encounter an event that falls within the window.\n    while (spliceCount < eventsCount) {\n      if ((now - _events[spliceCount].time) < _windowTime) {\n        break;\n      }\n      spliceCount++;\n    }\n\n    if (eventsCount > _bufferSize) {\n      spliceCount = Math.max(spliceCount, eventsCount - _bufferSize);\n    }\n\n    if (spliceCount > 0) {\n      _events.splice(0, spliceCount);\n    }\n\n    return _events;\n  }\n}\n\nclass ReplayEvent<T> {\n  constructor(public time: number, public value: T) {\n  }\n}\n","import { Subject } from './Subject';\nimport { Subscriber } from './Subscriber';\nimport { Subscription, ISubscription } from './Subscription';\nimport { ObjectUnsubscribedError } from './util/ObjectUnsubscribedError';\n\n/**\n * @class BehaviorSubject<T>\n */\nexport class BehaviorSubject<T> extends Subject<T> {\n\n  constructor(private _value: T) {\n    super();\n  }\n\n  get value(): T {\n    return this.getValue();\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>): Subscription {\n    const subscription = super._subscribe(subscriber);\n    if (subscription && !(<ISubscription>subscription).closed) {\n      subscriber.next(this._value);\n    }\n    return subscription;\n  }\n\n  getValue(): T {\n    if (this.hasError) {\n      throw this.thrownError;\n    } else if (this.closed) {\n      throw new ObjectUnsubscribedError();\n    } else {\n      return this._value;\n    }\n  }\n\n  next(value: T): void {\n    super.next(this._value = value);\n  }\n}\n","import { Subject } from '../Subject';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { ConnectableObservable } from '../observable/ConnectableObservable';\n\nexport class MulticastObservable<T> extends Observable<T> {\n  constructor(protected source: Observable<T>,\n              private subjectFactory: () => Subject<T>,\n              private selector: (source: Observable<T>) => Observable<T>) {\n    super();\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>): Subscription {\n    const { selector, source } = this;\n    const connectable = new ConnectableObservable(source, this.subjectFactory);\n    const subscription = selector(connectable).subscribe(subscriber);\n    subscription.add(connectable.connect());\n    return subscription;\n  }\n}\n","import { Subject, SubjectSubscriber } from '../Subject';\nimport { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription, TeardownLogic } from '../Subscription';\n\n/**\n * @class ConnectableObservable<T>\n */\nexport class ConnectableObservable<T> extends Observable<T> {\n\n  protected _subject: Subject<T>;\n  protected _refCount: number = 0;\n  protected _connection: Subscription;\n\n  constructor(protected source: Observable<T>,\n              protected subjectFactory: () => Subject<T>) {\n    super();\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>) {\n    return this.getSubject().subscribe(subscriber);\n  }\n\n  protected getSubject(): Subject<T> {\n    const subject = this._subject;\n    if (!subject || subject.isStopped) {\n      this._subject = this.subjectFactory();\n    }\n    return this._subject;\n  }\n\n  connect(): Subscription {\n    let connection = this._connection;\n    if (!connection) {\n      connection = this._connection = new Subscription();\n      connection.add(this.source\n        .subscribe(new ConnectableSubscriber(this.getSubject(), this)));\n      if (connection.closed) {\n        this._connection = null;\n        connection = Subscription.EMPTY;\n      } else {\n        this._connection = connection;\n      }\n    }\n    return connection;\n  }\n\n  refCount(): Observable<T> {\n    return this.lift(new RefCountOperator<T>(this));\n  }\n}\n\nclass ConnectableSubscriber<T> extends SubjectSubscriber<T> {\n  constructor(destination: Subject<T>,\n              private connectable: ConnectableObservable<T>) {\n    super(destination);\n  }\n  protected _error(err: any): void {\n    this._unsubscribe();\n    super._error(err);\n  }\n  protected _complete(): void {\n    this._unsubscribe();\n    super._complete();\n  }\n  protected _unsubscribe() {\n    const { connectable } = this;\n    if (connectable) {\n      this.connectable = null;\n      const connection = (<any> connectable)._connection;\n      (<any> connectable)._refCount = 0;\n      (<any> connectable)._subject = null;\n      (<any> connectable)._connection = null;\n      if (connection) {\n        connection.unsubscribe();\n      }\n    }\n  }\n}\n\nclass RefCountOperator<T> implements Operator<T, T> {\n  constructor(private connectable: ConnectableObservable<T>) {\n  }\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n\n    const { connectable } = this;\n    (<any> connectable)._refCount++;\n\n    const refCounter = new RefCountSubscriber(subscriber, connectable);\n    const subscription = source._subscribe(refCounter);\n\n    if (!refCounter.closed) {\n      (<any> refCounter).connection = connectable.connect();\n    }\n\n    return subscription;\n  }\n}\n\nclass RefCountSubscriber<T> extends Subscriber<T> {\n\n  private connection: Subscription;\n\n  constructor(destination: Subscriber<T>,\n              private connectable: ConnectableObservable<T>) {\n    super(destination);\n  }\n\n  protected _unsubscribe() {\n\n    const { connectable } = this;\n    if (!connectable) {\n      this.connection = null;\n      return;\n    }\n\n    this.connectable = null;\n    const refCount = (<any> connectable)._refCount;\n    if (refCount <= 0) {\n      this.connection = null;\n      return;\n    }\n\n    (<any> connectable)._refCount = refCount - 1;\n    if (refCount > 1) {\n      this.connection = null;\n      return;\n    }\n\n    ///\n    // Compare the local RefCountSubscriber's connection Subscription to the\n    // connection Subscription on the shared ConnectableObservable. In cases\n    // where the ConnectableObservable source synchronously emits values, and\n    // the RefCountSubscriber's dowstream Observers synchronously unsubscribe,\n    // execution continues to here before the RefCountOperator has a chance to\n    // supply the RefCountSubscriber with the shared connection Subscription.\n    // For example:\n    // ```\n    // Observable.range(0, 10)\n    //   .publish()\n    //   .refCount()\n    //   .take(5)\n    //   .subscribe();\n    // ```\n    // In order to account for this case, RefCountSubscriber should only dispose\n    // the ConnectableObservable's shared connection Subscription if the\n    // connection Subscription exists, *and* either:\n    //   a. RefCountSubscriber doesn't have a reference to the shared connection\n    //      Subscription yet, or,\n    //   b. RefCountSubscriber's connection Subscription reference is identical\n    //      to the shared connection Subscription\n    ///\n    const { connection } = this;\n    const sharedConnection = (<any> connectable)._connection;\n    this.connection = null;\n\n    if (sharedConnection && (!connection || sharedConnection === connection)) {\n      sharedConnection.unsubscribe();\n    }\n  }\n}\n","/**\n * An error thrown when an Observable or a sequence was queried but has no\n * elements.\n *\n * @see {@link first}\n * @see {@link last}\n * @see {@link single}\n *\n * @class EmptyError\n */\nexport class EmptyError extends Error {\n  constructor() {\n    const err: any = super('no elements in sequence');\n    (<any> this).name = err.name = 'EmptyError';\n    (<any> this).stack = err.stack;\n    (<any> this).message = err.message;\n  }\n}\n","/**\n * An error thrown when an element was queried at a certain index of an\n * Observable, but no such index or position exists in that sequence.\n *\n * @see {@link elementAt}\n * @see {@link take}\n * @see {@link takeLast}\n *\n * @class ArgumentOutOfRangeError\n */\nexport class ArgumentOutOfRangeError extends Error {\n  constructor() {\n    const err: any = super('argument out of range');\n    (<any> this).name = err.name = 'ArgumentOutOfRangeError';\n    (<any> this).stack = err.stack;\n    (<any> this).message = err.message;\n  }\n}\n","import { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Scheduler } from '../Scheduler';\nimport { async } from '../scheduler/async';\n\n/**\n * @param scheduler\n * @return {Observable<TimeInterval<any>>|WebSocketSubject<T>|Observable<T>}\n * @method timeInterval\n * @owner Observable\n */\nexport function timeInterval<T>(scheduler: Scheduler = async): Observable<TimeInterval<T>> {\n  return this.lift(new TimeIntervalOperator(scheduler));\n}\n\nexport interface TimeIntervalSignature<T> {\n  (scheduler?: Scheduler): Observable<TimeInterval<T>>;\n}\n\nexport class TimeInterval<T> {\n  constructor(public value: T, public interval: number) {\n\n  }\n};\n\nclass TimeIntervalOperator<T> implements Operator<T, TimeInterval<T>> {\n  constructor(private scheduler: Scheduler) {\n\n  }\n\n  call(observer: Subscriber<TimeInterval<T>>, source: any): any {\n    return source._subscribe(new TimeIntervalSubscriber(observer, this.scheduler));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass TimeIntervalSubscriber<T> extends Subscriber<T> {\n  private lastTime: number = 0;\n\n  constructor(destination: Subscriber<TimeInterval<T>>, private scheduler: Scheduler) {\n    super(destination);\n\n    this.lastTime = scheduler.now();\n  }\n\n  protected _next(value: T) {\n    let now = this.scheduler.now();\n    let span = now - this.lastTime;\n    this.lastTime = now;\n\n    this.destination.next(new TimeInterval(value, span));\n  }\n}\n","import { Operator } from '../Operator';\r\nimport { Observable } from '../Observable';\r\nimport { Subscriber } from '../Subscriber';\r\nimport { Scheduler } from '../Scheduler';\r\nimport { async } from '../scheduler/async';\r\n\r\n/**\r\n * @param scheduler\r\n * @return {Observable<Timestamp<any>>|WebSocketSubject<T>|Observable<T>}\r\n * @method timestamp\r\n * @owner Observable\r\n */\r\nexport function timestamp<T>(scheduler: Scheduler = async): Observable<Timestamp<T>> {\r\n  return this.lift(new TimestampOperator(scheduler));\r\n}\r\n\r\nexport interface TimestampSignature<T> {\r\n  (scheduler?: Scheduler): Observable<Timestamp<T>>;\r\n}\r\n\r\nexport class Timestamp<T> {\r\n  constructor(public value: T, public timestamp: number) {\r\n  }\r\n};\r\n\r\nclass TimestampOperator<T> implements Operator<T, Timestamp<T>> {\r\n  constructor(private scheduler: Scheduler) {\r\n  }\r\n\r\n  call(observer: Subscriber<Timestamp<T>>, source: any): any {\r\n    return source._subscribe(new TimestampSubscriber(observer, this.scheduler));\r\n  }\r\n}\r\n\r\nclass TimestampSubscriber<T> extends Subscriber<T> {\r\n  constructor(destination: Subscriber<Timestamp<T>>, private scheduler: Scheduler) {\r\n    super(destination);\r\n  }\r\n\r\n  protected _next(value: T): void {\r\n    const now = this.scheduler.now();\r\n\r\n    this.destination.next(new Timestamp(value, now));\r\n  }\r\n}\r\n","import { PartialObserver } from './Observer';\nimport { Observable } from './Observable';\n\n/**\n * Represents a push-based event or value that an {@link Observable} can emit.\n * This class is particularly useful for operators that manage notifications,\n * like {@link materialize}, {@link dematerialize}, {@link observeOn}, and\n * others. Besides wrapping the actual delivered value, it also annotates it\n * with metadata of, for instance, what type of push message it is (`next`,\n * `error`, or `complete`).\n *\n * @see {@link materialize}\n * @see {@link dematerialize}\n * @see {@link observeOn}\n *\n * @class Notification<T>\n */\nexport class Notification<T> {\n  hasValue: boolean;\n\n  constructor(public kind: string, public value?: T, public exception?: any) {\n    this.hasValue = kind === 'N';\n  }\n\n  /**\n   * Delivers to the given `observer` the value wrapped by this Notification.\n   * @param {Observer} observer\n   * @return\n   */\n  observe(observer: PartialObserver<T>): any {\n    switch (this.kind) {\n      case 'N':\n        return observer.next && observer.next(this.value);\n      case 'E':\n        return observer.error && observer.error(this.exception);\n      case 'C':\n        return observer.complete && observer.complete();\n    }\n  }\n\n  /**\n   * Given some {@link Observer} callbacks, deliver the value represented by the\n   * current Notification to the correctly corresponding callback.\n   * @param {function(value: T): void} next An Observer `next` callback.\n   * @param {function(err: any): void} [error] An Observer `error` callback.\n   * @param {function(): void} [complete] An Observer `complete` callback.\n   * @return {any}\n   */\n  do(next: (value: T) => void, error?: (err: any) => void, complete?: () => void): any {\n    const kind = this.kind;\n    switch (kind) {\n      case 'N':\n        return next && next(this.value);\n      case 'E':\n        return error && error(this.exception);\n      case 'C':\n        return complete && complete();\n    }\n  }\n\n  /**\n   * Takes an Observer or its individual callback functions, and calls `observe`\n   * or `do` methods accordingly.\n   * @param {Observer|function(value: T): void} nextOrObserver An Observer or\n   * the `next` callback.\n   * @param {function(err: any): void} [error] An Observer `error` callback.\n   * @param {function(): void} [complete] An Observer `complete` callback.\n   * @return {any}\n   */\n  accept(nextOrObserver: PartialObserver<T> | ((value: T) => void), error?: (err: any) => void, complete?: () => void) {\n    if (nextOrObserver && typeof (<PartialObserver<T>>nextOrObserver).next === 'function') {\n      return this.observe(<PartialObserver<T>>nextOrObserver);\n    } else {\n      return this.do(<(value: T) => void>nextOrObserver, error, complete);\n    }\n  }\n\n  /**\n   * Returns a simple Observable that just delivers the notification represented\n   * by this Notification instance.\n   * @return {any}\n   */\n  toObservable(): Observable<T> {\n    const kind = this.kind;\n    switch (kind) {\n      case 'N':\n        return Observable.of(this.value);\n      case 'E':\n        return Observable.throw(this.exception);\n      case 'C':\n        return Observable.empty<T>();\n    }\n    throw new Error('unexpected notification kind value');\n  }\n\n  private static completeNotification: Notification<any> = new Notification('C');\n  private static undefinedValueNotification: Notification<any> = new Notification('N', undefined);\n\n  /**\n   * A shortcut to create a Notification instance of the type `next` from a\n   * given value.\n   * @param {T} value The `next` value.\n   * @return {Notification<T>} The \"next\" Notification representing the\n   * argument.\n   */\n  static createNext<T>(value: T): Notification<T> {\n    if (typeof value !== 'undefined') {\n      return new Notification('N', value);\n    }\n    return this.undefinedValueNotification;\n  }\n\n  /**\n   * A shortcut to create a Notification instance of the type `error` from a\n   * given error.\n   * @param {any} [err] The `error` exception.\n   * @return {Notification<T>} The \"error\" Notification representing the\n   * argument.\n   */\n  static createError<T>(err?: any): Notification<T> {\n    return new Notification('E', undefined, err);\n  }\n\n  /**\n   * A shortcut to create a Notification instance of the type `complete`.\n   * @return {Notification<any>} The valueless \"complete\" Notification.\n   */\n  static createComplete(): Notification<any> {\n    return this.completeNotification;\n  }\n}\n","import { Observable } from '../Observable';\nimport { Subscription } from '../Subscription';\nimport { Scheduler } from '../Scheduler';\nimport { TestMessage } from './TestMessage';\nimport { SubscriptionLog } from './SubscriptionLog';\nimport { SubscriptionLoggable } from './SubscriptionLoggable';\nimport { applyMixins } from '../util/applyMixins';\nimport { Subscriber } from '../Subscriber';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class ColdObservable<T> extends Observable<T> implements SubscriptionLoggable {\n  public subscriptions: SubscriptionLog[] = [];\n  scheduler: Scheduler;\n  logSubscribedFrame: () => number;\n  logUnsubscribedFrame: (index: number) => void;\n\n  constructor(public messages: TestMessage[],\n              scheduler: Scheduler) {\n    super(function (subscriber: Subscriber<any>) {\n      const observable: ColdObservable<T> = this;\n      const index = observable.logSubscribedFrame();\n      subscriber.add(new Subscription(() => {\n        observable.logUnsubscribedFrame(index);\n      }));\n      observable.scheduleMessages(subscriber);\n      return subscriber;\n    });\n    this.scheduler = scheduler;\n  }\n\n  scheduleMessages(subscriber: Subscriber<any>) {\n    const messagesLength = this.messages.length;\n    for (let i = 0; i < messagesLength; i++) {\n      const message = this.messages[i];\n      subscriber.add(\n        this.scheduler.schedule(({message, subscriber}) => { message.notification.observe(subscriber); },\n          message.frame,\n          {message, subscriber})\n      );\n    }\n  }\n}\napplyMixins(ColdObservable, [SubscriptionLoggable]);\n","/**\n * An error thrown when an action is invalid because the object has been\n * unsubscribed.\n *\n * @see {@link Subject}\n * @see {@link BehaviorSubject}\n *\n * @class ObjectUnsubscribedError\n */\nexport class ObjectUnsubscribedError extends Error {\n  constructor() {\n    const err: any = super('object unsubscribed');\n    (<any> this).name = err.name = 'ObjectUnsubscribedError';\n    (<any> this).stack = err.stack;\n    (<any> this).message = err.message;\n  }\n}\n","import { Subject } from './Subject';\nimport { Observer } from './Observer';\nimport { Subscription } from './Subscription';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class SubjectSubscription<T> extends Subscription {\n  closed: boolean = false;\n\n  constructor(public subject: Subject<T>, public subscriber: Observer<T>) {\n    super();\n  }\n\n  unsubscribe() {\n    if (this.closed) {\n      return;\n    }\n\n    this.closed = true;\n\n    const subject = this.subject;\n    const observers = subject.observers;\n\n    this.subject = null;\n\n    if (!observers || observers.length === 0 || subject.isStopped || subject.closed) {\n      return;\n    }\n\n    const subscriberIndex = observers.indexOf(this.subscriber);\n\n    if (subscriberIndex !== -1) {\n      observers.splice(subscriberIndex, 1);\n    }\n  }\n}\n","import { Operator } from './Operator';\nimport { Observer } from './Observer';\nimport { Observable } from './Observable';\nimport { Subscriber } from './Subscriber';\nimport { ISubscription, Subscription } from './Subscription';\nimport { ObjectUnsubscribedError } from './util/ObjectUnsubscribedError';\nimport { SubjectSubscription } from './SubjectSubscription';\nimport { $$rxSubscriber } from './symbol/rxSubscriber';\n\n/**\n * @class SubjectSubscriber<T>\n */\nexport class SubjectSubscriber<T> extends Subscriber<T> {\n  constructor(protected destination: Subject<T>) {\n    super(destination);\n  }\n}\n\n/**\n * @class Subject<T>\n */\nexport class Subject<T> extends Observable<T> implements ISubscription {\n\n  [$$rxSubscriber]() {\n    return new SubjectSubscriber(this);\n  }\n\n  observers: Observer<T>[] = [];\n\n  closed = false;\n\n  isStopped = false;\n\n  hasError = false;\n\n  thrownError: any = null;\n\n  constructor() {\n    super();\n  }\n\n  static create: Function = <T>(destination: Observer<T>, source: Observable<T>): AnonymousSubject<T> => {\n    return new AnonymousSubject<T>(destination, source);\n  };\n\n  lift<T, R>(operator: Operator<T, R>): Observable<T> {\n    const subject = new AnonymousSubject(this, this);\n    subject.operator = operator;\n    return <any>subject;\n  }\n\n  next(value?: T) {\n    if (this.closed) {\n      throw new ObjectUnsubscribedError();\n    }\n    if (!this.isStopped) {\n      const { observers } = this;\n      const len = observers.length;\n      const copy = observers.slice();\n      for (let i = 0; i < len; i++) {\n        copy[i].next(value);\n      }\n    }\n  }\n\n  error(err: any) {\n    if (this.closed) {\n      throw new ObjectUnsubscribedError();\n    }\n    this.hasError = true;\n    this.thrownError = err;\n    this.isStopped = true;\n    const { observers } = this;\n    const len = observers.length;\n    const copy = observers.slice();\n    for (let i = 0; i < len; i++) {\n      copy[i].error(err);\n    }\n    this.observers.length = 0;\n  }\n\n  complete() {\n    if (this.closed) {\n      throw new ObjectUnsubscribedError();\n    }\n    this.isStopped = true;\n    const { observers } = this;\n    const len = observers.length;\n    const copy = observers.slice();\n    for (let i = 0; i < len; i++) {\n      copy[i].complete();\n    }\n    this.observers.length = 0;\n  }\n\n  unsubscribe() {\n    this.isStopped = true;\n    this.closed = true;\n    this.observers = null;\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>): Subscription {\n    if (this.closed) {\n      throw new ObjectUnsubscribedError();\n    } else if (this.hasError) {\n      subscriber.error(this.thrownError);\n      return Subscription.EMPTY;\n    } else if (this.isStopped) {\n      subscriber.complete();\n      return Subscription.EMPTY;\n    } else {\n      this.observers.push(subscriber);\n      return new SubjectSubscription(this, subscriber);\n    }\n  }\n\n  asObservable(): Observable<T> {\n    const observable = new Observable<T>();\n    (<any>observable).source = this;\n    return observable;\n  }\n}\n\n/**\n * @class AnonymousSubject<T>\n */\nexport class AnonymousSubject<T> extends Subject<T> {\n  constructor(protected destination?: Observer<T>, source?: Observable<T>) {\n    super();\n    this.source = source;\n  }\n\n  next(value: T) {\n    const { destination } = this;\n    if (destination && destination.next) {\n      destination.next(value);\n    }\n  }\n\n  error(err: any) {\n    const { destination } = this;\n    if (destination && destination.error) {\n      this.destination.error(err);\n    }\n  }\n\n  complete() {\n    const { destination } = this;\n    if (destination && destination.complete) {\n      this.destination.complete();\n    }\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>): Subscription {\n    const { source } = this;\n    if (source) {\n      return this.source.subscribe(subscriber);\n    } else {\n      return Subscription.EMPTY;\n    }\n  }\n}\n","import { Scheduler } from '../Scheduler';\nimport { SubscriptionLog } from './SubscriptionLog';\n\nexport class SubscriptionLoggable {\n  public subscriptions: SubscriptionLog[] = [];\n  scheduler: Scheduler;\n\n  logSubscribedFrame(): number {\n    this.subscriptions.push(new SubscriptionLog(this.scheduler.now()));\n    return this.subscriptions.length - 1;\n  }\n\n  logUnsubscribedFrame(index: number) {\n    const subscriptionLogs = this.subscriptions;\n    const oldSubscriptionLog = subscriptionLogs[index];\n    subscriptionLogs[index] = new SubscriptionLog(\n      oldSubscriptionLog.subscribedFrame,\n      this.scheduler.now()\n    );\n  }\n}\n","export function applyMixins(derivedCtor: any, baseCtors: any[]) {\n  for (let i = 0, len = baseCtors.length; i < len; i++) {\n    const baseCtor = baseCtors[i];\n    const propertyKeys = Object.getOwnPropertyNames(baseCtor.prototype);\n    for (let j = 0, len2 = propertyKeys.length; j < len2; j++) {\n      const name = propertyKeys[j];\n      derivedCtor.prototype[name] = baseCtor.prototype[name];\n    }\n  }\n}","import { Subject } from '../Subject';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { Scheduler } from '../Scheduler';\nimport { TestMessage } from './TestMessage';\nimport { SubscriptionLog } from './SubscriptionLog';\nimport { SubscriptionLoggable } from './SubscriptionLoggable';\nimport { applyMixins } from '../util/applyMixins';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class HotObservable<T> extends Subject<T> implements SubscriptionLoggable {\n  public subscriptions: SubscriptionLog[] = [];\n  scheduler: Scheduler;\n  logSubscribedFrame: () => number;\n  logUnsubscribedFrame: (index: number) => void;\n\n  constructor(public messages: TestMessage[],\n              scheduler: Scheduler) {\n    super();\n    this.scheduler = scheduler;\n  }\n\n  protected _subscribe(subscriber: Subscriber<any>): Subscription {\n    const subject: HotObservable<T> = this;\n    const index = subject.logSubscribedFrame();\n    subscriber.add(new Subscription(() => {\n      subject.logUnsubscribedFrame(index);\n    }));\n    return super._subscribe(subscriber);\n  }\n\n  setup() {\n    const subject = this;\n    const messagesLength = subject.messages.length;\n    /* tslint:disable:no-var-keyword */\n    for (var i = 0; i < messagesLength; i++) {\n      (() => {\n        var message = subject.messages[i];\n   /* tslint:enable */\n        subject.scheduler.schedule(\n          () => { message.notification.observe(subject); },\n          message.frame\n        );\n      })();\n    }\n  }\n}\napplyMixins(HotObservable, [SubscriptionLoggable]);\n","export class SubscriptionLog {\n  constructor(public subscribedFrame: number,\n              public unsubscribedFrame: number = Number.POSITIVE_INFINITY) {\n  }\n}","import { Observable } from '../Observable';\nimport { Notification } from '../Notification';\nimport { Subject } from '../Subject';\nimport { ColdObservable } from './ColdObservable';\nimport { HotObservable } from './HotObservable';\nimport { TestMessage } from './TestMessage';\nimport { SubscriptionLog } from './SubscriptionLog';\nimport { Subscription } from '../Subscription';\nimport { VirtualTimeScheduler, VirtualAction } from '../scheduler/VirtualTimeScheduler';\n\nconst defaultMaxFrame: number = 750;\n\ninterface FlushableTest {\n  ready: boolean;\n  actual?: any[];\n  expected?: any[];\n}\n\nexport type observableToBeFn = (marbles: string, values?: any, errorValue?: any) => void;\nexport type subscriptionLogsToBeFn = (marbles: string | string[]) => void;\n\nexport class TestScheduler extends VirtualTimeScheduler {\n  private hotObservables: HotObservable<any>[] = [];\n  private coldObservables: ColdObservable<any>[] = [];\n  private flushTests: FlushableTest[] = [];\n\n  constructor(public assertDeepEqual: (actual: any, expected: any) => boolean | void) {\n    super(VirtualAction, defaultMaxFrame);\n  }\n\n  createTime(marbles: string): number {\n    const indexOf: number = marbles.indexOf('|');\n    if (indexOf === -1) {\n      throw new Error('marble diagram for time should have a completion marker \"|\"');\n    }\n    return indexOf * TestScheduler.frameTimeFactor;\n  }\n\n  createColdObservable<T>(marbles: string, values?: any, error?: any): Observable<T> {\n    if (marbles.indexOf('^') !== -1) {\n      throw new Error('cold observable cannot have subscription offset \"^\"');\n    }\n    if (marbles.indexOf('!') !== -1) {\n      throw new Error('cold observable cannot have unsubscription marker \"!\"');\n    }\n    const messages = TestScheduler.parseMarbles(marbles, values, error);\n    const cold = new ColdObservable<T>(messages, this);\n    this.coldObservables.push(cold);\n    return cold;\n  }\n\n  createHotObservable<T>(marbles: string, values?: any, error?: any): Subject<T> {\n    if (marbles.indexOf('!') !== -1) {\n      throw new Error('hot observable cannot have unsubscription marker \"!\"');\n    }\n    const messages = TestScheduler.parseMarbles(marbles, values, error);\n    const subject = new HotObservable<T>(messages, this);\n    this.hotObservables.push(subject);\n    return subject;\n  }\n\n  private materializeInnerObservable(observable: Observable<any>,\n                                     outerFrame: number): TestMessage[] {\n    const messages: TestMessage[] = [];\n    observable.subscribe((value) => {\n      messages.push({ frame: this.frame - outerFrame, notification: Notification.createNext(value) });\n    }, (err) => {\n      messages.push({ frame: this.frame - outerFrame, notification: Notification.createError(err) });\n    }, () => {\n      messages.push({ frame: this.frame - outerFrame, notification: Notification.createComplete() });\n    });\n    return messages;\n  }\n\n  expectObservable(observable: Observable<any>,\n                   unsubscriptionMarbles: string = null): ({ toBe: observableToBeFn }) {\n    const actual: TestMessage[] = [];\n    const flushTest: FlushableTest = { actual, ready: false };\n    const unsubscriptionFrame = TestScheduler\n      .parseMarblesAsSubscriptions(unsubscriptionMarbles).unsubscribedFrame;\n    let subscription: Subscription;\n\n    this.schedule(() => {\n      subscription = observable.subscribe(x => {\n        let value = x;\n        // Support Observable-of-Observables\n        if (x instanceof Observable) {\n          value = this.materializeInnerObservable(value, this.frame);\n        }\n        actual.push({ frame: this.frame, notification: Notification.createNext(value) });\n      }, (err) => {\n        actual.push({ frame: this.frame, notification: Notification.createError(err) });\n      }, () => {\n        actual.push({ frame: this.frame, notification: Notification.createComplete() });\n      });\n    }, 0);\n\n    if (unsubscriptionFrame !== Number.POSITIVE_INFINITY) {\n      this.schedule(() => subscription.unsubscribe(), unsubscriptionFrame);\n    }\n\n    this.flushTests.push(flushTest);\n\n    return {\n      toBe(marbles: string, values?: any, errorValue?: any) {\n        flushTest.ready = true;\n        flushTest.expected = TestScheduler.parseMarbles(marbles, values, errorValue, true);\n      }\n    };\n  }\n\n  expectSubscriptions(actualSubscriptionLogs: SubscriptionLog[]): ({ toBe: subscriptionLogsToBeFn }) {\n    const flushTest: FlushableTest = { actual: actualSubscriptionLogs, ready: false };\n    this.flushTests.push(flushTest);\n    return {\n      toBe(marbles: string | string[]) {\n        const marblesArray: string[] = (typeof marbles === 'string') ? [marbles] : marbles;\n        flushTest.ready = true;\n        flushTest.expected = marblesArray.map(marbles =>\n          TestScheduler.parseMarblesAsSubscriptions(marbles)\n        );\n      }\n    };\n  }\n\n  flush() {\n    const hotObservables = this.hotObservables;\n    while (hotObservables.length > 0) {\n      hotObservables.shift().setup();\n    }\n\n    super.flush();\n    const readyFlushTests = this.flushTests.filter(test => test.ready);\n    while (readyFlushTests.length > 0) {\n      const test = readyFlushTests.shift();\n      this.assertDeepEqual(test.actual, test.expected);\n    }\n  }\n\n  static parseMarblesAsSubscriptions(marbles: string): SubscriptionLog {\n    if (typeof marbles !== 'string') {\n      return new SubscriptionLog(Number.POSITIVE_INFINITY);\n    }\n    const len = marbles.length;\n    let groupStart = -1;\n    let subscriptionFrame = Number.POSITIVE_INFINITY;\n    let unsubscriptionFrame = Number.POSITIVE_INFINITY;\n\n    for (let i = 0; i < len; i++) {\n      const frame = i * this.frameTimeFactor;\n      const c = marbles[i];\n      switch (c) {\n        case '-':\n        case ' ':\n          break;\n        case '(':\n          groupStart = frame;\n          break;\n        case ')':\n          groupStart = -1;\n          break;\n        case '^':\n          if (subscriptionFrame !== Number.POSITIVE_INFINITY) {\n            throw new Error('found a second subscription point \\'^\\' in a ' +\n              'subscription marble diagram. There can only be one.');\n          }\n          subscriptionFrame = groupStart > -1 ? groupStart : frame;\n          break;\n        case '!':\n          if (unsubscriptionFrame !== Number.POSITIVE_INFINITY) {\n            throw new Error('found a second subscription point \\'^\\' in a ' +\n              'subscription marble diagram. There can only be one.');\n          }\n          unsubscriptionFrame = groupStart > -1 ? groupStart : frame;\n          break;\n        default:\n          throw new Error('there can only be \\'^\\' and \\'!\\' markers in a ' +\n            'subscription marble diagram. Found instead \\'' + c + '\\'.');\n      }\n    }\n\n    if (unsubscriptionFrame < 0) {\n      return new SubscriptionLog(subscriptionFrame);\n    } else {\n      return new SubscriptionLog(subscriptionFrame, unsubscriptionFrame);\n    }\n  }\n\n  static parseMarbles(marbles: string,\n                      values?: any,\n                      errorValue?: any,\n                      materializeInnerObservables: boolean = false): TestMessage[] {\n    if (marbles.indexOf('!') !== -1) {\n      throw new Error('conventional marble diagrams cannot have the ' +\n        'unsubscription marker \"!\"');\n    }\n    const len = marbles.length;\n    const testMessages: TestMessage[] = [];\n    const subIndex = marbles.indexOf('^');\n    const frameOffset = subIndex === -1 ? 0 : (subIndex * -this.frameTimeFactor);\n    const getValue = typeof values !== 'object' ?\n      (x: any) => x :\n      (x: any) => {\n        // Support Observable-of-Observables\n        if (materializeInnerObservables && values[x] instanceof ColdObservable) {\n          return values[x].messages;\n        }\n        return values[x];\n      };\n    let groupStart = -1;\n\n    for (let i = 0; i < len; i++) {\n      const frame = i * this.frameTimeFactor + frameOffset;\n      let notification: Notification<any>;\n      const c = marbles[i];\n      switch (c) {\n        case '-':\n        case ' ':\n          break;\n        case '(':\n          groupStart = frame;\n          break;\n        case ')':\n          groupStart = -1;\n          break;\n        case '|':\n          notification = Notification.createComplete();\n          break;\n        case '^':\n          break;\n        case '#':\n          notification = Notification.createError(errorValue || 'error');\n          break;\n        default:\n          notification = Notification.createNext(getValue(c));\n          break;\n      }\n\n      if (notification) {\n        testMessages.push({ frame: groupStart > -1 ? groupStart : frame, notification });\n      }\n    }\n    return testMessages;\n  }\n}\n","import { AsyncAction } from './AsyncAction';\nimport { Subscription } from '../Subscription';\nimport { AsyncScheduler } from './AsyncScheduler';\n\nexport class VirtualTimeScheduler extends AsyncScheduler {\n\n  protected static frameTimeFactor: number = 10;\n\n  public frame: number = 0;\n  public index: number = -1;\n\n  constructor(SchedulerAction: typeof AsyncAction = VirtualAction,\n              public maxFrames: number = Number.POSITIVE_INFINITY) {\n    super(SchedulerAction, () => this.frame);\n  }\n\n  /**\n   * Prompt the Scheduler to execute all of its queued actions, therefore\n   * clearing its queue.\n   * @return {void}\n   */\n  public flush(): void {\n\n    const {actions, maxFrames} = this;\n    let error: any, action: AsyncAction<any>;\n\n    while ((action = actions.shift()) && (this.frame = action.delay) <= maxFrames) {\n      if (error = action.execute(action.state, action.delay)) {\n        break;\n      }\n    }\n\n    if (error) {\n      while (action = actions.shift()) {\n        action.unsubscribe();\n      }\n      throw error;\n    }\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class VirtualAction<T> extends AsyncAction<T> {\n\n  constructor(protected scheduler: VirtualTimeScheduler,\n              protected work: (state?: T) => void,\n              protected index: number = scheduler.index += 1) {\n    super(scheduler, work);\n    this.index = scheduler.index = index;\n  }\n\n  public schedule(state?: T, delay: number = 0): Subscription {\n    return !this.id ?\n      super.schedule(state, delay) : (\n      // If an action is rescheduled, we save allocations by mutating its state,\n      // pushing it to the end of the scheduler queue, and recycling the action.\n      // But since the VirtualTimeScheduler is used for testing, VirtualActions\n      // must be immutable so they can be inspected later.\n      <VirtualAction<T>> this.add(\n        new VirtualAction<T>(this.scheduler, this.work))\n      ).schedule(state, delay);\n  }\n\n  protected requestAsyncId(scheduler: VirtualTimeScheduler, id?: any, delay: number = 0): any {\n    this.delay = scheduler.frame + delay;\n    const {actions} = scheduler;\n    actions.push(this);\n    actions.sort(VirtualAction.sortActions);\n    return true;\n  }\n\n  protected recycleAsyncId(scheduler: VirtualTimeScheduler, id?: any, delay: number = 0): any {\n    return undefined;\n  }\n\n  public static sortActions<T>(a: VirtualAction<T>, b: VirtualAction<T>) {\n    if (a.delay === b.delay) {\n      if (a.index === b.index) {\n        return 0;\n      } else if (a.index > b.index) {\n        return 1;\n      } else {\n        return -1;\n      }\n    } else if (a.delay > b.delay) {\n      return 1;\n    } else {\n      return -1;\n    }\n  }\n}\n","import { PartialObserver } from '../Observer';\nimport { Subscriber } from '../Subscriber';\nimport { $$rxSubscriber } from '../symbol/rxSubscriber';\n\nexport function toSubscriber<T>(\n  nextOrObserver?: PartialObserver<T> | ((value: T) => void),\n  error?: (error: any) => void,\n  complete?: () => void): Subscriber<T> {\n\n  if (nextOrObserver) {\n    if (nextOrObserver instanceof Subscriber) {\n      return (<Subscriber<T>> nextOrObserver);\n    }\n\n    if (nextOrObserver[$$rxSubscriber]) {\n      return nextOrObserver[$$rxSubscriber]();\n    }\n  }\n\n  if (!nextOrObserver && !error && !complete) {\n    return new Subscriber();\n  }\n\n  return new Subscriber(nextOrObserver, error, complete);\n}","import { PartialObserver } from './Observer';\nimport { Operator } from './Operator';\nimport { Subscriber } from './Subscriber';\nimport { Subscription, AnonymousSubscription, TeardownLogic } from './Subscription';\nimport { root } from './util/root';\nimport { toSubscriber } from './util/toSubscriber';\nimport { IfObservable } from './observable/IfObservable';\nimport { ErrorObservable } from './observable/ErrorObservable';\nimport { $$observable } from './symbol/observable';\n\nexport interface Subscribable<T> {\n  subscribe(observerOrNext?: PartialObserver<T> | ((value: T) => void),\n            error?: (error: any) => void,\n            complete?: () => void): AnonymousSubscription;\n}\n\nexport type SubscribableOrPromise<T> = Subscribable<T> | Promise<T>;\nexport type ObservableInput<T> = SubscribableOrPromise<T> | ArrayLike<T>;\n\n/**\n * A representation of any set of values over any amount of time. This the most basic building block\n * of RxJS.\n *\n * @class Observable<T>\n */\nexport class Observable<T> implements Subscribable<T> {\n\n  public _isScalar: boolean = false;\n\n  protected source: Observable<any>;\n  protected operator: Operator<any, T>;\n\n  /**\n   * @constructor\n   * @param {Function} subscribe the function that is  called when the Observable is\n   * initially subscribed to. This function is given a Subscriber, to which new values\n   * can be `next`ed, or an `error` method can be called to raise an error, or\n   * `complete` can be called to notify of a successful completion.\n   */\n  constructor(subscribe?: <R>(subscriber: Subscriber<R>) => TeardownLogic) {\n    if (subscribe) {\n      this._subscribe = subscribe;\n    }\n  }\n\n  // HACK: Since TypeScript inherits static properties too, we have to\n  // fight against TypeScript here so Subject can have a different static create signature\n  /**\n   * Creates a new cold Observable by calling the Observable constructor\n   * @static true\n   * @owner Observable\n   * @method create\n   * @param {Function} subscribe? the subscriber function to be passed to the Observable constructor\n   * @return {Observable} a new cold observable\n   */\n  static create: Function = <T>(subscribe?: <R>(subscriber: Subscriber<R>) => TeardownLogic) => {\n    return new Observable<T>(subscribe);\n  };\n\n  /**\n   * Creates a new Observable, with this Observable as the source, and the passed\n   * operator defined as the new observable's operator.\n   * @method lift\n   * @param {Operator} operator the operator defining the operation to take on the observable\n   * @return {Observable} a new observable with the Operator applied\n   */\n  lift<R>(operator: Operator<T, R>): Observable<R> {\n    const observable = new Observable<R>();\n    observable.source = this;\n    observable.operator = operator;\n    return observable;\n  }\n\n  /**\n   * Registers handlers for handling emitted values, error and completions from the observable, and\n   *  executes the observable's subscriber function, which will take action to set up the underlying data stream\n   * @method subscribe\n   * @param {PartialObserver|Function} observerOrNext (optional) either an observer defining all functions to be called,\n   *  or the first of three possible handlers, which is the handler for each value emitted from the observable.\n   * @param {Function} error (optional) a handler for a terminal event resulting from an error. If no error handler is provided,\n   *  the error will be thrown as unhandled\n   * @param {Function} complete (optional) a handler for a terminal event resulting from successful completion.\n   * @return {ISubscription} a subscription reference to the registered handlers\n   */\n  subscribe(observerOrNext?: PartialObserver<T> | ((value: T) => void),\n            error?: (error: any) => void,\n            complete?: () => void): Subscription {\n\n    const { operator } = this;\n    const sink = toSubscriber(observerOrNext, error, complete);\n\n    if (operator) {\n      operator.call(sink, this);\n    } else {\n      sink.add(this._subscribe(sink));\n    }\n\n    if (sink.syncErrorThrowable) {\n      sink.syncErrorThrowable = false;\n      if (sink.syncErrorThrown) {\n        throw sink.syncErrorValue;\n      }\n    }\n\n    return sink;\n  }\n\n  /**\n   * @method forEach\n   * @param {Function} next a handler for each value emitted by the observable\n   * @param {PromiseConstructor} [PromiseCtor] a constructor function used to instantiate the Promise\n   * @return {Promise} a promise that either resolves on observable completion or\n   *  rejects with the handled error\n   */\n  forEach(next: (value: T) => void, PromiseCtor?: typeof Promise): Promise<void> {\n    if (!PromiseCtor) {\n      if (root.Rx && root.Rx.config && root.Rx.config.Promise) {\n        PromiseCtor = root.Rx.config.Promise;\n      } else if (root.Promise) {\n        PromiseCtor = root.Promise;\n      }\n    }\n\n    if (!PromiseCtor) {\n      throw new Error('no Promise impl found');\n    }\n\n    return new PromiseCtor<void>((resolve, reject) => {\n      const subscription = this.subscribe((value) => {\n        if (subscription) {\n          // if there is a subscription, then we can surmise\n          // the next handling is asynchronous. Any errors thrown\n          // need to be rejected explicitly and unsubscribe must be\n          // called manually\n          try {\n            next(value);\n          } catch (err) {\n            reject(err);\n            subscription.unsubscribe();\n          }\n        } else {\n          // if there is NO subscription, then we're getting a nexted\n          // value synchronously during subscription. We can just call it.\n          // If it errors, Observable's `subscribe` will ensure the\n          // unsubscription logic is called, then synchronously rethrow the error.\n          // After that, Promise will trap the error and send it\n          // down the rejection path.\n          next(value);\n        }\n      }, reject, resolve);\n    });\n  }\n\n  protected _subscribe(subscriber: Subscriber<any>): TeardownLogic {\n    return this.source.subscribe(subscriber);\n  }\n\n  // `if` and `throw` are special snow flakes, the compiler sees them as reserved words\n  static if: typeof IfObservable.create;\n  static throw: typeof ErrorObservable.create;\n\n  /**\n   * An interop point defined by the es7-observable spec https://github.com/zenparsing/es-observable\n   * @method Symbol.observable\n   * @return {Observable} this instance of the observable\n   */\n  [$$observable]() {\n    return this;\n  }\n}\n","export interface NextObserver<T> {\n  closed?: boolean;\n  next: (value: T) => void;\n  error?: (err: any) => void;\n  complete?: () => void;\n}\n\nexport interface ErrorObserver<T> {\n  closed?: boolean;\n  next?: (value: T) => void;\n  error: (err: any) => void;\n  complete?: () => void;\n}\n\nexport interface CompletionObserver<T> {\n  closed?: boolean;\n  next?: (value: T) => void;\n  error?: (err: any) => void;\n  complete: () => void;\n}\n\nexport type PartialObserver<T> = NextObserver<T> | ErrorObserver<T> | CompletionObserver<T>;\n\nexport interface Observer<T> {\n  closed?: boolean;\n  next: (value: T) => void;\n  error: (err: any) => void;\n  complete: () => void;\n}\n\nexport const empty: Observer<any> = {\n  closed: true,\n  next(value: any): void { /* noop */},\n  error(err: any): void { throw err; },\n  complete(): void { /*noop*/ }\n};\n","import { isFunction } from './util/isFunction';\nimport { Observer, PartialObserver } from './Observer';\nimport { Subscription } from './Subscription';\nimport { empty as emptyObserver } from './Observer';\nimport { $$rxSubscriber } from './symbol/rxSubscriber';\n\n/**\n * Implements the {@link Observer} interface and extends the\n * {@link Subscription} class. While the {@link Observer} is the public API for\n * consuming the values of an {@link Observable}, all Observers get converted to\n * a Subscriber, in order to provide Subscription-like capabilities such as\n * `unsubscribe`. Subscriber is a common type in RxJS, and crucial for\n * implementing operators, but it is rarely used as a public API.\n *\n * @class Subscriber<T>\n */\nexport class Subscriber<T> extends Subscription implements Observer<T> {\n\n  [$$rxSubscriber]() { return this; }\n\n  /**\n   * A static factory for a Subscriber, given a (potentially partial) definition\n   * of an Observer.\n   * @param {function(x: ?T): void} [next] The `next` callback of an Observer.\n   * @param {function(e: ?any): void} [error] The `error` callback of an\n   * Observer.\n   * @param {function(): void} [complete] The `complete` callback of an\n   * Observer.\n   * @return {Subscriber<T>} A Subscriber wrapping the (partially defined)\n   * Observer represented by the given arguments.\n   */\n  static create<T>(next?: (x?: T) => void,\n                   error?: (e?: any) => void,\n                   complete?: () => void): Subscriber<T> {\n    const subscriber = new Subscriber(next, error, complete);\n    subscriber.syncErrorThrowable = false;\n    return subscriber;\n  }\n\n  public syncErrorValue: any = null;\n  public syncErrorThrown: boolean = false;\n  public syncErrorThrowable: boolean = false;\n\n  protected isStopped: boolean = false;\n  protected destination: PartialObserver<any>; // this `any` is the escape hatch to erase extra type param (e.g. R)\n\n  /**\n   * @param {Observer|function(value: T): void} [destinationOrNext] A partially\n   * defined Observer or a `next` callback function.\n   * @param {function(e: ?any): void} [error] The `error` callback of an\n   * Observer.\n   * @param {function(): void} [complete] The `complete` callback of an\n   * Observer.\n   */\n  constructor(destinationOrNext?: PartialObserver<any> | ((value: T) => void),\n              error?: (e?: any) => void,\n              complete?: () => void) {\n    super();\n\n    switch (arguments.length) {\n      case 0:\n        this.destination = emptyObserver;\n        break;\n      case 1:\n        if (!destinationOrNext) {\n          this.destination = emptyObserver;\n          break;\n        }\n        if (typeof destinationOrNext === 'object') {\n          if (destinationOrNext instanceof Subscriber) {\n            this.destination = (<Subscriber<any>> destinationOrNext);\n            (<any> this.destination).add(this);\n          } else {\n            this.syncErrorThrowable = true;\n            this.destination = new SafeSubscriber<T>(this, <PartialObserver<any>> destinationOrNext);\n          }\n          break;\n        }\n      default:\n        this.syncErrorThrowable = true;\n        this.destination = new SafeSubscriber<T>(this, <((value: T) => void)> destinationOrNext, error, complete);\n        break;\n    }\n  }\n\n  /**\n   * The {@link Observer} callback to receive notifications of type `next` from\n   * the Observable, with a value. The Observable may call this method 0 or more\n   * times.\n   * @param {T} [value] The `next` value.\n   * @return {void}\n   */\n  next(value?: T): void {\n    if (!this.isStopped) {\n      this._next(value);\n    }\n  }\n\n  /**\n   * The {@link Observer} callback to receive notifications of type `error` from\n   * the Observable, with an attached {@link Error}. Notifies the Observer that\n   * the Observable has experienced an error condition.\n   * @param {any} [err] The `error` exception.\n   * @return {void}\n   */\n  error(err?: any): void {\n    if (!this.isStopped) {\n      this.isStopped = true;\n      this._error(err);\n    }\n  }\n\n  /**\n   * The {@link Observer} callback to receive a valueless notification of type\n   * `complete` from the Observable. Notifies the Observer that the Observable\n   * has finished sending push-based notifications.\n   * @return {void}\n   */\n  complete(): void {\n    if (!this.isStopped) {\n      this.isStopped = true;\n      this._complete();\n    }\n  }\n\n  unsubscribe(): void {\n    if (this.closed) {\n      return;\n    }\n    this.isStopped = true;\n    super.unsubscribe();\n  }\n\n  protected _next(value: T): void {\n    this.destination.next(value);\n  }\n\n  protected _error(err: any): void {\n    this.destination.error(err);\n    this.unsubscribe();\n  }\n\n  protected _complete(): void {\n    this.destination.complete();\n    this.unsubscribe();\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SafeSubscriber<T> extends Subscriber<T> {\n\n  private _context: any;\n\n  constructor(private _parent: Subscriber<T>,\n              observerOrNext?: PartialObserver<T> | ((value: T) => void),\n              error?: (e?: any) => void,\n              complete?: () => void) {\n    super();\n\n    let next: ((value: T) => void);\n    let context: any = this;\n\n    if (isFunction(observerOrNext)) {\n      next = (<((value: T) => void)> observerOrNext);\n    } else if (observerOrNext) {\n      context = observerOrNext;\n      next = (<PartialObserver<T>> observerOrNext).next;\n      error = (<PartialObserver<T>> observerOrNext).error;\n      complete = (<PartialObserver<T>> observerOrNext).complete;\n      if (isFunction(context.unsubscribe)) {\n        this.add(<() => void> context.unsubscribe.bind(context));\n      }\n      context.unsubscribe = this.unsubscribe.bind(this);\n    }\n\n    this._context = context;\n    this._next = next;\n    this._error = error;\n    this._complete = complete;\n  }\n\n  next(value?: T): void {\n    if (!this.isStopped && this._next) {\n      const { _parent } = this;\n      if (!_parent.syncErrorThrowable) {\n        this.__tryOrUnsub(this._next, value);\n      } else if (this.__tryOrSetError(_parent, this._next, value)) {\n        this.unsubscribe();\n      }\n    }\n  }\n\n  error(err?: any): void {\n    if (!this.isStopped) {\n      const { _parent } = this;\n      if (this._error) {\n        if (!_parent.syncErrorThrowable) {\n          this.__tryOrUnsub(this._error, err);\n          this.unsubscribe();\n        } else {\n          this.__tryOrSetError(_parent, this._error, err);\n          this.unsubscribe();\n        }\n      } else if (!_parent.syncErrorThrowable) {\n        this.unsubscribe();\n        throw err;\n      } else {\n        _parent.syncErrorValue = err;\n        _parent.syncErrorThrown = true;\n        this.unsubscribe();\n      }\n    }\n  }\n\n  complete(): void {\n    if (!this.isStopped) {\n      const { _parent } = this;\n      if (this._complete) {\n        if (!_parent.syncErrorThrowable) {\n          this.__tryOrUnsub(this._complete);\n          this.unsubscribe();\n        } else {\n          this.__tryOrSetError(_parent, this._complete);\n          this.unsubscribe();\n        }\n      } else {\n        this.unsubscribe();\n      }\n    }\n  }\n\n  private __tryOrUnsub(fn: Function, value?: any): void {\n    try {\n      fn.call(this._context, value);\n    } catch (err) {\n      this.unsubscribe();\n      throw err;\n    }\n  }\n\n  private __tryOrSetError(parent: Subscriber<T>, fn: Function, value?: any): boolean {\n    try {\n      fn.call(this._context, value);\n    } catch (err) {\n      parent.syncErrorValue = err;\n      parent.syncErrorThrown = true;\n      return true;\n    }\n    return false;\n  }\n\n  protected _unsubscribe(): void {\n    const { _parent } = this;\n    this._context = null;\n    this._parent = null;\n    _parent.unsubscribe();\n  }\n}\n","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\n\n/**\n * Applies a given `project` function to each value emitted by the source\n * Observable, and emits the resulting values as an Observable.\n *\n * <span class=\"informal\">Like [Array.prototype.map()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map),\n * it passes each source value through a transformation function to get\n * corresponding output values.</span>\n *\n * <img src=\"./img/map.png\" width=\"100%\">\n *\n * Similar to the well known `Array.prototype.map` function, this operator\n * applies a projection to each value and emits that projection in the output\n * Observable.\n *\n * @example <caption>Map every every click to the clientX position of that click</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var positions = clicks.map(ev => ev.clientX);\n * positions.subscribe(x => console.log(x));\n *\n * @see {@link mapTo}\n * @see {@link pluck}\n *\n * @param {function(value: T, index: number): R} project The function to apply\n * to each `value` emitted by the source Observable. The `index` parameter is\n * the number `i` for the i-th emission that has happened since the\n * subscription, starting from the number `0`.\n * @param {any} [thisArg] An optional argument to define what `this` is in the\n * `project` function.\n * @return {Observable<R>} An Observable that emits the values from the source\n * Observable transformed by the given `project` function.\n * @method map\n * @owner Observable\n */\nexport function map<T, R>(project: (value: T, index: number) => R, thisArg?: any): Observable<R> {\n  if (typeof project !== 'function') {\n    throw new TypeError('argument is not a function. Are you looking for `mapTo()`?');\n  }\n  return this.lift(new MapOperator(project, thisArg));\n}\n\nexport interface MapSignature<T> {\n  <R>(project: (value: T, index: number) => R, thisArg?: any): Observable<R>;\n}\n\nexport class MapOperator<T, R> implements Operator<T, R> {\n  constructor(private project: (value: T, index: number) => R, private thisArg: any) {\n  }\n\n  call(subscriber: Subscriber<R>, source: any): any {\n    return source._subscribe(new MapSubscriber(subscriber, this.project, this.thisArg));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass MapSubscriber<T, R> extends Subscriber<T> {\n  count: number = 0;\n  private thisArg: any;\n\n  constructor(destination: Subscriber<R>,\n              private project: (value: T, index: number) => R,\n              thisArg: any) {\n    super(destination);\n    this.thisArg = thisArg || this;\n  }\n\n  // NOTE: This looks unoptimized, but it's actually purposefully NOT\n  // using try/catch optimizations.\n  protected _next(value: T) {\n    let result: any;\n    try {\n      result = this.project.call(this.thisArg, value, this.count++);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    this.destination.next(result);\n  }\n}\n","import { root } from '../../util/root';\nimport { tryCatch } from '../../util/tryCatch';\nimport { errorObject } from '../../util/errorObject';\nimport { Observable } from '../../Observable';\nimport { Subscriber } from '../../Subscriber';\nimport { TeardownLogic } from '../../Subscription';\nimport { MapOperator } from '../../operator/map';\n\nexport interface AjaxRequest {\n  url?: string;\n  body?: any;\n  user?: string;\n  async?: boolean;\n  method?: string;\n  headers?: Object;\n  timeout?: number;\n  password?: string;\n  hasContent?: boolean;\n  crossDomain?: boolean;\n  withCredentials?: boolean;\n  createXHR?: () => XMLHttpRequest;\n  progressSubscriber?: Subscriber<any>;\n  responseType?: string;\n}\n\nfunction getCORSRequest(): XMLHttpRequest {\n  if (root.XMLHttpRequest) {\n    const xhr = new root.XMLHttpRequest();\n    if ('withCredentials' in xhr) {\n      xhr.withCredentials = !!this.withCredentials;\n    }\n    return xhr;\n  } else if (!!root.XDomainRequest) {\n    return new root.XDomainRequest();\n  } else {\n    throw new Error('CORS is not supported by your browser');\n  }\n}\n\nfunction getXMLHttpRequest(): XMLHttpRequest {\n  if (root.XMLHttpRequest) {\n    return new root.XMLHttpRequest();\n  } else {\n    let progId: string;\n    try {\n      const progIds = ['Msxml2.XMLHTTP', 'Microsoft.XMLHTTP', 'Msxml2.XMLHTTP.4.0'];\n      for (let i = 0; i < 3; i++) {\n        try {\n          progId = progIds[i];\n          if (new root.ActiveXObject(progId)) {\n            break;\n          }\n        } catch (e) {\n          //suppress exceptions\n        }\n      }\n      return new root.ActiveXObject(progId);\n    } catch (e) {\n      throw new Error('XMLHttpRequest is not supported by your browser');\n    }\n  }\n}\n\nexport interface AjaxCreationMethod {\n  (urlOrRequest: string | AjaxRequest): Observable<AjaxResponse>;\n  get(url: string, headers?: Object): Observable<AjaxResponse>;\n  post(url: string, body?: any, headers?: Object): Observable<AjaxResponse>;\n  put(url: string, body?: any, headers?: Object): Observable<AjaxResponse>;\n  delete(url: string, headers?: Object): Observable<AjaxResponse>;\n  getJSON<T, R>(url: string, headers?: Object): Observable<R>;\n}\n\nexport function ajaxGet(url: string, headers: Object = null) {\n  return new AjaxObservable<AjaxResponse>({ method: 'GET', url, headers });\n};\n\nexport function ajaxPost(url: string, body?: any, headers?: Object): Observable<AjaxResponse> {\n  return new AjaxObservable<AjaxResponse>({ method: 'POST', url, body, headers });\n};\n\nexport function ajaxDelete(url: string, headers?: Object): Observable<AjaxResponse> {\n  return new AjaxObservable<AjaxResponse>({ method: 'DELETE', url, headers });\n};\n\nexport function ajaxPut(url: string, body?: any, headers?: Object): Observable<AjaxResponse> {\n  return new AjaxObservable<AjaxResponse>({ method: 'PUT', url, body, headers });\n};\n\nexport function ajaxGetJSON<T>(url: string, headers?: Object): Observable<T> {\n  return new AjaxObservable<AjaxResponse>({ method: 'GET', url, responseType: 'json', headers })\n    .lift<T>(new MapOperator<AjaxResponse, T>((x: AjaxResponse, index: number): T => x.response, null));\n};\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class AjaxObservable<T> extends Observable<T> {\n  /**\n   * Creates an observable for an Ajax request with either a request object with\n   * url, headers, etc or a string for a URL.\n   *\n   * @example\n   * source = Rx.Observable.ajax('/products');\n   * source = Rx.Observable.ajax({ url: 'products', method: 'GET' });\n   *\n   * @param {string|Object} request Can be one of the following:\n   *   A string of the URL to make the Ajax call.\n   *   An object with the following properties\n   *   - url: URL of the request\n   *   - body: The body of the request\n   *   - method: Method of the request, such as GET, POST, PUT, PATCH, DELETE\n   *   - async: Whether the request is async\n   *   - headers: Optional headers\n   *   - crossDomain: true if a cross domain request, else false\n   *   - createXHR: a function to override if you need to use an alternate\n   *   XMLHttpRequest implementation.\n   *   - resultSelector: a function to use to alter the output value type of\n   *   the Observable. Gets {@link AjaxResponse} as an argument.\n   * @return {Observable} An observable sequence containing the XMLHttpRequest.\n   * @static true\n   * @name ajax\n   * @owner Observable\n  */\n  static create: AjaxCreationMethod = (() => {\n    const create: any = (urlOrRequest: string | AjaxRequest) => {\n      return new AjaxObservable(urlOrRequest);\n    };\n\n    create.get = ajaxGet;\n    create.post = ajaxPost;\n    create.delete = ajaxDelete;\n    create.put = ajaxPut;\n    create.getJSON = ajaxGetJSON;\n\n    return <AjaxCreationMethod>create;\n  })();\n\n  private request: AjaxRequest;\n\n  constructor(urlOrRequest: string | AjaxRequest) {\n    super();\n\n    const request: AjaxRequest = {\n      async: true,\n      createXHR: function() {\n        return this.crossDomain ? getCORSRequest.call(this) : getXMLHttpRequest();\n      },\n      crossDomain: false,\n      withCredentials: false,\n      headers: {},\n      method: 'GET',\n      responseType: 'json',\n      timeout: 0\n    };\n\n    if (typeof urlOrRequest === 'string') {\n      request.url = urlOrRequest;\n    } else {\n      for (const prop in urlOrRequest) {\n        if (urlOrRequest.hasOwnProperty(prop)) {\n          request[prop] = urlOrRequest[prop];\n        }\n      }\n    }\n\n    this.request = request;\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>): TeardownLogic {\n    return new AjaxSubscriber(subscriber, this.request);\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class AjaxSubscriber<T> extends Subscriber<Event> {\n  private xhr: XMLHttpRequest;\n  private done: boolean = false;\n\n  constructor(destination: Subscriber<T>, public request: AjaxRequest) {\n    super(destination);\n\n    const headers = request.headers = request.headers || {};\n\n    // force CORS if requested\n    if (!request.crossDomain && !headers['X-Requested-With']) {\n      headers['X-Requested-With'] = 'XMLHttpRequest';\n    }\n\n    // ensure content type is set\n    if (!('Content-Type' in headers) && !(root.FormData && request.body instanceof root.FormData) && typeof request.body !== 'undefined') {\n      headers['Content-Type'] = 'application/x-www-form-urlencoded; charset=UTF-8';\n    }\n\n    // properly serialize body\n    request.body = this.serializeBody(request.body, request.headers['Content-Type']);\n\n    this.send();\n  }\n\n  next(e: Event): void {\n    this.done = true;\n    const { xhr, request, destination } = this;\n    const response = new AjaxResponse(e, xhr, request);\n\n    destination.next(response);\n  }\n\n  private send(): XMLHttpRequest {\n    const {\n      request,\n      request: { user, method, url, async, password, headers, body }\n    } = this;\n    const createXHR = request.createXHR;\n    const xhr: XMLHttpRequest = tryCatch(createXHR).call(request);\n\n    if (<any>xhr === errorObject) {\n      this.error(errorObject.e);\n    } else {\n      this.xhr = xhr;\n\n      // open XHR first\n      let result: any;\n      if (user) {\n        result = tryCatch(xhr.open).call(xhr, method, url, async, user, password);\n      } else {\n        result = tryCatch(xhr.open).call(xhr, method, url, async);\n      }\n\n      if (result === errorObject) {\n        this.error(errorObject.e);\n        return null;\n      }\n\n      // timeout and responseType can be set once the XHR is open\n      xhr.timeout = request.timeout;\n      xhr.responseType = request.responseType;\n\n      // set headers\n      this.setHeaders(xhr, headers);\n\n      // now set up the events\n      this.setupEvents(xhr, request);\n\n      // finally send the request\n      if (body) {\n        xhr.send(body);\n      } else {\n        xhr.send();\n      }\n    }\n\n    return xhr;\n  }\n\n  private serializeBody(body: any, contentType?: string) {\n    if (!body || typeof body === 'string') {\n      return body;\n    } else if (root.FormData && body instanceof root.FormData) {\n      return body;\n    }\n\n    if (contentType) {\n      const splitIndex = contentType.indexOf(';');\n      if (splitIndex !== -1) {\n        contentType = contentType.substring(0, splitIndex);\n      }\n    }\n\n    switch (contentType) {\n      case 'application/x-www-form-urlencoded':\n        return Object.keys(body).map(key => `${encodeURI(key)}=${encodeURI(body[key])}`).join('&');\n      case 'application/json':\n        return JSON.stringify(body);\n      default:\n        return body;\n    }\n  }\n\n  private setHeaders(xhr: XMLHttpRequest, headers: Object) {\n    for (let key in headers) {\n      if (headers.hasOwnProperty(key)) {\n        xhr.setRequestHeader(key, headers[key]);\n      }\n    }\n  }\n\n  private setupEvents(xhr: XMLHttpRequest, request: AjaxRequest) {\n    const progressSubscriber = request.progressSubscriber;\n\n    xhr.ontimeout = function xhrTimeout(e) {\n      const {subscriber, progressSubscriber, request } = (<any>xhrTimeout);\n      if (progressSubscriber) {\n        progressSubscriber.error(e);\n      }\n      subscriber.error(new AjaxTimeoutError(this, request)); //TODO: Make betterer.\n    };\n    (<any>xhr.ontimeout).request = request;\n    (<any>xhr.ontimeout).subscriber = this;\n    (<any>xhr.ontimeout).progressSubscriber = progressSubscriber;\n\n    if (xhr.upload && 'withCredentials' in xhr && root.XDomainRequest) {\n      if (progressSubscriber) {\n        xhr.onprogress = function xhrProgress(e) {\n          const { progressSubscriber } = (<any>xhrProgress);\n          progressSubscriber.next(e);\n        };\n        (<any>xhr.onprogress).progressSubscriber = progressSubscriber;\n      }\n\n      xhr.onerror = function xhrError(e) {\n        const { progressSubscriber, subscriber, request } = (<any>xhrError);\n        if (progressSubscriber) {\n          progressSubscriber.error(e);\n        }\n        subscriber.error(new AjaxError('ajax error', this, request));\n      };\n      (<any>xhr.onerror).request = request;\n      (<any>xhr.onerror).subscriber = this;\n      (<any>xhr.onerror).progressSubscriber = progressSubscriber;\n    }\n\n    xhr.onreadystatechange = function xhrReadyStateChange(e) {\n      const { subscriber, progressSubscriber, request } = (<any>xhrReadyStateChange);\n      if (this.readyState === 4) {\n        // normalize IE9 bug (http://bugs.jquery.com/ticket/1450)\n        let status: number = this.status === 1223 ? 204 : this.status;\n        let response: any = (this.responseType === 'text' ?  (\n          this.response || this.responseText) : this.response);\n\n        // fix status code when it is 0 (0 status is undocumented).\n        // Occurs when accessing file resources or on Android 4.1 stock browser\n        // while retrieving files from application cache.\n        if (status === 0) {\n          status = response ? 200 : 0;\n        }\n\n        if (200 <= status && status < 300) {\n          if (progressSubscriber) {\n            progressSubscriber.complete();\n          }\n          subscriber.next(e);\n          subscriber.complete();\n        } else {\n          if (progressSubscriber) {\n            progressSubscriber.error(e);\n          }\n          subscriber.error(new AjaxError('ajax error ' + status, this, request));\n        }\n      }\n    };\n    (<any>xhr.onreadystatechange).subscriber = this;\n    (<any>xhr.onreadystatechange).progressSubscriber = progressSubscriber;\n    (<any>xhr.onreadystatechange).request = request;\n  }\n\n  unsubscribe() {\n    const { done, xhr } = this;\n    if (!done && xhr && xhr.readyState !== 4) {\n      xhr.abort();\n    }\n    super.unsubscribe();\n  }\n}\n\n/**\n * A normalized AJAX response.\n *\n * @see {@link ajax}\n *\n * @class AjaxResponse\n */\nexport class AjaxResponse {\n  /** @type {number} The HTTP status code */\n  status: number;\n\n  /** @type {string|ArrayBuffer|Document|object|any} The response data */\n  response: any;\n\n  /** @type {string} The raw responseText */\n  responseText: string;\n\n  /** @type {string} The responseType (e.g. 'json', 'arraybuffer', or 'xml') */\n  responseType: string;\n\n  constructor(public originalEvent: Event, public xhr: XMLHttpRequest, public request: AjaxRequest) {\n    this.status = xhr.status;\n    this.responseType = xhr.responseType || request.responseType;\n\n    switch (this.responseType) {\n      case 'json':\n        if ('response' in xhr) {\n          //IE does not support json as responseType, parse it internally\n          this.response = xhr.responseType ? xhr.response : JSON.parse(xhr.response || xhr.responseText || 'null');\n        } else {\n          this.response = JSON.parse(xhr.responseText || 'null');\n        }\n        break;\n      case 'xml':\n        this.response = xhr.responseXML;\n        break;\n      case 'text':\n      default:\n        this.response = ('response' in xhr) ? xhr.response : xhr.responseText;\n        break;\n    }\n  }\n}\n\n/**\n * A normalized AJAX error.\n *\n * @see {@link ajax}\n *\n * @class AjaxError\n */\nexport class AjaxError extends Error {\n  /** @type {XMLHttpRequest} The XHR instance associated with the error */\n  xhr: XMLHttpRequest;\n\n  /** @type {AjaxRequest} The AjaxRequest associated with the error */\n  request: AjaxRequest;\n\n  /** @type {number} The HTTP status code */\n  status: number;\n\n  constructor(message: string, xhr: XMLHttpRequest, request: AjaxRequest) {\n    super(message);\n    this.message = message;\n    this.xhr = xhr;\n    this.request = request;\n    this.status = xhr.status;\n  }\n}\n\n/**\n * @see {@link ajax}\n *\n * @class AjaxTimeoutError\n */\nexport class AjaxTimeoutError extends AjaxError {\n  constructor(xhr: XMLHttpRequest, request: AjaxRequest) {\n    super('ajax timeout', xhr, request);\n  }\n}\n","/**\nSome credit for this helper goes to http://github.com/YuzuJS/setImmediate\n*/\n\nimport {  root  } from './root';\n\nexport class ImmediateDefinition {\n  setImmediate: (cb: () => void) => number;\n\n  clearImmediate: (handle: number) => void;\n\n  private identify(o: any): string {\n    return this.root.Object.prototype.toString.call(o);\n  }\n\n  tasksByHandle: any;\n\n  nextHandle: number;\n\n  currentlyRunningATask: boolean;\n\n  constructor(private root: any) {\n    if (root.setImmediate && typeof root.setImmediate === 'function') {\n      this.setImmediate = root.setImmediate.bind(root);\n      this.clearImmediate = root.clearImmediate.bind(root);\n    } else {\n      this.nextHandle = 1;\n      this.tasksByHandle = {};\n      this.currentlyRunningATask = false;\n\n      // Don't get fooled by e.g. browserify environments.\n      if (this.canUseProcessNextTick()) {\n        // For Node.js before 0.9\n        this.setImmediate = this.createProcessNextTickSetImmediate();\n      } else if (this.canUsePostMessage()) {\n        // For non-IE10 modern browsers\n        this.setImmediate = this.createPostMessageSetImmediate();\n      } else if (this.canUseMessageChannel()) {\n        // For web workers, where supported\n        this.setImmediate = this.createMessageChannelSetImmediate();\n      } else if (this.canUseReadyStateChange()) {\n        // For IE 6–8\n        this.setImmediate = this.createReadyStateChangeSetImmediate();\n      } else {\n        // For older browsers\n        this.setImmediate = this.createSetTimeoutSetImmediate();\n      }\n\n      let ci = function clearImmediate(handle: any) {\n        delete (<any>clearImmediate).instance.tasksByHandle[handle];\n      };\n\n      (<any>ci).instance = this;\n\n      this.clearImmediate = ci;\n    }\n  }\n\n  canUseProcessNextTick() {\n    return this.identify(this.root.process) === '[object process]';\n  }\n\n  canUseMessageChannel() {\n    return Boolean(this.root.MessageChannel);\n  }\n\n  canUseReadyStateChange() {\n    const document = this.root.document;\n    return Boolean(document && 'onreadystatechange' in document.createElement('script'));\n  }\n\n  canUsePostMessage() {\n    const root = this.root;\n    // The test against `importScripts` prevents this implementation from being installed inside a web worker,\n    // where `root.postMessage` means something completely different and can't be used for this purpose.\n    if (root.postMessage && !root.importScripts) {\n      let postMessageIsAsynchronous = true;\n      let oldOnMessage = root.onmessage;\n      root.onmessage = function() {\n        postMessageIsAsynchronous = false;\n      };\n      root.postMessage('', '*');\n      root.onmessage = oldOnMessage;\n      return postMessageIsAsynchronous;\n    }\n\n    return false;\n  }\n\n  // This function accepts the same arguments as setImmediate, but\n  // returns a function that requires no arguments.\n  partiallyApplied(handler: any, ...args: any[]) {\n    let fn = function result () {\n      const { handler, args } = <any>result;\n      if (typeof handler === 'function') {\n        handler.apply(undefined, args);\n      } else {\n        (new Function('' + handler))();\n      }\n    };\n\n    (<any>fn).handler = handler;\n    (<any>fn).args = args;\n\n    return fn;\n  }\n\n  addFromSetImmediateArguments(args: any[]) {\n    this.tasksByHandle[this.nextHandle] = this.partiallyApplied.apply(undefined, args);\n    return this.nextHandle++;\n  }\n\n  createProcessNextTickSetImmediate() {\n    let fn = function setImmediate() {\n      const { instance } = (<any>setImmediate);\n      let handle = instance.addFromSetImmediateArguments(arguments);\n      instance.root.process.nextTick(instance.partiallyApplied(instance.runIfPresent, handle));\n      return handle;\n    };\n\n    (<any>fn).instance = this;\n\n    return fn;\n  }\n\n  createPostMessageSetImmediate() {\n    // Installs an event handler on `global` for the `message` event: see\n    // * https://developer.mozilla.org/en/DOM/window.postMessage\n    // * http://www.whatwg.org/specs/web-apps/current-work/multipage/comms.html#crossDocumentMessages\n    const root = this.root;\n\n    let messagePrefix = 'setImmediate$' + root.Math.random() + '$';\n    let onGlobalMessage = function globalMessageHandler(event: any) {\n      const instance = (<any>globalMessageHandler).instance;\n      if (event.source === root &&\n        typeof event.data === 'string' &&\n        event.data.indexOf(messagePrefix) === 0) {\n        instance.runIfPresent(+event.data.slice(messagePrefix.length));\n      }\n    };\n    (<any>onGlobalMessage).instance = this;\n\n    root.addEventListener('message', onGlobalMessage, false);\n\n    let fn = function setImmediate() {\n      const { messagePrefix, instance } = (<any>setImmediate);\n      let handle = instance.addFromSetImmediateArguments(arguments);\n      instance.root.postMessage(messagePrefix + handle, '*');\n      return handle;\n    };\n\n    (<any>fn).instance = this;\n    (<any>fn).messagePrefix = messagePrefix;\n\n    return fn;\n  }\n\n  runIfPresent(handle: any) {\n    // From the spec: 'Wait until any invocations of this algorithm started before this one have completed.'\n    // So if we're currently running a task, we'll need to delay this invocation.\n    if (this.currentlyRunningATask) {\n      // Delay by doing a setTimeout. setImmediate was tried instead, but in Firefox 7 it generated a\n      // 'too much recursion' error.\n      this.root.setTimeout(this.partiallyApplied(this.runIfPresent, handle), 0);\n    } else {\n      let task = this.tasksByHandle[handle];\n      if (task) {\n        this.currentlyRunningATask = true;\n        try {\n          task();\n        } finally {\n          this.clearImmediate(handle);\n          this.currentlyRunningATask = false;\n        }\n      }\n    }\n  }\n\n  createMessageChannelSetImmediate() {\n    let channel = new this.root.MessageChannel();\n    channel.port1.onmessage = (event: any) => {\n      let handle = event.data;\n      this.runIfPresent(handle);\n    };\n\n    let fn = function setImmediate() {\n      const { channel, instance } = (<any>setImmediate);\n      let handle = instance.addFromSetImmediateArguments(arguments);\n      channel.port2.postMessage(handle);\n      return handle;\n    };\n\n    (<any>fn).channel = channel;\n    (<any>fn).instance = this;\n\n    return fn;\n  }\n\n  createReadyStateChangeSetImmediate() {\n    let fn = function setImmediate() {\n      const instance = (<any>setImmediate).instance;\n      const root = instance.root;\n      const doc = root.document;\n      const html = doc.documentElement;\n\n      let handle = instance.addFromSetImmediateArguments(arguments);\n      // Create a <script> element; its readystatechange event will be fired asynchronously once it is inserted\n      // into the document. Do so, thus queuing up the task. Remember to clean up once it's been called.\n      let script = doc.createElement('script');\n      script.onreadystatechange = () => {\n        instance.runIfPresent(handle);\n        script.onreadystatechange = null;\n        html.removeChild(script);\n        script = null;\n      };\n      html.appendChild(script);\n      return handle;\n    };\n\n    (<any>fn).instance = this;\n\n    return fn;\n  }\n\n  createSetTimeoutSetImmediate() {\n    let fn = function setImmediate() {\n      const instance = (<any>setImmediate).instance;\n      let handle = instance.addFromSetImmediateArguments(arguments);\n      instance.root.setTimeout(instance.partiallyApplied(instance.runIfPresent, handle), 0);\n      return handle;\n    };\n\n    (<any>fn).instance = this;\n\n    return fn;\n  }\n}\nexport const Immediate = new ImmediateDefinition(root);\n","import { Immediate } from '../util/Immediate';\nimport { AsyncAction } from './AsyncAction';\nimport { AsapScheduler } from './AsapScheduler';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class AsapAction<T> extends AsyncAction<T> {\n\n  constructor(protected scheduler: AsapScheduler,\n              protected work: (state?: T) => void) {\n    super(scheduler, work);\n  }\n\n  protected requestAsyncId(scheduler: AsapScheduler, id?: any, delay: number = 0): any {\n    // If delay is greater than 0, request as an async action.\n    if (delay !== null && delay > 0) {\n      return super.requestAsyncId(scheduler, id, delay);\n    }\n    // Push the action to the end of the scheduler queue.\n    scheduler.actions.push(this);\n    // If a microtask has already been scheduled, don't schedule another\n    // one. If a microtask hasn't been scheduled yet, schedule one now. Return\n    // the current scheduled microtask id.\n    return scheduler.scheduled || (scheduler.scheduled = Immediate.setImmediate(\n      scheduler.flush.bind(scheduler, null)\n    ));\n  }\n  protected recycleAsyncId(scheduler: AsapScheduler, id?: any, delay: number = 0): any {\n    // If delay exists and is greater than 0, recycle as an async action.\n    if (delay !== null && delay > 0) {\n      return super.recycleAsyncId(scheduler, id, delay);\n    }\n    // If the scheduler queue is empty, cancel the requested microtask and\n    // set the scheduled flag to undefined so the next AsapAction will schedule\n    // its own.\n    if (scheduler.actions.length === 0) {\n      Immediate.clearImmediate(id);\n      scheduler.scheduled = undefined;\n    }\n    // Return undefined so the action knows to request a new async id if it's rescheduled.\n    return undefined;\n  }\n}\n","import { AsyncAction } from './AsyncAction';\nimport { AsyncScheduler } from './AsyncScheduler';\n\nexport class AsapScheduler extends AsyncScheduler {\n  public flush(): void {\n\n    this.active = true;\n    this.scheduled = undefined;\n\n    const {actions} = this;\n    let error: any;\n    let index: number = -1;\n    let count: number = actions.length;\n    let action: AsyncAction<any> = actions.shift();\n\n    do {\n      if (error = action.execute(action.state, action.delay)) {\n        break;\n      }\n    } while (++index < count && (action = actions.shift()));\n\n    this.active = false;\n\n    if (error) {\n      while (++index < count && (action = actions.shift())) {\n        action.unsubscribe();\n      }\n      throw error;\n    }\n  }\n}\n","import { AsapAction } from './AsapAction';\nimport { AsapScheduler } from './AsapScheduler';\n\nexport const asap = new AsapScheduler(AsapAction);\n","import { AsyncAction } from './AsyncAction';\nimport { AsyncScheduler } from './AsyncScheduler';\n\nexport const async = new AsyncScheduler(AsyncAction);\n","import { AsyncAction } from './AsyncAction';\nimport { Subscription } from '../Subscription';\nimport { QueueScheduler } from './QueueScheduler';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class QueueAction<T> extends AsyncAction<T> {\n\n  constructor(protected scheduler: QueueScheduler,\n              protected work: (state?: T) => void) {\n    super(scheduler, work);\n  }\n\n  public schedule(state?: T, delay: number = 0): Subscription {\n    if (delay > 0) {\n      return super.schedule(state, delay);\n    }\n    this.delay = delay;\n    this.state = state;\n    this.scheduler.flush(this);\n    return this;\n  }\n\n  public execute(state: T, delay: number): any {\n    return (delay > 0 || this.closed) ?\n      super.execute(state, delay) :\n      this._execute(state, delay) ;\n  }\n\n  protected requestAsyncId(scheduler: QueueScheduler, id?: any, delay: number = 0): any {\n    // If delay is greater than 0, enqueue as an async action.\n    if (delay !== null && delay > 0) {\n      return super.requestAsyncId(scheduler, id, delay);\n    }\n    // Otherwise flush the scheduler starting with this action.\n    return scheduler.flush(this);\n  }\n}\n","import { AsyncScheduler } from './AsyncScheduler';\n\nexport class QueueScheduler extends AsyncScheduler {\n}\n","import { QueueAction } from './QueueAction';\nimport { QueueScheduler } from './QueueScheduler';\n\nexport const queue = new QueueScheduler(QueueAction);\n","export const isArray = Array.isArray || (<T>(x: any): x is T[] => x && typeof x.length === 'number');\n","export function isObject(x: any): x is Object {\n  return x != null && typeof x === 'object';\n}\n","export function isFunction(x: any): x is Function {\n  return typeof x === 'function';\n}\n","import { errorObject } from './errorObject';\n\nlet tryCatchTarget: Function;\n\nfunction tryCatcher(): any {\n  try {\n    return tryCatchTarget.apply(this, arguments);\n  } catch (e) {\n    errorObject.e = e;\n    return errorObject;\n  }\n}\n\nexport function tryCatch<T extends Function>(fn: T): T {\n  tryCatchTarget = fn;\n  return <any>tryCatcher;\n};\n","// typeof any so that it we don't have to cast when comparing a result to the error object\nexport var errorObject: any = { e: {} };","/**\n * An error thrown when one or more errors have occurred during the\n * `unsubscribe` of a {@link Subscription}.\n */\nexport class UnsubscriptionError extends Error {\n  constructor(public errors: any[]) {\n    super();\n    const err: any = Error.call(this, errors ?\n      `${errors.length} errors occurred during unsubscription:\n  ${errors.map((err, i) => `${i + 1}) ${err.toString()}`).join('\\n  ')}` : '');\n    (<any> this).name = err.name = 'UnsubscriptionError';\n    (<any> this).stack = err.stack;\n    (<any> this).message = err.message;\n  }\n}\n","import { isArray } from './util/isArray';\nimport { isObject } from './util/isObject';\nimport { isFunction } from './util/isFunction';\nimport { tryCatch } from './util/tryCatch';\nimport { errorObject } from './util/errorObject';\nimport { UnsubscriptionError } from './util/UnsubscriptionError';\n\nexport interface AnonymousSubscription {\n  unsubscribe(): void;\n}\n\nexport type TeardownLogic = AnonymousSubscription | Function | void;\n\nexport interface ISubscription extends AnonymousSubscription {\n  unsubscribe(): void;\n  closed: boolean;\n}\n\n/**\n * Represents a disposable resource, such as the execution of an Observable. A\n * Subscription has one important method, `unsubscribe`, that takes no argument\n * and just disposes the resource held by the subscription.\n *\n * Additionally, subscriptions may be grouped together through the `add()`\n * method, which will attach a child Subscription to the current Subscription.\n * When a Subscription is unsubscribed, all its children (and its grandchildren)\n * will be unsubscribed as well.\n *\n * @class Subscription\n */\nexport class Subscription implements ISubscription {\n  public static EMPTY: Subscription = (function(empty: any){\n    empty.closed = true;\n    return empty;\n  }(new Subscription()));\n\n  /**\n   * A flag to indicate whether this Subscription has already been unsubscribed.\n   * @type {boolean}\n   */\n  public closed: boolean = false;\n\n  /**\n   * @param {function(): void} [unsubscribe] A function describing how to\n   * perform the disposal of resources when the `unsubscribe` method is called.\n   */\n  constructor(unsubscribe?: () => void) {\n    if (unsubscribe) {\n      (<any> this)._unsubscribe = unsubscribe;\n    }\n  }\n\n  /**\n   * Disposes the resources held by the subscription. May, for instance, cancel\n   * an ongoing Observable execution or cancel any other type of work that\n   * started when the Subscription was created.\n   * @return {void}\n   */\n  unsubscribe(): void {\n    let hasErrors = false;\n    let errors: any[];\n\n    if (this.closed) {\n      return;\n    }\n\n    this.closed = true;\n\n    const { _unsubscribe, _subscriptions } = (<any> this);\n\n    (<any> this)._subscriptions = null;\n\n    if (isFunction(_unsubscribe)) {\n      let trial = tryCatch(_unsubscribe).call(this);\n      if (trial === errorObject) {\n        hasErrors = true;\n        (errors = errors || []).push(errorObject.e);\n      }\n    }\n\n    if (isArray(_subscriptions)) {\n\n      let index = -1;\n      const len = _subscriptions.length;\n\n      while (++index < len) {\n        const sub = _subscriptions[index];\n        if (isObject(sub)) {\n          let trial = tryCatch(sub.unsubscribe).call(sub);\n          if (trial === errorObject) {\n            hasErrors = true;\n            errors = errors || [];\n            let err = errorObject.e;\n            if (err instanceof UnsubscriptionError) {\n              errors = errors.concat(err.errors);\n            } else {\n              errors.push(err);\n            }\n          }\n        }\n      }\n    }\n\n    if (hasErrors) {\n      throw new UnsubscriptionError(errors);\n    }\n  }\n\n  /**\n   * Adds a tear down to be called during the unsubscribe() of this\n   * Subscription.\n   *\n   * If the tear down being added is a subscription that is already\n   * unsubscribed, is the same reference `add` is being called on, or is\n   * `Subscription.EMPTY`, it will not be added.\n   *\n   * If this subscription is already in an `closed` state, the passed\n   * tear down logic will be executed immediately.\n   *\n   * @param {TeardownLogic} teardown The additional logic to execute on\n   * teardown.\n   * @return {Subscription} Returns the Subscription used or created to be\n   * added to the inner subscriptions list. This Subscription can be used with\n   * `remove()` to remove the passed teardown logic from the inner subscriptions\n   * list.\n   */\n  add(teardown: TeardownLogic): Subscription {\n    if (!teardown || (teardown === Subscription.EMPTY)) {\n      return Subscription.EMPTY;\n    }\n\n    if (teardown === this) {\n      return this;\n    }\n\n    let sub = (<Subscription> teardown);\n\n    switch (typeof teardown) {\n      case 'function':\n        sub = new Subscription(<(() => void) > teardown);\n      case 'object':\n        if (sub.closed || typeof sub.unsubscribe !== 'function') {\n          break;\n        } else if (this.closed) {\n          sub.unsubscribe();\n        } else {\n          ((<any> this)._subscriptions || ((<any> this)._subscriptions = [])).push(sub);\n        }\n        break;\n      default:\n        throw new Error('unrecognized teardown ' + teardown + ' added to Subscription.');\n    }\n\n    return sub;\n  }\n\n  /**\n   * Removes a Subscription from the internal list of subscriptions that will\n   * unsubscribe during the unsubscribe process of this Subscription.\n   * @param {Subscription} subscription The subscription to remove.\n   * @return {void}\n   */\n  remove(subscription: Subscription): void {\n\n    // HACK: This might be redundant because of the logic in `add()`\n    if (subscription == null   || (\n        subscription === this) || (\n        subscription === Subscription.EMPTY)) {\n      return;\n    }\n\n    const subscriptions = (<any> this)._subscriptions;\n\n    if (subscriptions) {\n      const subscriptionIndex = subscriptions.indexOf(subscription);\n      if (subscriptionIndex !== -1) {\n        subscriptions.splice(subscriptionIndex, 1);\n      }\n    }\n  }\n}\n","import { Scheduler } from '../Scheduler';\nimport { Subscription } from '../Subscription';\n\n/**\n * A unit of work to be executed in a {@link Scheduler}. An action is typically\n * created from within a Scheduler and an RxJS user does not need to concern\n * themselves about creating and manipulating an Action.\n *\n * ```ts\n * class Action<T> extends Subscription {\n *   new (scheduler: Scheduler, work: (state?: T) => void);\n *   schedule(state?: T, delay: number = 0): Subscription;\n * }\n * ```\n *\n * @class Action<T>\n */\nexport class Action<T> extends Subscription {\n  constructor(scheduler: Scheduler, work: (state?: T) => void) {\n    super();\n  }\n  /**\n   * Schedules this action on its parent Scheduler for execution. May be passed\n   * some context object, `state`. May happen at some point in the future,\n   * according to the `delay` parameter, if specified.\n   * @param {T} [state] Some contextual data that the `work` function uses when\n   * called by the Scheduler.\n   * @param {number} [delay] Time to wait before executing the work, where the\n   * time unit is implicit and defined by the Scheduler.\n   * @return {void}\n   */\n  public schedule(state?: T, delay: number = 0): Subscription {\n    return this;\n  }\n}\n","import { root } from '../util/root';\nimport { Action } from './Action';\nimport { Subscription } from '../Subscription';\nimport { AsyncScheduler } from './AsyncScheduler';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class AsyncAction<T> extends Action<T> {\n\n  public id: any;\n  public state: T;\n  public delay: number;\n  protected pending: boolean = false;\n\n  constructor(protected scheduler: AsyncScheduler,\n              protected work: (state?: T) => void) {\n    super(scheduler, work);\n  }\n\n  public schedule(state?: T, delay: number = 0): Subscription {\n\n    if (this.closed) {\n      return this;\n     }\n\n    // Always replace the current state with the new state.\n    this.state = state;\n\n    // Set the pending flag indicating that this action has been scheduled, or\n    // has recursively rescheduled itself.\n    this.pending = true;\n\n    const id = this.id;\n    const scheduler = this.scheduler;\n\n    //\n    // Important implementation note:\n    //\n    // Actions only execute once by default, unless rescheduled from within the\n    // scheduled callback. This allows us to implement single and repeat\n    // actions via the same code path, without adding API surface area, as well\n    // as mimic traditional recursion but across asynchronous boundaries.\n    //\n    // However, JS runtimes and timers distinguish between intervals achieved by\n    // serial `setTimeout` calls vs. a single `setInterval` call. An interval of\n    // serial `setTimeout` calls can be individually delayed, which delays\n    // scheduling the next `setTimeout`, and so on. `setInterval` attempts to\n    // guarantee the interval callback will be invoked more precisely to the\n    // interval period, regardless of load.\n    //\n    // Therefore, we use `setInterval` to schedule single and repeat actions.\n    // If the action reschedules itself with the same delay, the interval is not\n    // canceled. If the action doesn't reschedule, or reschedules with a\n    // different delay, the interval will be canceled after scheduled callback\n    // execution.\n    //\n    if (id != null) {\n      this.id = this.recycleAsyncId(scheduler, id, delay);\n    }\n\n    this.delay = delay;\n    // If this action has already an async Id, don't request a new one.\n    this.id = this.id || this.requestAsyncId(scheduler, this.id, delay);\n\n    return this;\n  }\n\n  protected requestAsyncId(scheduler: AsyncScheduler, id?: any, delay: number = 0): any {\n    return root.setInterval(scheduler.flush.bind(scheduler, this), delay);\n  }\n\n  protected recycleAsyncId(scheduler: AsyncScheduler, id: any, delay: number = 0): any {\n    // If this action is rescheduled with the same delay time, don't clear the interval id.\n    if (delay !== null && this.delay === delay) {\n      return id;\n    }\n    // Otherwise, if the action's delay time is different from the current delay,\n    // clear the interval id\n    return root.clearInterval(id) && undefined || undefined;\n  }\n\n  /**\n   * Immediately executes this action and the `work` it contains.\n   * @return {any}\n   */\n  public execute(state: T, delay: number): any {\n\n    if (this.closed) {\n      return new Error('executing a cancelled action');\n    }\n\n    this.pending = false;\n    const error = this._execute(state, delay);\n    if (error) {\n      return error;\n    } else if (this.pending === false && this.id != null) {\n      // Dequeue if the action didn't reschedule itself. Don't call\n      // unsubscribe(), because the action could reschedule later.\n      // For example:\n      // ```\n      // scheduler.schedule(function doWork(counter) {\n      //   /* ... I'm a busy worker bee ... */\n      //   var originalAction = this;\n      //   /* wait 100ms before rescheduling the action */\n      //   setTimeout(function () {\n      //     originalAction.schedule(counter + 1);\n      //   }, 100);\n      // }, 1000);\n      // ```\n      this.id = this.recycleAsyncId(this.scheduler, this.id, null);\n    }\n  }\n\n  protected _execute(state: T, delay: number): any {\n    let errored: boolean = false;\n    let errorValue: any = undefined;\n    try {\n      this.work(state);\n    } catch (e) {\n      errored = true;\n      errorValue = !!e && e || new Error(e);\n    }\n    if (errored) {\n      this.unsubscribe();\n      return errorValue;\n    }\n  }\n\n  protected _unsubscribe() {\n\n    const id = this.id;\n    const scheduler = this.scheduler;\n    const actions = scheduler.actions;\n    const index = actions.indexOf(this);\n\n    this.work  = null;\n    this.delay = null;\n    this.state = null;\n    this.pending = false;\n    this.scheduler = null;\n\n    if (index !== -1) {\n      actions.splice(index, 1);\n    }\n\n    if (id != null) {\n      this.id = this.recycleAsyncId(scheduler, id, null);\n    }\n  }\n}\n","import {  root  } from './root';\n\nexport class RequestAnimationFrameDefinition {\n  cancelAnimationFrame: (handle: number) => void;\n  requestAnimationFrame: (cb: () => void) => number;\n  constructor(root: any) {\n    if (root.requestAnimationFrame) {\n      this.cancelAnimationFrame = root.cancelAnimationFrame.bind(root);\n      this.requestAnimationFrame = root.requestAnimationFrame.bind(root);\n    } else if (root.mozRequestAnimationFrame) {\n      this.cancelAnimationFrame = root.mozCancelAnimationFrame.bind(root);\n      this.requestAnimationFrame = root.mozRequestAnimationFrame.bind(root);\n    } else if (root.webkitRequestAnimationFrame) {\n      this.cancelAnimationFrame = root.webkitCancelAnimationFrame.bind(root);\n      this.requestAnimationFrame = root.webkitRequestAnimationFrame.bind(root);\n    } else if (root.msRequestAnimationFrame) {\n      this.cancelAnimationFrame = root.msCancelAnimationFrame.bind(root);\n      this.requestAnimationFrame = root.msRequestAnimationFrame.bind(root);\n    } else if (root.oRequestAnimationFrame) {\n      this.cancelAnimationFrame = root.oCancelAnimationFrame.bind(root);\n      this.requestAnimationFrame = root.oRequestAnimationFrame.bind(root);\n    } else {\n      this.cancelAnimationFrame = root.clearTimeout.bind(root);\n      this.requestAnimationFrame = function(cb) { return root.setTimeout(cb, 1000 / 60); };\n    }\n  }\n}\n\nexport const AnimationFrame = new RequestAnimationFrameDefinition(root);\n","import { AsyncAction } from './AsyncAction';\nimport { AnimationFrame } from '../util/AnimationFrame';\nimport { AnimationFrameScheduler } from './AnimationFrameScheduler';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class AnimationFrameAction<T> extends AsyncAction<T> {\n\n  constructor(protected scheduler: AnimationFrameScheduler,\n              protected work: (state?: T) => void) {\n    super(scheduler, work);\n  }\n\n  protected requestAsyncId(scheduler: AnimationFrameScheduler, id?: any, delay: number = 0): any {\n    // If delay is greater than 0, request as an async action.\n    if (delay !== null && delay > 0) {\n      return super.requestAsyncId(scheduler, id, delay);\n    }\n    // Push the action to the end of the scheduler queue.\n    scheduler.actions.push(this);\n    // If an animation frame has already been requested, don't request another\n    // one. If an animation frame hasn't been requested yet, request one. Return\n    // the current animation frame request id.\n    return scheduler.scheduled || (scheduler.scheduled = AnimationFrame.requestAnimationFrame(\n      scheduler.flush.bind(scheduler, null)\n    ));\n  }\n  protected recycleAsyncId(scheduler: AnimationFrameScheduler, id?: any, delay: number = 0): any {\n    // If delay exists and is greater than 0, recycle as an async action.\n    if (delay !== null && delay > 0) {\n      return super.recycleAsyncId(scheduler, id, delay);\n    }\n    // If the scheduler queue is empty, cancel the requested animation frame and\n    // set the scheduled flag to undefined so the next AnimationFrameAction will\n    // request its own.\n    if (scheduler.actions.length === 0) {\n      AnimationFrame.cancelAnimationFrame(id);\n      scheduler.scheduled = undefined;\n    }\n    // Return undefined so the action knows to request a new async id if it's rescheduled.\n    return undefined;\n  }\n}\n","import { Action } from './scheduler/Action';\nimport { Subscription } from './Subscription';\n\n/**\n * An execution context and a data structure to order tasks and schedule their\n * execution. Provides a notion of (potentially virtual) time, through the\n * `now()` getter method.\n *\n * Each unit of work in a Scheduler is called an {@link Action}.\n *\n * ```ts\n * class Scheduler {\n *   now(): number;\n *   schedule(work, delay?, state?): Subscription;\n * }\n * ```\n *\n * @class Scheduler\n */\nexport class Scheduler {\n\n  public static now: () => number = Date.now ? Date.now : () => +new Date();\n\n  constructor(private SchedulerAction: typeof Action,\n              now: () => number = Scheduler.now) {\n    this.now = now;\n  }\n\n  /**\n   * A getter method that returns a number representing the current time\n   * (at the time this function was called) according to the scheduler's own\n   * internal clock.\n   * @return {number} A number that represents the current time. May or may not\n   * have a relation to wall-clock time. May or may not refer to a time unit\n   * (e.g. milliseconds).\n   */\n  public now: () => number;\n\n  /**\n   * Schedules a function, `work`, for execution. May happen at some point in\n   * the future, according to the `delay` parameter, if specified. May be passed\n   * some context object, `state`, which will be passed to the `work` function.\n   *\n   * The given arguments will be processed an stored as an Action object in a\n   * queue of actions.\n   *\n   * @param {function(state: ?T): ?Subscription} work A function representing a\n   * task, or some unit of work to be executed by the Scheduler.\n   * @param {number} [delay] Time to wait before executing the work, where the\n   * time unit is implicit and defined by the Scheduler itself.\n   * @param {T} [state] Some contextual data that the `work` function uses when\n   * called by the Scheduler.\n   * @return {Subscription} A subscription in order to be able to unsubscribe\n   * the scheduled work.\n   */\n  public schedule<T>(work: (state?: T) => void, delay: number = 0, state?: T): Subscription {\n    return new this.SchedulerAction<T>(this, work).schedule(state, delay);\n  }\n}\n","import { Scheduler } from '../Scheduler';\nimport { AsyncAction } from './AsyncAction';\n\nexport class AsyncScheduler extends Scheduler {\n  public actions: Array<AsyncAction<any>> = [];\n  /**\n   * A flag to indicate whether the Scheduler is currently executing a batch of\n   * queued actions.\n   * @type {boolean}\n   */\n  public active: boolean = false;\n  /**\n   * An internal ID used to track the latest asynchronous task such as those\n   * coming from `setTimeout`, `setInterval`, `requestAnimationFrame`, and\n   * others.\n   * @type {any}\n   */\n  public scheduled: any = undefined;\n\n  public flush(action: AsyncAction<any>): void {\n\n    const {actions} = this;\n\n    if (this.active) {\n      actions.push(action);\n      return;\n    }\n\n    let error: any;\n    this.active = true;\n\n    do {\n      if (error = action.execute(action.state, action.delay)) {\n        break;\n      }\n    } while (action = actions.shift()); // exhaust the scheduler queue\n\n    this.active = false;\n\n    if (error) {\n      while (action = actions.shift()) {\n        action.unsubscribe();\n      }\n      throw error;\n    }\n  }\n}\n","import { AsyncAction } from './AsyncAction';\nimport { AsyncScheduler } from './AsyncScheduler';\n\nexport class AnimationFrameScheduler extends AsyncScheduler {\n  public flush(): void {\n\n    this.active = true;\n    this.scheduled = undefined;\n\n    const {actions} = this;\n    let error: any;\n    let index: number = -1;\n    let count: number = actions.length;\n    let action: AsyncAction<any> = actions.shift();\n\n    do {\n      if (error = action.execute(action.state, action.delay)) {\n        break;\n      }\n    } while (++index < count && (action = actions.shift()));\n\n    this.active = false;\n\n    if (error) {\n      while (++index < count && (action = actions.shift())) {\n        action.unsubscribe();\n      }\n      throw error;\n    }\n  }\n}\n","import { AnimationFrameAction } from './AnimationFrameAction';\nimport { AnimationFrameScheduler } from './AnimationFrameScheduler';\n\nexport const animationFrame = new AnimationFrameScheduler(AnimationFrameAction);\n","import { root } from '../util/root';\n\nconst Symbol: any = root.Symbol;\n\nexport const $$rxSubscriber = (typeof Symbol === 'function' && typeof Symbol.for === 'function') ?\n  Symbol.for('rxSubscriber') : '@@rxSubscriber';\n","import { root } from '../util/root';\n\nexport let $$iterator: any;\n\nconst Symbol: any = root.Symbol;\n\nif (typeof Symbol === 'function') {\n  if (Symbol.iterator) {\n    $$iterator = Symbol.iterator;\n  } else if (typeof Symbol.for === 'function') {\n    $$iterator = Symbol.for('iterator');\n  }\n} else {\n    if (root.Set && typeof new root.Set()['@@iterator'] === 'function') {\n      // Bug for mozilla version\n      $$iterator = '@@iterator';\n    } else if (root.Map) {\n      // es6-shim specific logic\n      let keys = Object.getOwnPropertyNames(root.Map.prototype);\n      for (let i = 0; i < keys.length; ++i) {\n        let key = keys[i];\n        if (key !== 'entries' && key !== 'size' && root.Map.prototype[key] === root.Map.prototype['entries']) {\n          $$iterator = key;\n          break;\n        }\n      }\n    } else {\n      $$iterator = '@@iterator';\n    }\n}","let objectTypes = {\n  'boolean': false,\n  'function': true,\n  'object': true,\n  'number': false,\n  'string': false,\n  'undefined': false\n};\n\ndeclare let global: NodeJS.Global;\ndeclare let module: any;\ndeclare let exports: any;\n\ndeclare module NodeJS {\n  interface Global {\n    window: any;\n    global: any;\n  }\n}\n\nexport let root: any = (objectTypes[typeof self] && self) || (objectTypes[typeof window] && window);\n\nlet freeGlobal = objectTypes[typeof global] && global;\nif (freeGlobal && (freeGlobal.global === freeGlobal || freeGlobal.window === freeGlobal)) {\n  root = freeGlobal;\n}\n","import { root } from '../util/root';\n\nexport function getSymbolObservable(context: any) {\n  let $$observable: any;\n  let Symbol = context.Symbol;\n\n  if (typeof Symbol === 'function') {\n    if (Symbol.observable) {\n      $$observable = Symbol.observable;\n    } else {\n        $$observable = Symbol('observable');\n        Symbol.observable = $$observable;\n    }\n  } else {\n    $$observable = '@@observable';\n  }\n\n  return $$observable;\n}\n\nexport const $$observable = getSymbolObservable(root);","/* tslint:disable:no-unused-variable */\n// Subject imported before Observable to bypass circular dependency issue since\n// Subject extends Observable and Observable references Subject in it's\n// definition\nexport {Subject} from './Subject';\n/* tslint:enable:no-unused-variable */\nexport {Observable} from './Observable';\n\n// statics\n/* tslint:disable:no-use-before-declare */\nimport './add/observable/bindCallback';\nimport './add/observable/bindNodeCallback';\nimport './add/observable/combineLatest';\nimport './add/observable/concat';\nimport './add/observable/defer';\nimport './add/observable/empty';\nimport './add/observable/forkJoin';\nimport './add/observable/from';\nimport './add/observable/fromEvent';\nimport './add/observable/fromEventPattern';\nimport './add/observable/fromPromise';\nimport './add/observable/generate';\nimport './add/observable/if';\nimport './add/observable/interval';\nimport './add/observable/merge';\nimport './add/observable/race';\nimport './add/observable/never';\nimport './add/observable/of';\nimport './add/observable/onErrorResumeNext';\nimport './add/observable/pairs';\nimport './add/observable/range';\nimport './add/observable/using';\nimport './add/observable/throw';\nimport './add/observable/timer';\nimport './add/observable/zip';\n\n//dom\nimport './add/observable/dom/ajax';\nimport './add/observable/dom/webSocket';\n\n//operators\nimport './add/operator/buffer';\nimport './add/operator/bufferCount';\nimport './add/operator/bufferTime';\nimport './add/operator/bufferToggle';\nimport './add/operator/bufferWhen';\nimport './add/operator/cache';\nimport './add/operator/catch';\nimport './add/operator/combineAll';\nimport './add/operator/combineLatest';\nimport './add/operator/concat';\nimport './add/operator/concatAll';\nimport './add/operator/concatMap';\nimport './add/operator/concatMapTo';\nimport './add/operator/count';\nimport './add/operator/dematerialize';\nimport './add/operator/debounce';\nimport './add/operator/debounceTime';\nimport './add/operator/defaultIfEmpty';\nimport './add/operator/delay';\nimport './add/operator/delayWhen';\nimport './add/operator/distinct';\nimport './add/operator/distinctKey';\nimport './add/operator/distinctUntilChanged';\nimport './add/operator/distinctUntilKeyChanged';\nimport './add/operator/do';\nimport './add/operator/exhaust';\nimport './add/operator/exhaustMap';\nimport './add/operator/expand';\nimport './add/operator/elementAt';\nimport './add/operator/filter';\nimport './add/operator/finally';\nimport './add/operator/find';\nimport './add/operator/findIndex';\nimport './add/operator/first';\nimport './add/operator/groupBy';\nimport './add/operator/ignoreElements';\nimport './add/operator/isEmpty';\nimport './add/operator/audit';\nimport './add/operator/auditTime';\nimport './add/operator/last';\nimport './add/operator/let';\nimport './add/operator/every';\nimport './add/operator/map';\nimport './add/operator/mapTo';\nimport './add/operator/materialize';\nimport './add/operator/max';\nimport './add/operator/merge';\nimport './add/operator/mergeAll';\nimport './add/operator/mergeMap';\nimport './add/operator/mergeMapTo';\nimport './add/operator/mergeScan';\nimport './add/operator/min';\nimport './add/operator/multicast';\nimport './add/operator/observeOn';\nimport './add/operator/onErrorResumeNext';\nimport './add/operator/pairwise';\nimport './add/operator/partition';\nimport './add/operator/pluck';\nimport './add/operator/publish';\nimport './add/operator/publishBehavior';\nimport './add/operator/publishReplay';\nimport './add/operator/publishLast';\nimport './add/operator/race';\nimport './add/operator/reduce';\nimport './add/operator/repeat';\nimport './add/operator/repeatWhen';\nimport './add/operator/retry';\nimport './add/operator/retryWhen';\nimport './add/operator/sample';\nimport './add/operator/sampleTime';\nimport './add/operator/scan';\nimport './add/operator/sequenceEqual';\nimport './add/operator/share';\nimport './add/operator/single';\nimport './add/operator/skip';\nimport './add/operator/skipUntil';\nimport './add/operator/skipWhile';\nimport './add/operator/startWith';\nimport './add/operator/subscribeOn';\nimport './add/operator/switch';\nimport './add/operator/switchMap';\nimport './add/operator/switchMapTo';\nimport './add/operator/take';\nimport './add/operator/takeLast';\nimport './add/operator/takeUntil';\nimport './add/operator/takeWhile';\nimport './add/operator/throttle';\nimport './add/operator/throttleTime';\nimport './add/operator/timeInterval';\nimport './add/operator/timeout';\nimport './add/operator/timeoutWith';\nimport './add/operator/timestamp';\nimport './add/operator/toArray';\nimport './add/operator/toPromise';\nimport './add/operator/window';\nimport './add/operator/windowCount';\nimport './add/operator/windowTime';\nimport './add/operator/windowToggle';\nimport './add/operator/windowWhen';\nimport './add/operator/withLatestFrom';\nimport './add/operator/zip';\nimport './add/operator/zipAll';\n\n/* tslint:disable:no-unused-variable */\nexport {Operator} from './Operator';\nexport {Observer} from './Observer';\nexport {Subscription} from './Subscription';\nexport {Subscriber} from './Subscriber';\nexport {AsyncSubject} from './AsyncSubject';\nexport {ReplaySubject} from './ReplaySubject';\nexport {BehaviorSubject} from './BehaviorSubject';\nexport {MulticastObservable} from './observable/MulticastObservable';\nexport {ConnectableObservable} from './observable/ConnectableObservable';\nexport {Notification} from './Notification';\nexport {EmptyError} from './util/EmptyError';\nexport {ArgumentOutOfRangeError} from './util/ArgumentOutOfRangeError';\nexport {ObjectUnsubscribedError} from './util/ObjectUnsubscribedError';\nexport {UnsubscriptionError} from './util/UnsubscriptionError';\nexport {TimeInterval} from './operator/timeInterval';\nexport {Timestamp} from './operator/timestamp';\nexport {TestScheduler} from './testing/TestScheduler';\nexport {VirtualTimeScheduler} from './scheduler/VirtualTimeScheduler';\nexport {AjaxRequest, AjaxResponse, AjaxError, AjaxTimeoutError} from './observable/dom/AjaxObservable';\n\nimport { asap } from './scheduler/asap';\nimport { async } from './scheduler/async';\nimport { queue } from './scheduler/queue';\nimport { animationFrame } from './scheduler/animationFrame';\nimport { AsapScheduler } from './scheduler/AsapScheduler';\nimport { AsyncScheduler } from './scheduler/AsyncScheduler';\nimport { QueueScheduler } from './scheduler/QueueScheduler';\nimport { AnimationFrameScheduler } from './scheduler/AnimationFrameScheduler';\nimport { $$rxSubscriber as rxSubscriber } from './symbol/rxSubscriber';\nimport { $$iterator as iterator } from './symbol/iterator';\nimport { $$observable as observable } from './symbol/observable';\n\n/* tslint:enable:no-unused-variable */\n\n/**\n * @typedef {Object} Rx.Scheduler\n * @property {Scheduler} queue Schedules on a queue in the current event frame\n * (trampoline scheduler). Use this for iteration operations.\n * @property {Scheduler} asap Schedules on the micro task queue, which uses the\n * fastest transport mechanism available, either Node.js' `process.nextTick()`\n * or Web Worker MessageChannel or setTimeout or others. Use this for\n * asynchronous conversions.\n * @property {Scheduler} async Schedules work with `setInterval`. Use this for\n * time-based operations.\n * @property {Scheduler} animationFrame Schedules work with `requestAnimationFrame`.\n * Use this for synchronizing with the platform's painting\n */\nlet Scheduler = {\n  asap,\n  queue,\n  animationFrame,\n  async\n};\n\n/**\n * @typedef {Object} Rx.Symbol\n * @property {Symbol|string} rxSubscriber A symbol to use as a property name to\n * retrieve an \"Rx safe\" Observer from an object. \"Rx safety\" can be defined as\n * an object that has all of the traits of an Rx Subscriber, including the\n * ability to add and remove subscriptions to the subscription chain and\n * guarantees involving event triggering (can't \"next\" after unsubscription,\n * etc).\n * @property {Symbol|string} observable A symbol to use as a property name to\n * retrieve an Observable as defined by the [ECMAScript \"Observable\" spec](https://github.com/zenparsing/es-observable).\n * @property {Symbol|string} iterator The ES6 symbol to use as a property name\n * to retrieve an iterator from an object.\n */\nlet Symbol = {\n  rxSubscriber,\n  observable,\n  iterator\n};\n\nexport {\n    Scheduler,\n    Symbol\n};\n"]}