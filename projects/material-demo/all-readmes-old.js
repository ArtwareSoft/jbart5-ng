jb_resource('material-demo','readmes',[{"id":"button","content":"# md-button\r\n\r\n`md-button` is an HTML `<button>` or `<a>` tag enhanced with styling and animation to match the\r\n[Material Design button spec](https://www.google.com/design/spec/components/buttons.html).\r\n\r\nUsers should employ a button element (`<button>`) when clicking triggers some action in the current\r\nview *without navigating*. An anchor element (`<a>`) should be used when clicking *navigates*\r\nthe user to another URL. Depending on which element is used, the component will either be an\r\ninstance of `MdButton` or `MdAnchor`. Visually, the two are identical.\r\n\r\n\r\n### Button types\r\n\r\nThere are five types of buttons:\r\n 1. Flat buttons - `md-button`\r\n    * Rectangular button\r\n    * Defaults to white background\r\n    * No box shadow\r\n 2. Raised buttons - `md-raised-button`\r\n    * Rectangular button\r\n    * Defaults to white background\r\n    * Box shadow applied\r\n 3. Icon buttons - `md-icon-button`\r\n    * Circular button\r\n    * Transparent background\r\n    * 40 by 40 px\r\n 4. Floating Action Buttons (FABs) - `md-fab`\r\n    * Circular button\r\n    * Defaults background to \"accent\" palette defined in theme\r\n    * Box shadow applied\r\n    * 56 by 56 px\r\n 5. Mini Floating Action Buttons (Mini FABs) - `md-mini-fab`\r\n    * Circular button\r\n    * Defaults background to \"accent\" palette defined in theme\r\n    * Box shadow applied\r\n    * 40 by 40 px\r\n\r\nEach is an attribute directive that you can add to a `button` or `a` tag.  You can provide custom content to the button by inserting it\r\nbetween the tags, as you would with a normal button.\r\n\r\nExample:\r\n\r\n ```html\r\n<button md-button>FLAT</button>\r\n<button md-raised-button>RAISED</button>\r\n<button md-icon-button>\r\n    <md-icon class=\"md-24\">favorite</md-icon>\r\n</button>\r\n<button md-fab>\r\n    <md-icon class=\"md-24\">add</md-icon>\r\n</button>\r\n<button md-mini-fab>\r\n    <md-icon class=\"md-24\">add</md-icon>\r\n</button>\r\n ```\r\n\r\nOutput:\r\n\r\n<img src=\"https://material.angularjs.org/material2_assets/buttons/basic-buttons.png\">\r\n\r\n### Theming\r\n\r\nAll button types can be themed to match your \"primary\" palette, your \"accent\" palette, or your \"warn\" palette using the `color` attribute.\r\nSimply pass in the palette name.\r\n\r\nIn flat buttons, the palette chosen will affect the text color, while in other buttons, it affects the background.\r\n\r\nExample:\r\n\r\n ```html\r\n<button md-raised-button color=\"primary\">PRIMARY</button>\r\n<button md-raised-button color=\"accent\">ACCENT</button>\r\n<button md-raised-button color=\"warn\">WARN</button>\r\n ```\r\n\r\nOutput:\r\n\r\n<img src=\"https://material.angularjs.org/material2_assets/buttons/colored-buttons.png\">\r\n\r\n### Disabling\r\n\r\nYou can disable any button type through the native `disabled` property.  You can add it directly, or bind it to a property on your\r\ncomponent class by adding `[disabled]=\"isDisabled\"` given that the `isDisabled`\r\nproperty exists.\r\n\r\n```html\r\n<button md-button disabled>OFF</button>\r\n<button md-raised-button [disabled]=\"isDisabled\">OFF</button>\r\n<button md-mini-fab [disabled]=\"isDisabled\"><md-icon>check</md-icon></button>\r\n```\r\n\r\nOutput:\r\n\r\n<img src=\"https://material.angularjs.org/material2_assets/buttons/disabled-buttons.png\">\r\n\r\n### Accessibility\r\n\r\n * In high contrast mode, a strong border is added to the button to make it easier to see.\r\n * Button focus events originating from the keyboard will retain focus styles, while button focus events from the mouse will not.\r\n * As `md-button` is added to an existing `button` or `a` tag, it enjoys all the accessibility natively built into these elements.\r\n\r\n\r\n### Upcoming work\r\n\r\nWe will also be adding ink ripples to buttons in an upcoming milestone.\r\n\r\n### API Summary\r\n\r\nProperties:\r\n\r\n| Name | Type | Description |\r\n| --- | --- | --- |\r\n| `color` | `\"primary\"|\"accent\"|\"warn\"` | The color palette of the button\r\n| `disabled` | boolean | Whether or not the button is disabled\r\n| `disableRipple` | boolean | Whether the ripple effect when the button is clicked should be disabled\r\n"},{"id":"button-toggle","content":"# md-button-toggle\r\n\r\n`MdButtonToggle` is a group of buttons that can be toggled.\r\nThere are two modes, `multiple` and `exclusive`.\r\nWhen in 'exclusive' mode, only one button can be selected at a time (like radio buttons).\r\nWhen in 'multiple' mode, multiple buttons can be selected at once (like checkboxes).\r\nYou can read more about button toggles in the\r\n[Material Design spec](https://material.google.com/components/buttons.html#buttons-toggle-buttons).\r\n\r\n## Usage\r\n\r\n### Setup\r\n\r\nImporting the module:\r\n```ts\r\n @NgModule({\r\n    imports: [MdButtonToggleModule.forRoot()],\r\n    ...\r\n })\r\n export class MyAppModule { }\r\n```\r\n\r\n### Basic Usage\r\n\r\n`md-button-toggle` can be used on its own and acts as a checkbox.\r\n\r\n```html\r\n<md-button-toggle>Bold</md-button-toggle>\r\n```\r\n\r\nOutput:\r\n\r\n![Basic Toggle Button Example](https://material.angularjs.org/material2_assets/button-toggle/basic-toggle.png)\r\n\r\n### Exclusive Selection\r\n\r\n`md-button-toggle` can be used in an exclusive selection group when surrounded by\r\n`md-button-toggle-group`. This styles all buttons within the group to appear as a single\r\ngroup of button toggles and allows only one button toggle to be selected at a time.\r\n\r\n```html\r\n<md-button-toggle-group name=\"alignment\">\r\n    <md-button-toggle value=\"left\"><md-icon>format_align_left</md-icon></md-button-toggle>\r\n    <md-button-toggle value=\"center\"><md-icon>format_align_center</md-icon></md-button-toggle>\r\n    <md-button-toggle value=\"right\"><md-icon>format_align_right</md-icon></md-button-toggle>\r\n    <md-button-toggle value=\"justify\"><md-icon>format_align_justify</md-icon></md-button-toggle>\r\n</md-button-toggle-group>\r\n```\r\n\r\nOutput:\r\n\r\n![Exclusive Toggle Button Example](https://material.angularjs.org/material2_assets/button-toggle/exclusive-toggle.png)\r\n\r\n### Multiple Selection\r\n\r\n`md-button-toggle` can be used in a multiple selection group when surrounded by\r\n`md-button-toggle-group multiple`. This styles all buttons within the group to appear as a single\r\ngroup of button toggles.\r\n\r\n```html\r\n<md-button-toggle-group multiple>\r\n    <md-button-toggle>Flour</md-button-toggle>\r\n    <md-button-toggle>Eggs</md-button-toggle>\r\n    <md-button-toggle>Sugar</md-button-toggle>\r\n    <md-button-toggle>Milk</md-button-toggle>\r\n</md-button-toggle-group>\r\n```\r\n\r\nOutput:\r\n\r\n![Multiple Toggle Button Example](https://material.angularjs.org/material2_assets/button-toggle/multi-toggle.png)\r\n\r\n## Dynamic Exclusive Selection\r\n\r\n`md-button-toggle`s can be used with `ngModel` to dynamically create groups and update the value for\r\na group.\r\n\r\n```html\r\n<md-button-toggle-group name=\"pies\" [(ngModel)]=\"favoritePie\">\r\n    <md-button-toggle *ngFor=\"let pie of pieOptions\" [value]=\"pie\">\r\n        {{pie}}\r\n    </md-button-toggle>\r\n</md-button-toggle-group>\r\n<p>Your favorite type of pie is: {{favoritePie}}</p>\r\n```\r\n\r\n### Disabled Button Toggle\r\n\r\n`md-button-toggle-group` and `md-button-toggle` can both be disabled by adding a `disabled`\r\nattribute to either one. Adding `disabled` to an exclusive group or a multiple group will disable\r\nthe entire group. Adding `disabled` to a single toggle will disable that toggle.\r\n\r\n```html\r\n<md-button-toggle-group disabled>\r\n    <md-button-toggle value=\"one\">One</md-button-toggle>\r\n    <md-button-toggle value=\"two\">Two</md-button-toggle>\r\n    <md-button-toggle value=\"three\">Three</md-button-toggle>\r\n</md-button-toggle-group>\r\n\r\n<md-button-toggle-group>\r\n    <md-button-toggle value=\"red\" disabled>Red</md-button-toggle>\r\n    <md-button-toggle value=\"blue\">Blue</md-button-toggle>\r\n</md-button-toggle-group>\r\n```\r\n\r\nOutput:\r\n\r\n![Disabled Toggle Buttons Example](https://material.angularjs.org/material2_assets/button-toggle/disabled-toggles.png)\r\n\r\n## `<md-button-toggle>`\r\n\r\n### Bound Properties\r\n\r\n| Name | Type | Description |\r\n| --- | --- | --- |\r\n| `id` | string | The unique ID of the toggle. IDs are generated by default when not specified. |\r\n| `name` | string | Optional, defaults to parent group name if one exists for exclusive selection toggles, otherwise null. This is used to differentiate between different groups. |\r\n| `value` | any | Value of the toggle. Only used when in a group to determine which are selected. |\r\n| `checked` | boolean | Optional, default = `false`. Whether or not the toggle is checked. |\r\n| `disabled` | boolean | Optional, default = `false`. Whether or not the toggle is disabled |\r\n\r\n### Events\r\n\r\n| Name | Description |\r\n| --- | --- |\r\n| `change` | Emitted when the `checked` value is changed. |\r\n\r\n## `<md-button-toggle-group>`\r\n\r\n### Bound Properties\r\n\r\n| Name | Type | Description |\r\n| --- | --- | --- |\r\n| `name` | string | Optional, the name of the group. |\r\n| `disabled` | boolean | Optional, default = `false`. |\r\n| `value` | any | The current value for the group. Will be set to the value of the selected toggle or a list of values from the selected toggles. |\r\n| `selected` | `mdButtonToggle` | The current selected toggle or a list of the selected toggles. |\r\n\r\n### Attributes\r\n\r\n| Name | Type | Description |\r\n| --- | --- | --- |\r\n| `multiple` | boolean | Optional, default = `false`. Whether or not the group allows multiple selection. |\r\n\r\n### Events\r\n\r\n| Name | Description |\r\n| --- | --- |\r\n| `change` | Emitted when the `value` of the group changes. |\r\n"},{"id":"card","content":"# md-card\r\n\r\n`md-card` is a content container component that conforms to the spec of a Material Design card.\r\n\r\nSee plunker example [here](http://plnkr.co/edit/pkUNGMXPcf8RXKapXNXQ?p=preview).\r\n\r\n## Usage\r\n\r\nSimply add your content between `md-card` tags to consume basic card styles like box-shadow and default padding.\r\n\r\n```html\r\n<md-card>\r\n   Basic card.\r\n</md-card>\r\n```\r\n\r\nOutput:\r\n\r\n<img src=\"https://material.angularjs.org/material2_assets/cards/basic-card-min.png\">\r\n\r\n### Preset sections \r\n\r\nWe also provide a number of preset sections that you can mix and match within the `md-card` tags. \r\n\r\n  * `<md-card-title>`: adds styles for a title\r\n  * `<md-card-subtitle>`: adds styles for a subtitle\r\n  * `<md-card-content>`: main content section, intended for blocks of text\r\n  * `<img md-card-image>`: stretches image to container width\r\n  * `<md-card-actions>`: wraps and styles buttons\r\n  * `<md-card-footer>`: anchors section to bottom of card (e.g progress bar)\r\n\r\nExample markup for a card with section presets:\r\n\r\n```html\r\n<md-card>\r\n   <md-card-subtitle>Subtitle first</md-card-subtitle>\r\n   <md-card-title>Card with title</md-card-title>   \r\n   <md-card-content>\r\n        <p>This is supporting text.</p>\r\n        <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do \r\n        tempor incididunt ut labore et dolore magna aliqua. Ut enim ad</p>\r\n   </md-card-content>\r\n   <md-card-actions>\r\n        <button md-button>LIKE</button>\r\n        <button md-button>SHARE</button>\r\n   </md-card-actions>\r\n</md-card>\r\n```\r\n\r\nOutput:\r\n\r\n<img src=\"https://material.angularjs.org/material2_assets/cards/sections-card-min.png\">\r\n\r\n#### Preset shortcuts\r\n\r\n`md-card-actions` has a few layout shortcuts. You can add `align=\"end\"` to align the buttons at the end of\r\nthe main axis (flex-end). The default is `align=\"start\"` (flex-start).\r\n\r\n### Preset layouts\r\n\r\nYou can also leverage preset layouts that format some of the sections together.\r\n\r\n#### `<md-card-header>`\r\n\r\nFormats the following sections into a header:\r\n\r\n  * `<md-card-title>`: title to format within header\r\n  * `<md-card-subtitle>`: subtitle to format within header\r\n  * `<img md-card-avatar>`: image to use for avatar\r\n    \r\nExample markup for a card with a header:\r\n\r\n```html\r\n<md-card>\r\n   <md-card-header>\r\n      <img md-card-avatar src=\"path/to/img.png\">\r\n      <md-card-title>Header title</md-card-title>\r\n      <md-card-subtitle>Header subtitle</md-card-subtitle>\r\n   </md-card-header>\r\n   <img md-card-image src=\"path/to/img.png\">\r\n   <md-card-content>\r\n      <p>Here is some more content</p>\r\n   </md-card-content>\r\n</md-card>\r\n```\r\n\r\nOutput:\r\n\r\n<img src=\"https://material.angularjs.org/material2_assets/cards/header-card-min.png\">    \r\n    \r\n#### `<md-card-title-group>`\r\n\r\nGroups the following sections together:\r\n\r\n  * `<md-card-title>`: title to format within group\r\n  * `<md-card-subtitle>`: subtitle to format within group\r\n  * One of the following image sizes:\r\n    * `<img md-card-sm-image>`\r\n    * `<img md-card-md-image>`\r\n    * `<img md-card-lg-image>`\r\n\r\nExample markup for a card with title-group layout:\r\n\r\n```html\r\n<md-card>\r\n   <md-card-title-group>\r\n      <img md-card-sm-image src=\"path/to/img.png\">\r\n      <md-card-title>Card with title</md-card-title>\r\n      <md-card-subtitle>Subtitle</md-card-subtitle>\r\n   </md-card-title-group>\r\n</md-card>\r\n```\r\n\r\nOutput:\r\n\r\n<img src=\"https://material.angularjs.org/material2_assets/cards/title-group-card-min.png\">"},{"id":"checkbox","content":"# md-checkbox\r\n\r\n`md-checkbox` is a Material Design selection control that allows users to make a binary choice for\r\na predetermined conditioned. It is modeled after the browser's native checkbox element, and behaves\r\nin the same way. Similar to the native checkbox element, it supports an indeterminate state for\r\n\"mixed\" checkboxes.\r\n\r\nA demo of the checkbox can be found at https://plnkr.co/edit/P7qce8lN9n2flS6kBhDy?p=preview.\r\n\r\n## Usage\r\n\r\n### Basic Usage\r\n\r\n`md-checkbox` can be used anywhere a normal checkbox would be used, and in the same way.\r\n\r\n```html\r\n<ul>\r\n  <li *ngFor=\"let todo of todos\">\r\n    <md-checkbox [checked]=\"todo.completed\"\r\n                 (change)=\"todo.completed = $event\">\r\n      {{todo.name}}\r\n    </md-checkbox>\r\n  </li>\r\n</ul>\r\n```\r\n\r\n### Usage within Forms\r\n\r\nIn addition to supporting native checkbox functionality, `md-checkbox` also supports `[(ngModel)]`\r\nfor use within forms.\r\n\r\n```html\r\n<form (submit)=\"saveUser()\">\r\n  <!-- Form fields... -->\r\n  <div>\r\n    <md-checkbox [(ngModel)]=\"user.agreesToTOS\">\r\n      I have read and agree to the terms of service.\r\n    </md-checkbox>\r\n  </div>\r\n  <button type=\"submit\" [disabled]=\"!user.agreesToTOS\">Sign Up</button>\r\n</form>\r\n```\r\n\r\n### Indeterminate Checkboxes\r\n\r\nIndeterminate checkboxes are useful when a checkbox needs to be in a \"mixed\" state\r\n\r\n```html\r\n<md-checkbox [checked]=\"false\"\r\n             [indeterminate]=\"isIndeterminate\"\r\n             (change)=\"isIndeterminate = false\">\r\n  Click the Button Below to Make Me Indeterminate.\r\n</md-checkbox>\r\n<button type=\"button\" (click)=\"isIndeterminate = true\">\r\n  Make Indeterminate\r\n</button>\r\n```\r\n\r\n### Alignment\r\n\r\nNote that checkboxes can be aligned to come at the \"start\" or the \"end\" of its corresponding label.\r\n\r\n```html\r\n<md-checkbox [checked]=\"true\" align=\"end\">\r\n  I come after my label.\r\n</md-checkbox>\r\n```\r\n\r\nNote that this alignment is preserved within RTL layouts.\r\n\r\n### Accessibility\r\n\r\nBy default, `md-checkbox` provides all the accessibility attributes needed. It also supports\r\nkeyboard navigation and toggling via the spacebar. However, you can provide an `aria-label` to the\r\ncheckbox if you do not wish to have any label text.\r\n\r\n```html\r\n<md-checkbox [checked]=\"false\" aria-label=\"My standalone checkbox\"></md-checkbox>\r\n```\r\n"},{"id":"core","content":"Core library code for other `@angular2-material` components.\r\nThis should be added as a dependency for any project using the components.\r\n"},{"id":"dialog","content":""},{"id":"grid-list","content":"# md-grid-list\r\n\r\n`md-grid-list` is an alternative list view that arranges cells into grid-based layout. \r\nSee Material Design spec [here](https://www.google.com/design/spec/components/grid-lists.html).\r\n\r\n## Usage\r\n\r\n### Simple grid list\r\n\r\nTo use `md-grid-list`, import the MdGridList module into your application's NgModule:\r\n\r\n*my-app-module.ts*\r\n```ts\r\nimport {MdGridListModule} from '@angular2-material/grid-list';\r\n\r\n@NgModule({\r\n  imports: [MdGridListModule.forRoot()],\r\n  ...\r\n})\r\nexport class MyAppModule {}\r\n```\r\n\r\nIn your template, create an `md-grid-list` element and specify the number of columns you want for\r\nyour grid using the `cols` property (this is the only mandatory attribute). \r\n\r\nYou can define each tile using an `md-grid-tile` element, passing any tile content between its tags.\r\n\r\nTiles are greedily placed in the first position of the grid that fits them, so row count depends on \r\nhow many tiles can fit in each row, given the col count and the colspan/rowspan of each tile.\r\n\r\n```html\r\n<md-grid-list cols=\"4\" [style.background]=\"'lightblue'\">\r\n   <md-grid-tile>One</md-grid-tile>\r\n   <md-grid-tile>Two</md-grid-tile>\r\n   <md-grid-tile>Three</md-grid-tile>\r\n   <md-grid-tile>Four</md-grid-tile>\r\n</md-grid-list>\r\n```\r\n\r\nOutput:\r\n\r\n<img src=\"https://material.angularjs.org/material2_assets/grid-list/basic-grid-list.png\">\r\n\r\n## Grid list config\r\n\r\n####`cols`\r\n\r\nThe `cols` property controls the number of columns displayed in your grid. It must be set or the \r\ngrid list will not be able to generate your layout.\r\n\r\nEx: `<md-grid-list cols=\"3\">...`\r\n\r\nDefault: There is no reasonable default value for this, so if it is unspecified, the grid list will \r\nthrow an error.\r\n\r\n####`rowHeight`\r\n\r\nRow height for the list can be calculated in three ways:\r\n\r\n1. **Fixed height**: The height can be in `px`, `em`, or `rem`.  If no units are specified, `px` \r\nunits are assumed. \r\n   \r\n   Ex: `<md-grid-list cols=\"3\" rowHeight=\"100px\">...`\r\n        \r\n2. **Ratio**: This ratio is width:height, and must be passed in with a colon, not a decimal.\r\n\r\n   Ex: `<md-grid-list cols=\"3\" rowHeight=\"4:3\">...`.\r\n        \r\n3. **Fit**:  This mode automatically divides the available height by the number of rows.  Please note\r\nthe height of the grid-list or its container must be set.  \r\n\r\n   Ex: `<md-grid-list cols=\"3\" rowHeight=\"fit\">...`\r\n\r\nDefaults to a 1:1 ratio of width:height. \r\n        \r\n####`gutterSize`\r\n\r\nGutter size can be set to any `px`, `em`, or `rem` value with the `gutterSize` property.  If no \r\nunits are specified, `px` units are assumed.\r\n\r\nEx: `<md-grid-list cols=\"3\" gutterSize=\"4px\">...`\r\n\r\nDefaults to `1px`.\r\n        \r\n## Grid tile config\r\n\r\nYou can set the rowspan and colspan of each tile individually, using the `rowspan` and `colspan` \r\nproperties.  If not set, they both default to `1`.\r\n\r\n```html\r\n<md-grid-list cols=\"4\" rowHeight=\"100px\">\r\n  <md-grid-tile *ngFor=\"let tile of tiles\" [colspan]=\"tile.cols\" [rowspan]=\"tile.rows\"\r\n  [style.background]=\"tile.color\">\r\n    {{tile.text}}\r\n  </md-grid-tile>\r\n</md-grid-list>\r\n```\r\n\r\n```javascript\r\n...\r\nexport class MyComp {\r\n  tiles: any[] = [\r\n    {text: 'One', cols: 3, rows: 1, color: 'lightblue'},\r\n    {text: 'Two', cols: 1, rows: 2, color: 'lightgreen'},\r\n    {text: 'Three', cols: 1, rows: 1, color: 'lightpink'},\r\n    {text: 'Four', cols: 2, rows: 1, color: '#DDBDF1'},\r\n  ];\r\n}\r\n```\r\n\r\nOutput:\r\n\r\n<img src=\"https://material.angularjs.org/material2_assets/grid-list/fancy-grid-list.png\">\r\n\r\n## TODO\r\n\r\n- Grid tile headers and footers\r\n- Responsive sizing support\r\n"},{"id":"icon","content":"# md-icon\r\n\r\n`md-icon` is a component that displays an icon, which can be a font glyph or an SVG image.\r\n\r\n## MdIconRegistry\r\n\r\n`MdIconRegistry` is an injectable service that allows you to associate icon names with SVG URLs and define aliases for CSS font classes. Its methods are discussed below and listed in the API summary.\r\n\r\n## Font icons\r\n\r\n### Ligatures\r\n\r\nSome fonts are designed to show icons by using [ligatures](https://en.wikipedia.org/wiki/Typographic_ligature), for example by rendering the text \"home\" as a home image. To use a ligature icon, put its text in the content of the `md-icon` component, for example:\r\n```html\r\n<md-icon>home</md-icon>\r\n```\r\n\r\nBy default the [Material icons font](http://google.github.io/material-design-icons/#icon-font-for-the-web) is used. (You will still need to include the HTML to load the font and its CSS, as described in the link). You can specify a different font by setting the `fontSet` input to either the CSS class to apply to use the desired font, or to an alias previously registered with `MdIconRegistry.registerFontClassAlias`, for example:\r\n```javascript\r\nmdIconRegistry.registerFontClassAlias('myfont', 'my-icon-font-class');\r\n```\r\n\r\n```html\r\n<md-icon fontSet=\"myfont\">help</md-icon>\r\n```\r\n\r\n### Font icons via CSS\r\n\r\nFonts can also display icons by defining a CSS class for each icon glyph, which typically uses a :before selector to cause the icon to appear. [FontAwesome](https://fortawesome.github.io/Font-Awesome/examples/) uses this approach to display its icons. To use such a font, set the `fontSet` input to the font's CSS class (either the class itself or an alias registered with `MdIconRegistry.registerFontClassAlias`), and set the `fontIcon` input to the class for the specific icon to show. Example:\r\n\r\n```html\r\n<md-icon fontSet=\"fa\" fontIcon=\"fa-square\"></md-icon>\r\n```\r\n\r\nFor both types of font icons, you can specify the default font class to use when `fontSet` is not explicitly set by calling `MdIconRegistry.setDefaultFontSetClass`.\r\n\r\n## SVG icons\r\n\r\nWhen an `md-icon` component displays an SVG icon, it does so by directly inlining the SVG content into the page as a child of the component. (Rather than using an <img> tag or a div background image). This makes it easier to apply CSS styles to SVG icons. For example, the default color of the SVG content is the CSS [currentColor](http://www.quirksmode.org/css/color/currentcolor.html) value. This makes SVG icons by default have the same color as surrounding text, and allows you to change the color by setting the \"color\" style on the `md-icon` element.\r\n\r\n### Icons from URLs\r\n\r\nSVG icons can be used either by directly specifying the icon's URL, or by associating an icon name with a URL and then referring to the name. To use a URL directly, set the `svgSrc` input:\r\n```html\r\n<md-icon svgSrc=\"/assets/sun.svg\"></md-icon>\r\n```\r\n\r\n### Named icons\r\n\r\nTo associate a name with an icon URL, use the `addSvgIcon` or `addSvgIconInNamespace` methods of `MdIconRegistry`. After registering an icon, it can be displayed by setting the `svgIcon` input. For an icon in the default namespace, use the name directly. For a non-default namespace, use the format `[namespace]:[name]`. Examples:\r\n```javascript\r\nmdIconRegistry.addSvgIcon('moon', '/assets/moon.svg');\r\nmdIconRegistry.addSvgIconInNamespace('animals', 'cat', '/assets/cat.svg');\r\n```\r\n\r\n```html\r\n<md-icon svgIcon=\"moon\"></md-icon>\r\n<md-icon svgIcon=\"animals:cat\"></md-icon>\r\n```\r\n\r\n### Icon sets\r\n\r\nIcon sets allow grouping multiple icons into a single SVG file. The content of an icon set file looks like this, where each nested `<svg>` tag defines an individual icon, and is identified with a unique \"id\" attribute.\r\n```\r\n<svg>\r\n  <defs>\r\n    <svg id=\"mercury\">...</svg>\r\n    <svg id=\"venus\">...</svg>\r\n    <svg id=\"earth\">...</svg>\r\n    <svg id=\"mars\">...</svg>\r\n  </defs>\r\n</svg>\r\n```\r\n\r\nIcon sets are registered using the `addSvgIconSet` or `addSvgIconSetInNamespace` methods of `MdIconRegistry`. After an icon set is registered, each of its embedded icons can be accessed by their \"id\" attributes. To display an icon from an icon set, use the `svgIcon` input in the same way as for individually registered icons. Example:\r\n```javascript\r\nmdIconRegistry.addSvgIconSetInNamespace('planets', '/assets/planets.svg');\r\n```\r\n\r\n```html\r\n<md-icon svgIcon=\"planets:venus\"></md-icon>\r\n```\r\n\r\nMultiple icon sets can be registered in the same namespace. If you request an icon whose id appears in more than one icon set, the icon from the most recently registered set will be used.\r\n\r\nNote that all SVG icons are fetched via XmlHttpRequest, and due to the same-origin policy their URLs must be on the same domain as the containing page, or their servers must be configured to allow cross-domain access.\r\n\r\n### Accessibility\r\n\r\nIf you set an \"aria-label\" attribute on the md-icon element, its value will be used as-is. If you do not, the md-icon component will attempt to set the aria-label value from one of these sources:\r\n* The `alt` attribute\r\n* The `fontIcon` input\r\n* The name of the icon from the `svgIcon` input (not including any namespace)\r\n* The text content of the component (for ligature icons)\r\n\r\n### API Summary\r\n\r\nmd-icon Properties:\r\n\r\n| Name         | Type     | Description |\r\n| ---          | ---      | --- |\r\n| `svgSrc`     | string   | The URL of the SVG icon to display |\r\n| `svgIcon`    | string   | The name (and possibly namespace) of an icon previously registered with `MdIconRegistry.addSvgIcon` or `MdIconRegistry.addSvgIconInNamespace` |\r\n| `fontSet`    | string   | The font to use to display an icon glyph. The value can be either a CSS class name, or an alias previously defined with `MdIconRegistry.registerFontClassAlias` |\r\n| `fontIcon`   | string   | The CSS class that identifies the specific icon to use from an icon font |\r\n\r\nMdIconRegistry methods (all methods return `this` for chaining):\r\n\r\n| Signature   | Description |\r\n| ---         | --- |\r\n| addSvgIcon(name: string, url: string): MdIconProvider | Associates an icon name with a URL in the default namespace. When an `md-icon` component has its `svgIcon` input set to this name, the icon will be loaded from this URL. |\r\n| addSvgIconInNamespace(namespace: string, iconName: string, url: string): MdIconProvider | Associates an icon name with a URL in the specified namespace. |\r\n| addSvgIconSet(url: string): MdIconProvider | Makes the icons contained in the icon set from a URL available in the default namespace. |\r\n| addSvgIconSetInNamespace(namespace: string, url: string): MdIconProvider | Makes the icons contained in the icon set from a URL available in the specified namespace. |\r\n| registerFontClassAlias(alias: string, className: string): MdIconProvider | Associates a font alias with a CSS class. When an `md-icon` component has its `fontSet` input set to the alias, the CSS class will be added to the component's element. It is assumed that the user has defined a corresponding CSS rule to set the desired font. |\r\n| setDefaultFontSetClass(className: string): MdIconProvider | Sets the default CSS class to apply to font icons when mdFontSet is not set. |\r\n"},{"id":"input","content":"# mdInput\r\n\r\nInputs are the basic input component of Material 2. The spec can be found [here](https://www.google.com/design/spec/components/text-fields.html).\r\n\r\n\r\n\r\n## Notes\r\n* The `<md-input>` component fully support two-way binding of `ngModel`, as if it was a normal `<input>`.\r\n\r\n\r\n\r\n## Type\r\n\r\nAt the time of writing this README, the `[type]` attribute is copied to the actual `<input>` element in the `<md-input>`.\r\n\r\nThe valid `type` attribute values are any supported by your browser, with the exception of `file`, `checkbox` and `radio`. File inputs aren't supported for now, while check boxes and radio buttons have their own components.\r\n\r\n\r\n\r\n## Prefix and Suffix\r\n\r\nYou can include HTML before, and after the input tag, as prefix or suffix. It will be underlined as per the Material specification, and clicking it will focus the input.\r\n\r\nTo add a prefix, use the `md-prefix` attribute on the element. Similarly, to add a suffix, use the `md-suffix` attribute. For example, in a template:\r\n\r\n#### Example\r\n\r\n```html\r\n<md-input placeholder=\"amount\" align=\"end\">\r\n  <span md-prefix>$&nbsp;</span>\r\n  <span md-suffix>.00</span>\r\n</md-input>\r\n```\r\n\r\nWill result in this:\r\n\r\n<img src=\"https://material.angularjs.org/material2_assets/input/prefix-suffix.png\">\r\n\r\n\r\n\r\n## Hint Labels\r\n\r\nHint labels are the labels that shows the underline. You can have up to two hint labels; one on the `start` of the line (left in an LTR language, right in RTL), or one on the `end`.\r\n\r\nYou specify a hint-label in one of two ways; either using the `hintLabel` attribute, or using an `<md-hint>` directive in the `<md-input>`, which takes an `align` attribute containing the side. The attribute version is assumed to be at the `start`.\r\n\r\nSpecifying a side twice will result in an exception during initialization.\r\n\r\n#### Example\r\n\r\nA simple character counter can be made like the following:\r\n\r\n```html\r\n<md-input placeholder=\"Character count (100 max)\" maxlength=\"100\" class=\"demo-full-width\"\r\n          value=\"Hello world. How are you?\"\r\n          #characterCountHintExample>\r\n  <md-hint align=\"end\">{{characterCountHintExample.characterCount}} / 100</md-hint>\r\n</md-input>\r\n```\r\n\r\n<img src=\"https://material.angularjs.org/material2_assets/input/character-count.png\">\r\n\r\n\r\n\r\n## Divider Color\r\n\r\nThe divider (line under the `<md-input>` content) color can be changed by using the `dividerColor` attribute. A value of `primary` is the default and will correspond to your theme primary color. Alternatively, you can specify `accent` or `warn`.\r\n\r\n#### Example\r\n\r\n^((please note that this example has been doctored to show the colors; they would normally show only on focus)^)\r\n\r\n<img src=\"https://material.angularjs.org/material2_assets/input/divider-colors.png\">\r\n\r\n\r\n\r\n## Labelling\r\n\r\nYou can label the `<md-input>` as you would a regular `<input>`.\r\n\r\n\r\n\r\n## Full Forms\r\n\r\nYou can make a full form using inputs, and it will support autofill natively.\r\n\r\n#### Example\r\n\r\n```html\r\n<md-card class=\"demo-card demo-basic\">\r\n  <md-toolbar color=\"primary\">Basic</md-toolbar>\r\n  <md-card-content>\r\n    <form>\r\n      <md-input class=\"demo-full-width\" placeholder=\"Company (disabled)\" disabled value=\"Google\">\r\n      </md-input>\r\n\r\n      <table style=\"width: 100%\" cellspacing=\"0\"><tr>\r\n        <td><md-input placeholder=\"First name\" style=\"width: 100%\"></md-input></td>\r\n        <td><md-input placeholder=\"Long Last Name That Will Be Truncated\" style=\"width: 100%\"></md-input></td>\r\n      </tr></table>\r\n      <p>\r\n        <md-input class=\"demo-full-width\" placeholder=\"Address\" value=\"1600 Amphitheatre Pkway\"></md-input>\r\n        <md-input class=\"demo-full-width\" placeholder=\"Address 2\"></md-input>\r\n      </p>\r\n      <table style=\"width: 100%\" cellspacing=\"0\"><tr>\r\n        <td><md-input class=\"demo-full-width\" placeholder=\"City\"></md-input></td>\r\n        <td><md-input class=\"demo-full-width\" placeholder=\"State\"></md-input></td>\r\n        <td><md-input #postalCode class=\"demo-full-width\" maxlength=\"5\"\r\n                      placeholder=\"Postal Code\"\r\n                      value=\"94043\">\r\n          <md-hint align=\"end\">{{postalCode.characterCount}} / 5</md-hint>\r\n        </md-input></td>\r\n      </tr></table>\r\n    </form>\r\n  </md-card-content>\r\n</md-card>\r\n```\r\n\r\nWill result in this:\r\n\r\n<img src=\"https://material.angularjs.org/material2_assets/input/full-form.png\">\r\n"},{"id":"list","content":"# md-list\r\n\r\n`md-list` is a container component that wraps and formats a series of line items. As the base list component,\r\n it provides Material Design styling, but no behavior of its own.\r\n\r\n## Usage\r\n\r\n### Simple list\r\n\r\nTo use `md-list`, import the MdList module into your application's NgModule:\r\n\r\n*my-app-module.ts*\r\n```ts\r\nimport {MdListModule} from '@angular2-material/list';\r\n\r\n@NgModule({\r\n  imports: [MdListModule.forRoot()],\r\n  ...\r\n})\r\nexport class MyAppModule {}\r\n```\r\n\r\nIn your template, create an `md-list` element and wrap each of your items in an `md-list-item` tag.\r\n\r\n```html\r\n<md-list>\r\n   <md-list-item> Pepper </md-list-item>\r\n   <md-list-item> Salt </md-list-item>\r\n   <md-list-item> Paprika </md-list-item>\r\n</md-list>\r\n```\r\n\r\nOutput:\r\n\r\n<img src=\"https://material.angularjs.org/material2_assets/list/basic-list.png\">\r\n\r\n### Multi-line lists\r\n\r\nIf your list requires multiple lines per list item, annotate each line with an `md-line` attribute.\r\nYou can use whichever heading tag is appropriate for your DOM hierarchy (doesn't have to be `h3`),\r\nas long as the `md-line` attribute is included.\r\n\r\n```html\r\n<!-- two line list -->\r\n<md-list>\r\n  <md-list-item *ngFor=\"let message of messages\">\r\n    <h3 md-line> {{message.from}} </h3>\r\n    <p md-line>\r\n      <span> {{message.subject}} </span>\r\n      <span class=\"demo-2\"> -- {{message.message}} </span>\r\n    </p>\r\n  </md-list-item>\r\n</md-list>\r\n\r\n<!-- three line list -->\r\n<md-list>\r\n  <md-list-item *ngFor=\"let message of messages\">\r\n    <h3 md-line> {{message.from}} </h3>\r\n    <p md-line> {{message.subject}} </p>\r\n    <p md-line class=\"demo-2\"> {{message.message}} </p>\r\n  </md-list-item>\r\n</md-list>\r\n```\r\n\r\nTwo line list output:\r\n\r\n<img src=\"https://material.angularjs.org/material2_assets/list/two-line-list.png\">\r\n\r\nThree line list output:\r\n\r\n<img src=\"https://material.angularjs.org/material2_assets/list/three-line-list.png\">\r\n\r\n### Lists with avatars\r\n\r\nTo include an avatar, add an image tag with an `md-list-avatar` attribute.\r\n\r\n```html\r\n<md-list>\r\n  <md-list-item *ngFor=\"let message of messages\">\r\n    <img md-list-avatar src=\"...\" alt=\"...\">\r\n    <h3 md-line> {{message.from}} </h3>\r\n    <p md-line>\r\n      <span> {{message.subject}} </span>\r\n      <span class=\"demo-2\"> -- {{message.message}} </span>\r\n    </p>\r\n  </md-list-item>\r\n</md-list>\r\n```\r\n\r\nOutput:\r\n\r\n<img src=\"https://material.angularjs.org/material2_assets/list/list-with-avatar-2.png\">\r\n\r\n### Dense lists\r\nLists are also available in \"dense layout\" mode, which shrinks the font size and height of the list\r\nto suit UIs that may need to display more information.  To enable this mode, add a `dense` attribute\r\nto the main `md-list` tag.\r\n\r\n\r\n```html\r\n<md-list dense>\r\n   <md-list-item> Pepper </md-list-item>\r\n   <md-list-item> Salt </md-list-item>\r\n   <md-list-item> Paprika </md-list-item>\r\n</md-list>\r\n```\r\n\r\nOutput:\r\n\r\n<img src=\"https://material.angularjs.org/material2_assets/list/dense-list.png\">\r\n\r\n### Lists with multiple sections\r\n\r\nYou can add a subheader to a list by annotating a heading tag with an `md-subheader` attribute. To add a divider,\r\nuse `<md-divider>` tags.\r\n\r\n```html\r\n<md-list>\r\n   <h3 md-subheader>Folders</h3>\r\n   <md-list-item *ngFor=\"let folder of folders\">\r\n      <md-icon md-list-avatar>folder</md-icon>\r\n      <h4 md-line>{{folder.name}}</h4>\r\n      <p md-line class=\"demo-2\"> {{folder.updated}} </p>\r\n   </md-list-item>\r\n   <md-divider></md-divider>\r\n   <h3 md-subheader>Notes</h3>\r\n   <md-list-item *ngFor=\"let note of notes\">\r\n      <md-icon md-list-avatar>note</md-icon>\r\n      <h4 md-line>{{note.name}}</h4>\r\n      <p md-line class=\"demo-2\"> {{note.updated}} </p>\r\n   </md-list-item>\r\n</md-list>\r\n```\r\n\r\nOutput:\r\n\r\n<img src=\"https://material.angularjs.org/material2_assets/list/subheader-list.png\">\r\n\r\n### Navigation lists\r\n\r\nUse `md-nav-list` tags for navigation lists (i.e. lists that have anchor tags).\r\n\r\nSimple nav lists can tack an `md-list-item` attribute onto the anchor tag itself:\r\n\r\n```html\r\n<md-nav-list>\r\n   <a md-list-item href=\"...\" *ngFor=\"let link of links\"> {{ link }} </a>\r\n</md-nav-list>\r\n```\r\n\r\nIf you require a more complex nav list (e.g. with more than one target per item), wrap your anchor tag in an `md-list-item` element.\r\n\r\n```html\r\n<md-nav-list>\r\n  <md-list-item *ngFor=\"let link of links\">\r\n     <a md-line href=\"...\">{{ link }}</a>\r\n     <button md-icon-button (click)=\"showInfo(link)\">\r\n        <md-icon>info</md-icon>\r\n     </button>\r\n  </md-list-item>\r\n</md-nav-list>\r\n```\r\n\r\n### Lists with secondary text\r\nSecondary text styling will be part of a broader typography module to\r\n[come later](https://github.com/angular/material2/issues/205), and won’t be implemented as part of this component\r\nspecifically. Gray text in the examples above comes from a \"demo-2\" class added manually by the demo.\r\n"},{"id":"menu","content":"# md-menu\r\n\r\n`md-menu` is a list of options that displays when triggered.  You can read more about menus in the \r\n[Material Design spec](https://material.google.com/components/menus.html).\r\n\r\n### Not yet implemented\r\n\r\n- `prevent-close` option, to turn off automatic menu close when clicking outside the menu\r\n- Custom offset support\r\n- Menu groupings (which menus are allowed to open together)\r\n\r\n## Usage\r\n\r\n### Setup\r\n\r\nImport the MdMenu module.\r\n\r\n*my-app-module.ts*\r\n```ts\r\nimport {MdMenuModule} from '@angular2-material/menu';\r\n\r\n@NgModule({\r\n  imports: [MdMenuModule.forRoot()],\r\n  ...\r\n})\r\nexport class MyAppModule {}\r\n```\r\n\r\nFor alpha.7, you need to include the overlay styles in your app via a `link` element. This will\r\nlook something like\r\n```html\r\n<link href=\"vendor/@angular2-material/core/overlay/overlay.css\" rel=\"stylesheet\">\r\n```\r\n\r\n### Simple menu\r\n\r\nIn your template, create an `md-menu` element. You can use either `<button>` or `<anchor>` tags for \r\nyour menu items, as long as each is tagged with an `md-menu-item` attribute. Note that you can \r\ndisable items by adding the `disabled` boolean attribute or binding to it.\r\n\r\n*my-comp.html*\r\n```html\r\n<!-- this menu starts as hidden by default -->\r\n<md-menu>\r\n    <button md-menu-item> Refresh </button>\r\n    <button md-menu-item> Settings </button>\r\n    <button md-menu-item> Help </button>\r\n    <button md-menu-item disabled> Sign Out </button>\r\n</md-menu>\r\n```\r\n\r\nMenus are hidden by default, so you'll want to connect up a menu trigger that can open your menu.  \r\nYou can do so by adding a button tag with an `md-menu-trigger-for` attribute and passing in the menu \r\ninstance.  You can create a local reference to your menu instance by adding `#menu=\"mdMenu\"` to  \r\nyour menu element.\r\n\r\n*my-comp.html*\r\n```html\r\n<!-- menu opens when trigger button is clicked -->\r\n<button md-icon-button [md-menu-trigger-for]=\"menu\">\r\n   <md-icon>more_vert</md-icon>\r\n</button>\r\n\r\n<md-menu #menu=\"mdMenu\">\r\n    <button md-menu-item> Refresh </button>\r\n    <button md-menu-item> Settings </button>\r\n    <button md-menu-item> Help </button>\r\n    <button md-menu-item disabled> Sign Out </button>\r\n</md-menu>\r\n```\r\n\r\nOutput:\r\n\r\n<img src=\"https://material.angularjs.org/material2_assets/menu/default_closed.png\">\r\n<img src=\"https://material.angularjs.org/material2_assets/menu/default_open.png\">\r\n\r\n### Toggling the menu programmatically\r\n\r\nYou can also use the menu's API to open or close the menu programmatically from your class. Please \r\nnote that in this case, an `md-menu-trigger-for` attribute is still necessary to connect \r\nthe menu to its trigger element in the DOM.\r\n  \r\n*my-comp.component.ts*\r\n```ts\r\nclass MyComp {\r\n  @ViewChild(MdMenuTrigger) trigger: MdMenuTrigger;\r\n\r\n  someMethod() {\r\n    this.trigger.openMenu();\r\n  }\r\n}\r\n```\r\n\r\n*my-comp.html*\r\n```html\r\n<button md-icon-button [md-menu-trigger-for]=\"menu\">\r\n   <md-icon>more_vert</md-icon>\r\n</button>\r\n\r\n<md-menu #menu=\"mdMenu\">\r\n    <button md-menu-item> Refresh </button>\r\n    <button md-menu-item> Settings </button>\r\n    <button md-menu-item> Help </button>\r\n    <button md-menu-item disabled> Sign Out </button>\r\n</md-menu>\r\n```\r\n\r\n### Customizing menu position\r\n\r\nBy default, the menu will display after and below its trigger.  You can change this display position \r\nusing the `x-position` (`before | after`) and `y-position` (`above | below`) attributes.  \r\n\r\n*my-comp.html*\r\n```html\r\n<md-menu x-position=\"before\" #menu=\"mdMenu\">\r\n    <button md-menu-item> Refresh </button>\r\n    <button md-menu-item> Settings </button>\r\n    <button md-menu-item> Help </button>\r\n    <button md-menu-item disabled> Sign Out </button>\r\n</md-menu>\r\n```\r\n\r\nOutput:\r\n\r\n<img src=\"https://material.angularjs.org/material2_assets/menu/before_closed.png\">\r\n<img src=\"https://material.angularjs.org/material2_assets/menu/before_open.png\">\r\n\r\n### Accessibility\r\n\r\nThe menu adds `role=\"menu\"` to the main menu element and `role=\"menuitem\"` to each menu item. It \r\nalso adds `aria-hasPopup=\"true\"` to the trigger element.\r\n\r\n#### Keyboard events:\r\n- <kbd>DOWN_ARROW</kbd>: Focus next menu item\r\n- <kbd>UP_ARROW</kbd>: Focus previous menu item\r\n- <kbd>ENTER</kbd>: Select focused item\r\n\r\n### Menu attributes\r\n\r\n| Signature | Values | Description |\r\n| --- | --- | --- |\r\n| `x-position` | `before | after` | The horizontal position of the menu in relation to the trigger. Defaults to `after`. | \r\n| `y-position` | `above | below` | The vertical position of the menu in relation to the trigger. Defaults to `below`. |\r\n \r\n### Trigger Programmatic API\r\n\r\n**Properties**\r\n\r\n| Name | Type | Description |\r\n| --- | --- | --- |\r\n| `menuOpen` | `Boolean` | Property that is true when the menu is open. It is not settable (use methods below). | \r\n| `onMenuOpen` | `Observable<void>` | Observable that emits when the menu opens. | \r\n| `onMenuClose` | `Observable<void>` | Observable that emits when the menu closes. | \r\n\r\n**Methods**\r\n\r\n| Method | Returns | Description |\r\n| --- | --- | --- |\r\n| `openMenu()` | `Promise<void>` | Opens the menu. Returns a promise that will resolve when the menu has opened. |\r\n| `closeMenu()` | `Promise<void>` | Closes the menu. Returns a promise that will resolve when the menu has closed. |\r\n| `toggleMenu()` | `Promise<void>` | Toggles the menu. Returns a promise that will resolve when the menu has completed opening or closing. |  \r\n| `destroyMenu()` | `Promise<void>` | Destroys the menu overlay completely. \r\n  \r\n\r\n"},{"id":"progress-bar","content":"# md-progress-bar\r\n\r\n`md-progress-bar` is a component for indicating progress and activity, matching the spec of \r\n[Material Design Progress & Activity](https://www.google.com/design/spec/components/progress-activity.html).\r\n\r\n### Progress Modes\r\n\r\nThere are four modes:\r\n 1. Determinate - `<md-progress-bar mode=\"determinate\">`\r\n    * Indicates how long an operation will take when the percentage complete is detectable. \r\n 2. Indeterminate - `<md-progress-bar mode=\"indeterminate\">`\r\n    * Indicates the user must wait while something finishes when it’s not necessary or possible to indicate how long it will take.\r\n 3. Buffer - `<md-progress-bar mode=\"buffer\">`\r\n    * Indicates how long an operation will take when the percentage complete is detectable, also provides a value of the preloading for the operation.\r\n 4. Query - `<md-progress-bar mode=\"query\">`\r\n    * Indicates the user must wait while something finishes when it is not yet possible to indicate how long it will take, but will be possible.  Once possible, the progress mode should be moved to buffer or determinate.\r\n      \r\n\r\nExample:\r\n\r\n ```html\r\n<md-progress-bar mode=\"determinate\" value=\"myValue\"></md-progress-bar>\r\n<md-progress-bar mode=\"indeterminate\"></md-progress-bar>\r\n<md-progress-bar mode=\"buffer\" value=\"myValue\" bufferValue=\"myBufferValue\"></md-progress-bar>\r\n<md-progress-bar mode=\"query\"></md-progress-bar>\r\n ```\r\n\r\n### Theming\r\n\r\nAll progress indicators can be themed to match your \"primary\" palette, your \"accent\" palette, or your \"warn\" palette using the appropriate class.\r\n\r\nExample:\r\n\r\n ```html\r\n<md-progress-bar mode=\"indeterminate\" color=\"primary\"></md-progress-bar>\r\n<md-progress-bar mode=\"indeterminate\" color=\"accent\"></md-progress-bar>\r\n<md-progress-bar mode=\"indeterminate\" color=\"warn\"></md-progress-bar>\r\n ```\r\n\r\n### Accessibility\r\n\r\n * ARIA attributes are applied to the indicator defining the valuemin, valuemax and valuenow attributes.\r\n\r\n\r\n### API Summary\r\n\r\nProperties:\r\n\r\n| Name            | Type                                                     | Description |\r\n| ---             | ---                                                      | --- |\r\n| `color`         | `\"primary\" | \"accent\" | \"warn\"`                          | The color palette of the progress indicator |\r\n| `mode`          | `\"determinate\" | \"indeterminate\" | \"buffer\" | \"query\"`   | The mode of the progress indicator |\r\n| `value`         | number                                                   | The current progress percentage for determinate indicators |\r\n| `bufferValue`   | number                                                   | The current progress percentage for buffer secondary indicators |\r\n"},{"id":"progress-circle","content":"# md-progress-circle\r\n\r\n`md-progress-circle` is a component for indicating progress and activity, matching the spec of \r\n[Material Design Progress & Activity](https://www.google.com/design/spec/components/progress-activity.html).\r\n\r\n### Progress Modes\r\n\r\nThere are two modes:\r\n 1. Determinate - `<md-progress-circle mode=\"determinate\">`\r\n    * Indicates how long an operation will take when the percentage complete is detectable. \r\n 2. Indeterminate - `<md-progress-circle mode=\"indeterminate\">` or `<md-spinner>`\r\n    * Indicates the user must wait while something finishes when it’s not necessary or possible to indicate how long it\r\n      will take.\r\n\r\nExample:\r\n\r\n ```html\r\n<md-progress-circle mode=\"determinate\" [value]=\"myValue\"></md-progress-circle>\r\n<md-progress-circle mode=\"indeterminate\"></md-progress-circle>\r\n<md-spinner></md-spinner>\r\n ```\r\n\r\n### Theming\r\n\r\nAll progress indicators can be themed to match your \"primary\" palette, your \"accent\" palette, or your \"warn\" palette using the appropriate class.\r\n\r\nExample:\r\n\r\n ```html\r\n<md-progress-circle mode=\"indeterminate\" color=\"primary\"></md-progress-circle>\r\n<md-progress-circle mode=\"indeterminate\" color=\"accent\"></md-progress-circle>\r\n<md-progress-circle mode=\"indeterminate\" color=\"warn\"></md-progress-circle>\r\n ```\r\n\r\n### Accessibility\r\n\r\n * ARIA attributes are applied to the indicator defining the valuemin, valuemax and valuenow attributes.\r\n\r\n### Upcoming work\r\n\r\n * Adding ARIA attribute for progressbar \"for\".\r\n\r\n### API Summary\r\n\r\nProperties:\r\n\r\n| Name      | Type                              | Description |\r\n| ---       | ---                               | --- |\r\n| `color`   | `\"primary\"|\"accent\"|\"warn\"`       | The color palette of the progress indicator |\r\n| `mode`    | `\"determinate\"|\"indeterminate\"`   | The mode of the progress indicator |\r\n| `value`   | number                            | The current progress percentage for determinate indicators |\r\n"},{"id":"radio","content":"# MdRadio\r\nRadio buttons allow the user to select one option from a set. Use radio buttons for exclusive selection if you think that the user needs to see all available options side-by-side.\r\n\r\n![Preview](https://material.angularjs.org/material2_assets/radio/radios.png)\r\n\r\n### Setup\r\nImporting the symbols:\r\n```ts\r\nimport { MdRadioModule } from '@angular2-material/radio';\r\n```\r\n\r\nAdding providers and directives:\r\n```ts\r\n@NgModule({\r\n  imports: [MdRadioModule.forRoot()],\r\n  ...\r\n})\r\nexport class MyAppModule { }\r\n```\r\n\r\n### Examples\r\nA basic radio group would have the following markup.\r\n```html\r\n<md-radio-group>\r\n  <md-radio-button value=\"option_1\">1</md-radio-button>\r\n  <md-radio-button value=\"option_2\">2</md-radio-button>\r\n</md-radio-group>\r\n```\r\n\r\nA dynamic example, populated from a `data` variable:\r\n```html\r\n<md-radio-group [(value)]=\"groupValue\">\r\n  <md-radio-button *ngFor=\"let d of data\" [value]=\"d.value\">\r\n    {{d.label}}\r\n  </md-radio-button>\r\n</md-radio-group>\r\n```\r\n\r\nA dynamic example for use inside a form showing support for `[(ngModel)]`:\r\n```html\r\n<md-radio-group [(ngModel)]=\"chosenOption\">\r\n  <md-radio-button *ngFor=\"let o of options\" [value]=\"o.value\">\r\n    {{o.label}}\r\n  </md-radio-button>\r\n</md-radio-group>\r\n```\r\n\r\n## `<md-radio-group>`\r\n### Properties\r\n\r\n| Name | Type | Description |\r\n| --- | --- | --- |\r\n| `selected` | `MdRadioButton` | The currently selected button. |\r\n| `value` | `any` | The current value for this group. |\r\n| `disabled` | `boolean` | Whether the group is disabled. |\r\n\r\nWhen selection is changed, an event is emitted from the `change` EventEmitter property.\r\n\r\n### Notes\r\nThe `md-radio-group` component has no button initially selected.\r\n\r\n## `<md-radio-button>`\r\n### Properties\r\n\r\n| Name (attribute) | Type | Description |\r\n| --- | --- | --- |\r\n| `id` | `string` | The unique ID of this radio button. |\r\n| `name` | `string` | Group name, defaults to parent radio group if present. |\r\n| `value` | `any` | The value of this radio button. |\r\n| `checked` | `boolean` | Whether the radio is checked. |\r\n| `disabled` | `boolean` | Whether the radio is disabled. |\r\n| `aria-label` | `string` | Used to set the `aria-label` attribute of the underlying input element. |\r\n| `aria-labelledby` | `string` | Used to set the `aria-labelledby` attribute of the underlying input element.\r\n                                 If provided, this attribute takes precedence as the element's text alternative. |\r\n\r\nWhen checked, an event is emitted from the `change` EventEmitter property.\r\n\r\n### Notes\r\n* The `md-radio-button` component by default uses the accent color from the theme palette.\r\n"},{"id":"sidenav","content":"# MdSidenav\r\n\r\nMdSidenav is the side navigation component for Material 2. It is composed of two components; `<md-sidenav-layout>` and `<md-sidenav>`.\r\n\r\n## Screenshots\r\n\r\n<img src=\"https://material.angularjs.org/material2_assets/sidenav-example.png\">\r\n\r\n\r\n## `<md-sidenav-layout>`\r\n\r\nThe parent component. Contains the code necessary to coordinate one or two sidenav and the backdrop.\r\n\r\n### Properties\r\n\r\n| Name | Description |\r\n| --- | --- |\r\n| `start` | The start aligned `MdSidenav` instance, or `null` if none is specified. In LTR direction, this is the sidenav shown on the left side. In RTL direction, it will show on the right. There can only be one sidenav on either side. |\r\n| `end` | The end aligned `MdSidenav` instance, or `null` if none is specified. This is the sidenav opposing the `start` sidenav. There can only be one sidenav on either side. |\r\n\r\n## `<md-sidenav>`\r\n\r\nThe sidenav panel.\r\n\r\n### Bound Properties\r\n\r\n| Name | Type | Description |\r\n| --- | --- | --- |\r\n| `align` | `\"start\"|\"end\"` | The alignment of this sidenav. In LTR direction, `\"start\"` will be shown on the left, `\"end\"` on the right. In RTL, it is reversed. `\"start\"` is used by default. An exception will be thrown if there are more than 1 sidenav on either side. |\r\n| `mode` | `\"over\"|\"push\"|\"side\"` | The mode or styling of the sidenav, default being `\"over\"`. With `\"over\"` the sidenav will appear above the content, and a backdrop will be shown. With `\"push\"` the sidenav will push the content of the `<md-sidenav-layout>` to the side, and show a backdrop over it. `\"side\"` will resize the content and keep the sidenav opened. Clicking the backdrop will close sidenavs that do not have `mode=\"side\"`. |\r\n| `opened` | `boolean` | Whether or not the sidenav is opened. Use this binding to open/close the sidenav. |\r\n\r\n### Events\r\n\r\n| Name | Description |\r\n| --- | --- |\r\n| `open-start` | Emitted when the sidenav is starting opening. This should only be used to coordinate animations. |\r\n| `close-start` | Emitted when the sidenav is starting closing. This should only be used to coordinate animations. |\r\n| `open` | Emitted when the sidenav is done opening. Use this for, e.g., setting focus on controls or updating state. |\r\n| `close` | Emitted when the sidenav is done closing. |\r\n\r\n### Methods\r\n\r\n| Signature | Description |\r\n| --- | --- |\r\n| `open(): Promise<void>` | Open the sidenav. Equivalent to `opened = true`. Returns a promise that will resolve when the animation completes, or be rejected if the animation was cancelled. |\r\n| `close(): Promise<void>` | Close the sidenav. Equivalent to `opened = false`. Returns a promise that will resolve when the animation completes, or be rejected if the animation was cancelled. |\r\n| `toggle(): Promise<void>` | Toggle the sidenav. This is equivalent to `opened = !opened`. Returns a promise that will resolve when the animation completes, or be rejected if the animation was cancelled. |\r\n\r\n### Notes\r\n\r\nThe `<md-sidenav>` will resize based on its content. You can also set its width in CSS, like so:\r\n\r\n```css\r\nmd-sidenav {\r\n  width: 200px;\r\n}\r\n```\r\n\r\nTry to avoid percent based width as `resize` events are not (yet) supported.\r\n\r\n## Examples\r\n\r\nHere's a simple example of using the sidenav:\r\n\r\n```html\r\n<app>\r\n  <md-sidenav-layout>\r\n    <md-sidenav #start (open)=\"mybutton.focus()\">\r\n      Start Sidenav.\r\n      <br>\r\n      <button md-button #mybutton (click)=\"start.close()\">Close</button>\r\n    </md-sidenav>\r\n    <md-sidenav #end align=\"end\">\r\n      End Sidenav.\r\n      <button md-button (click)=\"end.close()\">Close</button>\r\n    </md-sidenav>\r\n\r\n    My regular content. This will be moved into the proper DOM at runtime.\r\n  </md-sidenav-layout>\r\n</app>\r\n```\r\n\r\n"},{"id":"slide-toggle","content":"# MdSlideToggle\r\n`MdSlideToggle` is a two-state control, which can be also called `switch`\r\n\r\n### Screenshots\r\n![image](https://material.angularjs.org/material2_assets/slide-toggle/toggles.png)\r\n\r\n## `<md-slide-toggle>`\r\n### Bound Properties\r\n\r\n| Name | Type | Description |\r\n| --- | --- | --- |\r\n| `disabled` | boolean | Disables the `slide-toggle` |\r\n| `color` | `\"primary\" | \"accent\" | \"warn\"` | The color palette of the `slide-toggle` |\r\n| `checked` | boolean | Sets the value of the `slide-toggle` |\r\n\r\n### Events\r\n| Name | Type | Description |\r\n| --- | --- | --- |\r\n| `change` | boolean | Event will be emitted on every value change.<br/>It emits the new `checked` value. |\r\n\r\n### Examples\r\nA basic slide-toggle would have the following markup.\r\n```html\r\n<md-slide-toggle [(ngModel)]=\"slideToggleModel\">\r\n  Default Slide Toggle\r\n</md-slide-toggle>\r\n```\r\n\r\nSlide toggle can be also disabled.\r\n```html\r\n<md-slide-toggle disabled>\r\n  Disabled Slide Toggle\r\n</md-slide-toggle>\r\n```\r\n\r\nThe `slide-toggle` can be also set to checked without a `ngModel`\r\n```html\r\n<md-slide-toggle [checked]=\"isChecked\">\r\n  Input Binding\r\n</md-slide-toggle>\r\n```\r\n\r\nYou may also want to listen on changes of the `slide-toggle`<br/>\r\nThe `slide-toggle` always emits the new value to the event binding `(change)`\r\n```html\r\n<md-slide-toggle (change)=\"printValue($event)\">\r\n  Prints Value on Change\r\n</md-slide-toggle>\r\n```\r\n\r\n## Theming\r\nA slide-toggle is default using the `accent` palette for its styling.\r\n\r\nModifying the color on a `slide-toggle` can be easily done, by using the following markup.\r\n```html\r\n<md-slide-toggle color=\"primary\">\r\n  Primary Slide Toggle\r\n</md-slide-toggle>\r\n```\r\n\r\nThe color can be also set dynamically by using a property binding.\r\n```html\r\n<md-slide-toggle [color]=\"myColor\">\r\n  Dynamic Color\r\n</md-slide-toggle>\r\n```"},{"id":"slider","content":"# md-slider\r\n\r\n`MdSlider` is a component that allows users to select from a range of values by moving the slider\r\nthumb.\r\nYou can read more about the slider in the\r\n[Material Design spec](https://material.google.com/components/sliders.html).\r\n\r\n## Not Yet Implemented\r\n\r\n* Thumb Label\r\n* Color\r\n* Invert\r\n* NgModel\r\n* Keyboard Movement\r\n* Focus Ring\r\n* Smaller/grey thumb at minimum value\r\n\r\n## Usage\r\n\r\n### Setup\r\n\r\nImporting the module:\r\n```ts\r\n @NgModule({\r\n    imports: [MdSliderModule.forRoot()],\r\n    ...\r\n })\r\n export class MyAppModule { }\r\n```\r\n\r\n### Basic Usage\r\n\r\n`md-slider` can be used on its own as a slider with a min of `0`, a max of `100`, and a step of `1`.\r\n\r\n```html\r\n<md-slider></md-slider>\r\n```\r\n\r\n### Slider with Minimum and Maximum Values\r\n\r\nThe min and max on a `md-slider` can be set to give a different range of values.\r\nThese can be set individually and do not need to both be set.\r\n\r\n```html\r\n<md-slider min=\"1\" max=\"5\"></md-slider>\r\n```\r\n\r\n### Disabled Slider\r\n\r\n`md-slider` can be disabled so that the value cannot be changed and the thumb cannot be moved.\r\n\r\n```html\r\n<md-slider disabled></md-slider>\r\n```\r\n\r\n### Slider with Value\r\n\r\n`md-slider` can have a value defined so that it starts at a specific value on the slider.\r\n\r\n```html\r\n<md-slider value=\"24\"></md-slider>\r\n```\r\n\r\n### Slider with Step\r\n\r\n`md-slider` can have the step defined which declares where the thumb can snap to.\r\n\r\n```html\r\n<md-slider step=\"5\"></md-slider>\r\n```\r\n\r\n### Slider with Tick Interval\r\n\r\n`md-slider` can have a tick interval set to a number or to `auto`.\r\n`auto` will automatically draw tick marks on steps that are at least 30px apart and will always draw\r\ntick marks at the beginning and end of the slider.\r\nSetting `tick-interval` to a number will draw a tick mark at every `tick-interval` steps. An example\r\nof this is a `tick-interval` of `3` with a `step` of `4` will draw tick marks at every `3` steps,\r\nwhich is the same as every `12` values.\r\n\r\n```html\r\n<md-slider tick-interval=\"auto\"></md-slider>\r\n<md-slider tick-interval=\"3\" step=\"4\"></md-slider>\r\n```\r\n\r\n## `<md-slider>`\r\n\r\n### Bound Properties\r\n\r\n| Name | Type | Description |\r\n| --- | --- | --- |\r\n| `min` | number | Optional, the minimum number for the slider. Default = `0`. |\r\n| `max` | number | Optional, the maximum number for the slider. Default = `100`. |\r\n| `value` | number | Optional, the value to start the slider at. |\r\n| `tick-interval` | `\"auto\" | number` | Optional, how many steps between tick marks. |\r\n| `step` | number | Optional, declares where the thumb will snap to. Default = `1`. |\r\n| `disabled` | boolean | Optional, whether or not the slider is disabled. Default = `false`. |\r\n"},{"id":"snack-bar","content":"# MdSnackBar\r\n`MdSnackBar` is a service, which opens snack bar notifications in the view.\r\n\r\n### Methods\r\n\r\n| Name |  Description |\r\n| --- | --- |\r\n| `open(message: string,<br>  actionLabel: string, config: MdSnackBarConfig): MdSnackBarRef<SimpleSnackBar>` | Creates and opens a simple snack bar noticiation matching material spec. |\r\n| `openFromComponent(component: ComponentType<T>, config: MdSnackBarConfig): MdSnackBarRef<T>` | Creates and opens a snack bar noticiation with a custom component as content. |\r\n\r\n### Config\r\n\r\n| Key |  Description |\r\n| --- | --- |\r\n| `viewContainerRef: ViewContainerRef` | The view container ref to attach the snack bar to. |\r\n| `role: AriaLivePoliteness = 'assertive'` | The politeness level to announce the snack bar with. |\r\n| `announcementMessage: string` | The message to announce with the snack bar. |\r\n\r\n\r\n### Example\r\nThe service can be injected in a component.\r\n```ts\r\n@Component({\r\n  selector: 'my-component'\r\n  providers: [MdSnackBar]\r\n})\r\nexport class MyComponent {\r\n\r\n constructor(snackBar: MdSnackBar\r\n             viewContainerRef: ViewContainerRef) {}\r\n\r\n failedAttempt() {\r\n   config = new MdSnackBarConfig(this.viewContainerRef);\r\n   this.snackBar.open('It didn\\'t quite work!', 'Try Again', config);\r\n }\r\n\r\n}\r\n```"},{"id":"tabs","content":"# MdTabGroup\r\nTab groups allow the user to organize their content by labels such that only one tab is visible at any given time.\r\n\r\n## `<md-tab-group>`\r\n### Properties\r\n\r\n| Name | Type | Description |\r\n| --- | --- | --- |\r\n| `selectedIndex` | `number` | The index of the currently active tab. |\r\n\r\n### Events\r\n\r\n| Name | Type | Description |\r\n| --- | --- | --- |\r\n| `focusChange` | `Event` | Fired when focus changes from one label to another |\r\n| `selectChange` | `Event` | Fired when the selected tab changes |\r\n\r\n### Examples\r\nA basic tab group would have the following markup.\r\n```html\r\n<md-tab-group>\r\n  <md-tab>\r\n    <template md-tab-label>One</template>\r\n    <template md-tab-content>\r\n      <h1>Some tab content</h1>\r\n      <p>...</p>\r\n    </template>\r\n  </md-tab>\r\n  <md-tab>\r\n    <template md-tab-label>Two</template>\r\n    <template md-tab-content>\r\n      <h1>Some more tab content</h1>\r\n      <p>...</p>\r\n    </template>\r\n  </md-tab>\r\n</md-tab-group>\r\n```\r\n\r\nIt is also possible to specifiy the active tab by using the `selectedIndex` property.\r\n\r\n```html\r\n<md-tab-group [selectedIndex]=\"1\">\r\n  ...\r\n</md-tab-group>\r\n```\r\n\r\n**Note**: The index always starts counting from `zero`.\r\n"},{"id":"toolbar","content":"# MdToolbar\r\n`MdToolbar` is a vertical aligned bar, which can hold the application title or actions.\r\n\r\n### Screenshots\r\n![Preview](https://cloud.githubusercontent.com/assets/4987015/13727769/6d952c78-e900-11e5-890a-ccfd46996812.png)\r\n\r\n## `<md-toolbar>`\r\n### Bound Properties\r\n\r\n| Name | Type | Description |\r\n| --- | --- | --- |\r\n| `color` | `\"primary\" | \"accent\" | \"warn\"` | The color palette for the toolbar |\r\n\r\n### Notes\r\nThe `md-toolbar` component will use by default the background palette.\r\n\r\n### Examples\r\nA basic toolbar would have the following markup.\r\n```html\r\n<md-toolbar [color]=\"myColor\">\r\n  <span>My Application Title</span>\r\n</md-toolbar>\r\n```\r\n\r\nToolbars can also have multiple rows.<br/>\r\nMultiple rows inside of a `md-toolbar` can be added by appending as many as needed `<md-toolbar-row>` elements.\r\n\r\n```html\r\n<md-toolbar [color]=\"myColor\">\r\n  <span>First Row</span>\r\n  \r\n  <md-toolbar-row>\r\n    <span>Second Row</span>\r\n  </md-toolbar-row>\r\n  \r\n  <md-toolbar-row>\r\n    <span>Third Row</span>\r\n  </md-toolbar-row>\r\n</md-toolbar>\r\n```\r\n\r\n### Alignment\r\nThe alignment inside of a toolbar row can be easily done by using the flexbox layout.<br/>\r\nFor example, the following markup aligns the items on the `right`.\r\n\r\nCustom HTML\r\n```html\r\n<md-toolbar color=\"primary\">\r\n  <span>Application Title</span>\r\n  \r\n  <!-- This fills the remaining space of the current row -->\r\n  <span class=\"example-fill-remaining-space\"></span>\r\n  \r\n  <span>Right Aligned Text</span>\r\n</md-toolbar>\r\n```\r\n\r\nCustom SCSS\r\n```scss\r\n.example-fill-remaining-space {\r\n  // This fills the remaining space, by using flexbox. \r\n  // Every toolbar row uses a flexbox row layout.\r\n  flex: 1 1 auto;\r\n}\r\n```\r\n\r\nOutput\r\n![image](https://cloud.githubusercontent.com/assets/4987015/13730760/0864894e-e959-11e5-9312-7f3cb990d80a.png)\r\n"},{"id":"tooltip","content":"# MdTooltip\r\nTooltip allows the user to specify text to be displayed when the mouse hover over an element.\r\n\r\n### Setup\r\nFor alpha.7, you need to include the overlay styles in your app via a `link` element. This will\r\nlook something like\r\n```html\r\n<link href=\"vendor/@angular2-material/core/overlay/overlay.css\" rel=\"stylesheet\">\r\n```\r\n\r\n\r\n### Examples\r\nA button with a tooltip\r\n```html\r\n<button md-tooltip=\"some message\" tooltip-position=\"below\">Button</button>\r\n```\r\n\r\n## `[md-tooltip]`\r\n### Properties\r\n\r\n| Name | Type | Description |\r\n| --- | --- | --- |\r\n| `md-tooltip` | `string` | The message to be displayed. |\r\n| `tooltip-position` | `\"above\"|\"below\"|\"before\"|\"after\"` | The position of the tooltip. |\r\n\r\n### Methods\r\n\r\n| Name | Description |\r\n| --- | --- | --- |\r\n| `show` | Displays the tooltip. |\r\n| `hide` | Removes the tooltip. |\r\n| `toggle` | Displays or hides the tooltip. |\r\n"}])